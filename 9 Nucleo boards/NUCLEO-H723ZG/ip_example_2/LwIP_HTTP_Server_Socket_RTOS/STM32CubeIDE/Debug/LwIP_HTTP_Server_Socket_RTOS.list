
LwIP_HTTP_Server_Socket_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bcc8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000152d4  0801bf98  0801bf98  0002bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803126c  0803126c  000500a8  2**0
                  CONTENTS
  4 .ARM          00000000  0803126c  0803126c  000500a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803126c  0803126c  000500a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803126c  0803126c  0004126c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031270  08031270  00041270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08031274  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c5ec  200000a8  0803131c  000500a8  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  2000c694  0803131c  0005c694  2**0
                  ALLOC
 11 .lwip_sec     00001a00  30000000  0803131c  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000500a8  2**0
                  CONTENTS, READONLY
 13 .debug_line   00038cf1  00000000  00000000  000500d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00058dd8  00000000  00000000  00088dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009411  00000000  00000000  000e1b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028e0  00000000  00000000  000eafb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00173d98  00000000  00000000  000ed890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000027a0  00000000  00000000  00261628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00042a6d  00000000  00000000  00263dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002a6835  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b47c  00000000  00000000  002a6888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000a8 	.word	0x200000a8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bf80 	.word	0x0801bf80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000ac 	.word	0x200000ac
 800030c:	0801bf80 	.word	0x0801bf80

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000418 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003e6:	e003      	b.n	80003f0 <LoopCopyDataInit>

080003e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ee:	3104      	adds	r1, #4

080003f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003f8:	d3f6      	bcc.n	80003e8 <CopyDataInit>
  ldr  r2, =_sbss
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003fc:	e002      	b.n	8000404 <LoopFillZerobss>

080003fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000400:	f842 3b04 	str.w	r3, [r2], #4

08000404 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000406:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000408:	d3f9      	bcc.n	80003fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800040a:	f001 fc4d 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040e:	f01a fb67 	bl	801aae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000412:	f000 fec9 	bl	80011a8 <main>
  bx  lr    
 8000416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000418:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800041c:	08031274 	.word	0x08031274
  ldr  r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000424:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8000428:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800042c:	2000c694 	.word	0x2000c694

08000430 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC3_IRQHandler>
	...

08000434 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d003      	beq.n	8000454 <ethernet_link_status_updated+0x20>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <ethernet_link_status_updated+0x34>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
#else
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3);
#endif /* LWIP_DHCP */
  }
}
 8000452:	e002      	b.n	800045a <ethernet_link_status_updated+0x26>
    DHCP_state = DHCP_LINK_DOWN;
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <ethernet_link_status_updated+0x34>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	200000c4 	.word	0x200000c4

0800046c <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void* argument)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	61fb      	str	r3, [r7, #28]
  ip_addr_t gw;
  struct dhcp *dhcp;

  for (;;)
  {
    switch (DHCP_state)
 8000478:	4b32      	ldr	r3, [pc, #200]	; (8000544 <DHCP_Thread+0xd8>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b05      	cmp	r3, #5
 8000480:	d04d      	beq.n	800051e <DHCP_Thread+0xb2>
 8000482:	2b05      	cmp	r3, #5
 8000484:	dc55      	bgt.n	8000532 <DHCP_Thread+0xc6>
 8000486:	2b01      	cmp	r3, #1
 8000488:	d002      	beq.n	8000490 <DHCP_Thread+0x24>
 800048a:	2b02      	cmp	r3, #2
 800048c:	d016      	beq.n	80004bc <DHCP_Thread+0x50>

      BSP_LED_Off(LED2);
      BSP_LED_On(LED3);
    }
    break;
    default: break;
 800048e:	e050      	b.n	8000532 <DHCP_Thread+0xc6>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 80004a2:	4b28      	ldr	r3, [pc, #160]	; (8000544 <DHCP_Thread+0xd8>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED2);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f001 fbd3 	bl	8001c54 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 80004ae:	2002      	movs	r0, #2
 80004b0:	f001 fbd0 	bl	8001c54 <BSP_LED_Off>
        dhcp_start(netif);
 80004b4:	69f8      	ldr	r0, [r7, #28]
 80004b6:	f00d fc5d 	bl	800dd74 <dhcp_start>
      break;
 80004ba:	e03d      	b.n	8000538 <DHCP_Thread+0xcc>
        if (dhcp_supplied_address(netif))
 80004bc:	69f8      	ldr	r0, [r7, #28]
 80004be:	f00e ff49 	bl	800f354 <dhcp_supplied_address>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d009      	beq.n	80004dc <DHCP_Thread+0x70>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <DHCP_Thread+0xd8>)
 80004ca:	2203      	movs	r2, #3
 80004cc:	701a      	strb	r2, [r3, #0]
          BSP_LED_On(LED2);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f001 fb96 	bl	8001c00 <BSP_LED_On>
          BSP_LED_Off(LED3);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f001 fbbd 	bl	8001c54 <BSP_LED_Off>
      break;
 80004da:	e02c      	b.n	8000536 <DHCP_Thread+0xca>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e0:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	799b      	ldrb	r3, [r3, #6]
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	d925      	bls.n	8000536 <DHCP_Thread+0xca>
            DHCP_state = DHCP_TIMEOUT;
 80004ea:	4b16      	ldr	r3, [pc, #88]	; (8000544 <DHCP_Thread+0xd8>)
 80004ec:	2204      	movs	r2, #4
 80004ee:	701a      	strb	r2, [r3, #0]
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <DHCP_Thread+0xdc>)
 80004f2:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80004f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80004f8:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <DHCP_Thread+0xe0>)
 80004fc:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	f107 0210 	add.w	r2, r7, #16
 8000506:	f107 0114 	add.w	r1, r7, #20
 800050a:	69f8      	ldr	r0, [r7, #28]
 800050c:	f012 f8ca 	bl	80126a4 <netif_set_addr>
            BSP_LED_On(LED2);
 8000510:	2001      	movs	r0, #1
 8000512:	f001 fb75 	bl	8001c00 <BSP_LED_On>
            BSP_LED_Off(LED3);
 8000516:	2002      	movs	r0, #2
 8000518:	f001 fb9c 	bl	8001c54 <BSP_LED_Off>
      break;
 800051c:	e00b      	b.n	8000536 <DHCP_Thread+0xca>
      DHCP_state = DHCP_OFF;
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <DHCP_Thread+0xd8>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED2);
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fb95 	bl	8001c54 <BSP_LED_Off>
      BSP_LED_On(LED3);
 800052a:	2002      	movs	r0, #2
 800052c:	f001 fb68 	bl	8001c00 <BSP_LED_On>
    break;
 8000530:	e002      	b.n	8000538 <DHCP_Thread+0xcc>
    default: break;
 8000532:	bf00      	nop
 8000534:	e000      	b.n	8000538 <DHCP_Thread+0xcc>
      break;
 8000536:	bf00      	nop
    }

    /* wait 500 ms */
    osDelay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f008 fa4b 	bl	80089d6 <osDelay>
    switch (DHCP_state)
 8000540:	e79a      	b.n	8000478 <DHCP_Thread+0xc>
 8000542:	bf00      	nop
 8000544:	200000c4 	.word	0x200000c4
 8000548:	0a00a8c0 	.word	0x0a00a8c0
 800054c:	0100a8c0 	.word	0x0100a8c0

08000550 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0aa      	sub	sp, #168	; 0xa8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t idx, duplex, speed = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int32_t PHYLinkState;
  ETH_MACConfigTypeDef MACConf;
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800055e:	4a80      	ldr	r2, [pc, #512]	; (8000760 <low_level_init+0x210>)
 8000560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000568:	6018      	str	r0, [r3, #0]
 800056a:	3304      	adds	r3, #4
 800056c:	8019      	strh	r1, [r3, #0]
  osThreadAttr_t attributes;
  
  EthHandle.Instance = ETH;  
 800056e:	4b7d      	ldr	r3, [pc, #500]	; (8000764 <low_level_init+0x214>)
 8000570:	4a7d      	ldr	r2, [pc, #500]	; (8000768 <low_level_init+0x218>)
 8000572:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000574:	4a7b      	ldr	r2, [pc, #492]	; (8000764 <low_level_init+0x214>)
 8000576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800057a:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800057c:	4b79      	ldr	r3, [pc, #484]	; (8000764 <low_level_init+0x214>)
 800057e:	2201      	movs	r2, #1
 8000580:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000582:	4b78      	ldr	r3, [pc, #480]	; (8000764 <low_level_init+0x214>)
 8000584:	4a79      	ldr	r2, [pc, #484]	; (800076c <low_level_init+0x21c>)
 8000586:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000588:	4b76      	ldr	r3, [pc, #472]	; (8000764 <low_level_init+0x214>)
 800058a:	4a79      	ldr	r2, [pc, #484]	; (8000770 <low_level_init+0x220>)
 800058c:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 800058e:	4b75      	ldr	r3, [pc, #468]	; (8000764 <low_level_init+0x214>)
 8000590:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000594:	615a      	str	r2, [r3, #20]
  
  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000596:	4873      	ldr	r0, [pc, #460]	; (8000764 <low_level_init+0x214>)
 8000598:	f001 fdc2 	bl	8002120 <HAL_ETH_Init>
  
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2206      	movs	r2, #6
 80005a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2202      	movs	r2, #2
 80005a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005da:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80005e2:	f043 030a 	orr.w	r3, r3, #10
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80005f4:	e012      	b.n	800061c <low_level_init+0xcc>
  {
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 80005f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	025b      	lsls	r3, r3, #9
 8000602:	4a5c      	ldr	r2, [pc, #368]	; (8000774 <low_level_init+0x224>)
 8000604:	441a      	add	r2, r3
 8000606:	2300      	movs	r3, #0
 8000608:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800060c:	4855      	ldr	r0, [pc, #340]	; (8000764 <low_level_init+0x214>)
 800060e:	f001 fe61 	bl	80022d4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8000612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000616:	3301      	adds	r3, #1
 8000618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800061c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000620:	2b03      	cmp	r3, #3
 8000622:	d9e8      	bls.n	80005f6 <low_level_init+0xa6>
  }
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000624:	4854      	ldr	r0, [pc, #336]	; (8000778 <low_level_init+0x228>)
 8000626:	f011 fd87 	bl	8012138 <memp_init_pool>
  
  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4853      	ldr	r0, [pc, #332]	; (800077c <low_level_init+0x22c>)
 8000630:	f01a fab0 	bl	801ab94 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <low_level_init+0x22c>)
 8000636:	2221      	movs	r2, #33	; 0x21
 8000638:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800063a:	4b50      	ldr	r3, [pc, #320]	; (800077c <low_level_init+0x22c>)
 800063c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000640:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000642:	4b4e      	ldr	r3, [pc, #312]	; (800077c <low_level_init+0x22c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
   
  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1,1,NULL);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	2001      	movs	r0, #1
 800064e:	f008 faeb 	bl	8008c28 <osSemaphoreNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a4a      	ldr	r2, [pc, #296]	; (8000780 <low_level_init+0x230>)
 8000656:	6013      	str	r3, [r2, #0]
  
  /* create the task that handles the ETH_MAC */
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2224      	movs	r2, #36	; 0x24
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f01a fa97 	bl	801ab94 <memset>
  attributes.name = "EthIf";
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <low_level_init+0x234>)
 8000668:	60bb      	str	r3, [r7, #8]
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 800066a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800066e:	61fb      	str	r3, [r7, #28]
  attributes.priority = osPriorityRealtime;
 8000670:	2330      	movs	r3, #48	; 0x30
 8000672:	623b      	str	r3, [r7, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	461a      	mov	r2, r3
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	4842      	ldr	r0, [pc, #264]	; (8000788 <low_level_init+0x238>)
 800067e:	f008 f8ea 	bl	8008856 <osThreadNew>
  
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000682:	4942      	ldr	r1, [pc, #264]	; (800078c <low_level_init+0x23c>)
 8000684:	4842      	ldr	r0, [pc, #264]	; (8000790 <low_level_init+0x240>)
 8000686:	f001 f8e3 	bl	8001850 <LAN8742_RegisterBusIO>
  
  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800068a:	4841      	ldr	r0, [pc, #260]	; (8000790 <low_level_init+0x240>)
 800068c:	f001 f912 	bl	80018b4 <LAN8742_Init>
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000690:	483f      	ldr	r0, [pc, #252]	; (8000790 <low_level_init+0x240>)
 8000692:	f001 f9b7 	bl	8001a04 <LAN8742_GetLinkState>
 8000696:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  
  /* Get link state */  
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800069a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800069e:	2b01      	cmp	r3, #1
 80006a0:	dc06      	bgt.n	80006b0 <low_level_init+0x160>
  {
    netif_set_link_down(netif);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f012 f92e 	bl	8012904 <netif_set_link_down>
    netif_set_down(netif);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f012 f8c1 	bl	8012830 <netif_set_down>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
    HAL_ETH_Start_IT(&EthHandle);
    netif_set_up(netif);
    netif_set_link_up(netif);
  }
}
 80006ae:	e053      	b.n	8000758 <low_level_init+0x208>
 80006b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006b4:	3b02      	subs	r3, #2
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d82a      	bhi.n	8000710 <low_level_init+0x1c0>
 80006ba:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <low_level_init+0x170>)
 80006bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c0:	080006d1 	.word	0x080006d1
 80006c4:	080006e3 	.word	0x080006e3
 80006c8:	080006f3 	.word	0x080006f3
 80006cc:	08000703 	.word	0x08000703
      duplex = ETH_FULLDUPLEX_MODE;
 80006d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 80006d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 80006e0:	e01f      	b.n	8000722 <low_level_init+0x1d2>
      duplex = ETH_HALFDUPLEX_MODE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 80006e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 80006f0:	e017      	b.n	8000722 <low_level_init+0x1d2>
      duplex = ETH_FULLDUPLEX_MODE;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_10M;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 8000700:	e00f      	b.n	8000722 <low_level_init+0x1d2>
      duplex = ETH_HALFDUPLEX_MODE;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_10M;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;
 800070e:	e008      	b.n	8000722 <low_level_init+0x1d2>
      duplex = ETH_FULLDUPLEX_MODE;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      speed = ETH_SPEED_100M;
 8000718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800071c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      break;      
 8000720:	bf00      	nop
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000726:	4619      	mov	r1, r3
 8000728:	480e      	ldr	r0, [pc, #56]	; (8000764 <low_level_init+0x214>)
 800072a:	f002 fba5 	bl	8002e78 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800072e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
    MACConf.Speed = speed;
 8000734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800073a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800073e:	4619      	mov	r1, r3
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <low_level_init+0x214>)
 8000742:	f002 fd6d 	bl	8003220 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <low_level_init+0x214>)
 8000748:	f001 fe05 	bl	8002356 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f012 f803 	bl	8012758 <netif_set_up>
    netif_set_link_up(netif);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f012 f89e 	bl	8012894 <netif_set_link_up>
}
 8000758:	bf00      	nop
 800075a:	37a8      	adds	r7, #168	; 0xa8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0801bfa0 	.word	0x0801bfa0
 8000764:	2000861c 	.word	0x2000861c
 8000768:	40028000 	.word	0x40028000
 800076c:	30000000 	.word	0x30000000
 8000770:	30000060 	.word	0x30000060
 8000774:	30000200 	.word	0x30000200
 8000778:	08020878 	.word	0x08020878
 800077c:	20008790 	.word	0x20008790
 8000780:	200000c8 	.word	0x200000c8
 8000784:	0801bf98 	.word	0x0801bf98
 8000788:	0800099d 	.word	0x0800099d
 800078c:	20000000 	.word	0x20000000
 8000790:	20008770 	.word	0x20008770

08000794 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b092      	sub	sp, #72	; 0x48
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2230      	movs	r2, #48	; 0x30
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f01a f9ef 	bl	801ab94 <memset>
  
  for(q = p; q != NULL; q = q->next)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	643b      	str	r3, [r7, #64]	; 0x40
 80007ba:	e049      	b.n	8000850 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 80007bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d902      	bls.n	80007c8 <low_level_output+0x34>
      return ERR_IF;
 80007c2:	f06f 030b 	mvn.w	r3, #11
 80007c6:	e056      	b.n	8000876 <low_level_output+0xe2>
    
    Txbuffer[i].buffer = q->payload;
 80007c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ca:	6859      	ldr	r1, [r3, #4]
 80007cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007da:	4413      	add	r3, r2
 80007dc:	3b3c      	subs	r3, #60	; 0x3c
 80007de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80007e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e2:	895b      	ldrh	r3, [r3, #10]
 80007e4:	4619      	mov	r1, r3
 80007e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007f4:	4413      	add	r3, r2
 80007f6:	3b38      	subs	r3, #56	; 0x38
 80007f8:	6019      	str	r1, [r3, #0]

    if(i>0)
 80007fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d012      	beq.n	8000826 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8000800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000802:	1e5a      	subs	r2, r3, #1
 8000804:	f107 000c 	add.w	r0, r7, #12
 8000808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800080a:	460b      	mov	r3, r1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	440b      	add	r3, r1
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	18c1      	adds	r1, r0, r3
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000820:	4413      	add	r3, r2
 8000822:	3b34      	subs	r3, #52	; 0x34
 8000824:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8000826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10a      	bne.n	8000844 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800082e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800083c:	4413      	add	r3, r2
 800083e:	3b34      	subs	r3, #52	; 0x34
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000846:	3301      	adds	r3, #1
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800084a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
 8000850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1b2      	bne.n	80007bc <low_level_output+0x28>
  }

  TxConfig.Length = p->tot_len;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	891b      	ldrh	r3, [r3, #8]
 800085a:	461a      	mov	r2, r3
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <low_level_output+0xec>)
 800085e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <low_level_output+0xec>)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8000868:	2214      	movs	r2, #20
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <low_level_output+0xec>)
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <low_level_output+0xf0>)
 800086e:	f001 fe71 	bl	8002554 <HAL_ETH_Transmit>
  
  return errval;
 8000872:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000876:	4618      	mov	r0, r3
 8000878:	3748      	adds	r7, #72	; 0x48
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20008790 	.word	0x20008790
 8000884:	2000861c 	.word	0x2000861c

08000888 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b098      	sub	sp, #96	; 0x60
 800088c:	af02      	add	r7, sp, #8
 800088e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000890:	2300      	movs	r3, #0
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	2300      	movs	r3, #0
 800089a:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2230      	movs	r2, #48	; 0x30
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f01a f975 	bl	801ab94 <memset>
  
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50
 80008ae:	e015      	b.n	80008dc <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 80008b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	f107 010c 	add.w	r1, r7, #12
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4419      	add	r1, r3
 80008c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80008d0:	4413      	add	r3, r2
 80008d2:	3b44      	subs	r3, #68	; 0x44
 80008d4:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80008d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008d8:	3301      	adds	r3, #1
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
 80008dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d9e6      	bls.n	80008b0 <low_level_input+0x28>
  }

  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4828      	ldr	r0, [pc, #160]	; (800098c <low_level_input+0x104>)
 80008ea:	f001 ffac 	bl	8002846 <HAL_ETH_GetRxDataBuffer>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d145      	bne.n	8000980 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	4824      	ldr	r0, [pc, #144]	; (800098c <low_level_input+0x104>)
 80008fc:	f002 f841 	bl	8002982 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 8000900:	4822      	ldr	r0, [pc, #136]	; (800098c <low_level_input+0x104>)
 8000902:	f002 f871 	bl	80029e8 <HAL_ETH_BuildRxDescriptors>

    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
 800090c:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800090e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000910:	2b00      	cmp	r3, #0
 8000912:	dd1d      	ble.n	8000950 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000916:	f003 021f 	and.w	r2, r3, #31
 800091a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800091c:	4413      	add	r3, r2
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000924:	f3bf 8f4f 	dsb	sy
}
 8000928:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <low_level_input+0x108>)
 800092c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800092e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000934:	3320      	adds	r3, #32
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800093a:	3b20      	subs	r3, #32
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800093e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000940:	2b00      	cmp	r3, #0
 8000942:	dcf2      	bgt.n	800092a <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8000944:	f3bf 8f4f 	dsb	sy
}
 8000948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094a:	f3bf 8f6f 	isb	sy
}
 800094e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000950:	bf00      	nop
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <low_level_input+0x10c>)
 8000954:	f011 fc6c 	bl	8012230 <memp_malloc_pool>
 8000958:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800095a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00f      	beq.n	8000980 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8000960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000962:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <low_level_input+0x110>)
 8000964:	611a      	str	r2, [r3, #16]

      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	b299      	uxth	r1, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	b292      	uxth	r2, r2
 8000970:	9201      	str	r2, [sp, #4]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000976:	2241      	movs	r2, #65	; 0x41
 8000978:	2000      	movs	r0, #0
 800097a:	f012 f9e7 	bl	8012d4c <pbuf_alloced_custom>
 800097e:	6578      	str	r0, [r7, #84]	; 0x54
    }

  }
  
  return p;
 8000980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8000982:	4618      	mov	r0, r3
 8000984:	3758      	adds	r7, #88	; 0x58
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000861c 	.word	0x2000861c
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	08020878 	.word	0x08020878
 8000998:	08000a49 	.word	0x08000a49

0800099c <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void* argument )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <ethernetif_input+0x4c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 f9c3 	bl	8008d3c <osSemaphoreAcquire>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f5      	bne.n	80009a8 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff ff63 	bl	8000888 <low_level_input>
 80009c2:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00a      	beq.n	80009e0 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	691b      	ldr	r3, [r3, #16]
 80009ce:	68f9      	ldr	r1, [r7, #12]
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	4798      	blx	r3
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80009da:	68b8      	ldr	r0, [r7, #8]
 80009dc:	f012 fba2 	bl	8013124 <pbuf_free>
          }
        }

      }while(p!=NULL);
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1ea      	bne.n	80009bc <ethernetif_input+0x20>
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80009e6:	e7df      	b.n	80009a8 <ethernetif_input+0xc>
 80009e8:	200000c8 	.word	0x200000c8

080009ec <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <ethernetif_init+0x1c>
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <ethernetif_init+0x48>)
 80009fc:	f240 1283 	movw	r2, #387	; 0x183
 8000a00:	490d      	ldr	r1, [pc, #52]	; (8000a38 <ethernetif_init+0x4c>)
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <ethernetif_init+0x50>)
 8000a04:	f01a f8ce 	bl	801aba4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2273      	movs	r2, #115	; 0x73
 8000a0c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2274      	movs	r2, #116	; 0x74
 8000a14:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <ethernetif_init+0x54>)
 8000a1c:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <ethernetif_init+0x58>)
 8000a22:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fd93 	bl	8000550 <low_level_init>

  return ERR_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0801bfa8 	.word	0x0801bfa8
 8000a38:	0801c040 	.word	0x0801c040
 8000a3c:	0801c050 	.word	0x0801c050
 8000a40:	0800fc41 	.word	0x0800fc41
 8000a44:	08000795 	.word	0x08000795

08000a48 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000a54:	68f9      	ldr	r1, [r7, #12]
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <pbuf_free_custom+0x1c>)
 8000a58:	f011 fc5e 	bl	8012318 <memp_free_pool>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08020878 	.word	0x08020878

08000a68 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a6c:	f001 f9cc 	bl	8001e08 <HAL_GetTick>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Ethernett MSP init: RMII Mode */
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b4f      	ldr	r3, [pc, #316]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aae:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	4a3f      	ldr	r2, [pc, #252]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000acc:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	4a37      	ldr	r2, [pc, #220]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af8:	2302      	movs	r3, #2
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000b08:	2386      	movs	r3, #134	; 0x86
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	482c      	ldr	r0, [pc, #176]	; (8000bc4 <HAL_ETH_MspInit+0x14c>)
 8000b14:	f003 f9b0 	bl	8003e78 <HAL_GPIO_Init>
  
  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <HAL_ETH_MspInit+0x150>)
 8000b26:	f003 f9a7 	bl	8003e78 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000b2a:	2332      	movs	r3, #50	; 0x32
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4825      	ldr	r0, [pc, #148]	; (8000bcc <HAL_ETH_MspInit+0x154>)
 8000b36:	f003 f99f 	bl	8003e78 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000b3a:	f642 0304 	movw	r3, #10244	; 0x2804
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <HAL_ETH_MspInit+0x158>)
 8000b48:	f003 f996 	bl	8003e78 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2107      	movs	r1, #7
 8000b50:	203d      	movs	r0, #61	; 0x3d
 8000b52:	f001 fa41 	bl	8001fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000b56:	203d      	movs	r0, #61	; 0x3d
 8000b58:	f001 fa58 	bl	800200c <HAL_NVIC_EnableIRQ>
  
  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b80:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_ETH_MspInit+0x148>)
 8000baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	; 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58020000 	.word	0x58020000
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	58020800 	.word	0x58020800
 8000bd0:	58021800 	.word	0x58021800

08000bd4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_ETH_RxCpltCallback+0x1c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f008 f8fd 	bl	8008de0 <osSemaphoreRelease>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000c8 	.word	0x200000c8

08000bf4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <ETH_PHY_IO_Init+0x10>)
 8000bfa:	f002 fb2b 	bl	8003254 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000861c 	.word	0x2000861c

08000c08 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <ETH_PHY_IO_ReadReg+0x30>)
 8000c2c:	f002 f87c 	bl	8002d28 <HAL_ETH_ReadPHYRegister>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e000      	b.n	8000c3e <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000861c 	.word	0x2000861c

08000c4c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <ETH_PHY_IO_WriteReg+0x30>)
 8000c60:	f002 f8b6 	bl	8002dd0 <HAL_ETH_WritePHYRegister>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e000      	b.n	8000c72 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000861c 	.word	0x2000861c

08000c80 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c84:	f001 f8c0 	bl	8001e08 <HAL_GetTick>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void* argument )
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a0      	sub	sp, #128	; 0x80
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	677b      	str	r3, [r7, #116]	; 0x74
  struct netif *netif = (struct netif *) argument;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	673b      	str	r3, [r7, #112]	; 0x70
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000ca8:	483a      	ldr	r0, [pc, #232]	; (8000d94 <ethernet_link_thread+0x104>)
 8000caa:	f000 feab 	bl	8001a04 <LAN8742_GetLinkState>
 8000cae:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00c      	beq.n	8000cdc <ethernet_link_thread+0x4c>
 8000cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	dc09      	bgt.n	8000cdc <ethernet_link_thread+0x4c>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 8000cc8:	4833      	ldr	r0, [pc, #204]	; (8000d98 <ethernet_link_thread+0x108>)
 8000cca:	f001 fbc9 	bl	8002460 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000cce:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000cd0:	f011 fdae 	bl	8012830 <netif_set_down>
      netif_set_link_down(netif);
 8000cd4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000cd6:	f011 fe15 	bl	8012904 <netif_set_link_down>
 8000cda:	e056      	b.n	8000d8a <ethernet_link_thread+0xfa>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d14f      	bne.n	8000d8a <ethernet_link_thread+0xfa>
 8000cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	dd4c      	ble.n	8000d8a <ethernet_link_thread+0xfa>
 8000cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d82b      	bhi.n	8000d50 <ethernet_link_thread+0xc0>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <ethernet_link_thread+0x70>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d23 	.word	0x08000d23
 8000d08:	08000d33 	.word	0x08000d33
 8000d0c:	08000d43 	.word	0x08000d43
    {
      switch (PHYLinkState)
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d14:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d1a:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d20:	e017      	b.n	8000d52 <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000d26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d2a:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d30:	e00f      	b.n	8000d52 <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d40:	e007      	b.n	8000d52 <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000d46:	2300      	movs	r3, #0
 8000d48:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000d4e:	e000      	b.n	8000d52 <ethernet_link_thread+0xc2>
      default:
        break;      
 8000d50:	bf00      	nop
      }
      
      if(linkchanged)
 8000d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d018      	beq.n	8000d8a <ethernet_link_thread+0xfa>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <ethernet_link_thread+0x108>)
 8000d60:	f002 f88a 	bl	8002e78 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8000d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d66:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8000d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d6a:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <ethernet_link_thread+0x108>)
 8000d74:	f002 fa54 	bl	8003220 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <ethernet_link_thread+0x108>)
 8000d7a:	f001 faec 	bl	8002356 <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000d7e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000d80:	f011 fcea 	bl	8012758 <netif_set_up>
        netif_set_link_up(netif);
 8000d84:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000d86:	f011 fd85 	bl	8012894 <netif_set_link_up>
      }
    }
    
    osDelay(100);
 8000d8a:	2064      	movs	r0, #100	; 0x64
 8000d8c:	f007 fe23 	bl	80089d6 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000d90:	e78a      	b.n	8000ca8 <ethernet_link_thread+0x18>
 8000d92:	bf00      	nop
 8000d94:	20008770 	.word	0x20008770
 8000d98:	2000861c 	.word	0x2000861c

08000d9c <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: connection socket 
  * @retval None
  */
void http_server_serve(int conn) 
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	f5ad 6dc0 	sub.w	sp, sp, #1536	; 0x600
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	6018      	str	r0, [r3, #0]
  int buflen = 1500;
 8000da8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000dac:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
  int ret;
  struct fs_file file;
  unsigned char recv_buffer[1500];
				
  /* Read in the request */
  ret = read(conn, recv_buffer, buflen); 
 8000db0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8000db4:	f107 0108 	add.w	r1, r7, #8
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f00b ff8a 	bl	800ccd4 <lwip_read>
 8000dc0:	f8c7 05f8 	str.w	r0, [r7, #1528]	; 0x5f8
  if(ret < 0) return;
 8000dc4:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f2c0 80ae 	blt.w	8000f2a <http_server_serve+0x18e>

  /* Check if request to get ST.gif */
  if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	221b      	movs	r2, #27
 8000dd4:	4957      	ldr	r1, [pc, #348]	; (8000f34 <http_server_serve+0x198>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f019 ff73 	bl	801acc2 <strncmp>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d114      	bne.n	8000e0c <http_server_serve+0x70>
  {
    fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8000de2:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000de6:	4954      	ldr	r1, [pc, #336]	; (8000f38 <http_server_serve+0x19c>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f019 fe2b 	bl	801aa44 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8000dee:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8000df2:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000df6:	461a      	mov	r2, r3
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	f00c f8ee 	bl	800cfdc <lwip_write>
    fs_close(&file);
 8000e00:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f019 fe5b 	bl	801aac0 <fs_close>
 8000e0a:	e089      	b.n	8000f20 <http_server_serve+0x184>
  }
  /* Check if request to get stm32.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	221e      	movs	r2, #30
 8000e12:	494a      	ldr	r1, [pc, #296]	; (8000f3c <http_server_serve+0x1a0>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f019 ff54 	bl	801acc2 <strncmp>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d114      	bne.n	8000e4a <http_server_serve+0xae>
  {
    fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 8000e20:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000e24:	4946      	ldr	r1, [pc, #280]	; (8000f40 <http_server_serve+0x1a4>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f019 fe0c 	bl	801aa44 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8000e2c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8000e30:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000e34:	461a      	mov	r2, r3
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	f00c f8cf 	bl	800cfdc <lwip_write>
    fs_close(&file);
 8000e3e:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000e42:	4618      	mov	r0, r3
 8000e44:	f019 fe3c 	bl	801aac0 <fs_close>
 8000e48:	e06a      	b.n	8000f20 <http_server_serve+0x184>
  }
  /* Check if request to get ST logo.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/logo.jpg", 29) == 0)
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	221d      	movs	r2, #29
 8000e50:	493c      	ldr	r1, [pc, #240]	; (8000f44 <http_server_serve+0x1a8>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f019 ff35 	bl	801acc2 <strncmp>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d114      	bne.n	8000e88 <http_server_serve+0xec>
  {
    fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000e5e:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000e62:	4939      	ldr	r1, [pc, #228]	; (8000f48 <http_server_serve+0x1ac>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f019 fded 	bl	801aa44 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8000e6a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8000e6e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000e72:	461a      	mov	r2, r3
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	f00c f8b0 	bl	800cfdc <lwip_write>
    fs_close(&file);
 8000e7c:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f019 fe1d 	bl	801aac0 <fs_close>
 8000e86:	e04b      	b.n	8000f20 <http_server_serve+0x184>
  }
  else if(strncmp((char *)recv_buffer, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	2218      	movs	r2, #24
 8000e8e:	492f      	ldr	r1, [pc, #188]	; (8000f4c <http_server_serve+0x1b0>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f019 ff16 	bl	801acc2 <strncmp>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d104      	bne.n	8000ea6 <http_server_serve+0x10a>
  {
    /* Load dynamic page */
    DynWebPage(conn);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f000 f8ac 	bl	8000ffc <DynWebPage>
 8000ea4:	e03c      	b.n	8000f20 <http_server_serve+0x184>
  }
  else if((strncmp((char *)recv_buffer, "GET /STM32H7xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2213      	movs	r2, #19
 8000eac:	4928      	ldr	r1, [pc, #160]	; (8000f50 <http_server_serve+0x1b4>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f019 ff07 	bl	801acc2 <strncmp>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <http_server_serve+0x132>
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	4924      	ldr	r1, [pc, #144]	; (8000f54 <http_server_serve+0x1b8>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f019 fefd 	bl	801acc2 <strncmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d114      	bne.n	8000ef8 <http_server_serve+0x15c>
  {
    /* Load STM32H7xxpage */
    fs_open(&file, "/STM32H7xx.html"); 
 8000ece:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000ed2:	4921      	ldr	r1, [pc, #132]	; (8000f58 <http_server_serve+0x1bc>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f019 fdb5 	bl	801aa44 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8000eda:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8000ede:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	f00c f878 	bl	800cfdc <lwip_write>
    fs_close(&file);
 8000eec:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f019 fde5 	bl	801aac0 <fs_close>
 8000ef6:	e013      	b.n	8000f20 <http_server_serve+0x184>
  }
  else
  {
    /* Load 404 page */
    fs_open(&file, "/404.html");
 8000ef8:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000efc:	4917      	ldr	r1, [pc, #92]	; (8000f5c <http_server_serve+0x1c0>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f019 fda0 	bl	801aa44 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8000f04:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8000f08:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	f00c f863 	bl	800cfdc <lwip_write>
    fs_close(&file);
 8000f16:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f019 fdd0 	bl	801aac0 <fs_close>
  }
  /* Close connection socket */
  close(conn);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f00b fb16 	bl	800c554 <lwip_close>
 8000f28:	e000      	b.n	8000f2c <http_server_serve+0x190>
  if(ret < 0) return;
 8000f2a:	bf00      	nop
}
 8000f2c:	f507 67c0 	add.w	r7, r7, #1536	; 0x600
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	0801c078 	.word	0x0801c078
 8000f38:	0801c094 	.word	0x0801c094
 8000f3c:	0801c0ac 	.word	0x0801c0ac
 8000f40:	0801c0cc 	.word	0x0801c0cc
 8000f44:	0801c0e8 	.word	0x0801c0e8
 8000f48:	0801c108 	.word	0x0801c108
 8000f4c:	0801c124 	.word	0x0801c124
 8000f50:	0801c140 	.word	0x0801c140
 8000f54:	0801c154 	.word	0x0801c154
 8000f58:	0801c15c 	.word	0x0801c15c
 8000f5c:	0801c16c 	.word	0x0801c16c

08000f60 <http_server_socket_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_socket_thread(void *arg)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  int sock, newconn, size;
  struct sockaddr_in address, remotehost;

 /* create a TCP socket */
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f00b ffd7 	bl	800cf20 <lwip_socket>
 8000f72:	6378      	str	r0, [r7, #52]	; 0x34
 8000f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db25      	blt.n	8000fc6 <http_server_socket_thread+0x66>
  {
    return;
  }
  
  /* bind to port 80 at any interface */
  address.sin_family = AF_INET;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	777b      	strb	r3, [r7, #29]
  address.sin_port = htons(80);
 8000f7e:	2050      	movs	r0, #80	; 0x50
 8000f80:	f010 fc36 	bl	80117f0 <lwip_htons>
 8000f84:	4603      	mov	r3, r0
 8000f86:	83fb      	strh	r3, [r7, #30]
  address.sin_addr.s_addr = INADDR_ANY;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]

  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2210      	movs	r2, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f96:	f00b fa6f 	bl	800c478 <lwip_bind>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db14      	blt.n	8000fca <http_server_socket_thread+0x6a>
  {
    return;
  }
  
  /* listen for incoming connections (TCP listen backlog = 5) */
  listen(sock, 5);
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fa4:	f00b fb2c 	bl	800c600 <lwip_listen>
  
  size = sizeof(remotehost);
 8000fa8:	2310      	movs	r3, #16
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  while (1) 
  {
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8000fac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fb8:	f00b f940 	bl	800c23c <lwip_accept>
 8000fbc:	6338      	str	r0, [r7, #48]	; 0x30
    http_server_serve(newconn);
 8000fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fc0:	f7ff feec 	bl	8000d9c <http_server_serve>
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8000fc4:	e7f2      	b.n	8000fac <http_server_socket_thread+0x4c>
    return;
 8000fc6:	bf00      	nop
 8000fc8:	e000      	b.n	8000fcc <http_server_socket_thread+0x6c>
    return;
 8000fca:	bf00      	nop
  }
}
 8000fcc:	3738      	adds	r7, #56	; 0x38
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
 8000fda:	2320      	movs	r3, #32
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4903      	ldr	r1, [pc, #12]	; (8000ff4 <http_server_socket_init+0x20>)
 8000fe6:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <http_server_socket_init+0x24>)
 8000fe8:	f019 fcee 	bl	801a9c8 <sys_thread_new>
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	08000f61 	.word	0x08000f61
 8000ff8:	0801c178 	.word	0x0801c178

08000ffc <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001002:	af00      	add	r7, sp, #0
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f019 fdb6 	bl	801ab94 <memset>

  /* Update the hit count */
  nPageHits++;
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <DynWebPage+0x190>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a57      	ldr	r2, [pc, #348]	; (800118c <DynWebPage+0x190>)
 8001030:	6013      	str	r3, [r2, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 8001032:	4b56      	ldr	r3, [pc, #344]	; (800118c <DynWebPage+0x190>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4954      	ldr	r1, [pc, #336]	; (8001190 <DynWebPage+0x194>)
 800103e:	4618      	mov	r0, r3
 8001040:	f019 fe08 	bl	801ac54 <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001044:	f107 020c 	add.w	r2, r7, #12
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f019 fe20 	bl	801ac94 <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f963 	bl	8000324 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	4413      	add	r3, r2
 8001068:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <DynWebPage+0x198>)
 800106a:	4615      	mov	r5, r2
 800106c:	469c      	mov	ip, r3
 800106e:	f105 0e20 	add.w	lr, r5, #32
 8001072:	4664      	mov	r4, ip
 8001074:	462e      	mov	r6, r5
 8001076:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001078:	6020      	str	r0, [r4, #0]
 800107a:	6061      	str	r1, [r4, #4]
 800107c:	60a2      	str	r2, [r4, #8]
 800107e:	60e3      	str	r3, [r4, #12]
 8001080:	3510      	adds	r5, #16
 8001082:	f10c 0c10 	add.w	ip, ip, #16
 8001086:	4575      	cmp	r5, lr
 8001088:	d1f3      	bne.n	8001072 <DynWebPage+0x76>
 800108a:	4664      	mov	r4, ip
 800108c:	462b      	mov	r3, r5
 800108e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001090:	6020      	str	r0, [r4, #0]
 8001092:	6061      	str	r1, [r4, #4]
 8001094:	60a2      	str	r2, [r4, #8]
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	81a2      	strh	r2, [r4, #12]
 800109c:	73a3      	strb	r3, [r4, #14]
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f93e 	bl	8000324 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	4413      	add	r3, r2
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <DynWebPage+0x19c>)
 80010b4:	4614      	mov	r4, r2
 80010b6:	469c      	mov	ip, r3
 80010b8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010bc:	4665      	mov	r5, ip
 80010be:	4626      	mov	r6, r4
 80010c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010c2:	6028      	str	r0, [r5, #0]
 80010c4:	6069      	str	r1, [r5, #4]
 80010c6:	60aa      	str	r2, [r5, #8]
 80010c8:	60eb      	str	r3, [r5, #12]
 80010ca:	3410      	adds	r4, #16
 80010cc:	f10c 0c10 	add.w	ip, ip, #16
 80010d0:	4574      	cmp	r4, lr
 80010d2:	d1f3      	bne.n	80010bc <DynWebPage+0xc0>
 80010d4:	4663      	mov	r3, ip
 80010d6:	4622      	mov	r2, r4
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	6018      	str	r0, [r3, #0]
 80010dc:	7912      	ldrb	r2, [r2, #4]
 80010de:	711a      	strb	r2, [r3, #4]
    
  /* The list of tasks and their status */
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f91d 	bl	8000324 <strlen>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4413      	add	r3, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 fec0 	bl	8007e78 <vTaskList>
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f911 	bl	8000324 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4413      	add	r3, r2
 800110c:	4a23      	ldr	r2, [pc, #140]	; (800119c <DynWebPage+0x1a0>)
 800110e:	4614      	mov	r4, r2
 8001110:	469c      	mov	ip, r3
 8001112:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001116:	4665      	mov	r5, ip
 8001118:	4626      	mov	r6, r4
 800111a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800111c:	6028      	str	r0, [r5, #0]
 800111e:	6069      	str	r1, [r5, #4]
 8001120:	60aa      	str	r2, [r5, #8]
 8001122:	60eb      	str	r3, [r5, #12]
 8001124:	3410      	adds	r4, #16
 8001126:	f10c 0c10 	add.w	ip, ip, #16
 800112a:	4574      	cmp	r4, lr
 800112c:	d1f3      	bne.n	8001116 <DynWebPage+0x11a>
 800112e:	4663      	mov	r3, ip
 8001130:	4622      	mov	r2, r4
 8001132:	6810      	ldr	r0, [r2, #0]
 8001134:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f8f2 	bl	8000324 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4413      	add	r3, r2
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <DynWebPage+0x1a4>)
 800114c:	4618      	mov	r0, r3
 800114e:	4611      	mov	r1, r2
 8001150:	2348      	movs	r3, #72	; 0x48
 8001152:	461a      	mov	r2, r3
 8001154:	f019 fcf6 	bl	801ab44 <memcpy>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <DynWebPage+0x1a8>)
 800115a:	f7ff f8e3 	bl	8000324 <strlen>
 800115e:	4602      	mov	r2, r0
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4910      	ldr	r1, [pc, #64]	; (80011a4 <DynWebPage+0x1a8>)
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f00b ff39 	bl	800cfdc <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f8d8 	bl	8000324 <strlen>
 8001174:	4602      	mov	r2, r0
 8001176:	f107 0118 	add.w	r1, r7, #24
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f00b ff2d 	bl	800cfdc <lwip_write>
}
 8001182:	bf00      	nop
 8001184:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001188:	46bd      	mov	sp, r7
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118c:	200000d0 	.word	0x200000d0
 8001190:	0801c180 	.word	0x0801c180
 8001194:	0801c184 	.word	0x0801c184
 8001198:	0801c1b4 	.word	0x0801c1b4
 800119c:	0801c1ec 	.word	0x0801c1ec
 80011a0:	0801c220 	.word	0x0801c220
 80011a4:	08020884 	.word	0x08020884

080011a8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 80011ac:	f000 f93e 	bl	800142c <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80011b0:	f000 f980 	bl	80014b4 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80011b4:	f000 fdd0 	bl	8001d58 <HAL_Init>

  /* Configure the system clock to 520 MHz */
  SystemClock_Config();
 80011b8:	f000 f8a0 	bl	80012fc <SystemClock_Config>

  /* Configure the LEDs ...*/
  BSP_Config();
 80011bc:	f000 f834 	bl	8001228 <BSP_Config>

  /* Init thread */
  osKernelInitialize();
 80011c0:	f007 faea 	bl	8008798 <osKernelInitialize>
  
  attr.name = "Start";
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <main+0x48>)
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <main+0x4c>)
 80011c8:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <main+0x48>)
 80011cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <main+0x48>)
 80011d4:	2218      	movs	r2, #24
 80011d6:	619a      	str	r2, [r3, #24]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <main+0x48>)
 80011da:	2100      	movs	r1, #0
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <main+0x50>)
 80011de:	f007 fb3a 	bl	8008856 <osThreadNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <main+0x54>)
 80011e6:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80011e8:	f007 fafa 	bl	80087e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 80011ec:	e7fe      	b.n	80011ec <main+0x44>
 80011ee:	bf00      	nop
 80011f0:	20008800 	.word	0x20008800
 80011f4:	0801c268 	.word	0x0801c268
 80011f8:	08001201 	.word	0x08001201
 80011fc:	200087fc 	.word	0x200087fc

08001200 <StartThread>:
  * @brief  Start Thread
  * @param  argument not used
  * @retval None
  */
void StartThread(void* argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001208:	2100      	movs	r1, #0
 800120a:	2000      	movs	r0, #0
 800120c:	f00c f9ea 	bl	800d5e4 <tcpip_init>

  /* Initialize the LwIP stack */
  Netif_Config();
 8001210:	f000 f814 	bl	800123c <Netif_Config>

  /* Initialize webserver demo */
  http_server_socket_init();
 8001214:	f7ff fede 	bl	8000fd4 <http_server_socket_init>

  for( ;; )
  {
    /* Delete the Init Thread */
    osThreadTerminate(StartHandle);
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <StartThread+0x24>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f007 fbad 	bl	800897c <osThreadTerminate>
 8001222:	e7f9      	b.n	8001218 <StartThread+0x18>
 8001224:	200087fc 	.word	0x200087fc

08001228 <BSP_Config>:
  * @brief  BSP Configuration
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fc71 	bl	8001b14 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001232:	2002      	movs	r0, #2
 8001234:	f000 fc6e 	bl	8001b14 <BSP_LED_Init>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	f107 0208 	add.w	r2, r7, #8
 8001254:	f107 010c 	add.w	r1, r7, #12
 8001258:	481d      	ldr	r0, [pc, #116]	; (80012d0 <Netif_Config+0x94>)
 800125a:	9002      	str	r0, [sp, #8]
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <Netif_Config+0x98>)
 800125e:	9001      	str	r0, [sp, #4]
 8001260:	2000      	movs	r0, #0
 8001262:	9000      	str	r0, [sp, #0]
 8001264:	481c      	ldr	r0, [pc, #112]	; (80012d8 <Netif_Config+0x9c>)
 8001266:	f011 f8ad 	bl	80123c4 <netif_add>

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <Netif_Config+0x9c>)
 800126c:	f011 fa64 	bl	8012738 <netif_set_default>

  ethernet_link_status_updated(&gnetif);
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <Netif_Config+0x9c>)
 8001272:	f7ff f8df 	bl	8000434 <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001276:	4919      	ldr	r1, [pc, #100]	; (80012dc <Netif_Config+0xa0>)
 8001278:	4817      	ldr	r0, [pc, #92]	; (80012d8 <Netif_Config+0x9c>)
 800127a:	f011 fb73 	bl	8012964 <netif_set_link_callback>

  attr.name = "EthLink";
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <Netif_Config+0xa4>)
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <Netif_Config+0xa8>)
 8001282:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <Netif_Config+0xa4>)
 8001286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128a:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <Netif_Config+0xa4>)
 800128e:	2218      	movs	r2, #24
 8001290:	619a      	str	r2, [r3, #24]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <Netif_Config+0xa4>)
 8001294:	4910      	ldr	r1, [pc, #64]	; (80012d8 <Netif_Config+0x9c>)
 8001296:	4814      	ldr	r0, [pc, #80]	; (80012e8 <Netif_Config+0xac>)
 8001298:	f007 fadd 	bl	8008856 <osThreadNew>
 800129c:	4603      	mov	r3, r0
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <Netif_Config+0xb0>)
 80012a0:	6013      	str	r3, [r2, #0]
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  attr.name = "DHCP";
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <Netif_Config+0xa4>)
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <Netif_Config+0xb4>)
 80012a6:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Netif_Config+0xa4>)
 80012aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ae:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityBelowNormal;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <Netif_Config+0xa4>)
 80012b2:	2210      	movs	r2, #16
 80012b4:	619a      	str	r2, [r3, #24]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <Netif_Config+0xa4>)
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <Netif_Config+0x9c>)
 80012ba:	480e      	ldr	r0, [pc, #56]	; (80012f4 <Netif_Config+0xb8>)
 80012bc:	f007 facb 	bl	8008856 <osThreadNew>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <Netif_Config+0xbc>)
 80012c4:	6013      	str	r3, [r2, #0]
#endif
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800d4f5 	.word	0x0800d4f5
 80012d4:	080009ed 	.word	0x080009ed
 80012d8:	200087c4 	.word	0x200087c4
 80012dc:	08000435 	.word	0x08000435
 80012e0:	20008800 	.word	0x20008800
 80012e4:	0801c270 	.word	0x0801c270
 80012e8:	08000c91 	.word	0x08000c91
 80012ec:	20008828 	.word	0x20008828
 80012f0:	0801c278 	.word	0x0801c278
 80012f4:	0800046d 	.word	0x0800046d
 80012f8:	20008824 	.word	0x20008824

080012fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0a0      	sub	sp, #128	; 0x80
 8001300:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001308:	2002      	movs	r0, #2
 800130a:	f002 ff77 	bl	80041fc <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <SystemClock_Config+0x128>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a43      	ldr	r2, [pc, #268]	; (8001424 <SystemClock_Config+0x128>)
 8001318:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <SystemClock_Config+0x128>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800132a:	bf00      	nop
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <SystemClock_Config+0x128>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001338:	d1f8      	bne.n	800132c <SystemClock_Config+0x30>

  /* Enable D2 domain SRAM1 Clock (0x30000000 AXI)*/
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <SystemClock_Config+0x12c>)
 800133c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001340:	4a39      	ldr	r2, [pc, #228]	; (8001428 <SystemClock_Config+0x12c>)
 8001342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001346:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <SystemClock_Config+0x12c>)
 800134c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800135c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001360:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136e:	2302      	movs	r3, #2
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001372:	2304      	movs	r3, #4
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 260;
 8001376:	f44f 7382 	mov.w	r3, #260	; 0x104
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800138c:	2300      	movs	r3, #0
 800138e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001390:	2304      	movs	r3, #4
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f002 ff69 	bl	8004270 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(ret != HAL_OK)
 80013a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d000      	beq.n	80013ae <SystemClock_Config+0xb2>
  {
    while(1);
 80013ac:	e7fe      	b.n	80013ac <SystemClock_Config+0xb0>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80013ae:	233f      	movs	r3, #63	; 0x3f
 80013b0:	65fb      	str	r3, [r7, #92]	; 0x5c
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2303      	movs	r3, #3
 80013b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013ba:	2308      	movs	r3, #8
 80013bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	67bb      	str	r3, [r7, #120]	; 0x78
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 80013d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d4:	2103      	movs	r1, #3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fad8 	bl	800498c <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(ret != HAL_OK)
 80013e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d000      	beq.n	80013ec <SystemClock_Config+0xf0>
  {
    while(1);
 80013ea:	e7fe      	b.n	80013ea <SystemClock_Config+0xee>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <SystemClock_Config+0x12c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <SystemClock_Config+0x12c>)
 80013f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f6:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <SystemClock_Config+0x12c>)
 80013fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SystemClock_Config+0x12c>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <SystemClock_Config+0x12c>)
 800140a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  HAL_EnableCompensationCell();
 8001416:	f000 fd17 	bl	8001e48 <HAL_EnableCompensationCell>
}
 800141a:	bf00      	nop
 800141c:	3780      	adds	r7, #128	; 0x80
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58024800 	.word	0x58024800
 8001428:	58024400 	.word	0x58024400

0800142c <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001432:	f000 fdf9 	bl	8002028 <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001436:	2301      	movs	r3, #1
 8001438:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800143a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800143e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001440:	2307      	movs	r3, #7
 8001442:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001444:	2303      	movs	r3, #3
 8001446:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001454:	2300      	movs	r3, #0
 8001456:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001458:	2300      	movs	r3, #0
 800145a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800145c:	2300      	movs	r3, #0
 800145e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001464:	463b      	mov	r3, r7
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fe16 	bl	8002098 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800146c:	2301      	movs	r3, #1
 800146e:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MPU_Config+0x84>)
 8001472:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001474:	230d      	movs	r3, #13
 8001476:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001478:	2303      	movs	r3, #3
 800147a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001484:	2301      	movs	r3, #1
 8001486:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001488:	2301      	movs	r3, #1
 800148a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800148c:	2301      	movs	r3, #1
 800148e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001498:	463b      	mov	r3, r7
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fdfc 	bl	8002098 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014a0:	2004      	movs	r0, #4
 80014a2:	f000 fdd9 	bl	8002058 <HAL_MPU_Enable>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	30004000 	.word	0x30004000

080014b4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ba:	4b34      	ldr	r3, [pc, #208]	; (800158c <CPU_CACHE_Enable+0xd8>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11b      	bne.n	80014fe <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80014c6:	f3bf 8f4f 	dsb	sy
}
 80014ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014cc:	f3bf 8f6f 	isb	sy
}
 80014d0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <CPU_CACHE_Enable+0xd8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014da:	f3bf 8f4f 	dsb	sy
}
 80014de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e0:	f3bf 8f6f 	isb	sy
}
 80014e4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <CPU_CACHE_Enable+0xd8>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <CPU_CACHE_Enable+0xd8>)
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f2:	f3bf 8f4f 	dsb	sy
}
 80014f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f8:	f3bf 8f6f 	isb	sy
}
 80014fc:	e000      	b.n	8001500 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014fe:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <CPU_CACHE_Enable+0xd8>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d138      	bne.n	800157e <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <CPU_CACHE_Enable+0xd8>)
 800150e:	2200      	movs	r2, #0
 8001510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <CPU_CACHE_Enable+0xd8>)
 800151c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001520:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	0b5b      	lsrs	r3, r3, #13
 8001526:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800152a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001534:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800153e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001544:	4911      	ldr	r1, [pc, #68]	; (800158c <CPU_CACHE_Enable+0xd8>)
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ef      	bne.n	8001536 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e5      	bne.n	800152c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001560:	f3bf 8f4f 	dsb	sy
}
 8001564:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <CPU_CACHE_Enable+0xd8>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <CPU_CACHE_Enable+0xd8>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001572:	f3bf 8f4f 	dsb	sy
}
 8001576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001578:	f3bf 8f6f 	isb	sy
}
 800157c:	e000      	b.n	8001580 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800157e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	; 0x40
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	d827      	bhi.n	80015ee <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800159e:	2200      	movs	r2, #0
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	2036      	movs	r0, #54	; 0x36
 80015a4:	f000 fd18 	bl	8001fd8 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a8:	2036      	movs	r0, #54	; 0x36
 80015aa:	f000 fd2f 	bl	800200c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_InitTick+0xc4>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_InitTick+0xc8>)
 80015b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ba:	4a27      	ldr	r2, [pc, #156]	; (8001658 <HAL_InitTick+0xc8>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_InitTick+0xc8>)
 80015c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d2:	f107 0210 	add.w	r2, r7, #16
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fd4b 	bl	8005078 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80015e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_InitTick+0x6a>
 80015ec:	e001      	b.n	80015f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e02b      	b.n	800164a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f2:	f003 fd2b 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 80015f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015f8:	e004      	b.n	8001604 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015fa:	f003 fd27 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 80015fe:	4603      	mov	r3, r0
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <HAL_InitTick+0xcc>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	3b01      	subs	r3, #1
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_InitTick+0xd0>)
 8001614:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_InitTick+0xd4>)
 8001616:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_InitTick+0xd0>)
 800161a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800161e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_InitTick+0xd0>)
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001624:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_InitTick+0xd0>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_InitTick+0xd0>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <HAL_InitTick+0xd0>)
 8001634:	f003 fd62 	bl	80050fc <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <HAL_InitTick+0xd0>)
 8001640:	f003 fdbe 	bl	80051c0 <HAL_TIM_Base_Start_IT>
 8001644:	4603      	mov	r3, r0
 8001646:	e000      	b.n	800164a <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000028 	.word	0x20000028
 8001658:	58024400 	.word	0x58024400
 800165c:	431bde83 	.word	0x431bde83
 8001660:	200000d4 	.word	0x200000d4
 8001664:	40001000 	.word	0x40001000

08001668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001670:	f000 fbb6 	bl	8001de0 <HAL_IncTick>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM6_DAC_IRQHandler+0x10>)
 8001682:	f003 fe23 	bl	80052cc <HAL_TIM_IRQHandler>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000d4 	.word	0x200000d4

08001690 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <ETH_IRQHandler+0x10>)
 80016ca:	f001 fa03 	bl	8002ad4 <HAL_ETH_IRQHandler>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000861c 	.word	0x2000861c

080016d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_kill>:

int _kill(int pid, int sig)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016f2:	f019 f9ef 	bl	801aad4 <__errno>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2216      	movs	r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
	return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_exit>:

void _exit (int status)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffe7 	bl	80016e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800171a:	e7fe      	b.n	800171a <_exit+0x12>

0800171c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
	}

return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e009      	b.n	800177c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf1      	blt.n	8001768 <_write+0x12>
	}
	return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
	return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x50>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x16>
		heap_end = &end;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <_sbrk+0x50>)
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <_sbrk+0x54>)
 800180c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <_sbrk+0x50>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <_sbrk+0x50>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	466a      	mov	r2, sp
 800181e:	4293      	cmp	r3, r2
 8001820:	d907      	bls.n	8001832 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001822:	f019 f957 	bl	801aad4 <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	220c      	movs	r2, #12
 800182a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e006      	b.n	8001840 <_sbrk+0x48>
	}

	heap_end += incr;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <_sbrk+0x50>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a03      	ldr	r2, [pc, #12]	; (8001848 <_sbrk+0x50>)
 800183c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000120 	.word	0x20000120
 800184c:	2000c698 	.word	0x2000c698

08001850 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <LAN8742_RegisterBusIO+0x28>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <LAN8742_RegisterBusIO+0x28>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <LAN8742_RegisterBusIO+0x28>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	e014      	b.n	80018a8 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d17c      	bne.n	80019ce <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e01c      	b.n	8001928 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f107 0208 	add.w	r2, r7, #8
 80018f6:	2112      	movs	r1, #18
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	4798      	blx	r3
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da03      	bge.n	800190a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001902:	f06f 0304 	mvn.w	r3, #4
 8001906:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001908:	e00b      	b.n	8001922 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	429a      	cmp	r2, r3
 8001914:	d105      	bne.n	8001922 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
         break;
 8001920:	e005      	b.n	800192e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b1f      	cmp	r3, #31
 800192c:	d9df      	bls.n	80018ee <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b1f      	cmp	r3, #31
 8001934:	d902      	bls.n	800193c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001936:	f06f 0302 	mvn.w	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d145      	bne.n	80019ce <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6810      	ldr	r0, [r2, #0]
 800194a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800194e:	2100      	movs	r1, #0
 8001950:	4798      	blx	r3
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	db37      	blt.n	80019c8 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6810      	ldr	r0, [r2, #0]
 8001960:	f107 0208 	add.w	r2, r7, #8
 8001964:	2100      	movs	r1, #0
 8001966:	4798      	blx	r3
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	db28      	blt.n	80019c0 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4798      	blx	r3
 8001974:	4603      	mov	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001978:	e01c      	b.n	80019b4 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800198c:	d80e      	bhi.n	80019ac <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6810      	ldr	r0, [r2, #0]
 8001996:	f107 0208 	add.w	r2, r7, #8
 800199a:	2100      	movs	r1, #0
 800199c:	4798      	blx	r3
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da07      	bge.n	80019b4 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80019a4:	f06f 0304 	mvn.w	r3, #4
 80019a8:	613b      	str	r3, [r7, #16]
                 break;
 80019aa:	e010      	b.n	80019ce <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80019ac:	f06f 0301 	mvn.w	r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
               break;
 80019b2:	e00c      	b.n	80019ce <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1dd      	bne.n	800197a <LAN8742_Init+0xc6>
 80019be:	e006      	b.n	80019ce <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80019c0:	f06f 0304 	mvn.w	r3, #4
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e002      	b.n	80019ce <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80019c8:	f06f 0303 	mvn.w	r3, #3
 80019cc:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d112      	bne.n	80019fa <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4798      	blx	r3
 80019da:	4603      	mov	r3, r0
 80019dc:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80019de:	bf00      	nop
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4798      	blx	r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019f2:	d9f5      	bls.n	80019e0 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80019fa:	693b      	ldr	r3, [r7, #16]
 }
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6810      	ldr	r0, [r2, #0]
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4798      	blx	r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da02      	bge.n	8001a2c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a26:	f06f 0304 	mvn.w	r3, #4
 8001a2a:	e06e      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6810      	ldr	r0, [r2, #0]
 8001a34:	f107 020c 	add.w	r2, r7, #12
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4798      	blx	r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da02      	bge.n	8001a48 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a42:	f06f 0304 	mvn.w	r3, #4
 8001a46:	e060      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001a52:	2301      	movs	r3, #1
 8001a54:	e059      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6810      	ldr	r0, [r2, #0]
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	2100      	movs	r1, #0
 8001a64:	4798      	blx	r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da02      	bge.n	8001a72 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a6c:	f06f 0304 	mvn.w	r3, #4
 8001a70:	e04b      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d11b      	bne.n	8001ab4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <LAN8742_GetLinkState+0x90>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a90:	2302      	movs	r3, #2
 8001a92:	e03a      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e033      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001aac:	2304      	movs	r3, #4
 8001aae:	e02c      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	e02a      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6810      	ldr	r0, [r2, #0]
 8001abc:	f107 020c 	add.w	r2, r7, #12
 8001ac0:	211f      	movs	r1, #31
 8001ac2:	4798      	blx	r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da02      	bge.n	8001ad0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001aca:	f06f 0304 	mvn.w	r3, #4
 8001ace:	e01c      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001ada:	2306      	movs	r3, #6
 8001adc:	e015      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 031c 	and.w	r3, r3, #28
 8001ae4:	2b18      	cmp	r3, #24
 8001ae6:	d101      	bne.n	8001aec <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e00e      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 031c 	and.w	r3, r3, #28
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d101      	bne.n	8001afa <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e007      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 031c 	and.w	r3, r3, #28
 8001b00:	2b14      	cmp	r3, #20
 8001b02:	d101      	bne.n	8001b08 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b04:	2304      	movs	r3, #4
 8001b06:	e000      	b.n	8001b0a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b08:	2305      	movs	r3, #5
    }				
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <BSP_LED_Init+0x28>
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d006      	beq.n	8001b3c <BSP_LED_Init+0x28>
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d003      	beq.n	8001b3c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b34:	f06f 0301 	mvn.w	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3a:	e055      	b.n	8001be8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	e021      	b.n	8001ba6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10f      	bne.n	8001b88 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	e00e      	b.n	8001ba6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <BSP_LED_Init+0xe0>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <BSP_LED_Init+0xe4>)
 8001baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bae:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <BSP_LED_Init+0xe8>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	f107 0218 	add.w	r2, r7, #24
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 f954 	bl	8003e78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <BSP_LED_Init+0xe8>)
 8001bd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <BSP_LED_Init+0xe4>)
 8001bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	f002 faf0 	bl	80041c8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3730      	adds	r7, #48	; 0x30
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	08020ed0 	.word	0x08020ed0
 8001bfc:	20000014 	.word	0x20000014

08001c00 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <BSP_LED_On+0x28>
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d006      	beq.n	8001c28 <BSP_LED_On+0x28>
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d003      	beq.n	8001c28 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c20:	f06f 0301 	mvn.w	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e00b      	b.n	8001c40 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <BSP_LED_On+0x4c>)
 8001c2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <BSP_LED_On+0x50>)
 8001c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f002 fac4 	bl	80041c8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000014 	.word	0x20000014
 8001c50:	08020ed0 	.word	0x08020ed0

08001c54 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <BSP_LED_Off+0x28>
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d006      	beq.n	8001c7c <BSP_LED_Off+0x28>
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d003      	beq.n	8001c7c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c74:	f06f 0301 	mvn.w	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e00b      	b.n	8001c94 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <BSP_LED_Off+0x4c>)
 8001c80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <BSP_LED_Off+0x50>)
 8001c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f002 fa9a 	bl	80041c8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000014 	.word	0x20000014
 8001ca4:	08020ed0 	.word	0x08020ed0

08001ca8 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cac:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <SystemInit+0xa0>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <SystemInit+0xa0>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <SystemInit+0xa4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <SystemInit+0xa4>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cc8:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <SystemInit+0xa4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <SystemInit+0xa4>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	491e      	ldr	r1, [pc, #120]	; (8001d4c <SystemInit+0xa4>)
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <SystemInit+0xa8>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <SystemInit+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <SystemInit+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <SystemInit+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <SystemInit+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <SystemInit+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <SystemInit+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <SystemInit+0xa4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <SystemInit+0xa4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <SystemInit+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <SystemInit+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <SystemInit+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <SystemInit+0xa4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SystemInit+0xa4>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <SystemInit+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	661a      	str	r2, [r3, #96]	; 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <SystemInit+0xac>)
 8001d30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SystemInit+0xa0>)
 8001d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d3c:	609a      	str	r2, [r3, #8]
#endif  


}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d54:	52004000 	.word	0x52004000

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f000 f92f 	bl	8001fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d64:	f002 ffc8 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_Init+0x68>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	4913      	ldr	r1, [pc, #76]	; (8001dc4 <HAL_Init+0x6c>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_Init+0x68>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_Init+0x6c>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_Init+0x70>)
 8001d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <HAL_Init+0x74>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da2:	200f      	movs	r0, #15
 8001da4:	f7ff fbf4 	bl	8001590 <HAL_InitTick>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e002      	b.n	8001db8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001db2:	f000 f80d 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	08020ed8 	.word	0x08020ed8
 8001dc8:	20000024 	.word	0x20000024
 8001dcc:	20000020 	.word	0x20000020

08001dd0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000002c 	.word	0x2000002c
 8001e04:	2000882c 	.word	0x2000882c

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000882c 	.word	0x2000882c

08001e20 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e30:	4904      	ldr	r1, [pc, #16]	; (8001e44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	58000400 	.word	0x58000400

08001e48 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_EnableCompensationCell+0x1c>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_EnableCompensationCell+0x1c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	58000400 	.word	0x58000400

08001e68 <__NVIC_SetPriorityGrouping>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00
 8001eac:	05fa0000 	.word	0x05fa0000

08001eb0 <__NVIC_GetPriorityGrouping>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_EnableIRQ>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0b      	blt.n	8001ef6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <__NVIC_EnableIRQ+0x38>)
 8001ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2001      	movs	r0, #1
 8001eee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_SetPriority>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff4c 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe6:	f7ff ff63 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 8001fea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	6978      	ldr	r0, [r7, #20]
 8001ff2:	f7ff ffb3 	bl	8001f5c <NVIC_EncodePriority>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff82 	bl	8001f08 <__NVIC_SetPriority>
}
 8002004:	bf00      	nop
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff56 	bl	8001ecc <__NVIC_EnableIRQ>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800202c:	f3bf 8f5f 	dmb	sy
}
 8002030:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_MPU_Disable+0x28>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_MPU_Disable+0x28>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_MPU_Disable+0x2c>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00
 8002054:	e000ed90 	.word	0xe000ed90

08002058 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_MPU_Enable+0x38>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_MPU_Enable+0x3c>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_MPU_Enable+0x3c>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002076:	f3bf 8f4f 	dsb	sy
}
 800207a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800207c:	f3bf 8f6f 	isb	sy
}
 8002080:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed90 	.word	0xe000ed90
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	785a      	ldrb	r2, [r3, #1]
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_MPU_ConfigRegion+0x84>)
 80020a6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d029      	beq.n	8002104 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_MPU_ConfigRegion+0x84>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7b1b      	ldrb	r3, [r3, #12]
 80020bc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7adb      	ldrb	r3, [r3, #11]
 80020c2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7a9b      	ldrb	r3, [r3, #10]
 80020ca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7b5b      	ldrb	r3, [r3, #13]
 80020d2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7b9b      	ldrb	r3, [r3, #14]
 80020da:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7bdb      	ldrb	r3, [r3, #15]
 80020e2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7a5b      	ldrb	r3, [r3, #9]
 80020ea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7a1b      	ldrb	r3, [r3, #8]
 80020f2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020f4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020fe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002100:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002102:	e005      	b.n	8002110 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_MPU_ConfigRegion+0x84>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_MPU_ConfigRegion+0x84>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed90 	.word	0xe000ed90

08002120 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0c6      	b.n	80022c0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fc9c 	bl	8000a78 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2223      	movs	r2, #35	; 0x23
 8002144:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_ETH_Init+0x1a8>)
 8002148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800214c:	4a5e      	ldr	r2, [pc, #376]	; (80022c8 <HAL_ETH_Init+0x1a8>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_ETH_Init+0x1a8>)
 8002158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7a1b      	ldrb	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff fe57 	bl	8001e20 <HAL_SYSCFG_ETHInterfaceSelect>
 8002172:	e003      	b.n	800217c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002174:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002178:	f7ff fe52 	bl	8001e20 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002194:	f7ff fe38 	bl	8001e08 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800219a:	e00f      	b.n	80021bc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800219c:	f7ff fe34 	bl	8001e08 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021aa:	d907      	bls.n	80021bc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2204      	movs	r2, #4
 80021b0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	22e0      	movs	r2, #224	; 0xe0
 80021b6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e081      	b.n	80022c0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e6      	bne.n	800219c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f001 fad8 	bl	8003784 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80021d4:	f002 ff0a 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <HAL_ETH_Init+0x1ac>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9a      	lsrs	r2, r3, #18
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3a01      	subs	r2, #1
 80021e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 fa2b 	bl	8003648 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002208:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800220c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	22e0      	movs	r2, #224	; 0xe0
 8002224:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e04a      	b.n	80022c0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002232:	4413      	add	r3, r2
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_ETH_Init+0x1b0>)
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6952      	ldr	r2, [r2, #20]
 800223e:	0052      	lsls	r2, r2, #1
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	6809      	ldr	r1, [r1, #0]
 8002244:	431a      	orrs	r2, r3
 8002246:	f241 1308 	movw	r3, #4360	; 0x1108
 800224a:	440b      	add	r3, r1
 800224c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f001 faf0 	bl	8003834 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f001 fb34 	bl	80038c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	3305      	adds	r3, #5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	021a      	lsls	r2, r3, #8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	3303      	adds	r3, #3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	061a      	lsls	r2, r3, #24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	3302      	adds	r3, #2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002298:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80022a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80022a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2210      	movs	r2, #16
 80022b6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2210      	movs	r2, #16
 80022bc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	431bde83 	.word	0x431bde83
 80022d0:	ffff8001 	.word	0xffff8001

080022d4 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3310      	adds	r3, #16
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_ETH_DescAssignMemory+0x28>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d904      	bls.n	8002306 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e021      	b.n	800234a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002362:	2b10      	cmp	r3, #16
 8002364:	d174      	bne.n	8002450 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2223      	movs	r2, #35	; 0x23
 800236a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e00f      	b.n	8002392 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3310      	adds	r3, #16
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d9ec      	bls.n	8002372 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0202 	orr.w	r2, r2, #2
 80023ac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80023da:	4413      	add	r3, r2
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6811      	ldr	r1, [r2, #0]
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	f241 1304 	movw	r3, #4356	; 0x1104
 80023ea:	440b      	add	r3, r1
 80023ec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6811      	ldr	r1, [r2, #0]
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	f241 1308 	movw	r3, #4360	; 0x1108
 8002406:	440b      	add	r3, r1
 8002408:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800241c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002420:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f241 1334 	movw	r3, #4404	; 0x1134
 800242a:	4413      	add	r3, r2
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6811      	ldr	r1, [r2, #0]
 8002432:	f24d 0241 	movw	r2, #53313	; 0xd041
 8002436:	431a      	orrs	r2, r3
 8002438:	f241 1334 	movw	r3, #4404	; 0x1134
 800243c:	440b      	add	r3, r1
 800243e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2210      	movs	r2, #16
 8002444:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2222      	movs	r2, #34	; 0x22
 800244a:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d067      	beq.n	8002540 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2223      	movs	r2, #35	; 0x23
 8002474:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f241 1334 	movw	r3, #4404	; 0x1134
 800247e:	4413      	add	r3, r2
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	4a32      	ldr	r2, [pc, #200]	; (8002550 <HAL_ETH_Stop_IT+0xf0>)
 8002488:	401a      	ands	r2, r3
 800248a:	f241 1334 	movw	r3, #4404	; 0x1134
 800248e:	440b      	add	r3, r1
 8002490:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f241 1304 	movw	r3, #4356	; 0x1104
 800249a:	4413      	add	r3, r2
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6811      	ldr	r1, [r2, #0]
 80024a2:	f023 0201 	bic.w	r2, r3, #1
 80024a6:	f241 1304 	movw	r3, #4356	; 0x1104
 80024aa:	440b      	add	r3, r1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80024b6:	4413      	add	r3, r2
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6811      	ldr	r1, [r2, #0]
 80024be:	f023 0201 	bic.w	r2, r3, #1
 80024c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80024c6:	440b      	add	r3, r1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0202 	bic.w	r2, r2, #2
 80024fc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e00f      	b.n	8002524 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3310      	adds	r3, #16
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3301      	adds	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d9ec      	bls.n	8002504 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2210      	movs	r2, #16
 8002534:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2210      	movs	r2, #16
 800253a:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	ffff2fbe 	.word	0xffff2fbe

08002554 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e073      	b.n	800265e <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	2b10      	cmp	r3, #16
 800257c:	d16e      	bne.n	800265c <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800257e:	2200      	movs	r2, #0
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f001 f9fa 	bl	800397c <ETH_Prepare_Tx_Descriptors>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e05f      	b.n	800265e <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3206      	adds	r2, #6
 80025a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025aa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d904      	bls.n	80025c8 <HAL_ETH_Transmit+0x74>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	1f1a      	subs	r2, r3, #4
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	3106      	adds	r1, #6
 80025d4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80025d8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80025dc:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80025de:	f7ff fc13 	bl	8001e08 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80025e4:	e034      	b.n	8002650 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d011      	beq.n	800261c <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fc:	f043 0208 	orr.w	r2, r3, #8
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	22e0      	movs	r2, #224	; 0xe0
 8002616:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e020      	b.n	800265e <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d015      	beq.n	8002650 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002624:	f7ff fbf0 	bl	8001e08 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <HAL_ETH_Transmit+0xe6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22e0      	movs	r2, #224	; 0xe0
 800264a:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e006      	b.n	800265e <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	dbc6      	blt.n	80025e6 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e000      	b.n	800265e <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002666:	b480      	push	{r7}
 8002668:	b089      	sub	sp, #36	; 0x24
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3344      	adds	r3, #68	; 0x44
 8002672:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d06b      	beq.n	8002770 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002698:	2300      	movs	r3, #0
 800269a:	e0ce      	b.n	800283a <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d036      	beq.n	800271c <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	3301      	adds	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d902      	bls.n	80026d0 <HAL_ETH_IsRxDataAvailable+0x6a>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b04      	subs	r3, #4
 80026ce:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db11      	blt.n	8002706 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2201      	movs	r2, #1
 80026f2:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	3301      	adds	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d902      	bls.n	8002706 <HAL_ETH_IsRxDataAvailable+0xa0>
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3b04      	subs	r3, #4
 8002704:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002718:	2301      	movs	r3, #1
 800271a:	e08e      	b.n	800283a <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d902      	bls.n	8002742 <HAL_ETH_IsRxDataAvailable+0xdc>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3b04      	subs	r3, #4
 8002740:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e010      	b.n	8002770 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	3301      	adds	r3, #1
 8002752:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3301      	adds	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d902      	bls.n	8002766 <HAL_ETH_IsRxDataAvailable+0x100>
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3b04      	subs	r3, #4
 8002764:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db02      	blt.n	800277e <HAL_ETH_IsRxDataAvailable+0x118>
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d98e      	bls.n	800269c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d056      	beq.n	8002832 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e03b      	b.n	800281c <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027b2:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d20d      	bcs.n	8002816 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d902      	bls.n	800280c <HAL_ETH_IsRxDataAvailable+0x1a6>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b04      	subs	r3, #4
 800280a:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3bf      	bcc.n	80027a4 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	f241 1328 	movw	r3, #4392	; 0x1128
 800282e:	440b      	add	r3, r1
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]

  return 0;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b08a      	sub	sp, #40	; 0x28
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3344      	adds	r3, #68	; 0x44
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07d      	b.n	800297a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff feed 	bl	8002666 <HAL_ETH_IsRxDataAvailable>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e071      	b.n	800297a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	e031      	b.n	8002910 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	461a      	mov	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	461a      	mov	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028e6:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3301      	adds	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d902      	bls.n	80028fa <HAL_ETH_GetRxDataBuffer+0xb4>
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3b04      	subs	r3, #4
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	3301      	adds	r3, #1
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	3b01      	subs	r3, #1
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	429a      	cmp	r2, r3
 800291a:	d3c7      	bcc.n	80028ac <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	461a      	mov	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	429a      	cmp	r2, r3
 800293c:	d803      	bhi.n	8002946 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	e018      	b.n	8002978 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	461a      	mov	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e001      	b.n	8002978 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3344      	adds	r3, #68	; 0x44
 8002990:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe60 	bl	8002666 <HAL_ETH_IsRxDataAvailable>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e017      	b.n	80029e0 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4413      	add	r3, r2
 80029b8:	3b01      	subs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d902      	bls.n	80029c8 <HAL_ETH_GetRxDataLength+0x46>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3b04      	subs	r3, #4
 80029c6:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3344      	adds	r3, #68	; 0x44
 80029f4:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e057      	b.n	8002ac8 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3301      	adds	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e03b      	b.n	8002aa4 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a3a:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20d      	bcs.n	8002a9e <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d902      	bls.n	8002a94 <HAL_ETH_BuildRxDescriptors+0xac>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b04      	subs	r3, #4
 8002a92:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3bf      	bcc.n	8002a2c <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	f241 1328 	movw	r3, #4392	; 0x1128
 8002ab6:	440b      	add	r3, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3724      	adds	r7, #36	; 0x24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d113      	bne.n	8002b16 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f241 1334 	movw	r3, #4404	; 0x1134
 8002af6:	4413      	add	r3, r2
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d109      	bne.n	8002b16 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe f866 	bl	8000bd4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b10:	f248 0240 	movw	r2, #32832	; 0x8040
 8002b14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d113      	bne.n	8002b50 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002b30:	4413      	add	r3, r2
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d109      	bne.n	8002b50 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8b7 	bl	8002cb0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b4a:	f248 0201 	movw	r2, #32769	; 0x8001
 8002b4e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b62:	d149      	bne.n	8002bf8 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	f241 1334 	movw	r3, #4404	; 0x1134
 8002b6c:	4413      	add	r3, r2
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b78:	d13e      	bne.n	8002bf8 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	f043 0208 	orr.w	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d11b      	bne.n	8002bd2 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f241 1302 	movw	r3, #4354	; 0x1102
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f241 1334 	movw	r3, #4404	; 0x1134
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6811      	ldr	r1, [r2, #0]
 8002bbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc2:	f241 1334 	movw	r3, #4404	; 0x1134
 8002bc6:	440b      	add	r3, r1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	22e0      	movs	r2, #224	; 0xe0
 8002bce:	66da      	str	r2, [r3, #108]	; 0x6c
 8002bd0:	e00f      	b.n	8002bf2 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002bec:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002bf0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f866 	bl	8002cc4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c00:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002c04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c08:	d10e      	bne.n	8002c28 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	22e0      	movs	r2, #224	; 0xe0
 8002c1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f85b 	bl	8002cd8 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d10f      	bne.n	8002c58 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c40:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f84e 	bl	8002cec <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d10f      	bne.n	8002c88 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c70:	f003 020f 	and.w	r2, r3, #15
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f840 	bl	8002d00 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_ETH_IRQHandler+0x1d8>)
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_ETH_IRQHandler+0x1d8>)
 8002c96:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f839 	bl	8002d14 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	58000080 	.word	0x58000080

08002cb0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e03e      	b.n	8002dc8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d52:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	055b      	lsls	r3, r3, #21
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f043 030c 	orr.w	r3, r3, #12
 8002d76:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002d8a:	f7ff f83d 	bl	8001e08 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d90:	e009      	b.n	8002da6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002d92:	f7ff f839 	bl	8001e08 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da0:	d901      	bls.n	8002da6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e010      	b.n	8002dc8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ed      	bne.n	8002d92 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e03c      	b.n	8002e6c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dfa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	055b      	lsls	r3, r3, #21
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 030c 	bic.w	r3, r3, #12
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_ETH_WritePHYRegister+0xa4>)
 8002e32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002e36:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_ETH_WritePHYRegister+0xa4>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002e3e:	f7fe ffe3 	bl	8001e08 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002e44:	e009      	b.n	8002e5a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002e46:	f7fe ffdf 	bl	8001e08 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e54:	d901      	bls.n	8002e5a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e008      	b.n	8002e6c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ed      	bne.n	8002e46 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40028000 	.word	0x40028000

08002e78 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e1c3      	b.n	8003214 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0e5b      	lsrs	r3, r3, #25
 80030d6:	f003 021f 	and.w	r2, r3, #31
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	b29a      	uxth	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80031a0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80031b0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e00a      	b.n	800324a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	2b10      	cmp	r3, #16
 800323a:	d105      	bne.n	8003248 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f860 	bl	8003304 <ETH_SetMACConfig>

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003264:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800326c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800326e:	f001 febd 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8003272:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d908      	bls.n	800328e <HAL_ETH_SetMDIOClockRange+0x3a>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d804      	bhi.n	800328e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e027      	b.n	80032de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d908      	bls.n	80032a8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d204      	bcs.n	80032a8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e01a      	b.n	80032de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d303      	bcc.n	80032b8 <HAL_ETH_SetMDIOClockRange+0x64>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4a12      	ldr	r2, [pc, #72]	; (80032fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d911      	bls.n	80032dc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d908      	bls.n	80032d2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_ETH_SetMDIOClockRange+0xac>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d804      	bhi.n	80032d2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e005      	b.n	80032de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e000      	b.n	80032de <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80032dc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	01312cff 	.word	0x01312cff
 80032f4:	02160ebf 	.word	0x02160ebf
 80032f8:	03938700 	.word	0x03938700
 80032fc:	05f5e0ff 	.word	0x05f5e0ff
 8003300:	08f0d17f 	.word	0x08f0d17f

08003304 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003316:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800331e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	7b1b      	ldrb	r3, [r3, #12]
 8003324:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003326:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	7b5b      	ldrb	r3, [r3, #13]
 800332c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800332e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	7b9b      	ldrb	r3, [r3, #14]
 8003334:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	7bdb      	ldrb	r3, [r3, #15]
 800333c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800333e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	7c12      	ldrb	r2, [r2, #16]
 8003344:	2a00      	cmp	r2, #0
 8003346:	d102      	bne.n	800334e <ETH_SetMACConfig+0x4a>
 8003348:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800334c:	e000      	b.n	8003350 <ETH_SetMACConfig+0x4c>
 800334e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003350:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	7c52      	ldrb	r2, [r2, #17]
 8003356:	2a00      	cmp	r2, #0
 8003358:	d102      	bne.n	8003360 <ETH_SetMACConfig+0x5c>
 800335a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800335e:	e000      	b.n	8003362 <ETH_SetMACConfig+0x5e>
 8003360:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003362:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	7c9b      	ldrb	r3, [r3, #18]
 8003368:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800336a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003370:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003376:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	7f1b      	ldrb	r3, [r3, #28]
 800337c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800337e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	7f5b      	ldrb	r3, [r3, #29]
 8003384:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003386:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	7f92      	ldrb	r2, [r2, #30]
 800338c:	2a00      	cmp	r2, #0
 800338e:	d102      	bne.n	8003396 <ETH_SetMACConfig+0x92>
 8003390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003394:	e000      	b.n	8003398 <ETH_SetMACConfig+0x94>
 8003396:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003398:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	7fdb      	ldrb	r3, [r3, #31]
 800339e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80033a0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033a8:	2a00      	cmp	r2, #0
 80033aa:	d102      	bne.n	80033b2 <ETH_SetMACConfig+0xae>
 80033ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b0:	e000      	b.n	80033b4 <ETH_SetMACConfig+0xb0>
 80033b2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80033b4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80033ba:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80033c4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <ETH_SetMACConfig+0x22c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	68f9      	ldr	r1, [r7, #12]
 80033de:	430b      	orrs	r3, r1
 80033e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80033f0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80033fa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003402:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003404:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800340c:	2a00      	cmp	r2, #0
 800340e:	d102      	bne.n	8003416 <ETH_SetMACConfig+0x112>
 8003410:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003414:	e000      	b.n	8003418 <ETH_SetMACConfig+0x114>
 8003416:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003418:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <ETH_SetMACConfig+0x230>)
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	430b      	orrs	r3, r1
 8003434:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <ETH_SetMACConfig+0x234>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	68f9      	ldr	r1, [r7, #12]
 8003456:	430b      	orrs	r3, r1
 8003458:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003460:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003466:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800346e:	2a00      	cmp	r2, #0
 8003470:	d101      	bne.n	8003476 <ETH_SetMACConfig+0x172>
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	e000      	b.n	8003478 <ETH_SetMACConfig+0x174>
 8003476:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003478:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800348a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800348e:	4013      	ands	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	430b      	orrs	r3, r1
 8003498:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80034a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80034a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f023 0103 	bic.w	r1, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80034ce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d101      	bne.n	80034f2 <ETH_SetMACConfig+0x1ee>
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	e000      	b.n	80034f4 <ETH_SetMACConfig+0x1f0>
 80034f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80034f4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80034fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034fe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003506:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003514:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	430a      	orrs	r2, r1
 8003520:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	00048083 	.word	0x00048083
 8003534:	c0f88000 	.word	0xc0f88000
 8003538:	fffffef0 	.word	0xfffffef0

0800353c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <ETH_SetDMAConfig+0xf8>)
 8003552:	4013      	ands	r3, r2
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	431a      	orrs	r2, r3
 800355e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003562:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	791b      	ldrb	r3, [r3, #4]
 8003568:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800356e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	7b1b      	ldrb	r3, [r3, #12]
 8003574:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003582:	4413      	add	r3, r2
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <ETH_SetDMAConfig+0xfc>)
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	431a      	orrs	r2, r3
 8003592:	f241 0304 	movw	r3, #4100	; 0x1004
 8003596:	440b      	add	r3, r1
 8003598:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	7b5b      	ldrb	r3, [r3, #13]
 800359e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <ETH_SetDMAConfig+0x100>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6811      	ldr	r1, [r2, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	431a      	orrs	r2, r3
 80035be:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80035c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	7d1b      	ldrb	r3, [r3, #20]
 80035cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80035ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	7f5b      	ldrb	r3, [r3, #29]
 80035d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	f241 1304 	movw	r3, #4356	; 0x1104
 80035e2:	4413      	add	r3, r2
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <ETH_SetDMAConfig+0x104>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80035f6:	440b      	add	r3, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	7f1b      	ldrb	r3, [r3, #28]
 80035fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003610:	4413      	add	r3, r2
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <ETH_SetDMAConfig+0x108>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6811      	ldr	r1, [r2, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	431a      	orrs	r2, r3
 8003620:	f241 1308 	movw	r3, #4360	; 0x1108
 8003624:	440b      	add	r3, r1
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	ffff87fd 	.word	0xffff87fd
 8003638:	ffff2ffe 	.word	0xffff2ffe
 800363c:	fffec000 	.word	0xfffec000
 8003640:	ffc0efef 	.word	0xffc0efef
 8003644:	7fc0ffff 	.word	0x7fc0ffff

08003648 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0a4      	sub	sp, #144	; 0x90
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003656:	2300      	movs	r3, #0
 8003658:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003690:	2300      	movs	r3, #0
 8003692:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80036a0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80036a4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80036c2:	2300      	movs	r3, #0
 80036c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80036ca:	2300      	movs	r3, #0
 80036cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80036e0:	2320      	movs	r3, #32
 80036e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80036f2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80036f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036fc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003704:	2302      	movs	r3, #2
 8003706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003722:	2300      	movs	r3, #0
 8003724:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800372c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fde6 	bl	8003304 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003738:	2301      	movs	r3, #1
 800373a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800373c:	2301      	movs	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003752:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003756:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800375c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003760:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003768:	f44f 7306 	mov.w	r3, #536	; 0x218
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fee1 	bl	800353c <ETH_SetDMAConfig>
}
 800377a:	bf00      	nop
 800377c:	3790      	adds	r7, #144	; 0x90
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003794:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800379c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800379e:	f001 fc25 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 80037a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d908      	bls.n	80037be <ETH_MAC_MDIO_ClkConfig+0x3a>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d804      	bhi.n	80037be <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e027      	b.n	800380e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d908      	bls.n	80037d8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d204      	bcs.n	80037d8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e01a      	b.n	800380e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d303      	bcc.n	80037e8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a12      	ldr	r2, [pc, #72]	; (800382c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d911      	bls.n	800380c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a10      	ldr	r2, [pc, #64]	; (800382c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d908      	bls.n	8003802 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d804      	bhi.n	8003802 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e005      	b.n	800380e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e000      	b.n	800380e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800380c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	01312cff 	.word	0x01312cff
 8003824:	02160ebf 	.word	0x02160ebf
 8003828:	03938700 	.word	0x03938700
 800382c:	05f5e0ff 	.word	0x05f5e0ff
 8003830:	08f0d17f 	.word	0x08f0d17f

08003834 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e01d      	b.n	800387e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68d9      	ldr	r1, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2200      	movs	r2, #0
 800386a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	3206      	adds	r2, #6
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d9de      	bls.n	8003842 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f241 132c 	movw	r3, #4396	; 0x112c
 8003892:	4413      	add	r3, r2
 8003894:	2203      	movs	r2, #3
 8003896:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68d9      	ldr	r1, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f241 1314 	movw	r3, #4372	; 0x1114
 80038a4:	4413      	add	r3, r2
 80038a6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e024      	b.n	800391a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6919      	ldr	r1, [r3, #16]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3310      	adds	r3, #16
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d9d7      	bls.n	80038d0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f241 1330 	movw	r3, #4400	; 0x1130
 8003946:	4413      	add	r3, r2
 8003948:	2203      	movs	r2, #3
 800394a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6919      	ldr	r1, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f241 131c 	movw	r3, #4380	; 0x111c
 8003958:	4413      	add	r3, r2
 800395a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f241 1328 	movw	r3, #4392	; 0x1128
 800396c:	4413      	add	r3, r2
 800396e:	6019      	str	r1, [r3, #0]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800397c:	b480      	push	{r7}
 800397e:	b08d      	sub	sp, #52	; 0x34
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3318      	adds	r3, #24
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800399a:	2300      	movs	r3, #0
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039be:	d007      	beq.n	80039d0 <ETH_Prepare_Tx_Descriptors+0x54>
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	3304      	adds	r3, #4
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80039d0:	2302      	movs	r3, #2
 80039d2:	e24a      	b.n	8003e6a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d044      	beq.n	8003a6a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <ETH_Prepare_Tx_Descriptors+0x234>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ec:	431a      	orrs	r2, r3
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d027      	beq.n	8003a6a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	431a      	orrs	r2, r3
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a58:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	6992      	ldr	r2, [r2, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <ETH_Prepare_Tx_Descriptors+0x130>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d030      	beq.n	8003b0e <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d902      	bls.n	8003ad6 <ETH_Prepare_Tx_Descriptors+0x15a>
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ade:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af2:	d10c      	bne.n	8003b0e <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afc:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e1ad      	b.n	8003e6a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	3301      	adds	r3, #1
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	6852      	ldr	r2, [r2, #4]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	6852      	ldr	r2, [r2, #4]
 8003b54:	0412      	lsls	r2, r2, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	e008      	b.n	8003b70 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d021      	beq.n	8003bc0 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	04db      	lsls	r3, r3, #19
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <ETH_Prepare_Tx_Descriptors+0x240>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	69d2      	ldr	r2, [r2, #28]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	60da      	str	r2, [r3, #12]
 8003bae:	e02e      	b.n	8003c0e <ETH_Prepare_Tx_Descriptors+0x292>
 8003bb0:	ffff0000 	.word	0xffff0000
 8003bb4:	ffffc000 	.word	0xffffc000
 8003bb8:	c000ffff 	.word	0xc000ffff
 8003bbc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4b93      	ldr	r3, [pc, #588]	; (8003e14 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	6852      	ldr	r2, [r2, #4]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	431a      	orrs	r2, r3
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80cb 	beq.w	8003df4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003c70:	e0c0      	b.n	8003df4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	3301      	adds	r3, #1
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d902      	bls.n	8003c90 <ETH_Prepare_Tx_Descriptors+0x314>
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	3b04      	subs	r3, #4
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c98:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb2:	d007      	beq.n	8003cc4 <ETH_Prepare_Tx_Descriptors+0x348>
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	3304      	adds	r3, #4
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d026      	beq.n	8003d12 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	e016      	b.n	8003d06 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d902      	bls.n	8003cf6 <ETH_Prepare_Tx_Descriptors+0x37a>
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfe:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	3301      	adds	r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3e4      	bcc.n	8003cd8 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0ab      	b.n	8003e6a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	3301      	adds	r3, #1
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	6852      	ldr	r2, [r2, #4]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	6852      	ldr	r2, [r2, #4]
 8003d5e:	0412      	lsls	r2, r2, #16
 8003d60:	431a      	orrs	r2, r3
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	e008      	b.n	8003d7a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00f      	beq.n	8003da6 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	69d2      	ldr	r2, [r2, #28]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	e017      	b.n	8003dd6 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	6852      	ldr	r2, [r2, #4]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f47f af3a 	bne.w	8003c72 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	e00e      	b.n	8003e30 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003e12:	bf00      	nop
 8003e14:	ffff8000 	.word	0xffff8000
 8003e18:	ffffc000 	.word	0xffffc000
 8003e1c:	c000ffff 	.word	0xc000ffff
 8003e20:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	3304      	adds	r3, #4
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e50:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e52:	b672      	cpsid	i
}
 8003e54:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003e64:	b662      	cpsie	i
}
 8003e66:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3734      	adds	r7, #52	; 0x34
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e86:	4b86      	ldr	r3, [pc, #536]	; (80040a0 <HAL_GPIO_Init+0x228>)
 8003e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e8a:	e18c      	b.n	80041a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2101      	movs	r1, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 817e 	beq.w	80041a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_GPIO_Init+0x4c>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d007      	beq.n	8003ec4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb8:	2b11      	cmp	r3, #17
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b12      	cmp	r3, #18
 8003ec2:	d130      	bne.n	8003f26 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	2201      	movs	r2, #1
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 0201 	and.w	r2, r3, #1
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0xee>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b12      	cmp	r3, #18
 8003f64:	d123      	bne.n	8003fae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	08da      	lsrs	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3208      	adds	r2, #8
 8003f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	08da      	lsrs	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3208      	adds	r2, #8
 8003fa8:	69b9      	ldr	r1, [r7, #24]
 8003faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0203 	and.w	r2, r3, #3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80d8 	beq.w	80041a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <HAL_GPIO_Init+0x22c>)
 8003ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_GPIO_Init+0x22c>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004000:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_GPIO_Init+0x22c>)
 8004002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800400e:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <HAL_GPIO_Init+0x230>)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	3302      	adds	r3, #2
 8004016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_GPIO_Init+0x234>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04a      	beq.n	80040d0 <HAL_GPIO_Init+0x258>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <HAL_GPIO_Init+0x238>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02b      	beq.n	800409a <HAL_GPIO_Init+0x222>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <HAL_GPIO_Init+0x23c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d025      	beq.n	8004096 <HAL_GPIO_Init+0x21e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <HAL_GPIO_Init+0x240>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01f      	beq.n	8004092 <HAL_GPIO_Init+0x21a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <HAL_GPIO_Init+0x244>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d019      	beq.n	800408e <HAL_GPIO_Init+0x216>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_GPIO_Init+0x248>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_GPIO_Init+0x212>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <HAL_GPIO_Init+0x24c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00d      	beq.n	8004086 <HAL_GPIO_Init+0x20e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <HAL_GPIO_Init+0x250>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <HAL_GPIO_Init+0x20a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_GPIO_Init+0x254>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_GPIO_Init+0x206>
 800407a:	2309      	movs	r3, #9
 800407c:	e029      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 800407e:	230a      	movs	r3, #10
 8004080:	e027      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 8004082:	2307      	movs	r3, #7
 8004084:	e025      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 8004086:	2306      	movs	r3, #6
 8004088:	e023      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 800408a:	2305      	movs	r3, #5
 800408c:	e021      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 800408e:	2304      	movs	r3, #4
 8004090:	e01f      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 8004092:	2303      	movs	r3, #3
 8004094:	e01d      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 8004096:	2302      	movs	r3, #2
 8004098:	e01b      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 800409a:	2301      	movs	r3, #1
 800409c:	e019      	b.n	80040d2 <HAL_GPIO_Init+0x25a>
 800409e:	bf00      	nop
 80040a0:	58000080 	.word	0x58000080
 80040a4:	58024400 	.word	0x58024400
 80040a8:	58000400 	.word	0x58000400
 80040ac:	58020000 	.word	0x58020000
 80040b0:	58020400 	.word	0x58020400
 80040b4:	58020800 	.word	0x58020800
 80040b8:	58020c00 	.word	0x58020c00
 80040bc:	58021000 	.word	0x58021000
 80040c0:	58021400 	.word	0x58021400
 80040c4:	58021800 	.word	0x58021800
 80040c8:	58021c00 	.word	0x58021c00
 80040cc:	58022400 	.word	0x58022400
 80040d0:	2300      	movs	r3, #0
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	f002 0203 	and.w	r2, r2, #3
 80040d8:	0092      	lsls	r2, r2, #2
 80040da:	4093      	lsls	r3, r2
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e2:	4938      	ldr	r1, [pc, #224]	; (80041c4 <HAL_GPIO_Init+0x34c>)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800416a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	43db      	mvns	r3, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4013      	ands	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3301      	adds	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f ae6b 	bne.w	8003e8c <HAL_GPIO_Init+0x14>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	3724      	adds	r7, #36	; 0x24
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	58000400 	.word	0x58000400

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	041a      	lsls	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_PWREx_ConfigSupply+0x70>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d00a      	beq.n	8004226 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <HAL_PWREx_ConfigSupply+0x70>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e01f      	b.n	8004262 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e01d      	b.n	8004262 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_PWREx_ConfigSupply+0x70>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 0207 	bic.w	r2, r3, #7
 800422e:	490f      	ldr	r1, [pc, #60]	; (800426c <HAL_PWREx_ConfigSupply+0x70>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4313      	orrs	r3, r2
 8004234:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004236:	f7fd fde7 	bl	8001e08 <HAL_GetTick>
 800423a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800423c:	e009      	b.n	8004252 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800423e:	f7fd fde3 	bl	8001e08 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800424c:	d901      	bls.n	8004252 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e007      	b.n	8004262 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_PWREx_ConfigSupply+0x70>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800425a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425e:	d1ee      	bne.n	800423e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	58024800 	.word	0x58024800

08004270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	; 0x30
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e37a      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8087 	beq.w	800439e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004290:	4ba0      	ldr	r3, [pc, #640]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800429a:	4b9e      	ldr	r3, [pc, #632]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d007      	beq.n	80042b6 <HAL_RCC_OscConfig+0x46>
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	2b18      	cmp	r3, #24
 80042aa:	d110      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d10b      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	4b97      	ldr	r3, [pc, #604]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d06c      	beq.n	800439c <HAL_RCC_OscConfig+0x12c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d168      	bne.n	800439c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e354      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x76>
 80042d8:	4b8e      	ldr	r3, [pc, #568]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a8d      	ldr	r2, [pc, #564]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e02e      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b89      	ldr	r3, [pc, #548]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a88      	ldr	r2, [pc, #544]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b86      	ldr	r3, [pc, #536]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a85      	ldr	r2, [pc, #532]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e01d      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0xbc>
 8004312:	4b80      	ldr	r3, [pc, #512]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7f      	ldr	r2, [pc, #508]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b7d      	ldr	r3, [pc, #500]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7c      	ldr	r2, [pc, #496]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 800432c:	4b79      	ldr	r3, [pc, #484]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a78      	ldr	r2, [pc, #480]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a75      	ldr	r2, [pc, #468]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fd5c 	bl	8001e08 <HAL_GetTick>
 8004350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004354:	f7fd fd58 	bl	8001e08 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e308      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004366:	4b6b      	ldr	r3, [pc, #428]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0xe4>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fd48 	bl	8001e08 <HAL_GetTick>
 8004378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd fd44 	bl	8001e08 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e2f4      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800438e:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x10c>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d06d      	beq.n	8004486 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043aa:	4b5a      	ldr	r3, [pc, #360]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043b4:	4b57      	ldr	r3, [pc, #348]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_RCC_OscConfig+0x160>
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b18      	cmp	r3, #24
 80043c4:	d11b      	bne.n	80043fe <HAL_RCC_OscConfig+0x18e>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d0:	4b50      	ldr	r3, [pc, #320]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x178>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e2c7      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	4947      	ldr	r1, [pc, #284]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fc:	e043      	b.n	8004486 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d026      	beq.n	8004454 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004406:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 0219 	bic.w	r2, r3, #25
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4940      	ldr	r1, [pc, #256]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd fcf6 	bl	8001e08 <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004420:	f7fd fcf2 	bl	8001e08 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e2a2      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004432:	4b38      	ldr	r3, [pc, #224]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443e:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	4931      	ldr	r1, [pc, #196]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]
 8004452:	e018      	b.n	8004486 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004454:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fcd2 	bl	8001e08 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd fcce 	bl	8001e08 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e27e      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d06c      	beq.n	800456c <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800449a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d007      	beq.n	80044b8 <HAL_RCC_OscConfig+0x248>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b18      	cmp	r3, #24
 80044ac:	d11b      	bne.n	80044e6 <HAL_RCC_OscConfig+0x276>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d116      	bne.n	80044e6 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_OscConfig+0x260>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e253      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	490d      	ldr	r1, [pc, #52]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044e4:	e042      	b.n	800456c <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d025      	beq.n	800453a <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <HAL_RCC_OscConfig+0x2a4>)
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fd fc85 	bl	8001e08 <HAL_GetTick>
 80044fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004502:	f7fd fc81 	bl	8001e08 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d903      	bls.n	8004518 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e231      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
 8004514:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004518:	4ba3      	ldr	r3, [pc, #652]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004524:	4ba0      	ldr	r3, [pc, #640]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	499d      	ldr	r1, [pc, #628]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004534:	4313      	orrs	r3, r2
 8004536:	60cb      	str	r3, [r1, #12]
 8004538:	e018      	b.n	800456c <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800453a:	4b9b      	ldr	r3, [pc, #620]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a9a      	ldr	r2, [pc, #616]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fd fc5f 	bl	8001e08 <HAL_GetTick>
 800454a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800454e:	f7fd fc5b 	bl	8001e08 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e20b      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004560:	4b91      	ldr	r3, [pc, #580]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d036      	beq.n	80045e6 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d019      	beq.n	80045b4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004580:	4b89      	ldr	r3, [pc, #548]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	4a88      	ldr	r2, [pc, #544]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd fc3c 	bl	8001e08 <HAL_GetTick>
 8004590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fd fc38 	bl	8001e08 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1e8      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045a6:	4b80      	ldr	r3, [pc, #512]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x324>
 80045b2:	e018      	b.n	80045e6 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4b7c      	ldr	r3, [pc, #496]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b8:	4a7b      	ldr	r2, [pc, #492]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7fd fc22 	bl	8001e08 <HAL_GetTick>
 80045c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c8:	f7fd fc1e 	bl	8001e08 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e1ce      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045da:	4b73      	ldr	r3, [pc, #460]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d036      	beq.n	8004660 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d019      	beq.n	800462e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045fa:	4b6b      	ldr	r3, [pc, #428]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004604:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004606:	f7fd fbff 	bl	8001e08 <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800460e:	f7fd fbfb 	bl	8001e08 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1ab      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004620:	4b61      	ldr	r3, [pc, #388]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x39e>
 800462c:	e018      	b.n	8004660 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800462e:	4b5e      	ldr	r3, [pc, #376]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5d      	ldr	r2, [pc, #372]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004638:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800463a:	f7fd fbe5 	bl	8001e08 <HAL_GetTick>
 800463e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004642:	f7fd fbe1 	bl	8001e08 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e191      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004654:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8081 	beq.w	8004770 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800466e:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_RCC_OscConfig+0x53c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a4e      	ldr	r2, [pc, #312]	; (80047ac <HAL_RCC_OscConfig+0x53c>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004678:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800467a:	f7fd fbc5 	bl	8001e08 <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004682:	f7fd fbc1 	bl	8001e08 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b64      	cmp	r3, #100	; 0x64
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e171      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004694:	4b45      	ldr	r3, [pc, #276]	; (80047ac <HAL_RCC_OscConfig+0x53c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x446>
 80046a8:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	e02d      	b.n	8004712 <HAL_RCC_OscConfig+0x4a2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x468>
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a39      	ldr	r2, [pc, #228]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	4a36      	ldr	r2, [pc, #216]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046d0:	f023 0304 	bic.w	r3, r3, #4
 80046d4:	6713      	str	r3, [r2, #112]	; 0x70
 80046d6:	e01c      	b.n	8004712 <HAL_RCC_OscConfig+0x4a2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d10c      	bne.n	80046fa <HAL_RCC_OscConfig+0x48a>
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046e6:	f043 0304 	orr.w	r3, r3, #4
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
 80046ec:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a2d      	ldr	r2, [pc, #180]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
 80046f8:	e00b      	b.n	8004712 <HAL_RCC_OscConfig+0x4a2>
 80046fa:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a2a      	ldr	r2, [pc, #168]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d015      	beq.n	8004746 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fb75 	bl	8001e08 <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fd fb71 	bl	8001e08 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e11f      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ee      	beq.n	8004722 <HAL_RCC_OscConfig+0x4b2>
 8004744:	e014      	b.n	8004770 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004746:	f7fd fb5f 	bl	8001e08 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800474c:	e00a      	b.n	8004764 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd fb5b 	bl	8001e08 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e109      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ee      	bne.n	800474e <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80fe 	beq.w	8004976 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004782:	2b18      	cmp	r3, #24
 8004784:	f000 80b9 	beq.w	80048fa <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	2b02      	cmp	r3, #2
 800478e:	f040 809a 	bne.w	80048c6 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <HAL_RCC_OscConfig+0x538>)
 8004798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fd fb33 	bl	8001e08 <HAL_GetTick>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047a4:	e00d      	b.n	80047c2 <HAL_RCC_OscConfig+0x552>
 80047a6:	bf00      	nop
 80047a8:	58024400 	.word	0x58024400
 80047ac:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd fb2a 	bl	8001e08 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e0da      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047c2:	4b6f      	ldr	r3, [pc, #444]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ce:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80047d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCC_OscConfig+0x714>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	430a      	orrs	r2, r1
 80047e2:	4967      	ldr	r1, [pc, #412]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	628b      	str	r3, [r1, #40]	; 0x28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	3b01      	subs	r3, #1
 80047ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	3b01      	subs	r3, #1
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	3b01      	subs	r3, #1
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004818:	4959      	ldr	r1, [pc, #356]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800481a:	4313      	orrs	r3, r2
 800481c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800481e:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4a57      	ldr	r2, [pc, #348]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800482a:	4b55      	ldr	r3, [pc, #340]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800482c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_OscConfig+0x718>)
 8004830:	4013      	ands	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004836:	00d2      	lsls	r2, r2, #3
 8004838:	4951      	ldr	r1, [pc, #324]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800483a:	4313      	orrs	r3, r2
 800483c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800483e:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f023 020c 	bic.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	494d      	ldr	r1, [pc, #308]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800484c:	4313      	orrs	r3, r2
 800484e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f023 0202 	bic.w	r2, r3, #2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	4948      	ldr	r1, [pc, #288]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800485e:	4313      	orrs	r3, r2
 8004860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	4a46      	ldr	r2, [pc, #280]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4b44      	ldr	r3, [pc, #272]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4a43      	ldr	r2, [pc, #268]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	4a40      	ldr	r2, [pc, #256]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	4a3d      	ldr	r2, [pc, #244]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004892:	4b3b      	ldr	r3, [pc, #236]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3a      	ldr	r2, [pc, #232]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fd fab3 	bl	8001e08 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fd faaf 	bl	8001e08 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e05f      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b8:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x636>
 80048c4:	e057      	b.n	8004976 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2d      	ldr	r2, [pc, #180]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80048cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fd fa99 	bl	8001e08 <HAL_GetTick>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048da:	f7fd fa95 	bl	8001e08 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e045      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ec:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f0      	bne.n	80048da <HAL_RCC_OscConfig+0x66a>
 80048f8:	e03d      	b.n	8004976 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x710>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b01      	cmp	r3, #1
 800490c:	d031      	beq.n	8004972 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d12a      	bne.n	8004972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d122      	bne.n	8004972 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d11a      	bne.n	8004972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	0a5b      	lsrs	r3, r3, #9
 8004940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d111      	bne.n	8004972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d108      	bne.n	8004972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	0e1b      	lsrs	r3, r3, #24
 8004964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3730      	adds	r7, #48	; 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58024400 	.word	0x58024400
 8004984:	fffffc0c 	.word	0xfffffc0c
 8004988:	ffff0007 	.word	0xffff0007

0800498c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e19c      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b8a      	ldr	r3, [pc, #552]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d910      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b87      	ldr	r3, [pc, #540]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 020f 	bic.w	r2, r3, #15
 80049b6:	4985      	ldr	r1, [pc, #532]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b83      	ldr	r3, [pc, #524]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e184      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	4b7b      	ldr	r3, [pc, #492]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d908      	bls.n	80049fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ec:	4b78      	ldr	r3, [pc, #480]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	4975      	ldr	r1, [pc, #468]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	4b70      	ldr	r3, [pc, #448]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d908      	bls.n	8004a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	496a      	ldr	r1, [pc, #424]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d908      	bls.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a48:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	495e      	ldr	r1, [pc, #376]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d908      	bls.n	8004a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a76:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4953      	ldr	r1, [pc, #332]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d908      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f023 020f 	bic.w	r2, r3, #15
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4947      	ldr	r1, [pc, #284]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d055      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ac2:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4940      	ldr	r1, [pc, #256]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004adc:	4b3c      	ldr	r3, [pc, #240]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d121      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0f6      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d115      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0ea      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0de      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0d6      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b2c:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f023 0207 	bic.w	r2, r3, #7
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4925      	ldr	r1, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fd f963 	bl	8001e08 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b46:	f7fd f95f 	bl	8001e08 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0be      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d1eb      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d208      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f023 020f 	bic.w	r2, r3, #15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d214      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 020f 	bic.w	r2, r3, #15
 8004bb2:	4906      	ldr	r1, [pc, #24]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e086      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
 8004bcc:	52002000 	.word	0x52002000
 8004bd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d208      	bcs.n	8004c02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bf0:	4b3c      	ldr	r3, [pc, #240]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4939      	ldr	r1, [pc, #228]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d208      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	492e      	ldr	r1, [pc, #184]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	4b28      	ldr	r3, [pc, #160]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d208      	bcs.n	8004c5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4922      	ldr	r1, [pc, #136]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d208      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c8c:	f000 f834 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	4912      	ldr	r1, [pc, #72]	; (8004ce8 <HAL_RCC_ClockConfig+0x35c>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <HAL_RCC_ClockConfig+0x35c>)
 8004cb4:	5cd3      	ldrb	r3, [r2, r3]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x360>)
 8004cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x364>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x368>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc fc5e 	bl	8001590 <HAL_InitTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	08020ed8 	.word	0x08020ed8
 8004cec:	20000024 	.word	0x20000024
 8004cf0:	20000020 	.word	0x20000020
 8004cf4:	20000028 	.word	0x20000028

08004cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfe:	4bb3      	ldr	r3, [pc, #716]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d06:	2b18      	cmp	r3, #24
 8004d08:	f200 8155 	bhi.w	8004fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004fb7 	.word	0x08004fb7
 8004d1c:	08004fb7 	.word	0x08004fb7
 8004d20:	08004fb7 	.word	0x08004fb7
 8004d24:	08004fb7 	.word	0x08004fb7
 8004d28:	08004fb7 	.word	0x08004fb7
 8004d2c:	08004fb7 	.word	0x08004fb7
 8004d30:	08004fb7 	.word	0x08004fb7
 8004d34:	08004d9f 	.word	0x08004d9f
 8004d38:	08004fb7 	.word	0x08004fb7
 8004d3c:	08004fb7 	.word	0x08004fb7
 8004d40:	08004fb7 	.word	0x08004fb7
 8004d44:	08004fb7 	.word	0x08004fb7
 8004d48:	08004fb7 	.word	0x08004fb7
 8004d4c:	08004fb7 	.word	0x08004fb7
 8004d50:	08004fb7 	.word	0x08004fb7
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004fb7 	.word	0x08004fb7
 8004d5c:	08004fb7 	.word	0x08004fb7
 8004d60:	08004fb7 	.word	0x08004fb7
 8004d64:	08004fb7 	.word	0x08004fb7
 8004d68:	08004fb7 	.word	0x08004fb7
 8004d6c:	08004fb7 	.word	0x08004fb7
 8004d70:	08004fb7 	.word	0x08004fb7
 8004d74:	08004dab 	.word	0x08004dab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d78:	4b94      	ldr	r3, [pc, #592]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	4a90      	ldr	r2, [pc, #576]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d96:	e111      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d98:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d9a:	61bb      	str	r3, [r7, #24]
    break;
 8004d9c:	e10e      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d9e:	4b8d      	ldr	r3, [pc, #564]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004da0:	61bb      	str	r3, [r7, #24]
    break;
 8004da2:	e10b      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004da4:	4b8c      	ldr	r3, [pc, #560]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004da6:	61bb      	str	r3, [r7, #24]
    break;
 8004da8:	e108      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004daa:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004db4:	4b85      	ldr	r3, [pc, #532]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004dc0:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dca:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80e1 	beq.w	8004fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f000 8083 	beq.w	8004efc <HAL_RCC_GetSysClockFreq+0x204>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f200 80a1 	bhi.w	8004f40 <HAL_RCC_GetSysClockFreq+0x248>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x114>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d056      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e0a:	e099      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e18:	4b6c      	ldr	r3, [pc, #432]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	4a6b      	ldr	r2, [pc, #428]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e72:	e087      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb6:	e065      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ede:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004efa:	e043      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3e:	e021      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	3301      	adds	r3, #1
 8004f90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa8:	ee17 3a90 	vmov	r3, s15
 8004fac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fae:	e005      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
    break;
 8004fb4:	e002      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fb8:	61bb      	str	r3, [r7, #24]
    break;
 8004fba:	bf00      	nop
  }

  return sysclockfreq;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	03d09000 	.word	0x03d09000
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	46000000 	.word	0x46000000
 8004fe0:	4c742400 	.word	0x4c742400
 8004fe4:	4a742400 	.word	0x4a742400
 8004fe8:	4af42400 	.word	0x4af42400

08004fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff2:	f7ff fe81 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <HAL_RCC_GetHCLKFreq+0x50>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	490f      	ldr	r1, [pc, #60]	; (8005040 <HAL_RCC_GetHCLKFreq+0x54>)
 8005004:	5ccb      	ldrb	r3, [r1, r3]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	fa22 f303 	lsr.w	r3, r2, r3
 800500e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_RCC_GetHCLKFreq+0x50>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <HAL_RCC_GetHCLKFreq+0x54>)
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <HAL_RCC_GetHCLKFreq+0x58>)
 8005028:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_RCC_GetHCLKFreq+0x5c>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <HAL_RCC_GetHCLKFreq+0x58>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	58024400 	.word	0x58024400
 8005040:	08020ed8 	.word	0x08020ed8
 8005044:	20000024 	.word	0x20000024
 8005048:	20000020 	.word	0x20000020

0800504c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005050:	f7ff ffcc 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4904      	ldr	r1, [pc, #16]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	58024400 	.word	0x58024400
 8005074:	08020ed8 	.word	0x08020ed8

08005078 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	223f      	movs	r2, #63	; 0x3f
 8005086:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0207 	and.w	r2, r3, #7
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005094:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80050ac:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80050b8:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80050d0:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <HAL_RCC_GetClockConfig+0x7c>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCC_GetClockConfig+0x80>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	58024400 	.word	0x58024400
 80050f8:	52002000 	.word	0x52002000

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e049      	b.n	80051a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f841 	bl	80051aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fa0e 	bl	800555c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d001      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e05e      	b.n	8005296 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <HAL_TIM_Base_Start_IT+0xe4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02c      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005202:	d027      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a26      	ldr	r2, [pc, #152]	; (80052ac <HAL_TIM_Base_Start_IT+0xec>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d01d      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <HAL_TIM_Base_Start_IT+0xf0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a23      	ldr	r2, [pc, #140]	; (80052b4 <HAL_TIM_Base_Start_IT+0xf4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <HAL_TIM_Base_Start_IT+0xf8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a20      	ldr	r2, [pc, #128]	; (80052bc <HAL_TIM_Base_Start_IT+0xfc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <HAL_TIM_Base_Start_IT+0x100>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x94>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <HAL_TIM_Base_Start_IT+0x104>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d115      	bne.n	8005280 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <HAL_TIM_Base_Start_IT+0x108>)
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d015      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0xd2>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d011      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	e008      	b.n	8005292 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e000      	b.n	8005294 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40001800 	.word	0x40001800
 80052bc:	40014000 	.word	0x40014000
 80052c0:	4000e000 	.word	0x4000e000
 80052c4:	4000e400 	.word	0x4000e400
 80052c8:	00010007 	.word	0x00010007

080052cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d122      	bne.n	8005328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d11b      	bne.n	8005328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0202 	mvn.w	r2, #2
 80052f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f905 	bl	800551e <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8f7 	bl	800550a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f908 	bl	8005532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d122      	bne.n	800537c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0204 	mvn.w	r2, #4
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8db 	bl	800551e <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8cd 	bl	800550a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f8de 	bl	8005532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b08      	cmp	r3, #8
 8005388:	d122      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d11b      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0208 	mvn.w	r2, #8
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f8b1 	bl	800551e <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8a3 	bl	800550a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8b4 	bl	8005532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0210 	mvn.w	r2, #16
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2208      	movs	r2, #8
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f887 	bl	800551e <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f879 	bl	800550a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f88a 	bl	8005532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10e      	bne.n	8005450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b01      	cmp	r3, #1
 800543e:	d107      	bne.n	8005450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0201 	mvn.w	r2, #1
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc f90c 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f920 	bl	80056bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548a:	d10e      	bne.n	80054aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d107      	bne.n	80054aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f913 	bl	80056d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d10e      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d107      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f838 	bl	8005546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d10e      	bne.n	8005502 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d107      	bne.n	8005502 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f06f 0220 	mvn.w	r2, #32
 80054fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8d3 	bl	80056a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a44      	ldr	r2, [pc, #272]	; (8005680 <TIM_Base_SetConfig+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a41      	ldr	r2, [pc, #260]	; (8005684 <TIM_Base_SetConfig+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a40      	ldr	r2, [pc, #256]	; (8005688 <TIM_Base_SetConfig+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a3f      	ldr	r2, [pc, #252]	; (800568c <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3e      	ldr	r2, [pc, #248]	; (8005690 <TIM_Base_SetConfig+0x134>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a33      	ldr	r2, [pc, #204]	; (8005680 <TIM_Base_SetConfig+0x124>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d027      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d023      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a30      	ldr	r2, [pc, #192]	; (8005684 <TIM_Base_SetConfig+0x128>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01f      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <TIM_Base_SetConfig+0x12c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01b      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2e      	ldr	r2, [pc, #184]	; (800568c <TIM_Base_SetConfig+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d017      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <TIM_Base_SetConfig+0x134>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <TIM_Base_SetConfig+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <TIM_Base_SetConfig+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <TIM_Base_SetConfig+0x140>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <TIM_Base_SetConfig+0x144>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0xaa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <TIM_Base_SetConfig+0x148>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a10      	ldr	r2, [pc, #64]	; (8005680 <TIM_Base_SetConfig+0x124>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00f      	beq.n	8005664 <TIM_Base_SetConfig+0x108>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a12      	ldr	r2, [pc, #72]	; (8005690 <TIM_Base_SetConfig+0x134>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0x108>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <TIM_Base_SetConfig+0x138>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0x108>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <TIM_Base_SetConfig+0x13c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0x108>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0f      	ldr	r2, [pc, #60]	; (800569c <TIM_Base_SetConfig+0x140>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800
 80056a0:	4000e000 	.word	0x4000e000
 80056a4:	4000e400 	.word	0x4000e400

080056a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f103 0208 	add.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f103 0208 	add.w	r2, r3, #8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f103 0208 	add.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d103      	bne.n	80057a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e00c      	b.n	80057c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3308      	adds	r3, #8
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e002      	b.n	80057b4 <vListInsert+0x2e>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d2f6      	bcs.n	80057ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6852      	ldr	r2, [r2, #4]
 8005818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d103      	bne.n	800582c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005876:	f003 ffdd 	bl	8009834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	3b01      	subs	r3, #1
 80058a8:	68f9      	ldr	r1, [r7, #12]
 80058aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	441a      	add	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	22ff      	movs	r2, #255	; 0xff
 80058ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d114      	bne.n	80058f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3310      	adds	r3, #16
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 fe8f 	bl	80075fc <xTaskRemoveFromEventList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d012      	beq.n	800590a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <xQueueGenericReset+0xcc>)
 80058e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	e009      	b.n	800590a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3310      	adds	r3, #16
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fef2 	bl	80056e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff feed 	bl	80056e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800590a:	f003 ffc3 	bl	8009894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800590e:	2301      	movs	r3, #1
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08e      	sub	sp, #56	; 0x38
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800595e:	bf00      	nop
 8005960:	e7fe      	b.n	8005960 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <xQueueGenericCreateStatic+0x52>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <xQueueGenericCreateStatic+0x56>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <xQueueGenericCreateStatic+0x58>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	623b      	str	r3, [r7, #32]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <xQueueGenericCreateStatic+0x7e>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <xQueueGenericCreateStatic+0x82>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <xQueueGenericCreateStatic+0x84>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61fb      	str	r3, [r7, #28]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ba:	2350      	movs	r3, #80	; 0x50
 80059bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b50      	cmp	r3, #80	; 0x50
 80059c2:	d00a      	beq.n	80059da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	61bb      	str	r3, [r7, #24]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00d      	beq.n	8005a02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f83f 	bl	8005a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	; 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	613b      	str	r3, [r7, #16]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3350      	adds	r3, #80	; 0x50
 8005a44:	4618      	mov	r0, r3
 8005a46:	f003 fbdd 	bl	8009204 <pvPortMalloc>
 8005a4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d011      	beq.n	8005a76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	3350      	adds	r3, #80	; 0x50
 8005a5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a64:	79fa      	ldrb	r2, [r7, #7]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f805 	bl	8005a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a76:	69bb      	ldr	r3, [r7, #24]
	}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005aae:	2101      	movs	r1, #1
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f7ff fecb 	bl	800584c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f90b 	bl	8005d08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4603      	mov	r3, r0
 8005b02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6939      	ldr	r1, [r7, #16]
 8005b12:	6978      	ldr	r0, [r7, #20]
 8005b14:	f7ff ff7a 	bl	8005a0c <xQueueGenericCreate>
 8005b18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff ffd3 	bl	8005ac6 <prvInitialiseMutex>

		return xNewQueue;
 8005b20:	68fb      	ldr	r3, [r7, #12]
	}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b088      	sub	sp, #32
 8005b2e:	af02      	add	r7, sp, #8
 8005b30:	4603      	mov	r3, r0
 8005b32:	6039      	str	r1, [r7, #0]
 8005b34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b36:	2301      	movs	r3, #1
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2200      	movs	r2, #0
 8005b46:	6939      	ldr	r1, [r7, #16]
 8005b48:	6978      	ldr	r0, [r7, #20]
 8005b4a:	f7ff fee7 	bl	800591c <xQueueGenericCreateStatic>
 8005b4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ffb8 	bl	8005ac6 <prvInitialiseMutex>

		return xNewQueue;
 8005b56:	68fb      	ldr	r3, [r7, #12]
	}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689c      	ldr	r4, [r3, #8]
 8005b8c:	f001 ffc8 	bl	8007b20 <xTaskGetCurrentTaskHandle>
 8005b90:	4603      	mov	r3, r0
 8005b92:	429c      	cmp	r4, r3
 8005b94:	d111      	bne.n	8005bba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	1e5a      	subs	r2, r3, #1
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2200      	movs	r2, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	6938      	ldr	r0, [r7, #16]
 8005bb0:	f000 f8aa 	bl	8005d08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e001      	b.n	8005bbe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005bbe:	697b      	ldr	r3, [r7, #20]
	}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd90      	pop	{r4, r7, pc}

08005bc8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	60fb      	str	r3, [r7, #12]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	689c      	ldr	r4, [r3, #8]
 8005bf6:	f001 ff93 	bl	8007b20 <xTaskGetCurrentTaskHandle>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d107      	bne.n	8005c10 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e00c      	b.n	8005c2a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6938      	ldr	r0, [r7, #16]
 8005c14:	f000 fb7e 	bl	8006314 <xQueueSemaphoreTake>
 8005c18:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c2a:	697b      	ldr	r3, [r7, #20]
	}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd90      	pop	{r4, r7, pc}

08005c34 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	61bb      	str	r3, [r7, #24]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d90a      	bls.n	8005c7a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	617b      	str	r3, [r7, #20]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fe49 	bl	800591c <xQueueGenericCreateStatic>
 8005c8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c98:	69fb      	ldr	r3, [r7, #28]
	}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	613b      	str	r3, [r7, #16]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d90a      	bls.n	8005ce6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fe8e 	bl	8005a0c <xQueueGenericCreate>
 8005cf0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005cfe:	697b      	ldr	r3, [r7, #20]
	}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d16:	2300      	movs	r3, #0
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <xQueueGenericSend+0x32>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <xQueueGenericSend+0x40>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <xQueueGenericSend+0x44>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <xQueueGenericSend+0x46>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <xQueueGenericSend+0x60>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d103      	bne.n	8005d76 <xQueueGenericSend+0x6e>
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <xQueueGenericSend+0x72>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <xQueueGenericSend+0x74>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xQueueGenericSend+0x8e>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	623b      	str	r3, [r7, #32]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d96:	f001 fed3 	bl	8007b40 <xTaskGetSchedulerState>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <xQueueGenericSend+0x9e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <xQueueGenericSend+0xa2>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <xQueueGenericSend+0xa4>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61fb      	str	r3, [r7, #28]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dc6:	f003 fd35 	bl	8009834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <xQueueGenericSend+0xd4>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d129      	bne.n	8005e30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de2:	f000 fc9a 	bl	800671a <prvCopyDataToQueue>
 8005de6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d010      	beq.n	8005e12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fc01 	bl	80075fc <xTaskRemoveFromEventList>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <xQueueGenericSend+0x1f8>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	e00a      	b.n	8005e28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e18:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <xQueueGenericSend+0x1f8>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e28:	f003 fd34 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e063      	b.n	8005ef8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e36:	f003 fd2d 	bl	8009894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e05c      	b.n	8005ef8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fc3b 	bl	80076c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e52:	f003 fd1f 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e56:	f001 f90d 	bl	8007074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5a:	f003 fceb 	bl	8009834 <vPortEnterCritical>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d103      	bne.n	8005e74 <xQueueGenericSend+0x16c>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d103      	bne.n	8005e8a <xQueueGenericSend+0x182>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8a:	f003 fd03 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e8e:	1d3a      	adds	r2, r7, #4
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4611      	mov	r1, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fc2a 	bl	80076f0 <xTaskCheckForTimeOut>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d124      	bne.n	8005eec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea4:	f000 fd31 	bl	800690a <prvIsQueueFull>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d018      	beq.n	8005ee0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fb50 	bl	800755c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ebe:	f000 fcbc 	bl	800683a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ec2:	f001 f8e5 	bl	8007090 <xTaskResumeAll>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f47f af7c 	bne.w	8005dc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <xQueueGenericSend+0x1f8>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	e772      	b.n	8005dc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee2:	f000 fcaa 	bl	800683a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ee6:	f001 f8d3 	bl	8007090 <xTaskResumeAll>
 8005eea:	e76c      	b.n	8005dc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eee:	f000 fca4 	bl	800683a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef2:	f001 f8cd 	bl	8007090 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3738      	adds	r7, #56	; 0x38
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b090      	sub	sp, #64	; 0x40
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <xQueueGenericSendFromISR+0x3c>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <xQueueGenericSendFromISR+0x40>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <xQueueGenericSendFromISR+0x42>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d103      	bne.n	8005f6e <xQueueGenericSendFromISR+0x6a>
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <xQueueGenericSendFromISR+0x6e>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericSendFromISR+0x70>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	623b      	str	r3, [r7, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8e:	f003 fd33 	bl	80099f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f92:	f3ef 8211 	mrs	r2, BASEPRI
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	61fa      	str	r2, [r7, #28]
 8005fa8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005faa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <xQueueGenericSendFromISR+0xbc>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d12f      	bne.n	8006020 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fd6:	f000 fba0 	bl	800671a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d112      	bne.n	800600a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	3324      	adds	r3, #36	; 0x24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fb03 	bl	80075fc <xTaskRemoveFromEventList>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00e      	beq.n	800601a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e007      	b.n	800601a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800600a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800600e:	3301      	adds	r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	b25a      	sxtb	r2, r3
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800601a:	2301      	movs	r3, #1
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800601e:	e001      	b.n	8006024 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006020:	2300      	movs	r3, #0
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800602e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006032:	4618      	mov	r0, r3
 8006034:	3740      	adds	r7, #64	; 0x40
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b08e      	sub	sp, #56	; 0x38
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	623b      	str	r3, [r7, #32]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <xQueueGiveFromISR+0x48>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	61fb      	str	r3, [r7, #28]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <xQueueGiveFromISR+0x58>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueGiveFromISR+0x5c>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGiveFromISR+0x5e>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61bb      	str	r3, [r7, #24]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060b2:	f003 fca1 	bl	80099f8 <vPortValidateInterruptPriority>
	__asm volatile
 80060b6:	f3ef 8211 	mrs	r2, BASEPRI
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	617a      	str	r2, [r7, #20]
 80060cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060de:	429a      	cmp	r2, r3
 80060e0:	d22b      	bcs.n	800613a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d112      	bne.n	8006124 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d016      	beq.n	8006134 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	3324      	adds	r3, #36	; 0x24
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fa76 	bl	80075fc <xTaskRemoveFromEventList>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e007      	b.n	8006134 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006128:	3301      	adds	r3, #1
 800612a:	b2db      	uxtb	r3, r3
 800612c:	b25a      	sxtb	r2, r3
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006134:	2301      	movs	r3, #1
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
 8006138:	e001      	b.n	800613e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f383 8811 	msr	BASEPRI, r3
}
 8006148:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800614c:	4618      	mov	r0, r3
 800614e:	3738      	adds	r7, #56	; 0x38
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	; 0x30
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006160:	2300      	movs	r3, #0
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <xQueueReceive+0x30>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	623b      	str	r3, [r7, #32]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <xQueueReceive+0x3e>
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <xQueueReceive+0x42>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <xQueueReceive+0x44>
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <xQueueReceive+0x5e>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	61fb      	str	r3, [r7, #28]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b2:	f001 fcc5 	bl	8007b40 <xTaskGetSchedulerState>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <xQueueReceive+0x6e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <xQueueReceive+0x72>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <xQueueReceive+0x74>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueReceive+0x8e>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	61bb      	str	r3, [r7, #24]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e2:	f003 fb27 	bl	8009834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01f      	beq.n	8006232 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 fafa 	bl	80067ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	3310      	adds	r3, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f9f4 	bl	80075fc <xTaskRemoveFromEventList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800621a:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <xQueueReceive+0x1bc>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800622a:	f003 fb33 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 800622e:	2301      	movs	r3, #1
 8006230:	e069      	b.n	8006306 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006238:	f003 fb2c 	bl	8009894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800623c:	2300      	movs	r3, #0
 800623e:	e062      	b.n	8006306 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006246:	f107 0310 	add.w	r3, r7, #16
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fa3a 	bl	80076c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006254:	f003 fb1e 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006258:	f000 ff0c 	bl	8007074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625c:	f003 faea 	bl	8009834 <vPortEnterCritical>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006266:	b25b      	sxtb	r3, r3
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d103      	bne.n	8006276 <xQueueReceive+0x122>
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627c:	b25b      	sxtb	r3, r3
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d103      	bne.n	800628c <xQueueReceive+0x138>
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628c:	f003 fb02 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006290:	1d3a      	adds	r2, r7, #4
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f001 fa29 	bl	80076f0 <xTaskCheckForTimeOut>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d123      	bne.n	80062ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a6:	f000 fb1a 	bl	80068de <prvIsQueueEmpty>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f94f 	bl	800755c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c0:	f000 fabb 	bl	800683a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c4:	f000 fee4 	bl	8007090 <xTaskResumeAll>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d189      	bne.n	80061e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062ce:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xQueueReceive+0x1bc>)
 80062d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	e780      	b.n	80061e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e2:	f000 faaa 	bl	800683a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e6:	f000 fed3 	bl	8007090 <xTaskResumeAll>
 80062ea:	e77a      	b.n	80061e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	f000 faa4 	bl	800683a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f2:	f000 fecd 	bl	8007090 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f8:	f000 faf1 	bl	80068de <prvIsQueueEmpty>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f43f af6f 	beq.w	80061e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006306:	4618      	mov	r0, r3
 8006308:	3730      	adds	r7, #48	; 0x30
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	; 0x38
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	623b      	str	r3, [r7, #32]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	61fb      	str	r3, [r7, #28]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006364:	f001 fbec 	bl	8007b40 <xTaskGetSchedulerState>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <xQueueSemaphoreTake+0x60>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <xQueueSemaphoreTake+0x64>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <xQueueSemaphoreTake+0x66>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	61bb      	str	r3, [r7, #24]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006394:	f003 fa4e 	bl	8009834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d024      	beq.n	80063ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	1e5a      	subs	r2, r3, #1
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063b4:	f001 fdf6 	bl	8007fa4 <pvTaskIncrementMutexHeldCount>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00f      	beq.n	80063e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	3310      	adds	r3, #16
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f916 	bl	80075fc <xTaskRemoveFromEventList>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063d6:	4b54      	ldr	r3, [pc, #336]	; (8006528 <xQueueSemaphoreTake+0x214>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063e6:	f003 fa55 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e097      	b.n	800651e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d111      	bne.n	8006418 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	617b      	str	r3, [r7, #20]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006410:	f003 fa40 	bl	8009894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006414:	2300      	movs	r3, #0
 8006416:	e082      	b.n	800651e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800641e:	f107 030c 	add.w	r3, r7, #12
 8006422:	4618      	mov	r0, r3
 8006424:	f001 f94e 	bl	80076c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006428:	2301      	movs	r3, #1
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800642c:	f003 fa32 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006430:	f000 fe20 	bl	8007074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006434:	f003 f9fe 	bl	8009834 <vPortEnterCritical>
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643e:	b25b      	sxtb	r3, r3
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d103      	bne.n	800644e <xQueueSemaphoreTake+0x13a>
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006454:	b25b      	sxtb	r3, r3
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d103      	bne.n	8006464 <xQueueSemaphoreTake+0x150>
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006464:	f003 fa16 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006468:	463a      	mov	r2, r7
 800646a:	f107 030c 	add.w	r3, r7, #12
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f93d 	bl	80076f0 <xTaskCheckForTimeOut>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d132      	bne.n	80064e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800647c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800647e:	f000 fa2e 	bl	80068de <prvIsQueueEmpty>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d026      	beq.n	80064d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006490:	f003 f9d0 	bl	8009834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fb6f 	bl	8007b7c <xTaskPriorityInherit>
 800649e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064a0:	f003 f9f8 	bl	8009894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f855 	bl	800755c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b4:	f000 f9c1 	bl	800683a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b8:	f000 fdea 	bl	8007090 <xTaskResumeAll>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f47f af68 	bne.w	8006394 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064c4:	4b18      	ldr	r3, [pc, #96]	; (8006528 <xQueueSemaphoreTake+0x214>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	e75e      	b.n	8006394 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d8:	f000 f9af 	bl	800683a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064dc:	f000 fdd8 	bl	8007090 <xTaskResumeAll>
 80064e0:	e758      	b.n	8006394 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e4:	f000 f9a9 	bl	800683a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e8:	f000 fdd2 	bl	8007090 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ee:	f000 f9f6 	bl	80068de <prvIsQueueEmpty>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f43f af4d 	beq.w	8006394 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00d      	beq.n	800651c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006500:	f003 f998 	bl	8009834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006506:	f000 f8f0 	bl	80066ea <prvGetDisinheritPriorityAfterTimeout>
 800650a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fc08 	bl	8007d28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006518:	f003 f9bc 	bl	8009894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800651c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800651e:	4618      	mov	r0, r3
 8006520:	3738      	adds	r7, #56	; 0x38
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08e      	sub	sp, #56	; 0x38
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	623b      	str	r3, [r7, #32]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <xQueueReceiveFromISR+0x3a>
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <xQueueReceiveFromISR+0x3e>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <xQueueReceiveFromISR+0x40>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	61fb      	str	r3, [r7, #28]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006586:	f003 fa37 	bl	80099f8 <vPortValidateInterruptPriority>
	__asm volatile
 800658a:	f3ef 8211 	mrs	r2, BASEPRI
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	61ba      	str	r2, [r7, #24]
 80065a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02f      	beq.n	8006612 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c0:	f000 f915 	bl	80067ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	1e5a      	subs	r2, r3, #1
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d112      	bne.n	80065fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	3310      	adds	r3, #16
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 f80a 	bl	80075fc <xTaskRemoveFromEventList>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	e007      	b.n	800660c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006600:	3301      	adds	r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	b25a      	sxtb	r2, r3
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800660c:	2301      	movs	r3, #1
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
 8006610:	e001      	b.n	8006616 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006612:	2300      	movs	r3, #0
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	613b      	str	r3, [r7, #16]
	__asm volatile
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f383 8811 	msr	BASEPRI, r3
}
 8006620:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006624:	4618      	mov	r0, r3
 8006626:	3738      	adds	r7, #56	; 0x38
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60bb      	str	r3, [r7, #8]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006650:	f003 f8f0 	bl	8009834 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800665a:	f003 f91b 	bl	8009894 <vPortExitCritical>

	return uxReturn;
 800665e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	60fb      	str	r3, [r7, #12]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006696:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006698:	4618      	mov	r0, r3
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <vQueueDelete+0x28>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60bb      	str	r3, [r7, #8]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f95f 	bl	8006990 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f002 fe5d 	bl	800939c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d006      	beq.n	8006708 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e001      	b.n	800670c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800670c:	68fb      	ldr	r3, [r7, #12]
	}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b086      	sub	sp, #24
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10d      	bne.n	8006754 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d14d      	bne.n	80067dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fa81 	bl	8007c4c <xTaskPriorityDisinherit>
 800674a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	609a      	str	r2, [r3, #8]
 8006752:	e043      	b.n	80067dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d119      	bne.n	800678e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6858      	ldr	r0, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	461a      	mov	r2, r3
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	f014 f9ed 	bl	801ab44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	441a      	add	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	d32b      	bcc.n	80067dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	e026      	b.n	80067dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68d8      	ldr	r0, [r3, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	461a      	mov	r2, r3
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	f014 f9d3 	bl	801ab44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	425b      	negs	r3, r3
 80067a8:	441a      	add	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d207      	bcs.n	80067ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	425b      	negs	r3, r3
 80067c4:	441a      	add	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d105      	bne.n	80067dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	3b01      	subs	r3, #1
 80067da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067e4:	697b      	ldr	r3, [r7, #20]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d018      	beq.n	8006832 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	441a      	add	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	429a      	cmp	r2, r3
 8006818:	d303      	bcc.n	8006822 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68d9      	ldr	r1, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	461a      	mov	r2, r3
 800682c:	6838      	ldr	r0, [r7, #0]
 800682e:	f014 f989 	bl	801ab44 <memcpy>
	}
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006842:	f002 fff7 	bl	8009834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800684c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800684e:	e011      	b.n	8006874 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d012      	beq.n	800687e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3324      	adds	r3, #36	; 0x24
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fecd 	bl	80075fc <xTaskRemoveFromEventList>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006868:	f000 ffa4 	bl	80077b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	3b01      	subs	r3, #1
 8006870:	b2db      	uxtb	r3, r3
 8006872:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dce9      	bgt.n	8006850 <prvUnlockQueue+0x16>
 800687c:	e000      	b.n	8006880 <prvUnlockQueue+0x46>
					break;
 800687e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	22ff      	movs	r2, #255	; 0xff
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006888:	f003 f804 	bl	8009894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800688c:	f002 ffd2 	bl	8009834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006896:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006898:	e011      	b.n	80068be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d012      	beq.n	80068c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3310      	adds	r3, #16
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fea8 	bl	80075fc <xTaskRemoveFromEventList>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068b2:	f000 ff7f 	bl	80077b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dce9      	bgt.n	800689a <prvUnlockQueue+0x60>
 80068c6:	e000      	b.n	80068ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068d2:	f002 ffdf 	bl	8009894 <vPortExitCritical>
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068e6:	f002 ffa5 	bl	8009834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068f2:	2301      	movs	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e001      	b.n	80068fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068fc:	f002 ffca 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8006900:	68fb      	ldr	r3, [r7, #12]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006912:	f002 ff8f 	bl	8009834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	429a      	cmp	r2, r3
 8006920:	d102      	bne.n	8006928 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	e001      	b.n	800692c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800692c:	f002 ffb2 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8006930:	68fb      	ldr	r3, [r7, #12]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	e014      	b.n	8006976 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800694c:	4a0f      	ldr	r2, [pc, #60]	; (800698c <vQueueAddToRegistry+0x50>)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006958:	490c      	ldr	r1, [pc, #48]	; (800698c <vQueueAddToRegistry+0x50>)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006962:	4a0a      	ldr	r2, [pc, #40]	; (800698c <vQueueAddToRegistry+0x50>)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800696e:	e006      	b.n	800697e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b07      	cmp	r3, #7
 800697a:	d9e7      	bls.n	800694c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20008830 	.word	0x20008830

08006990 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e016      	b.n	80069cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800699e:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <vQueueUnregisterQueue+0x50>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4413      	add	r3, r2
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d10b      	bne.n	80069c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069ae:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <vQueueUnregisterQueue+0x50>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2100      	movs	r1, #0
 80069b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069b8:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <vQueueUnregisterQueue+0x50>)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4413      	add	r3, r2
 80069c0:	2200      	movs	r2, #0
 80069c2:	605a      	str	r2, [r3, #4]
				break;
 80069c4:	e006      	b.n	80069d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	d9e5      	bls.n	800699e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20008830 	.word	0x20008830

080069e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069f4:	f002 ff1e 	bl	8009834 <vPortEnterCritical>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d103      	bne.n	8006a0e <vQueueWaitForMessageRestricted+0x2a>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d103      	bne.n	8006a24 <vQueueWaitForMessageRestricted+0x40>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a24:	f002 ff36 	bl	8009894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	3324      	adds	r3, #36	; 0x24
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fdb3 	bl	80075a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f7ff fefb 	bl	800683a <prvUnlockQueue>
	}
 8006a44:	bf00      	nop
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	623b      	str	r3, [r7, #32]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61fb      	str	r3, [r7, #28]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a92:	235c      	movs	r3, #92	; 0x5c
 8006a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b5c      	cmp	r3, #92	; 0x5c
 8006a9a:	d00a      	beq.n	8006ab2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	61bb      	str	r3, [r7, #24]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ab2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01e      	beq.n	8006af8 <xTaskCreateStatic+0xac>
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	9302      	str	r3, [sp, #8]
 8006ada:	f107 0314 	add.w	r3, r7, #20
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f850 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006af2:	f000 f8dd 	bl	8006cb0 <prvAddNewTaskToReadyList>
 8006af6:	e001      	b.n	8006afc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006afc:	697b      	ldr	r3, [r7, #20]
	}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b08c      	sub	sp, #48	; 0x30
 8006b0a:	af04      	add	r7, sp, #16
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f002 fb72 	bl	8009204 <pvPortMalloc>
 8006b20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b28:	205c      	movs	r0, #92	; 0x5c
 8006b2a:	f002 fb6b 	bl	8009204 <pvPortMalloc>
 8006b2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b3c:	e005      	b.n	8006b4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f002 fc2c 	bl	800939c <vPortFree>
 8006b44:	e001      	b.n	8006b4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d017      	beq.n	8006b80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9303      	str	r3, [sp, #12]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	9302      	str	r3, [sp, #8]
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f80e 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b74:	69f8      	ldr	r0, [r7, #28]
 8006b76:	f000 f89b 	bl	8006cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e002      	b.n	8006b86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b86:	69bb      	ldr	r3, [r7, #24]
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	21a5      	movs	r1, #165	; 0xa5
 8006baa:	f013 fff3 	bl	801ab94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006bb8:	440b      	add	r3, r1
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	617b      	str	r3, [r7, #20]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01f      	beq.n	8006c2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	e012      	b.n	8006c1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	7819      	ldrb	r1, [r3, #0]
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	3334      	adds	r3, #52	; 0x34
 8006c04:	460a      	mov	r2, r1
 8006c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b0f      	cmp	r3, #15
 8006c1e:	d9e9      	bls.n	8006bf4 <prvInitialiseNewTask+0x64>
 8006c20:	e000      	b.n	8006c24 <prvInitialiseNewTask+0x94>
			{
				break;
 8006c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c2c:	e003      	b.n	8006c36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	2b37      	cmp	r3, #55	; 0x37
 8006c3a:	d901      	bls.n	8006c40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c3c:	2337      	movs	r3, #55	; 0x37
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	2200      	movs	r2, #0
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fd64 	bl	8005724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	3318      	adds	r3, #24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fd5f 	bl	8005724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2200      	movs	r2, #0
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	69b8      	ldr	r0, [r7, #24]
 8006c90:	f002 fca2 	bl	80095d8 <pxPortInitialiseStack>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cb8:	f002 fdbc 	bl	8009834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cce:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d110      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cdc:	f000 fd8e 	bl	80077fc <prvInitialiseTaskLists>
 8006ce0:	e00d      	b.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ce2:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d802      	bhi.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4b1b      	ldr	r3, [pc, #108]	; (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <prvAddNewTaskToReadyList+0x74>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a15      	ldr	r2, [pc, #84]	; (8006d88 <prvAddNewTaskToReadyList+0xd8>)
 8006d32:	441a      	add	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fcff 	bl	800573e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d40:	f002 fda8 	bl	8009894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d44:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00e      	beq.n	8006d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d207      	bcs.n	8006d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <prvAddNewTaskToReadyList+0xdc>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200005f8 	.word	0x200005f8
 8006d78:	20000124 	.word	0x20000124
 8006d7c:	20000604 	.word	0x20000604
 8006d80:	20000614 	.word	0x20000614
 8006d84:	20000600 	.word	0x20000600
 8006d88:	20000128 	.word	0x20000128
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006d98:	f002 fd4c 	bl	8009834 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <vTaskDelete+0x18>
 8006da2:	4b2c      	ldr	r3, [pc, #176]	; (8006e54 <vTaskDelete+0xc4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	e000      	b.n	8006daa <vTaskDelete+0x1a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe fd21 	bl	80057f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3318      	adds	r3, #24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fd18 	bl	80057f8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006dc8:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <vTaskDelete+0xc8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <vTaskDelete+0xc8>)
 8006dd0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006dd2:	4b20      	ldr	r3, [pc, #128]	; (8006e54 <vTaskDelete+0xc4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d10b      	bne.n	8006df4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	481e      	ldr	r0, [pc, #120]	; (8006e5c <vTaskDelete+0xcc>)
 8006de4:	f7fe fcab 	bl	800573e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <vTaskDelete+0xd0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <vTaskDelete+0xd0>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e009      	b.n	8006e08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <vTaskDelete+0xd4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <vTaskDelete+0xd4>)
 8006dfc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fe3e 	bl	8007a80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006e04:	f000 fe6c 	bl	8007ae0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006e08:	f002 fd44 	bl	8009894 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <vTaskDelete+0xd8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01b      	beq.n	8006e4c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <vTaskDelete+0xc4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d116      	bne.n	8006e4c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <vTaskDelete+0xdc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <vTaskDelete+0xac>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	60bb      	str	r3, [r7, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006e3c:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <vTaskDelete+0xe0>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000124 	.word	0x20000124
 8006e58:	20000614 	.word	0x20000614
 8006e5c:	200005cc 	.word	0x200005cc
 8006e60:	200005e0 	.word	0x200005e0
 8006e64:	200005f8 	.word	0x200005f8
 8006e68:	20000604 	.word	0x20000604
 8006e6c:	20000620 	.word	0x20000620
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <vTaskDelay+0x60>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <vTaskDelay+0x30>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ea4:	f000 f8e6 	bl	8007074 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f88e 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eb0:	f000 f8ee 	bl	8007090 <xTaskResumeAll>
 8006eb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d107      	bne.n	8006ecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <vTaskDelay+0x64>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000620 	.word	0x20000620
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <eTaskGetState+0x28>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60bb      	str	r3, [r7, #8]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006f04:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <eTaskGetState+0xb8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d102      	bne.n	8006f14 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e03a      	b.n	8006f8a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8006f14:	f002 fc8e 	bl	8009834 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <eTaskGetState+0xbc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006f24:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <eTaskGetState+0xc0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006f2a:	f002 fcb3 	bl	8009894 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d003      	beq.n	8006f3e <eTaskGetState+0x62>
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d102      	bne.n	8006f44 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	77fb      	strb	r3, [r7, #31]
 8006f42:	e022      	b.n	8006f8a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <eTaskGetState+0xc4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d112      	bne.n	8006f72 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d102      	bne.n	8006f66 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8006f60:	2302      	movs	r3, #2
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e011      	b.n	8006f8a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8006f66:	2303      	movs	r3, #3
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	e00e      	b.n	8006f8a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	77fb      	strb	r3, [r7, #31]
 8006f70:	e00b      	b.n	8006f8a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <eTaskGetState+0xc8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d002      	beq.n	8006f80 <eTaskGetState+0xa4>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006f80:	2304      	movs	r3, #4
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e001      	b.n	8006f8a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006f86:	2301      	movs	r3, #1
 8006f88:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006f8a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000124 	.word	0x20000124
 8006f98:	200005b0 	.word	0x200005b0
 8006f9c:	200005b4 	.word	0x200005b4
 8006fa0:	200005e4 	.word	0x200005e4
 8006fa4:	200005cc 	.word	0x200005cc

08006fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08a      	sub	sp, #40	; 0x28
 8006fac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	1d39      	adds	r1, r7, #4
 8006fba:	f107 0308 	add.w	r3, r7, #8
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 f8ec 	bl	800919c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	9202      	str	r2, [sp, #8]
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	460a      	mov	r2, r1
 8006fd6:	4921      	ldr	r1, [pc, #132]	; (800705c <vTaskStartScheduler+0xb4>)
 8006fd8:	4821      	ldr	r0, [pc, #132]	; (8007060 <vTaskStartScheduler+0xb8>)
 8006fda:	f7ff fd37 	bl	8006a4c <xTaskCreateStatic>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4a20      	ldr	r2, [pc, #128]	; (8007064 <vTaskStartScheduler+0xbc>)
 8006fe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <vTaskStartScheduler+0xbc>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fec:	2301      	movs	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e001      	b.n	8006ff6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d102      	bne.n	8007002 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ffc:	f001 f83a 	bl	8008074 <xTimerCreateTimerTask>
 8007000:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d116      	bne.n	8007036 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	613b      	str	r3, [r7, #16]
}
 800701a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800701c:	4b12      	ldr	r3, [pc, #72]	; (8007068 <vTaskStartScheduler+0xc0>)
 800701e:	f04f 32ff 	mov.w	r2, #4294967295
 8007022:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <vTaskStartScheduler+0xc4>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800702a:	4b11      	ldr	r3, [pc, #68]	; (8007070 <vTaskStartScheduler+0xc8>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007030:	f002 fb5e 	bl	80096f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007034:	e00e      	b.n	8007054 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d10a      	bne.n	8007054 <vTaskStartScheduler+0xac>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60fb      	str	r3, [r7, #12]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <vTaskStartScheduler+0xaa>
}
 8007054:	bf00      	nop
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	0801c280 	.word	0x0801c280
 8007060:	080077cd 	.word	0x080077cd
 8007064:	2000061c 	.word	0x2000061c
 8007068:	20000618 	.word	0x20000618
 800706c:	20000604 	.word	0x20000604
 8007070:	200005fc 	.word	0x200005fc

08007074 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007078:	4b04      	ldr	r3, [pc, #16]	; (800708c <vTaskSuspendAll+0x18>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	4a03      	ldr	r2, [pc, #12]	; (800708c <vTaskSuspendAll+0x18>)
 8007080:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007082:	bf00      	nop
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20000620 	.word	0x20000620

08007090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800709e:	4b42      	ldr	r3, [pc, #264]	; (80071a8 <xTaskResumeAll+0x118>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <xTaskResumeAll+0x2c>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	603b      	str	r3, [r7, #0]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070bc:	f002 fbba 	bl	8009834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070c0:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <xTaskResumeAll+0x118>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <xTaskResumeAll+0x118>)
 80070c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ca:	4b37      	ldr	r3, [pc, #220]	; (80071a8 <xTaskResumeAll+0x118>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d162      	bne.n	8007198 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070d2:	4b36      	ldr	r3, [pc, #216]	; (80071ac <xTaskResumeAll+0x11c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d05e      	beq.n	8007198 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070da:	e02f      	b.n	800713c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070dc:	4b34      	ldr	r3, [pc, #208]	; (80071b0 <xTaskResumeAll+0x120>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3318      	adds	r3, #24
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fb85 	bl	80057f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fb80 	bl	80057f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <xTaskResumeAll+0x124>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d903      	bls.n	800710c <xTaskResumeAll+0x7c>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <xTaskResumeAll+0x124>)
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4a27      	ldr	r2, [pc, #156]	; (80071b8 <xTaskResumeAll+0x128>)
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe fb0b 	bl	800573e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b23      	ldr	r3, [pc, #140]	; (80071bc <xTaskResumeAll+0x12c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007136:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <xTaskResumeAll+0x130>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800713c:	4b1c      	ldr	r3, [pc, #112]	; (80071b0 <xTaskResumeAll+0x120>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1cb      	bne.n	80070dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800714a:	f000 fcc9 	bl	8007ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800714e:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <xTaskResumeAll+0x134>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d010      	beq.n	800717c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800715a:	f000 f8e7 	bl	800732c <xTaskIncrementTick>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007164:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <xTaskResumeAll+0x130>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3b01      	subs	r3, #1
 800716e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f1      	bne.n	800715a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <xTaskResumeAll+0x134>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800717c:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <xTaskResumeAll+0x130>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <xTaskResumeAll+0x138>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007198:	f002 fb7c 	bl	8009894 <vPortExitCritical>

	return xAlreadyYielded;
 800719c:	68bb      	ldr	r3, [r7, #8]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000620 	.word	0x20000620
 80071ac:	200005f8 	.word	0x200005f8
 80071b0:	200005b8 	.word	0x200005b8
 80071b4:	20000600 	.word	0x20000600
 80071b8:	20000128 	.word	0x20000128
 80071bc:	20000124 	.word	0x20000124
 80071c0:	2000060c 	.word	0x2000060c
 80071c4:	20000608 	.word	0x20000608
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <xTaskGetTickCount+0x1c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071d8:	687b      	ldr	r3, [r7, #4]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	200005fc 	.word	0x200005fc

080071ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f2:	f002 fc01 	bl	80099f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071f6:	2300      	movs	r3, #0
 80071f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071fa:	4b04      	ldr	r3, [pc, #16]	; (800720c <xTaskGetTickCountFromISR+0x20>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007200:	683b      	ldr	r3, [r7, #0]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200005fc 	.word	0x200005fc

08007210 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	2338      	movs	r3, #56	; 0x38
 8007222:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8007224:	f7ff ff26 	bl	8007074 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8007228:	4b3a      	ldr	r3, [pc, #232]	; (8007314 <uxTaskGetSystemState+0x104>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d368      	bcc.n	8007304 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	3b01      	subs	r3, #1
 8007236:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	461a      	mov	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1898      	adds	r0, r3, r2
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4a31      	ldr	r2, [pc, #196]	; (8007318 <uxTaskGetSystemState+0x108>)
 8007254:	4413      	add	r3, r2
 8007256:	2201      	movs	r2, #1
 8007258:	4619      	mov	r1, r3
 800725a:	f000 fba3 	bl	80079a4 <prvListTasksWithinSingleList>
 800725e:	4602      	mov	r2, r0
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e2      	bne.n	8007232 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4613      	mov	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	461a      	mov	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	4a27      	ldr	r2, [pc, #156]	; (800731c <uxTaskGetSystemState+0x10c>)
 800727e:	6811      	ldr	r1, [r2, #0]
 8007280:	2202      	movs	r2, #2
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fb8e 	bl	80079a4 <prvListTasksWithinSingleList>
 8007288:	4602      	mov	r2, r0
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	461a      	mov	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	4a1f      	ldr	r2, [pc, #124]	; (8007320 <uxTaskGetSystemState+0x110>)
 80072a2:	6811      	ldr	r1, [r2, #0]
 80072a4:	2202      	movs	r2, #2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fb7c 	bl	80079a4 <prvListTasksWithinSingleList>
 80072ac:	4602      	mov	r2, r0
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4613      	mov	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	461a      	mov	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	2204      	movs	r2, #4
 80072c6:	4917      	ldr	r1, [pc, #92]	; (8007324 <uxTaskGetSystemState+0x114>)
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fb6b 	bl	80079a4 <prvListTasksWithinSingleList>
 80072ce:	4602      	mov	r2, r0
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	461a      	mov	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	2203      	movs	r2, #3
 80072e8:	490f      	ldr	r1, [pc, #60]	; (8007328 <uxTaskGetSystemState+0x118>)
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fb5a 	bl	80079a4 <prvListTasksWithinSingleList>
 80072f0:	4602      	mov	r2, r0
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8007304:	f7ff fec4 	bl	8007090 <xTaskResumeAll>

		return uxTask;
 8007308:	697b      	ldr	r3, [r7, #20]
	}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	200005f8 	.word	0x200005f8
 8007318:	20000128 	.word	0x20000128
 800731c:	200005b0 	.word	0x200005b0
 8007320:	200005b4 	.word	0x200005b4
 8007324:	200005cc 	.word	0x200005cc
 8007328:	200005e4 	.word	0x200005e4

0800732c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007336:	4b4f      	ldr	r3, [pc, #316]	; (8007474 <xTaskIncrementTick+0x148>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f040 808f 	bne.w	800745e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007340:	4b4d      	ldr	r3, [pc, #308]	; (8007478 <xTaskIncrementTick+0x14c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007348:	4a4b      	ldr	r2, [pc, #300]	; (8007478 <xTaskIncrementTick+0x14c>)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d120      	bne.n	8007396 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007354:	4b49      	ldr	r3, [pc, #292]	; (800747c <xTaskIncrementTick+0x150>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <xTaskIncrementTick+0x48>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	603b      	str	r3, [r7, #0]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xTaskIncrementTick+0x46>
 8007374:	4b41      	ldr	r3, [pc, #260]	; (800747c <xTaskIncrementTick+0x150>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	4b41      	ldr	r3, [pc, #260]	; (8007480 <xTaskIncrementTick+0x154>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a3f      	ldr	r2, [pc, #252]	; (800747c <xTaskIncrementTick+0x150>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	4a3f      	ldr	r2, [pc, #252]	; (8007480 <xTaskIncrementTick+0x154>)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4b3e      	ldr	r3, [pc, #248]	; (8007484 <xTaskIncrementTick+0x158>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	4a3d      	ldr	r2, [pc, #244]	; (8007484 <xTaskIncrementTick+0x158>)
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	f000 fba5 	bl	8007ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007396:	4b3c      	ldr	r3, [pc, #240]	; (8007488 <xTaskIncrementTick+0x15c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	429a      	cmp	r2, r3
 800739e:	d349      	bcc.n	8007434 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a0:	4b36      	ldr	r3, [pc, #216]	; (800747c <xTaskIncrementTick+0x150>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073aa:	4b37      	ldr	r3, [pc, #220]	; (8007488 <xTaskIncrementTick+0x15c>)
 80073ac:	f04f 32ff 	mov.w	r2, #4294967295
 80073b0:	601a      	str	r2, [r3, #0]
					break;
 80073b2:	e03f      	b.n	8007434 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b4:	4b31      	ldr	r3, [pc, #196]	; (800747c <xTaskIncrementTick+0x150>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d203      	bcs.n	80073d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073cc:	4a2e      	ldr	r2, [pc, #184]	; (8007488 <xTaskIncrementTick+0x15c>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073d2:	e02f      	b.n	8007434 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fa0d 	bl	80057f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3318      	adds	r3, #24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fa04 	bl	80057f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	4b25      	ldr	r3, [pc, #148]	; (800748c <xTaskIncrementTick+0x160>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d903      	bls.n	8007404 <xTaskIncrementTick+0xd8>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4a22      	ldr	r2, [pc, #136]	; (800748c <xTaskIncrementTick+0x160>)
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4a1f      	ldr	r2, [pc, #124]	; (8007490 <xTaskIncrementTick+0x164>)
 8007412:	441a      	add	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe f98f 	bl	800573e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <xTaskIncrementTick+0x168>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	429a      	cmp	r2, r3
 800742c:	d3b8      	bcc.n	80073a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007432:	e7b5      	b.n	80073a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007434:	4b17      	ldr	r3, [pc, #92]	; (8007494 <xTaskIncrementTick+0x168>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	4915      	ldr	r1, [pc, #84]	; (8007490 <xTaskIncrementTick+0x164>)
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d901      	bls.n	8007450 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007450:	4b11      	ldr	r3, [pc, #68]	; (8007498 <xTaskIncrementTick+0x16c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d007      	beq.n	8007468 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e004      	b.n	8007468 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <xTaskIncrementTick+0x170>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	4a0d      	ldr	r2, [pc, #52]	; (800749c <xTaskIncrementTick+0x170>)
 8007466:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007468:	697b      	ldr	r3, [r7, #20]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000620 	.word	0x20000620
 8007478:	200005fc 	.word	0x200005fc
 800747c:	200005b0 	.word	0x200005b0
 8007480:	200005b4 	.word	0x200005b4
 8007484:	20000610 	.word	0x20000610
 8007488:	20000618 	.word	0x20000618
 800748c:	20000600 	.word	0x20000600
 8007490:	20000128 	.word	0x20000128
 8007494:	20000124 	.word	0x20000124
 8007498:	2000060c 	.word	0x2000060c
 800749c:	20000608 	.word	0x20000608

080074a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074a6:	4b28      	ldr	r3, [pc, #160]	; (8007548 <vTaskSwitchContext+0xa8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074ae:	4b27      	ldr	r3, [pc, #156]	; (800754c <vTaskSwitchContext+0xac>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074b4:	e041      	b.n	800753a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80074b6:	4b25      	ldr	r3, [pc, #148]	; (800754c <vTaskSwitchContext+0xac>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074bc:	4b24      	ldr	r3, [pc, #144]	; (8007550 <vTaskSwitchContext+0xb0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e010      	b.n	80074e6 <vTaskSwitchContext+0x46>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	607b      	str	r3, [r7, #4]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <vTaskSwitchContext+0x3e>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	491b      	ldr	r1, [pc, #108]	; (8007554 <vTaskSwitchContext+0xb4>)
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0e4      	beq.n	80074c4 <vTaskSwitchContext+0x24>
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4a13      	ldr	r2, [pc, #76]	; (8007554 <vTaskSwitchContext+0xb4>)
 8007506:	4413      	add	r3, r2
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	3308      	adds	r3, #8
 800751c:	429a      	cmp	r2, r3
 800751e:	d104      	bne.n	800752a <vTaskSwitchContext+0x8a>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	4a09      	ldr	r2, [pc, #36]	; (8007558 <vTaskSwitchContext+0xb8>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4a06      	ldr	r2, [pc, #24]	; (8007550 <vTaskSwitchContext+0xb0>)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6013      	str	r3, [r2, #0]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20000620 	.word	0x20000620
 800754c:	2000060c 	.word	0x2000060c
 8007550:	20000600 	.word	0x20000600
 8007554:	20000128 	.word	0x20000128
 8007558:	20000124 	.word	0x20000124

0800755c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60fb      	str	r3, [r7, #12]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <vTaskPlaceOnEventList+0x44>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3318      	adds	r3, #24
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe f8fb 	bl	8005786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007590:	2101      	movs	r1, #1
 8007592:	6838      	ldr	r0, [r7, #0]
 8007594:	f000 fd1a 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000124 	.word	0x20000124

080075a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	617b      	str	r3, [r7, #20]
}
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3318      	adds	r3, #24
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7fe f8b2 	bl	800573e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295
 80075e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f000 fcef 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
	}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000124 	.word	0x20000124

080075fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	60fb      	str	r3, [r7, #12]
}
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	3318      	adds	r3, #24
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe f8e3 	bl	80057f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007632:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <xTaskRemoveFromEventList+0xb0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d11d      	bne.n	8007676 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe f8da 	bl	80057f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <xTaskRemoveFromEventList+0xb4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d903      	bls.n	8007658 <xTaskRemoveFromEventList+0x5c>
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <xTaskRemoveFromEventList+0xb4>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a13      	ldr	r2, [pc, #76]	; (80076b4 <xTaskRemoveFromEventList+0xb8>)
 8007666:	441a      	add	r2, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fe f865 	bl	800573e <vListInsertEnd>
 8007674:	e005      	b.n	8007682 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3318      	adds	r3, #24
 800767a:	4619      	mov	r1, r3
 800767c:	480e      	ldr	r0, [pc, #56]	; (80076b8 <xTaskRemoveFromEventList+0xbc>)
 800767e:	f7fe f85e 	bl	800573e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <xTaskRemoveFromEventList+0xc0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	429a      	cmp	r2, r3
 800768e:	d905      	bls.n	800769c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <xTaskRemoveFromEventList+0xc4>)
 8007696:	2201      	movs	r2, #1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e001      	b.n	80076a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076a0:	697b      	ldr	r3, [r7, #20]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000620 	.word	0x20000620
 80076b0:	20000600 	.word	0x20000600
 80076b4:	20000128 	.word	0x20000128
 80076b8:	200005b8 	.word	0x200005b8
 80076bc:	20000124 	.word	0x20000124
 80076c0:	2000060c 	.word	0x2000060c

080076c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <vTaskInternalSetTimeOutState+0x24>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <vTaskInternalSetTimeOutState+0x28>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	20000610 	.word	0x20000610
 80076ec:	200005fc 	.word	0x200005fc

080076f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007732:	f002 f87f 	bl	8009834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <xTaskCheckForTimeOut+0xbc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d102      	bne.n	8007756 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e023      	b.n	800779e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <xTaskCheckForTimeOut+0xc0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d007      	beq.n	8007772 <xTaskCheckForTimeOut+0x82>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	429a      	cmp	r2, r3
 800776a:	d302      	bcc.n	8007772 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e015      	b.n	800779e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	d20b      	bcs.n	8007794 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff9b 	bl	80076c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e004      	b.n	800779e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f002 f879 	bl	8009894 <vPortExitCritical>

	return xReturn;
 80077a2:	69fb      	ldr	r3, [r7, #28]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200005fc 	.word	0x200005fc
 80077b0:	20000610 	.word	0x20000610

080077b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077b8:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <vTaskMissedYield+0x14>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	2000060c 	.word	0x2000060c

080077cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077d4:	f000 f852 	bl	800787c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <prvIdleTask+0x28>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d9f9      	bls.n	80077d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <prvIdleTask+0x2c>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077f0:	e7f0      	b.n	80077d4 <prvIdleTask+0x8>
 80077f2:	bf00      	nop
 80077f4:	20000128 	.word	0x20000128
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	e00c      	b.n	8007822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4a12      	ldr	r2, [pc, #72]	; (800785c <prvInitialiseTaskLists+0x60>)
 8007814:	4413      	add	r3, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd ff64 	bl	80056e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3301      	adds	r3, #1
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b37      	cmp	r3, #55	; 0x37
 8007826:	d9ef      	bls.n	8007808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007828:	480d      	ldr	r0, [pc, #52]	; (8007860 <prvInitialiseTaskLists+0x64>)
 800782a:	f7fd ff5b 	bl	80056e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800782e:	480d      	ldr	r0, [pc, #52]	; (8007864 <prvInitialiseTaskLists+0x68>)
 8007830:	f7fd ff58 	bl	80056e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007834:	480c      	ldr	r0, [pc, #48]	; (8007868 <prvInitialiseTaskLists+0x6c>)
 8007836:	f7fd ff55 	bl	80056e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800783a:	480c      	ldr	r0, [pc, #48]	; (800786c <prvInitialiseTaskLists+0x70>)
 800783c:	f7fd ff52 	bl	80056e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007840:	480b      	ldr	r0, [pc, #44]	; (8007870 <prvInitialiseTaskLists+0x74>)
 8007842:	f7fd ff4f 	bl	80056e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007846:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <prvInitialiseTaskLists+0x78>)
 8007848:	4a05      	ldr	r2, [pc, #20]	; (8007860 <prvInitialiseTaskLists+0x64>)
 800784a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <prvInitialiseTaskLists+0x7c>)
 800784e:	4a05      	ldr	r2, [pc, #20]	; (8007864 <prvInitialiseTaskLists+0x68>)
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000128 	.word	0x20000128
 8007860:	20000588 	.word	0x20000588
 8007864:	2000059c 	.word	0x2000059c
 8007868:	200005b8 	.word	0x200005b8
 800786c:	200005cc 	.word	0x200005cc
 8007870:	200005e4 	.word	0x200005e4
 8007874:	200005b0 	.word	0x200005b0
 8007878:	200005b4 	.word	0x200005b4

0800787c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007882:	e019      	b.n	80078b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007884:	f001 ffd6 	bl	8009834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007888:	4b10      	ldr	r3, [pc, #64]	; (80078cc <prvCheckTasksWaitingTermination+0x50>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fd ffaf 	bl	80057f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800789a:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <prvCheckTasksWaitingTermination+0x54>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3b01      	subs	r3, #1
 80078a0:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <prvCheckTasksWaitingTermination+0x54>)
 80078a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	4a0a      	ldr	r2, [pc, #40]	; (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078ae:	f001 fff1 	bl	8009894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f8e4 	bl	8007a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e1      	bne.n	8007884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	200005cc 	.word	0x200005cc
 80078d0:	200005f8 	.word	0x200005f8
 80078d4:	200005e0 	.word	0x200005e0

080078d8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <vTaskGetInfo+0x1a>
 80078ec:	4b2c      	ldr	r3, [pc, #176]	; (80079a0 <vTaskGetInfo+0xc8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	e000      	b.n	80078f4 <vTaskGetInfo+0x1c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2200      	movs	r2, #0
 800792a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	2b05      	cmp	r3, #5
 8007930:	d01a      	beq.n	8007968 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8007932:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <vTaskGetInfo+0xc8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	429a      	cmp	r2, r3
 800793a:	d103      	bne.n	8007944 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	731a      	strb	r2, [r3, #12]
 8007942:	e018      	b.n	8007976 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	2b03      	cmp	r3, #3
 800794e:	d112      	bne.n	8007976 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8007950:	f7ff fb90 	bl	8007074 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2202      	movs	r2, #2
 8007960:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8007962:	f7ff fb95 	bl	8007090 <xTaskResumeAll>
 8007966:	e006      	b.n	8007976 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8007968:	6978      	ldr	r0, [r7, #20]
 800796a:	f7ff fab7 	bl	8006edc <eTaskGetState>
 800796e:	4603      	mov	r3, r0
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f861 	bl	8007a48 <prvTaskCheckFreeStackSpace>
 8007986:	4603      	mov	r3, r0
 8007988:	461a      	mov	r2, r3
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800798e:	e002      	b.n	8007996 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	841a      	strh	r2, [r3, #32]
	}
 8007996:	bf00      	nop
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000124 	.word	0x20000124

080079a4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	; 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d03f      	beq.n	8007a3e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	605a      	str	r2, [r3, #4]
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	3308      	adds	r3, #8
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d104      	bne.n	80079e2 <prvListTasksWithinSingleList+0x3e>
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	3308      	adds	r3, #8
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d104      	bne.n	8007a0e <prvListTasksWithinSingleList+0x6a>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	461a      	mov	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1899      	adds	r1, r3, r2
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f7ff ff54 	bl	80078d8 <vTaskGetInfo>
				uxTask++;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	3301      	adds	r3, #1
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d1d5      	bne.n	80079ea <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3728      	adds	r7, #40	; 0x28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007a54:	e005      	b.n	8007a62 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2ba5      	cmp	r3, #165	; 0xa5
 8007a68:	d0f5      	beq.n	8007a56 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	089b      	lsrs	r3, r3, #2
 8007a6e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	b29b      	uxth	r3, r3
	}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d108      	bne.n	8007aa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 fc80 	bl	800939c <vPortFree>
				vPortFree( pxTCB );
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fc7d 	bl	800939c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa2:	e018      	b.n	8007ad6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d103      	bne.n	8007ab6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fc74 	bl	800939c <vPortFree>
	}
 8007ab4:	e00f      	b.n	8007ad6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d00a      	beq.n	8007ad6 <prvDeleteTCB+0x56>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <prvDeleteTCB+0x54>
	}
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvResetNextTaskUnblockTime+0x38>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <prvResetNextTaskUnblockTime+0x3c>)
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295
 8007af6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007af8:	e008      	b.n	8007b0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <prvResetNextTaskUnblockTime+0x38>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	4a04      	ldr	r2, [pc, #16]	; (8007b1c <prvResetNextTaskUnblockTime+0x3c>)
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	200005b0 	.word	0x200005b0
 8007b1c:	20000618 	.word	0x20000618

08007b20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <xTaskGetCurrentTaskHandle+0x1c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007b2c:	687b      	ldr	r3, [r7, #4]
	}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000124 	.word	0x20000124

08007b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <xTaskGetSchedulerState+0x34>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d102      	bne.n	8007b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	e008      	b.n	8007b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b54:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <xTaskGetSchedulerState+0x38>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	607b      	str	r3, [r7, #4]
 8007b60:	e001      	b.n	8007b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b66:	687b      	ldr	r3, [r7, #4]
	}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	20000604 	.word	0x20000604
 8007b78:	20000620 	.word	0x20000620

08007b7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d051      	beq.n	8007c36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b96:	4b2a      	ldr	r3, [pc, #168]	; (8007c40 <xTaskPriorityInherit+0xc4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d241      	bcs.n	8007c24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	db06      	blt.n	8007bb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba8:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <xTaskPriorityInherit+0xc4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6959      	ldr	r1, [r3, #20]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <xTaskPriorityInherit+0xc8>)
 8007bc8:	4413      	add	r3, r2
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	d122      	bne.n	8007c14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fe10 	bl	80057f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bd8:	4b19      	ldr	r3, [pc, #100]	; (8007c40 <xTaskPriorityInherit+0xc4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <xTaskPriorityInherit+0xcc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d903      	bls.n	8007bf6 <xTaskPriorityInherit+0x7a>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <xTaskPriorityInherit+0xcc>)
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4a10      	ldr	r2, [pc, #64]	; (8007c44 <xTaskPriorityInherit+0xc8>)
 8007c04:	441a      	add	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	f7fd fd96 	bl	800573e <vListInsertEnd>
 8007c12:	e004      	b.n	8007c1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <xTaskPriorityInherit+0xc4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	e008      	b.n	8007c36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <xTaskPriorityInherit+0xc4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d201      	bcs.n	8007c36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c32:	2301      	movs	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c36:	68fb      	ldr	r3, [r7, #12]
	}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000124 	.word	0x20000124
 8007c44:	20000128 	.word	0x20000128
 8007c48:	20000600 	.word	0x20000600

08007c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d056      	beq.n	8007d10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c62:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <xTaskPriorityDisinherit+0xd0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d00a      	beq.n	8007c82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60fb      	str	r3, [r7, #12]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	60bb      	str	r3, [r7, #8]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca4:	1e5a      	subs	r2, r3, #1
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d02c      	beq.n	8007d10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d128      	bne.n	8007d10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fd fd98 	bl	80057f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <xTaskPriorityDisinherit+0xd4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d903      	bls.n	8007cf0 <xTaskPriorityDisinherit+0xa4>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	4a0c      	ldr	r2, [pc, #48]	; (8007d20 <xTaskPriorityDisinherit+0xd4>)
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <xTaskPriorityDisinherit+0xd8>)
 8007cfe:	441a      	add	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fd fd19 	bl	800573e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d10:	697b      	ldr	r3, [r7, #20]
	}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000124 	.word	0x20000124
 8007d20:	20000600 	.word	0x20000600
 8007d24:	20000128 	.word	0x20000128

08007d28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d36:	2301      	movs	r3, #1
 8007d38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d06a      	beq.n	8007e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	60fb      	str	r3, [r7, #12]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d902      	bls.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	e002      	b.n	8007d74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d04b      	beq.n	8007e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d146      	bne.n	8007e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d88:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d10a      	bne.n	8007da8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60bb      	str	r3, [r7, #8]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	db04      	blt.n	8007dc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	6959      	ldr	r1, [r3, #20]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007dd6:	4413      	add	r3, r2
 8007dd8:	4299      	cmp	r1, r3
 8007dda:	d11c      	bne.n	8007e16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd fd09 	bl	80057f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d903      	bls.n	8007dfa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	4a0c      	ldr	r2, [pc, #48]	; (8007e28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e08:	441a      	add	r2, r3
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f7fd fc94 	bl	800573e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e16:	bf00      	nop
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000124 	.word	0x20000124
 8007e24:	20000128 	.word	0x20000128
 8007e28:	20000600 	.word	0x20000600

08007e2c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f012 ff3a 	bl	801acb2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7f8 fa70 	bl	8000324 <strlen>
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	e007      	b.n	8007e58 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	2220      	movs	r2, #32
 8007e50:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b0e      	cmp	r3, #14
 8007e5c:	d9f4      	bls.n	8007e48 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4413      	add	r3, r2
	}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b089      	sub	sp, #36	; 0x24
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8007e86:	4b45      	ldr	r3, [pc, #276]	; (8007f9c <vTaskList+0x124>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8007e8c:	4b43      	ldr	r3, [pc, #268]	; (8007f9c <vTaskList+0x124>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	4613      	mov	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 f9b3 	bl	8009204 <pvPortMalloc>
 8007e9e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d076      	beq.n	8007f94 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	68f9      	ldr	r1, [r7, #12]
 8007eaa:	68b8      	ldr	r0, [r7, #8]
 8007eac:	f7ff f9b0 	bl	8007210 <uxTaskGetSystemState>
 8007eb0:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	e066      	b.n	8007f86 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	7b1b      	ldrb	r3, [r3, #12]
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d81b      	bhi.n	8007f06 <vTaskList+0x8e>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <vTaskList+0x5c>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007ee9 	.word	0x08007ee9
 8007ed8:	08007eef 	.word	0x08007eef
 8007edc:	08007ef5 	.word	0x08007ef5
 8007ee0:	08007efb 	.word	0x08007efb
 8007ee4:	08007f01 	.word	0x08007f01
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8007ee8:	2358      	movs	r3, #88	; 0x58
 8007eea:	74fb      	strb	r3, [r7, #19]
										break;
 8007eec:	e00e      	b.n	8007f0c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8007eee:	2352      	movs	r3, #82	; 0x52
 8007ef0:	74fb      	strb	r3, [r7, #19]
										break;
 8007ef2:	e00b      	b.n	8007f0c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8007ef4:	2342      	movs	r3, #66	; 0x42
 8007ef6:	74fb      	strb	r3, [r7, #19]
										break;
 8007ef8:	e008      	b.n	8007f0c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8007efa:	2353      	movs	r3, #83	; 0x53
 8007efc:	74fb      	strb	r3, [r7, #19]
										break;
 8007efe:	e005      	b.n	8007f0c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8007f00:	2344      	movs	r3, #68	; 0x44
 8007f02:	74fb      	strb	r3, [r7, #19]
										break;
 8007f04:	e002      	b.n	8007f0c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8007f06:	2300      	movs	r3, #0
 8007f08:	74fb      	strb	r3, [r7, #19]
										break;
 8007f0a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	461a      	mov	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ff83 	bl	8007e2c <prvWriteNameToBuffer>
 8007f26:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8007f28:	7cf9      	ldrb	r1, [r7, #19]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	461a      	mov	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4413      	add	r3, r2
 8007f3a:	6918      	ldr	r0, [r3, #16]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	461a      	mov	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	8c1b      	ldrh	r3, [r3, #32]
 8007f4e:	461c      	mov	r4, r3
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4613      	mov	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4413      	add	r3, r2
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	9400      	str	r4, [sp, #0]
 8007f66:	4603      	mov	r3, r0
 8007f68:	460a      	mov	r2, r1
 8007f6a:	490d      	ldr	r1, [pc, #52]	; (8007fa0 <vTaskList+0x128>)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f012 fe71 	bl	801ac54 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7f8 f9d6 	bl	8000324 <strlen>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	3301      	adds	r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d394      	bcc.n	8007eb8 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8007f8e:	68b8      	ldr	r0, [r7, #8]
 8007f90:	f001 fa04 	bl	800939c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd90      	pop	{r4, r7, pc}
 8007f9c:	200005f8 	.word	0x200005f8
 8007fa0:	0801c288 	.word	0x0801c288

08007fa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fa8:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
	}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	20000124 	.word	0x20000124

08007fcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fd6:	4b21      	ldr	r3, [pc, #132]	; (800805c <prvAddCurrentTaskToDelayedList+0x90>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fdc:	4b20      	ldr	r3, [pc, #128]	; (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd fc08 	bl	80057f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fee:	d10a      	bne.n	8008006 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4819      	ldr	r0, [pc, #100]	; (8008064 <prvAddCurrentTaskToDelayedList+0x98>)
 8008000:	f7fd fb9d 	bl	800573e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008004:	e026      	b.n	8008054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800800e:	4b14      	ldr	r3, [pc, #80]	; (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	429a      	cmp	r2, r3
 800801c:	d209      	bcs.n	8008032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800801e:	4b12      	ldr	r3, [pc, #72]	; (8008068 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3304      	adds	r3, #4
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f7fd fbab 	bl	8005786 <vListInsert>
}
 8008030:	e010      	b.n	8008054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008032:	4b0e      	ldr	r3, [pc, #56]	; (800806c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f7fd fba1 	bl	8005786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	d202      	bcs.n	8008054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800804e:	4a08      	ldr	r2, [pc, #32]	; (8008070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200005fc 	.word	0x200005fc
 8008060:	20000124 	.word	0x20000124
 8008064:	200005e4 	.word	0x200005e4
 8008068:	200005b4 	.word	0x200005b4
 800806c:	200005b0 	.word	0x200005b0
 8008070:	20000618 	.word	0x20000618

08008074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08a      	sub	sp, #40	; 0x28
 8008078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800807e:	f000 fb07 	bl	8008690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <xTimerCreateTimerTask+0x80>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d021      	beq.n	80080ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008092:	1d3a      	adds	r2, r7, #4
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	f107 030c 	add.w	r3, r7, #12
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f897 	bl	80091d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	9202      	str	r2, [sp, #8]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	2302      	movs	r3, #2
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	2300      	movs	r3, #0
 80080b2:	460a      	mov	r2, r1
 80080b4:	4910      	ldr	r1, [pc, #64]	; (80080f8 <xTimerCreateTimerTask+0x84>)
 80080b6:	4811      	ldr	r0, [pc, #68]	; (80080fc <xTimerCreateTimerTask+0x88>)
 80080b8:	f7fe fcc8 	bl	8006a4c <xTaskCreateStatic>
 80080bc:	4603      	mov	r3, r0
 80080be:	4a10      	ldr	r2, [pc, #64]	; (8008100 <xTimerCreateTimerTask+0x8c>)
 80080c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <xTimerCreateTimerTask+0x8c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080ca:	2301      	movs	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	613b      	str	r3, [r7, #16]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080ea:	697b      	ldr	r3, [r7, #20]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000654 	.word	0x20000654
 80080f8:	0801c298 	.word	0x0801c298
 80080fc:	08008239 	.word	0x08008239
 8008100:	20000658 	.word	0x20000658

08008104 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008112:	2300      	movs	r3, #0
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xTimerGenericCommand+0x2e>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	623b      	str	r3, [r7, #32]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008132:	4b1a      	ldr	r3, [pc, #104]	; (800819c <xTimerGenericCommand+0x98>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d02a      	beq.n	8008190 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b05      	cmp	r3, #5
 800814a:	dc18      	bgt.n	800817e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800814c:	f7ff fcf8 	bl	8007b40 <xTaskGetSchedulerState>
 8008150:	4603      	mov	r3, r0
 8008152:	2b02      	cmp	r3, #2
 8008154:	d109      	bne.n	800816a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008156:	4b11      	ldr	r3, [pc, #68]	; (800819c <xTimerGenericCommand+0x98>)
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	f107 0110 	add.w	r1, r7, #16
 800815e:	2300      	movs	r3, #0
 8008160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008162:	f7fd fdd1 	bl	8005d08 <xQueueGenericSend>
 8008166:	6278      	str	r0, [r7, #36]	; 0x24
 8008168:	e012      	b.n	8008190 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800816a:	4b0c      	ldr	r3, [pc, #48]	; (800819c <xTimerGenericCommand+0x98>)
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	f107 0110 	add.w	r1, r7, #16
 8008172:	2300      	movs	r3, #0
 8008174:	2200      	movs	r2, #0
 8008176:	f7fd fdc7 	bl	8005d08 <xQueueGenericSend>
 800817a:	6278      	str	r0, [r7, #36]	; 0x24
 800817c:	e008      	b.n	8008190 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <xTimerGenericCommand+0x98>)
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	f107 0110 	add.w	r1, r7, #16
 8008186:	2300      	movs	r3, #0
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	f7fd febb 	bl	8005f04 <xQueueGenericSendFromISR>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008192:	4618      	mov	r0, r3
 8008194:	3728      	adds	r7, #40	; 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000654 	.word	0x20000654

080081a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081aa:	4b22      	ldr	r3, [pc, #136]	; (8008234 <prvProcessExpiredTimer+0x94>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fd fb1d 	bl	80057f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d022      	beq.n	8008212 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	18d1      	adds	r1, r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	6978      	ldr	r0, [r7, #20]
 80081da:	f000 f8d1 	bl	8008380 <prvInsertTimerInActiveList>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01f      	beq.n	8008224 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081e4:	2300      	movs	r3, #0
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	2100      	movs	r1, #0
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	f7ff ff88 	bl	8008104 <xTimerGenericCommand>
 80081f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d113      	bne.n	8008224 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60fb      	str	r3, [r7, #12]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	6978      	ldr	r0, [r7, #20]
 800822a:	4798      	blx	r3
}
 800822c:	bf00      	nop
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000064c 	.word	0x2000064c

08008238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008240:	f107 0308 	add.w	r3, r7, #8
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f857 	bl	80082f8 <prvGetNextExpireTime>
 800824a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4619      	mov	r1, r3
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f803 	bl	800825c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008256:	f000 f8d5 	bl	8008404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800825a:	e7f1      	b.n	8008240 <prvTimerTask+0x8>

0800825c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008266:	f7fe ff05 	bl	8007074 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f866 	bl	8008340 <prvSampleTimeNow>
 8008274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d130      	bne.n	80082de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <prvProcessTimerOrBlockTask+0x3c>
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	429a      	cmp	r2, r3
 8008288:	d806      	bhi.n	8008298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800828a:	f7fe ff01 	bl	8007090 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff ff85 	bl	80081a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008296:	e024      	b.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <prvProcessTimerOrBlockTask+0x90>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <prvProcessTimerOrBlockTask+0x50>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <prvProcessTimerOrBlockTask+0x52>
 80082ac:	2300      	movs	r3, #0
 80082ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <prvProcessTimerOrBlockTask+0x94>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	f7fe fb91 	bl	80069e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082c2:	f7fe fee5 	bl	8007090 <xTaskResumeAll>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <prvProcessTimerOrBlockTask+0x98>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
}
 80082dc:	e001      	b.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082de:	f7fe fed7 	bl	8007090 <xTaskResumeAll>
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000650 	.word	0x20000650
 80082f0:	20000654 	.word	0x20000654
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <prvGetNextExpireTime+0x44>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <prvGetNextExpireTime+0x16>
 800830a:	2201      	movs	r2, #1
 800830c:	e000      	b.n	8008310 <prvGetNextExpireTime+0x18>
 800830e:	2200      	movs	r2, #0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <prvGetNextExpireTime+0x44>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e001      	b.n	800832c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800832c:	68fb      	ldr	r3, [r7, #12]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	2000064c 	.word	0x2000064c

08008340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008348:	f7fe ff40 	bl	80071cc <xTaskGetTickCount>
 800834c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <prvSampleTimeNow+0x3c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	429a      	cmp	r2, r3
 8008356:	d205      	bcs.n	8008364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008358:	f000 f936 	bl	80085c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e002      	b.n	800836a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800836a:	4a04      	ldr	r2, [pc, #16]	; (800837c <prvSampleTimeNow+0x3c>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008370:	68fb      	ldr	r3, [r7, #12]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	2000065c 	.word	0x2000065c

08008380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d812      	bhi.n	80083cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d302      	bcc.n	80083ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	e01b      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083ba:	4b10      	ldr	r3, [pc, #64]	; (80083fc <prvInsertTimerInActiveList+0x7c>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f7fd f9de 	bl	8005786 <vListInsert>
 80083ca:	e012      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d206      	bcs.n	80083e2 <prvInsertTimerInActiveList+0x62>
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
 80083e0:	e007      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <prvInsertTimerInActiveList+0x80>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7fd f9ca 	bl	8005786 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083f2:	697b      	ldr	r3, [r7, #20]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000650 	.word	0x20000650
 8008400:	2000064c 	.word	0x2000064c

08008404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800840a:	e0ca      	b.n	80085a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	da18      	bge.n	8008444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	3304      	adds	r3, #4
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	61fb      	str	r3, [r7, #28]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843a:	6850      	ldr	r0, [r2, #4]
 800843c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843e:	6892      	ldr	r2, [r2, #8]
 8008440:	4611      	mov	r1, r2
 8008442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f2c0 80aa 	blt.w	80085a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd f9cb 	bl	80057f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008462:	463b      	mov	r3, r7
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff ff6b 	bl	8008340 <prvSampleTimeNow>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b09      	cmp	r3, #9
 8008470:	f200 8097 	bhi.w	80085a2 <prvProcessReceivedCommands+0x19e>
 8008474:	a201      	add	r2, pc, #4	; (adr r2, 800847c <prvProcessReceivedCommands+0x78>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084a5 	.word	0x080084a5
 8008484:	080084a5 	.word	0x080084a5
 8008488:	08008519 	.word	0x08008519
 800848c:	0800852d 	.word	0x0800852d
 8008490:	08008577 	.word	0x08008577
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084a5 	.word	0x080084a5
 800849c:	08008519 	.word	0x08008519
 80084a0:	0800852d 	.word	0x0800852d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	18d1      	adds	r1, r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c4:	f7ff ff5c 	bl	8008380 <prvInsertTimerInActiveList>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d069      	beq.n	80085a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d05e      	beq.n	80085a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	441a      	add	r2, r3
 80084ec:	2300      	movs	r3, #0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	2100      	movs	r1, #0
 80084f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f6:	f7ff fe05 	bl	8008104 <xTimerGenericCommand>
 80084fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d14f      	bne.n	80085a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	61bb      	str	r3, [r7, #24]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	b2da      	uxtb	r2, r3
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800852a:	e03a      	b.n	80085a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	617b      	str	r3, [r7, #20]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	18d1      	adds	r1, r2, r3
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008570:	f7ff ff06 	bl	8008380 <prvInsertTimerInActiveList>
					break;
 8008574:	e015      	b.n	80085a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008586:	f000 ff09 	bl	800939c <vPortFree>
 800858a:	e00a      	b.n	80085a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008592:	f023 0301 	bic.w	r3, r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800859e:	e000      	b.n	80085a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <prvProcessReceivedCommands+0x1c0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	1d39      	adds	r1, r7, #4
 80085a8:	2200      	movs	r2, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fd fdd2 	bl	8006154 <xQueueReceive>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f47f af2a 	bne.w	800840c <prvProcessReceivedCommands+0x8>
	}
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	3730      	adds	r7, #48	; 0x30
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000654 	.word	0x20000654

080085c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085ce:	e048      	b.n	8008662 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <prvSwitchTimerLists+0xc0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085da:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <prvSwitchTimerLists+0xc0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd f905 	bl	80057f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d02e      	beq.n	8008662 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4413      	add	r3, r2
 800860c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	429a      	cmp	r2, r3
 8008614:	d90e      	bls.n	8008634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008622:	4b19      	ldr	r3, [pc, #100]	; (8008688 <prvSwitchTimerLists+0xc0>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3304      	adds	r3, #4
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f7fd f8aa 	bl	8005786 <vListInsert>
 8008632:	e016      	b.n	8008662 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008634:	2300      	movs	r3, #0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	2100      	movs	r1, #0
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fd60 	bl	8008104 <xTimerGenericCommand>
 8008644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	603b      	str	r3, [r7, #0]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <prvSwitchTimerLists+0xc0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1b1      	bne.n	80085d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800866c:	4b06      	ldr	r3, [pc, #24]	; (8008688 <prvSwitchTimerLists+0xc0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <prvSwitchTimerLists+0xc4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a04      	ldr	r2, [pc, #16]	; (8008688 <prvSwitchTimerLists+0xc0>)
 8008678:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800867a:	4a04      	ldr	r2, [pc, #16]	; (800868c <prvSwitchTimerLists+0xc4>)
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	6013      	str	r3, [r2, #0]
}
 8008680:	bf00      	nop
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	2000064c 	.word	0x2000064c
 800868c:	20000650 	.word	0x20000650

08008690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008696:	f001 f8cd 	bl	8009834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800869a:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d120      	bne.n	80086e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086a2:	4814      	ldr	r0, [pc, #80]	; (80086f4 <prvCheckForValidListAndQueue+0x64>)
 80086a4:	f7fd f81e 	bl	80056e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086a8:	4813      	ldr	r0, [pc, #76]	; (80086f8 <prvCheckForValidListAndQueue+0x68>)
 80086aa:	f7fd f81b 	bl	80056e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <prvCheckForValidListAndQueue+0x6c>)
 80086b0:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <prvCheckForValidListAndQueue+0x64>)
 80086b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086b4:	4b12      	ldr	r3, [pc, #72]	; (8008700 <prvCheckForValidListAndQueue+0x70>)
 80086b6:	4a10      	ldr	r2, [pc, #64]	; (80086f8 <prvCheckForValidListAndQueue+0x68>)
 80086b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086ba:	2300      	movs	r3, #0
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4b11      	ldr	r3, [pc, #68]	; (8008704 <prvCheckForValidListAndQueue+0x74>)
 80086c0:	4a11      	ldr	r2, [pc, #68]	; (8008708 <prvCheckForValidListAndQueue+0x78>)
 80086c2:	2110      	movs	r1, #16
 80086c4:	200a      	movs	r0, #10
 80086c6:	f7fd f929 	bl	800591c <xQueueGenericCreateStatic>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 80086ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	490b      	ldr	r1, [pc, #44]	; (800870c <prvCheckForValidListAndQueue+0x7c>)
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe f92c 	bl	800693c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086e4:	f001 f8d6 	bl	8009894 <vPortExitCritical>
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000654 	.word	0x20000654
 80086f4:	20000624 	.word	0x20000624
 80086f8:	20000638 	.word	0x20000638
 80086fc:	2000064c 	.word	0x2000064c
 8008700:	20000650 	.word	0x20000650
 8008704:	20000700 	.word	0x20000700
 8008708:	20000660 	.word	0x20000660
 800870c:	0801c2a0 	.word	0x0801c2a0

08008710 <__NVIC_SetPriority>:
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800871c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db0a      	blt.n	800873a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	b2da      	uxtb	r2, r3
 8008728:	490c      	ldr	r1, [pc, #48]	; (800875c <__NVIC_SetPriority+0x4c>)
 800872a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800872e:	0112      	lsls	r2, r2, #4
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	440b      	add	r3, r1
 8008734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008738:	e00a      	b.n	8008750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	b2da      	uxtb	r2, r3
 800873e:	4908      	ldr	r1, [pc, #32]	; (8008760 <__NVIC_SetPriority+0x50>)
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	3b04      	subs	r3, #4
 8008748:	0112      	lsls	r2, r2, #4
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	440b      	add	r3, r1
 800874e:	761a      	strb	r2, [r3, #24]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	e000e100 	.word	0xe000e100
 8008760:	e000ed00 	.word	0xe000ed00

08008764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <SysTick_Handler+0x1c>)
 800876a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800876c:	f7ff f9e8 	bl	8007b40 <xTaskGetSchedulerState>
 8008770:	4603      	mov	r3, r0
 8008772:	2b01      	cmp	r3, #1
 8008774:	d001      	beq.n	800877a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008776:	f001 f8ef 	bl	8009958 <xPortSysTickHandler>
  }
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	e000e010 	.word	0xe000e010

08008784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008788:	2100      	movs	r1, #0
 800878a:	f06f 0004 	mvn.w	r0, #4
 800878e:	f7ff ffbf 	bl	8008710 <__NVIC_SetPriority>
#endif
}
 8008792:	bf00      	nop
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	603b      	str	r3, [r7, #0]
  return(result);
 80087a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087aa:	f06f 0305 	mvn.w	r3, #5
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	e00c      	b.n	80087cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087b2:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <osKernelInitialize+0x44>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d105      	bne.n	80087c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <osKernelInitialize+0x44>)
 80087bc:	2201      	movs	r2, #1
 80087be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	607b      	str	r3, [r7, #4]
 80087c4:	e002      	b.n	80087cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087cc:	687b      	ldr	r3, [r7, #4]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000750 	.word	0x20000750

080087e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e6:	f3ef 8305 	mrs	r3, IPSR
 80087ea:	603b      	str	r3, [r7, #0]
  return(result);
 80087ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80087f2:	f06f 0305 	mvn.w	r3, #5
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	e010      	b.n	800881c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <osKernelStart+0x48>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d109      	bne.n	8008816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008802:	f7ff ffbf 	bl	8008784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <osKernelStart+0x48>)
 8008808:	2202      	movs	r2, #2
 800880a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800880c:	f7fe fbcc 	bl	8006fa8 <vTaskStartScheduler>
      stat = osOK;
 8008810:	2300      	movs	r3, #0
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	e002      	b.n	800881c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008816:	f04f 33ff 	mov.w	r3, #4294967295
 800881a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800881c:	687b      	ldr	r3, [r7, #4]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000750 	.word	0x20000750

0800882c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008832:	f3ef 8305 	mrs	r3, IPSR
 8008836:	603b      	str	r3, [r7, #0]
  return(result);
 8008838:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800883e:	f7fe fcd5 	bl	80071ec <xTaskGetTickCountFromISR>
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	e002      	b.n	800884c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008846:	f7fe fcc1 	bl	80071cc <xTaskGetTickCount>
 800884a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800884c:	687b      	ldr	r3, [r7, #4]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008856:	b580      	push	{r7, lr}
 8008858:	b08e      	sub	sp, #56	; 0x38
 800885a:	af04      	add	r7, sp, #16
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008862:	2300      	movs	r3, #0
 8008864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008866:	f3ef 8305 	mrs	r3, IPSR
 800886a:	617b      	str	r3, [r7, #20]
  return(result);
 800886c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800886e:	2b00      	cmp	r3, #0
 8008870:	d17f      	bne.n	8008972 <osThreadNew+0x11c>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d07c      	beq.n	8008972 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800887c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800887e:	2318      	movs	r3, #24
 8008880:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008886:	f04f 33ff 	mov.w	r3, #4294967295
 800888a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d045      	beq.n	800891e <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <osThreadNew+0x4a>
        name = attr->name;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <osThreadNew+0x70>
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b38      	cmp	r3, #56	; 0x38
 80088b8:	d805      	bhi.n	80088c6 <osThreadNew+0x70>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <osThreadNew+0x74>
        return (NULL);
 80088c6:	2300      	movs	r3, #0
 80088c8:	e054      	b.n	8008974 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	089b      	lsrs	r3, r3, #2
 80088d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00e      	beq.n	8008900 <osThreadNew+0xaa>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b5b      	cmp	r3, #91	; 0x5b
 80088e8:	d90a      	bls.n	8008900 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d006      	beq.n	8008900 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <osThreadNew+0xaa>
        mem = 1;
 80088fa:	2301      	movs	r3, #1
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	e010      	b.n	8008922 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <osThreadNew+0xcc>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d108      	bne.n	8008922 <osThreadNew+0xcc>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <osThreadNew+0xcc>
          mem = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e001      	b.n	8008922 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d110      	bne.n	800894a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008930:	9202      	str	r2, [sp, #8]
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7fe f884 	bl	8006a4c <xTaskCreateStatic>
 8008944:	4603      	mov	r3, r0
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	e013      	b.n	8008972 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d110      	bne.n	8008972 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	b29a      	uxth	r2, r3
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7fe f8cf 	bl	8006b06 <xTaskCreate>
 8008968:	4603      	mov	r3, r0
 800896a:	2b01      	cmp	r3, #1
 800896c:	d001      	beq.n	8008972 <osThreadNew+0x11c>
            hTask = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008972:	693b      	ldr	r3, [r7, #16]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3728      	adds	r7, #40	; 0x28
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008988:	f3ef 8305 	mrs	r3, IPSR
 800898c:	60bb      	str	r3, [r7, #8]
  return(result);
 800898e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8008994:	f06f 0305 	mvn.w	r3, #5
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e017      	b.n	80089cc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80089a2:	f06f 0303 	mvn.w	r3, #3
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e010      	b.n	80089cc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f7fe fa96 	bl	8006edc <eTaskGetState>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d005      	beq.n	80089c6 <osThreadTerminate+0x4a>
      stat = osOK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80089be:	6938      	ldr	r0, [r7, #16]
 80089c0:	f7fe f9e6 	bl	8006d90 <vTaskDelete>
 80089c4:	e002      	b.n	80089cc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80089c6:	f06f 0302 	mvn.w	r3, #2
 80089ca:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80089cc:	697b      	ldr	r3, [r7, #20]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089de:	f3ef 8305 	mrs	r3, IPSR
 80089e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80089e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <osDelay+0x1c>
    stat = osErrorISR;
 80089ea:	f06f 0305 	mvn.w	r3, #5
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	e007      	b.n	8008a02 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <osDelay+0x2c>
      vTaskDelay(ticks);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7fe fa39 	bl	8006e74 <vTaskDelay>
    }
  }

  return (stat);
 8008a02:	68fb      	ldr	r3, [r7, #12]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a18:	f3ef 8305 	mrs	r3, IPSR
 8008a1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a1e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d174      	bne.n	8008b0e <osMutexNew+0x102>
    if (attr != NULL) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	e001      	b.n	8008a36 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <osMutexNew+0x3a>
      rmtx = 1U;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e001      	b.n	8008a4a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d15c      	bne.n	8008b0e <osMutexNew+0x102>
      mem = -1;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d015      	beq.n	8008a8c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <osMutexNew+0x6a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b4f      	cmp	r3, #79	; 0x4f
 8008a6e:	d902      	bls.n	8008a76 <osMutexNew+0x6a>
          mem = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	e00c      	b.n	8008a90 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d108      	bne.n	8008a90 <osMutexNew+0x84>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <osMutexNew+0x84>
            mem = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	613b      	str	r3, [r7, #16]
 8008a8a:	e001      	b.n	8008a90 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d112      	bne.n	8008abc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d007      	beq.n	8008aac <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	2004      	movs	r0, #4
 8008aa4:	f7fd f841 	bl	8005b2a <xQueueCreateMutexStatic>
 8008aa8:	61f8      	str	r0, [r7, #28]
 8008aaa:	e016      	b.n	8008ada <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f7fd f839 	bl	8005b2a <xQueueCreateMutexStatic>
 8008ab8:	61f8      	str	r0, [r7, #28]
 8008aba:	e00e      	b.n	8008ada <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008ac8:	2004      	movs	r0, #4
 8008aca:	f7fd f816 	bl	8005afa <xQueueCreateMutex>
 8008ace:	61f8      	str	r0, [r7, #28]
 8008ad0:	e003      	b.n	8008ada <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	f7fd f811 	bl	8005afa <xQueueCreateMutex>
 8008ad8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <osMutexNew+0xee>
        if (attr != NULL) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <osMutexNew+0xe2>
          name = attr->name;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e001      	b.n	8008af2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008af2:	68f9      	ldr	r1, [r7, #12]
 8008af4:	69f8      	ldr	r0, [r7, #28]
 8008af6:	f7fd ff21 	bl	800693c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d006      	beq.n	8008b0e <osMutexNew+0x102>
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f043 0301 	orr.w	r3, r3, #1
 8008b0c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008b0e:	69fb      	ldr	r3, [r7, #28]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f023 0301 	bic.w	r3, r3, #1
 8008b28:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b36:	f3ef 8305 	mrs	r3, IPSR
 8008b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b3c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008b42:	f06f 0305 	mvn.w	r3, #5
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	e02c      	b.n	8008ba4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008b50:	f06f 0303 	mvn.w	r3, #3
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e025      	b.n	8008ba4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d011      	beq.n	8008b82 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6938      	ldr	r0, [r7, #16]
 8008b62:	f7fd f831 	bl	8005bc8 <xQueueTakeMutexRecursive>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d01b      	beq.n	8008ba4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008b72:	f06f 0301 	mvn.w	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e014      	b.n	8008ba4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008b7a:	f06f 0302 	mvn.w	r3, #2
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	e010      	b.n	8008ba4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6938      	ldr	r0, [r7, #16]
 8008b86:	f7fd fbc5 	bl	8006314 <xQueueSemaphoreTake>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d009      	beq.n	8008ba4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008b96:	f06f 0301 	mvn.w	r3, #1
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e002      	b.n	8008ba4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008b9e:	f06f 0302 	mvn.w	r3, #2
 8008ba2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008ba4:	697b      	ldr	r3, [r7, #20]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f023 0301 	bic.w	r3, r3, #1
 8008bbc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bca:	f3ef 8305 	mrs	r3, IPSR
 8008bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bd0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <osMutexRelease+0x30>
    stat = osErrorISR;
 8008bd6:	f06f 0305 	mvn.w	r3, #5
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e01f      	b.n	8008c1e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008be4:	f06f 0303 	mvn.w	r3, #3
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e018      	b.n	8008c1e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008bf2:	6938      	ldr	r0, [r7, #16]
 8008bf4:	f7fc ffb4 	bl	8005b60 <xQueueGiveMutexRecursive>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d00f      	beq.n	8008c1e <osMutexRelease+0x70>
        stat = osErrorResource;
 8008bfe:	f06f 0302 	mvn.w	r3, #2
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	e00b      	b.n	8008c1e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008c06:	2300      	movs	r3, #0
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	6938      	ldr	r0, [r7, #16]
 8008c0e:	f7fd f87b 	bl	8005d08 <xQueueGenericSend>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d002      	beq.n	8008c1e <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c18:	f06f 0302 	mvn.w	r3, #2
 8008c1c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008c1e:	697b      	ldr	r3, [r7, #20]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c38:	f3ef 8305 	mrs	r3, IPSR
 8008c3c:	613b      	str	r3, [r7, #16]
  return(result);
 8008c3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d175      	bne.n	8008d30 <osSemaphoreNew+0x108>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d072      	beq.n	8008d30 <osSemaphoreNew+0x108>
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d86e      	bhi.n	8008d30 <osSemaphoreNew+0x108>
    mem = -1;
 8008c52:	f04f 33ff 	mov.w	r3, #4294967295
 8008c56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d015      	beq.n	8008c8a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d006      	beq.n	8008c74 <osSemaphoreNew+0x4c>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	2b4f      	cmp	r3, #79	; 0x4f
 8008c6c:	d902      	bls.n	8008c74 <osSemaphoreNew+0x4c>
        mem = 1;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	e00c      	b.n	8008c8e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d108      	bne.n	8008c8e <osSemaphoreNew+0x66>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <osSemaphoreNew+0x66>
          mem = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	e001      	b.n	8008c8e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d04c      	beq.n	8008d30 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d128      	bne.n	8008cee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d10a      	bne.n	8008cb8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	9200      	str	r2, [sp, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	2100      	movs	r1, #0
 8008cae:	2001      	movs	r0, #1
 8008cb0:	f7fc fe34 	bl	800591c <xQueueGenericCreateStatic>
 8008cb4:	61f8      	str	r0, [r7, #28]
 8008cb6:	e005      	b.n	8008cc4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008cb8:	2203      	movs	r2, #3
 8008cba:	2100      	movs	r1, #0
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	f7fc fea5 	bl	8005a0c <xQueueGenericCreate>
 8008cc2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d022      	beq.n	8008d10 <osSemaphoreNew+0xe8>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01f      	beq.n	8008d10 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	69f8      	ldr	r0, [r7, #28]
 8008cd8:	f7fd f816 	bl	8005d08 <xQueueGenericSend>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d016      	beq.n	8008d10 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008ce2:	69f8      	ldr	r0, [r7, #28]
 8008ce4:	f7fd fcde 	bl	80066a4 <vQueueDelete>
            hSemaphore = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e010      	b.n	8008d10 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d108      	bne.n	8008d06 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7fc ff99 	bl	8005c34 <xQueueCreateCountingSemaphoreStatic>
 8008d02:	61f8      	str	r0, [r7, #28]
 8008d04:	e004      	b.n	8008d10 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7fc ffca 	bl	8005ca2 <xQueueCreateCountingSemaphore>
 8008d0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00c      	beq.n	8008d30 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	617b      	str	r3, [r7, #20]
 8008d22:	e001      	b.n	8008d28 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d28:	6979      	ldr	r1, [r7, #20]
 8008d2a:	69f8      	ldr	r0, [r7, #28]
 8008d2c:	f7fd fe06 	bl	800693c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008d30:	69fb      	ldr	r3, [r7, #28]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d103      	bne.n	8008d5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008d54:	f06f 0303 	mvn.w	r3, #3
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	e039      	b.n	8008dd0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d5c:	f3ef 8305 	mrs	r3, IPSR
 8008d60:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d022      	beq.n	8008dae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008d6e:	f06f 0303 	mvn.w	r3, #3
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	e02c      	b.n	8008dd0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	461a      	mov	r2, r3
 8008d80:	2100      	movs	r1, #0
 8008d82:	6938      	ldr	r0, [r7, #16]
 8008d84:	f7fd fbd2 	bl	800652c <xQueueReceiveFromISR>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d003      	beq.n	8008d96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008d8e:	f06f 0302 	mvn.w	r3, #2
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	e01c      	b.n	8008dd0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d019      	beq.n	8008dd0 <osSemaphoreAcquire+0x94>
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <osSemaphoreAcquire+0xa0>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	e010      	b.n	8008dd0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6938      	ldr	r0, [r7, #16]
 8008db2:	f7fd faaf 	bl	8006314 <xQueueSemaphoreTake>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d009      	beq.n	8008dd0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008dc2:	f06f 0301 	mvn.w	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e002      	b.n	8008dd0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008dca:	f06f 0302 	mvn.w	r3, #2
 8008dce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008dd0:	697b      	ldr	r3, [r7, #20]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	e000ed04 	.word	0xe000ed04

08008de0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008df6:	f06f 0303 	mvn.w	r3, #3
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e02c      	b.n	8008e58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dfe:	f3ef 8305 	mrs	r3, IPSR
 8008e02:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01a      	beq.n	8008e40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	4619      	mov	r1, r3
 8008e14:	6938      	ldr	r0, [r7, #16]
 8008e16:	f7fd f910 	bl	800603a <xQueueGiveFromISR>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d003      	beq.n	8008e28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008e20:	f06f 0302 	mvn.w	r3, #2
 8008e24:	617b      	str	r3, [r7, #20]
 8008e26:	e017      	b.n	8008e58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d014      	beq.n	8008e58 <osSemaphoreRelease+0x78>
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <osSemaphoreRelease+0x84>)
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	e00b      	b.n	8008e58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e40:	2300      	movs	r3, #0
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	6938      	ldr	r0, [r7, #16]
 8008e48:	f7fc ff5e 	bl	8005d08 <xQueueGenericSend>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d002      	beq.n	8008e58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008e52:	f06f 0302 	mvn.w	r3, #2
 8008e56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008e58:	697b      	ldr	r3, [r7, #20]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e74:	f3ef 8305 	mrs	r3, IPSR
 8008e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008e80:	f06f 0305 	mvn.w	r3, #5
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	e00e      	b.n	8008ea6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d103      	bne.n	8008e96 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008e8e:	f06f 0303 	mvn.w	r3, #3
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e007      	b.n	8008ea6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008e96:	6938      	ldr	r0, [r7, #16]
 8008e98:	f7fd fd7a 	bl	8006990 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008ea0:	6938      	ldr	r0, [r7, #16]
 8008ea2:	f7fd fbff 	bl	80066a4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008ea6:	697b      	ldr	r3, [r7, #20]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08a      	sub	sp, #40	; 0x28
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ec0:	f3ef 8305 	mrs	r3, IPSR
 8008ec4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ec6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d15f      	bne.n	8008f8c <osMessageQueueNew+0xdc>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d05c      	beq.n	8008f8c <osMessageQueueNew+0xdc>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d059      	beq.n	8008f8c <osMessageQueueNew+0xdc>
    mem = -1;
 8008ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8008edc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d029      	beq.n	8008f38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d012      	beq.n	8008f12 <osMessageQueueNew+0x62>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2b4f      	cmp	r3, #79	; 0x4f
 8008ef2:	d90e      	bls.n	8008f12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695a      	ldr	r2, [r3, #20]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	fb01 f303 	mul.w	r3, r1, r3
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <osMessageQueueNew+0x62>
        mem = 1;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	e014      	b.n	8008f3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d110      	bne.n	8008f3c <osMessageQueueNew+0x8c>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10c      	bne.n	8008f3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d108      	bne.n	8008f3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d104      	bne.n	8008f3c <osMessageQueueNew+0x8c>
          mem = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61bb      	str	r3, [r7, #24]
 8008f36:	e001      	b.n	8008f3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d10b      	bne.n	8008f5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691a      	ldr	r2, [r3, #16]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	9100      	str	r1, [sp, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7fc fce3 	bl	800591c <xQueueGenericCreateStatic>
 8008f56:	61f8      	str	r0, [r7, #28]
 8008f58:	e008      	b.n	8008f6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d105      	bne.n	8008f6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008f60:	2200      	movs	r2, #0
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7fc fd51 	bl	8005a0c <xQueueGenericCreate>
 8008f6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00c      	beq.n	8008f8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e001      	b.n	8008f84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008f84:	6979      	ldr	r1, [r7, #20]
 8008f86:	69f8      	ldr	r0, [r7, #28]
 8008f88:	f7fd fcd8 	bl	800693c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008f8c:	69fb      	ldr	r3, [r7, #28]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3720      	adds	r7, #32
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb0:	f3ef 8305 	mrs	r3, IPSR
 8008fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8008fb6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d028      	beq.n	800900e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <osMessageQueuePut+0x36>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <osMessageQueuePut+0x36>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008fce:	f06f 0303 	mvn.w	r3, #3
 8008fd2:	61fb      	str	r3, [r7, #28]
 8008fd4:	e038      	b.n	8009048 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008fda:	f107 0210 	add.w	r2, r7, #16
 8008fde:	2300      	movs	r3, #0
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	69b8      	ldr	r0, [r7, #24]
 8008fe4:	f7fc ff8e 	bl	8005f04 <xQueueGenericSendFromISR>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d003      	beq.n	8008ff6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008fee:	f06f 0302 	mvn.w	r3, #2
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	e028      	b.n	8009048 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d025      	beq.n	8009048 <osMessageQueuePut+0xb0>
 8008ffc:	4b15      	ldr	r3, [pc, #84]	; (8009054 <osMessageQueuePut+0xbc>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	e01c      	b.n	8009048 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <osMessageQueuePut+0x82>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d103      	bne.n	8009022 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800901a:	f06f 0303 	mvn.w	r3, #3
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	e012      	b.n	8009048 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009022:	2300      	movs	r3, #0
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	69b8      	ldr	r0, [r7, #24]
 800902a:	f7fc fe6d 	bl	8005d08 <xQueueGenericSend>
 800902e:	4603      	mov	r3, r0
 8009030:	2b01      	cmp	r3, #1
 8009032:	d009      	beq.n	8009048 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800903a:	f06f 0301 	mvn.w	r3, #1
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	e002      	b.n	8009048 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009042:	f06f 0302 	mvn.w	r3, #2
 8009046:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009048:	69fb      	ldr	r3, [r7, #28]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	e000ed04 	.word	0xe000ed04

08009058 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800906a:	2300      	movs	r3, #0
 800906c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800906e:	f3ef 8305 	mrs	r3, IPSR
 8009072:	617b      	str	r3, [r7, #20]
  return(result);
 8009074:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009076:	2b00      	cmp	r3, #0
 8009078:	d028      	beq.n	80090cc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <osMessageQueueGet+0x34>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <osMessageQueueGet+0x34>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800908c:	f06f 0303 	mvn.w	r3, #3
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	e037      	b.n	8009104 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009098:	f107 0310 	add.w	r3, r7, #16
 800909c:	461a      	mov	r2, r3
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	69b8      	ldr	r0, [r7, #24]
 80090a2:	f7fd fa43 	bl	800652c <xQueueReceiveFromISR>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d003      	beq.n	80090b4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80090ac:	f06f 0302 	mvn.w	r3, #2
 80090b0:	61fb      	str	r3, [r7, #28]
 80090b2:	e027      	b.n	8009104 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d024      	beq.n	8009104 <osMessageQueueGet+0xac>
 80090ba:	4b15      	ldr	r3, [pc, #84]	; (8009110 <osMessageQueueGet+0xb8>)
 80090bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	e01b      	b.n	8009104 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <osMessageQueueGet+0x80>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d103      	bne.n	80090e0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80090d8:	f06f 0303 	mvn.w	r3, #3
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	e011      	b.n	8009104 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	69b8      	ldr	r0, [r7, #24]
 80090e6:	f7fd f835 	bl	8006154 <xQueueReceive>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d009      	beq.n	8009104 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80090f6:	f06f 0301 	mvn.w	r3, #1
 80090fa:	61fb      	str	r3, [r7, #28]
 80090fc:	e002      	b.n	8009104 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80090fe:	f06f 0302 	mvn.w	r3, #2
 8009102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009104:	69fb      	ldr	r3, [r7, #28]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d102      	bne.n	800912c <osMessageQueueGetCount+0x18>
    count = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e00e      	b.n	800914a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800912c:	f3ef 8305 	mrs	r3, IPSR
 8009130:	60fb      	str	r3, [r7, #12]
  return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f7fd fa95 	bl	8006668 <uxQueueMessagesWaitingFromISR>
 800913e:	6178      	str	r0, [r7, #20]
 8009140:	e003      	b.n	800914a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009142:	6938      	ldr	r0, [r7, #16]
 8009144:	f7fd fa72 	bl	800662c <uxQueueMessagesWaiting>
 8009148:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800914a:	697b      	ldr	r3, [r7, #20]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009160:	f3ef 8305 	mrs	r3, IPSR
 8009164:	60fb      	str	r3, [r7, #12]
  return(result);
 8009166:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800916c:	f06f 0305 	mvn.w	r3, #5
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	e00e      	b.n	8009192 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800917a:	f06f 0303 	mvn.w	r3, #3
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e007      	b.n	8009192 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009182:	6938      	ldr	r0, [r7, #16]
 8009184:	f7fd fc04 	bl	8006990 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009188:	2300      	movs	r3, #0
 800918a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800918c:	6938      	ldr	r0, [r7, #16]
 800918e:	f7fd fa89 	bl	80066a4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009192:	697b      	ldr	r3, [r7, #20]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4a07      	ldr	r2, [pc, #28]	; (80091c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80091ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	4a06      	ldr	r2, [pc, #24]	; (80091cc <vApplicationGetIdleTaskMemory+0x30>)
 80091b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ba:	601a      	str	r2, [r3, #0]
}
 80091bc:	bf00      	nop
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	20000754 	.word	0x20000754
 80091cc:	200007b0 	.word	0x200007b0

080091d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a07      	ldr	r2, [pc, #28]	; (80091fc <vApplicationGetTimerTaskMemory+0x2c>)
 80091e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4a06      	ldr	r2, [pc, #24]	; (8009200 <vApplicationGetTimerTaskMemory+0x30>)
 80091e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091ee:	601a      	str	r2, [r3, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	20000fb0 	.word	0x20000fb0
 8009200:	2000100c 	.word	0x2000100c

08009204 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009210:	f7fd ff30 	bl	8007074 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009214:	4b5b      	ldr	r3, [pc, #364]	; (8009384 <pvPortMalloc+0x180>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800921c:	f000 f920 	bl	8009460 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009220:	4b59      	ldr	r3, [pc, #356]	; (8009388 <pvPortMalloc+0x184>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4013      	ands	r3, r2
 8009228:	2b00      	cmp	r3, #0
 800922a:	f040 8093 	bne.w	8009354 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01d      	beq.n	8009270 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009234:	2208      	movs	r2, #8
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	2b00      	cmp	r3, #0
 8009244:	d014      	beq.n	8009270 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f023 0307 	bic.w	r3, r3, #7
 800924c:	3308      	adds	r3, #8
 800924e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <pvPortMalloc+0x6c>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	617b      	str	r3, [r7, #20]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d06e      	beq.n	8009354 <pvPortMalloc+0x150>
 8009276:	4b45      	ldr	r3, [pc, #276]	; (800938c <pvPortMalloc+0x188>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	429a      	cmp	r2, r3
 800927e:	d869      	bhi.n	8009354 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009280:	4b43      	ldr	r3, [pc, #268]	; (8009390 <pvPortMalloc+0x18c>)
 8009282:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009284:	4b42      	ldr	r3, [pc, #264]	; (8009390 <pvPortMalloc+0x18c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800928a:	e004      	b.n	8009296 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d903      	bls.n	80092a8 <pvPortMalloc+0xa4>
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1f1      	bne.n	800928c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092a8:	4b36      	ldr	r3, [pc, #216]	; (8009384 <pvPortMalloc+0x180>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d050      	beq.n	8009354 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2208      	movs	r2, #8
 80092b8:	4413      	add	r3, r2
 80092ba:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	2308      	movs	r3, #8
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d91f      	bls.n	8009314 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4413      	add	r3, r2
 80092da:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <pvPortMalloc+0xf8>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	613b      	str	r3, [r7, #16]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	1ad2      	subs	r2, r2, r3
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800930e:	69b8      	ldr	r0, [r7, #24]
 8009310:	f000 f908 	bl	8009524 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009314:	4b1d      	ldr	r3, [pc, #116]	; (800938c <pvPortMalloc+0x188>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	4a1b      	ldr	r2, [pc, #108]	; (800938c <pvPortMalloc+0x188>)
 8009320:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009322:	4b1a      	ldr	r3, [pc, #104]	; (800938c <pvPortMalloc+0x188>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <pvPortMalloc+0x190>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d203      	bcs.n	8009336 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800932e:	4b17      	ldr	r3, [pc, #92]	; (800938c <pvPortMalloc+0x188>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a18      	ldr	r2, [pc, #96]	; (8009394 <pvPortMalloc+0x190>)
 8009334:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	4b13      	ldr	r3, [pc, #76]	; (8009388 <pvPortMalloc+0x184>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	431a      	orrs	r2, r3
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800934a:	4b13      	ldr	r3, [pc, #76]	; (8009398 <pvPortMalloc+0x194>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	4a11      	ldr	r2, [pc, #68]	; (8009398 <pvPortMalloc+0x194>)
 8009352:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009354:	f7fd fe9c 	bl	8007090 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	f003 0307 	and.w	r3, r3, #7
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <pvPortMalloc+0x174>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60fb      	str	r3, [r7, #12]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <pvPortMalloc+0x172>
	return pvReturn;
 8009378:	69fb      	ldr	r3, [r7, #28]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3728      	adds	r7, #40	; 0x28
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20008414 	.word	0x20008414
 8009388:	20008428 	.word	0x20008428
 800938c:	20008418 	.word	0x20008418
 8009390:	2000840c 	.word	0x2000840c
 8009394:	2000841c 	.word	0x2000841c
 8009398:	20008420 	.word	0x20008420

0800939c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d04d      	beq.n	800944a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093ae:	2308      	movs	r3, #8
 80093b0:	425b      	negs	r3, r3
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	4413      	add	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	4b24      	ldr	r3, [pc, #144]	; (8009454 <vPortFree+0xb8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4013      	ands	r3, r2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <vPortFree+0x44>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	60fb      	str	r3, [r7, #12]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <vPortFree+0x62>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60bb      	str	r3, [r7, #8]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	4b14      	ldr	r3, [pc, #80]	; (8009454 <vPortFree+0xb8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4013      	ands	r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d01e      	beq.n	800944a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11a      	bne.n	800944a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	4b0e      	ldr	r3, [pc, #56]	; (8009454 <vPortFree+0xb8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	43db      	mvns	r3, r3
 800941e:	401a      	ands	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009424:	f7fd fe26 	bl	8007074 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <vPortFree+0xbc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4413      	add	r3, r2
 8009432:	4a09      	ldr	r2, [pc, #36]	; (8009458 <vPortFree+0xbc>)
 8009434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009436:	6938      	ldr	r0, [r7, #16]
 8009438:	f000 f874 	bl	8009524 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800943c:	4b07      	ldr	r3, [pc, #28]	; (800945c <vPortFree+0xc0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	4a06      	ldr	r2, [pc, #24]	; (800945c <vPortFree+0xc0>)
 8009444:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009446:	f7fd fe23 	bl	8007090 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800944a:	bf00      	nop
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20008428 	.word	0x20008428
 8009458:	20008418 	.word	0x20008418
 800945c:	20008424 	.word	0x20008424

08009460 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009466:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800946a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800946c:	4b27      	ldr	r3, [pc, #156]	; (800950c <prvHeapInit+0xac>)
 800946e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3307      	adds	r3, #7
 800947e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0307 	bic.w	r3, r3, #7
 8009486:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	4a1f      	ldr	r2, [pc, #124]	; (800950c <prvHeapInit+0xac>)
 8009490:	4413      	add	r3, r2
 8009492:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009498:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <prvHeapInit+0xb0>)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800949e:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <prvHeapInit+0xb0>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094ac:	2208      	movs	r2, #8
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4a15      	ldr	r2, [pc, #84]	; (8009514 <prvHeapInit+0xb4>)
 80094c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094c2:	4b14      	ldr	r3, [pc, #80]	; (8009514 <prvHeapInit+0xb4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ca:	4b12      	ldr	r3, [pc, #72]	; (8009514 <prvHeapInit+0xb4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094e0:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <prvHeapInit+0xb4>)
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	4a0a      	ldr	r2, [pc, #40]	; (8009518 <prvHeapInit+0xb8>)
 80094ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	4a09      	ldr	r2, [pc, #36]	; (800951c <prvHeapInit+0xbc>)
 80094f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094f8:	4b09      	ldr	r3, [pc, #36]	; (8009520 <prvHeapInit+0xc0>)
 80094fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094fe:	601a      	str	r2, [r3, #0]
}
 8009500:	bf00      	nop
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	2000200c 	.word	0x2000200c
 8009510:	2000840c 	.word	0x2000840c
 8009514:	20008414 	.word	0x20008414
 8009518:	2000841c 	.word	0x2000841c
 800951c:	20008418 	.word	0x20008418
 8009520:	20008428 	.word	0x20008428

08009524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800952c:	4b28      	ldr	r3, [pc, #160]	; (80095d0 <prvInsertBlockIntoFreeList+0xac>)
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e002      	b.n	8009538 <prvInsertBlockIntoFreeList+0x14>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	429a      	cmp	r2, r3
 8009540:	d8f7      	bhi.n	8009532 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	4413      	add	r3, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d108      	bne.n	8009566 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d118      	bne.n	80095ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d00d      	beq.n	80095a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	441a      	add	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	e008      	b.n	80095b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095a2:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <prvInsertBlockIntoFreeList+0xb0>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e003      	b.n	80095b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d002      	beq.n	80095c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	2000840c 	.word	0x2000840c
 80095d4:	20008414 	.word	0x20008414

080095d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3b04      	subs	r3, #4
 80095e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3b04      	subs	r3, #4
 80095f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f023 0201 	bic.w	r2, r3, #1
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3b04      	subs	r3, #4
 8009606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <pxPortInitialiseStack+0x64>)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b14      	subs	r3, #20
 8009612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3b04      	subs	r3, #4
 800961e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f06f 0202 	mvn.w	r2, #2
 8009626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3b20      	subs	r3, #32
 800962c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800962e:	68fb      	ldr	r3, [r7, #12]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	08009641 	.word	0x08009641

08009640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800964a:	4b12      	ldr	r3, [pc, #72]	; (8009694 <prvTaskExitError+0x54>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d00a      	beq.n	800966a <prvTaskExitError+0x2a>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <prvTaskExitError+0x28>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	60bb      	str	r3, [r7, #8]
}
 800967c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800967e:	bf00      	nop
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0fc      	beq.n	8009680 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	20000030 	.word	0x20000030
	...

080096a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <pxCurrentTCBConst2>)
 80096a2:	6819      	ldr	r1, [r3, #0]
 80096a4:	6808      	ldr	r0, [r1, #0]
 80096a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096aa:	f380 8809 	msr	PSP, r0
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f04f 0000 	mov.w	r0, #0
 80096b6:	f380 8811 	msr	BASEPRI, r0
 80096ba:	4770      	bx	lr
 80096bc:	f3af 8000 	nop.w

080096c0 <pxCurrentTCBConst2>:
 80096c0:	20000124 	.word	0x20000124
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop

080096c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096c8:	4808      	ldr	r0, [pc, #32]	; (80096ec <prvPortStartFirstTask+0x24>)
 80096ca:	6800      	ldr	r0, [r0, #0]
 80096cc:	6800      	ldr	r0, [r0, #0]
 80096ce:	f380 8808 	msr	MSP, r0
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8814 	msr	CONTROL, r0
 80096da:	b662      	cpsie	i
 80096dc:	b661      	cpsie	f
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	df00      	svc	0
 80096e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ea:	bf00      	nop
 80096ec:	e000ed08 	.word	0xe000ed08

080096f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096f6:	4b46      	ldr	r3, [pc, #280]	; (8009810 <xPortStartScheduler+0x120>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a46      	ldr	r2, [pc, #280]	; (8009814 <xPortStartScheduler+0x124>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d10a      	bne.n	8009716 <xPortStartScheduler+0x26>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	613b      	str	r3, [r7, #16]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009716:	4b3e      	ldr	r3, [pc, #248]	; (8009810 <xPortStartScheduler+0x120>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a3f      	ldr	r2, [pc, #252]	; (8009818 <xPortStartScheduler+0x128>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10a      	bne.n	8009736 <xPortStartScheduler+0x46>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	60fb      	str	r3, [r7, #12]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009736:	4b39      	ldr	r3, [pc, #228]	; (800981c <xPortStartScheduler+0x12c>)
 8009738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	22ff      	movs	r2, #255	; 0xff
 8009746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009758:	b2da      	uxtb	r2, r3
 800975a:	4b31      	ldr	r3, [pc, #196]	; (8009820 <xPortStartScheduler+0x130>)
 800975c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800975e:	4b31      	ldr	r3, [pc, #196]	; (8009824 <xPortStartScheduler+0x134>)
 8009760:	2207      	movs	r2, #7
 8009762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009764:	e009      	b.n	800977a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009766:	4b2f      	ldr	r3, [pc, #188]	; (8009824 <xPortStartScheduler+0x134>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3b01      	subs	r3, #1
 800976c:	4a2d      	ldr	r2, [pc, #180]	; (8009824 <xPortStartScheduler+0x134>)
 800976e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009782:	2b80      	cmp	r3, #128	; 0x80
 8009784:	d0ef      	beq.n	8009766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009786:	4b27      	ldr	r3, [pc, #156]	; (8009824 <xPortStartScheduler+0x134>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1c3 0307 	rsb	r3, r3, #7
 800978e:	2b04      	cmp	r3, #4
 8009790:	d00a      	beq.n	80097a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	60bb      	str	r3, [r7, #8]
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097a8:	4b1e      	ldr	r3, [pc, #120]	; (8009824 <xPortStartScheduler+0x134>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	021b      	lsls	r3, r3, #8
 80097ae:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <xPortStartScheduler+0x134>)
 80097b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097b2:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <xPortStartScheduler+0x134>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ba:	4a1a      	ldr	r2, [pc, #104]	; (8009824 <xPortStartScheduler+0x134>)
 80097bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097c6:	4b18      	ldr	r3, [pc, #96]	; (8009828 <xPortStartScheduler+0x138>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a17      	ldr	r2, [pc, #92]	; (8009828 <xPortStartScheduler+0x138>)
 80097cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <xPortStartScheduler+0x138>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a14      	ldr	r2, [pc, #80]	; (8009828 <xPortStartScheduler+0x138>)
 80097d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097de:	f000 f8dd 	bl	800999c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097e2:	4b12      	ldr	r3, [pc, #72]	; (800982c <xPortStartScheduler+0x13c>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097e8:	f000 f8fc 	bl	80099e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097ec:	4b10      	ldr	r3, [pc, #64]	; (8009830 <xPortStartScheduler+0x140>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0f      	ldr	r2, [pc, #60]	; (8009830 <xPortStartScheduler+0x140>)
 80097f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097f8:	f7ff ff66 	bl	80096c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097fc:	f7fd fe50 	bl	80074a0 <vTaskSwitchContext>
	prvTaskExitError();
 8009800:	f7ff ff1e 	bl	8009640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	e000ed00 	.word	0xe000ed00
 8009814:	410fc271 	.word	0x410fc271
 8009818:	410fc270 	.word	0x410fc270
 800981c:	e000e400 	.word	0xe000e400
 8009820:	2000842c 	.word	0x2000842c
 8009824:	20008430 	.word	0x20008430
 8009828:	e000ed20 	.word	0xe000ed20
 800982c:	20000030 	.word	0x20000030
 8009830:	e000ef34 	.word	0xe000ef34

08009834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	607b      	str	r3, [r7, #4]
}
 800984c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800984e:	4b0f      	ldr	r3, [pc, #60]	; (800988c <vPortEnterCritical+0x58>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3301      	adds	r3, #1
 8009854:	4a0d      	ldr	r2, [pc, #52]	; (800988c <vPortEnterCritical+0x58>)
 8009856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <vPortEnterCritical+0x58>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d10f      	bne.n	8009880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009860:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <vPortEnterCritical+0x5c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <vPortEnterCritical+0x4c>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	603b      	str	r3, [r7, #0]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <vPortEnterCritical+0x4a>
	}
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20000030 	.word	0x20000030
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800989a:	4b12      	ldr	r3, [pc, #72]	; (80098e4 <vPortExitCritical+0x50>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <vPortExitCritical+0x24>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	607b      	str	r3, [r7, #4]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <vPortExitCritical+0x50>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3b01      	subs	r3, #1
 80098be:	4a09      	ldr	r2, [pc, #36]	; (80098e4 <vPortExitCritical+0x50>)
 80098c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <vPortExitCritical+0x50>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <vPortExitCritical+0x42>
 80098ca:	2300      	movs	r3, #0
 80098cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	f383 8811 	msr	BASEPRI, r3
}
 80098d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000030 	.word	0x20000030
	...

080098f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098f0:	f3ef 8009 	mrs	r0, PSP
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	4b15      	ldr	r3, [pc, #84]	; (8009950 <pxCurrentTCBConst>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f01e 0f10 	tst.w	lr, #16
 8009900:	bf08      	it	eq
 8009902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	6010      	str	r0, [r2, #0]
 800990c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009914:	f380 8811 	msr	BASEPRI, r0
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f7fd fdbe 	bl	80074a0 <vTaskSwitchContext>
 8009924:	f04f 0000 	mov.w	r0, #0
 8009928:	f380 8811 	msr	BASEPRI, r0
 800992c:	bc09      	pop	{r0, r3}
 800992e:	6819      	ldr	r1, [r3, #0]
 8009930:	6808      	ldr	r0, [r1, #0]
 8009932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009936:	f01e 0f10 	tst.w	lr, #16
 800993a:	bf08      	it	eq
 800993c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009940:	f380 8809 	msr	PSP, r0
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	f3af 8000 	nop.w

08009950 <pxCurrentTCBConst>:
 8009950:	20000124 	.word	0x20000124
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop

08009958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
}
 8009970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009972:	f7fd fcdb 	bl	800732c <xTaskIncrementTick>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800997c:	4b06      	ldr	r3, [pc, #24]	; (8009998 <xPortSysTickHandler+0x40>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f383 8811 	msr	BASEPRI, r3
}
 800998e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <vPortSetupTimerInterrupt+0x38>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <vPortSetupTimerInterrupt+0x3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <vPortSetupTimerInterrupt+0x40>)
 80099b2:	fba2 2303 	umull	r2, r3, r2, r3
 80099b6:	099b      	lsrs	r3, r3, #6
 80099b8:	4a09      	ldr	r2, [pc, #36]	; (80099e0 <vPortSetupTimerInterrupt+0x44>)
 80099ba:	3b01      	subs	r3, #1
 80099bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099be:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099c0:	2207      	movs	r2, #7
 80099c2:	601a      	str	r2, [r3, #0]
}
 80099c4:	bf00      	nop
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	e000e010 	.word	0xe000e010
 80099d4:	e000e018 	.word	0xe000e018
 80099d8:	20000020 	.word	0x20000020
 80099dc:	10624dd3 	.word	0x10624dd3
 80099e0:	e000e014 	.word	0xe000e014

080099e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099f4 <vPortEnableVFP+0x10>
 80099e8:	6801      	ldr	r1, [r0, #0]
 80099ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099ee:	6001      	str	r1, [r0, #0]
 80099f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099f2:	bf00      	nop
 80099f4:	e000ed88 	.word	0xe000ed88

080099f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099fe:	f3ef 8305 	mrs	r3, IPSR
 8009a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b0f      	cmp	r3, #15
 8009a08:	d914      	bls.n	8009a34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a0a:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <vPortValidateInterruptPriority+0x70>)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a14:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <vPortValidateInterruptPriority+0x74>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	7afa      	ldrb	r2, [r7, #11]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d20a      	bcs.n	8009a34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	607b      	str	r3, [r7, #4]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a34:	4b0e      	ldr	r3, [pc, #56]	; (8009a70 <vPortValidateInterruptPriority+0x78>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <vPortValidateInterruptPriority+0x7c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d90a      	bls.n	8009a5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	603b      	str	r3, [r7, #0]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <vPortValidateInterruptPriority+0x60>
	}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	e000e3f0 	.word	0xe000e3f0
 8009a6c:	2000842c 	.word	0x2000842c
 8009a70:	e000ed0c 	.word	0xe000ed0c
 8009a74:	20008430 	.word	0x20008430

08009a78 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dc04      	bgt.n	8009a94 <err_to_errno+0x1c>
 8009a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a8e:	f113 0f10 	cmn.w	r3, #16
 8009a92:	da01      	bge.n	8009a98 <err_to_errno+0x20>
    return EIO;
 8009a94:	2305      	movs	r3, #5
 8009a96:	e005      	b.n	8009aa4 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a9c:	425b      	negs	r3, r3
 8009a9e:	4a04      	ldr	r2, [pc, #16]	; (8009ab0 <err_to_errno+0x38>)
 8009aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	08020ee8 	.word	0x08020ee8

08009ab4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ac2:	f113 0f0d 	cmn.w	r3, #13
 8009ac6:	d009      	beq.n	8009adc <lwip_netconn_err_to_msg+0x28>
 8009ac8:	f113 0f0d 	cmn.w	r3, #13
 8009acc:	dc0c      	bgt.n	8009ae8 <lwip_netconn_err_to_msg+0x34>
 8009ace:	f113 0f0f 	cmn.w	r3, #15
 8009ad2:	d007      	beq.n	8009ae4 <lwip_netconn_err_to_msg+0x30>
 8009ad4:	f113 0f0e 	cmn.w	r3, #14
 8009ad8:	d002      	beq.n	8009ae0 <lwip_netconn_err_to_msg+0x2c>
 8009ada:	e005      	b.n	8009ae8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <lwip_netconn_err_to_msg+0x54>)
 8009ade:	e00e      	b.n	8009afe <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <lwip_netconn_err_to_msg+0x58>)
 8009ae2:	e00c      	b.n	8009afe <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <lwip_netconn_err_to_msg+0x5c>)
 8009ae6:	e00a      	b.n	8009afe <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <lwip_netconn_err_to_msg+0x48>
 8009af0:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <lwip_netconn_err_to_msg+0x60>)
 8009af2:	227d      	movs	r2, #125	; 0x7d
 8009af4:	4908      	ldr	r1, [pc, #32]	; (8009b18 <lwip_netconn_err_to_msg+0x64>)
 8009af6:	4809      	ldr	r0, [pc, #36]	; (8009b1c <lwip_netconn_err_to_msg+0x68>)
 8009af8:	f011 f854 	bl	801aba4 <iprintf>
      return NULL;
 8009afc:	2300      	movs	r3, #0
  }
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	08020f2c 	.word	0x08020f2c
 8009b0c:	08020f2d 	.word	0x08020f2d
 8009b10:	08020f2e 	.word	0x08020f2e
 8009b14:	0801c2a8 	.word	0x0801c2a8
 8009b18:	0801c35c 	.word	0x0801c35c
 8009b1c:	0801c36c 	.word	0x0801c36c

08009b20 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d105      	bne.n	8009b3c <lwip_netconn_is_err_msg+0x1c>
 8009b30:	4b12      	ldr	r3, [pc, #72]	; (8009b7c <lwip_netconn_is_err_msg+0x5c>)
 8009b32:	2285      	movs	r2, #133	; 0x85
 8009b34:	4912      	ldr	r1, [pc, #72]	; (8009b80 <lwip_netconn_is_err_msg+0x60>)
 8009b36:	4813      	ldr	r0, [pc, #76]	; (8009b84 <lwip_netconn_is_err_msg+0x64>)
 8009b38:	f011 f834 	bl	801aba4 <iprintf>

  if (msg == &netconn_aborted) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a12      	ldr	r2, [pc, #72]	; (8009b88 <lwip_netconn_is_err_msg+0x68>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d104      	bne.n	8009b4e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	22f3      	movs	r2, #243	; 0xf3
 8009b48:	701a      	strb	r2, [r3, #0]
    return 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e012      	b.n	8009b74 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a0e      	ldr	r2, [pc, #56]	; (8009b8c <lwip_netconn_is_err_msg+0x6c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d104      	bne.n	8009b60 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	22f2      	movs	r2, #242	; 0xf2
 8009b5a:	701a      	strb	r2, [r3, #0]
    return 1;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e009      	b.n	8009b74 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a0b      	ldr	r2, [pc, #44]	; (8009b90 <lwip_netconn_is_err_msg+0x70>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d104      	bne.n	8009b72 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	22f1      	movs	r2, #241	; 0xf1
 8009b6c:	701a      	strb	r2, [r3, #0]
    return 1;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	0801c2a8 	.word	0x0801c2a8
 8009b80:	0801c394 	.word	0x0801c394
 8009b84:	0801c36c 	.word	0x0801c36c
 8009b88:	08020f2c 	.word	0x08020f2c
 8009b8c:	08020f2d 	.word	0x08020f2d
 8009b90:	08020f2e 	.word	0x08020f2e

08009b94 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <recv_udp+0x20>
 8009ba8:	4b34      	ldr	r3, [pc, #208]	; (8009c7c <recv_udp+0xe8>)
 8009baa:	22e5      	movs	r2, #229	; 0xe5
 8009bac:	4934      	ldr	r1, [pc, #208]	; (8009c80 <recv_udp+0xec>)
 8009bae:	4835      	ldr	r0, [pc, #212]	; (8009c84 <recv_udp+0xf0>)
 8009bb0:	f010 fff8 	bl	801aba4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <recv_udp+0x32>
 8009bba:	4b30      	ldr	r3, [pc, #192]	; (8009c7c <recv_udp+0xe8>)
 8009bbc:	22e6      	movs	r2, #230	; 0xe6
 8009bbe:	4932      	ldr	r1, [pc, #200]	; (8009c88 <recv_udp+0xf4>)
 8009bc0:	4830      	ldr	r0, [pc, #192]	; (8009c84 <recv_udp+0xf0>)
 8009bc2:	f010 ffef 	bl	801aba4 <iprintf>
  conn = (struct netconn *)arg;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <recv_udp+0x44>
    pbuf_free(p);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f009 faa7 	bl	8013124 <pbuf_free>
    return;
 8009bd6:	e04d      	b.n	8009c74 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d005      	beq.n	8009bee <recv_udp+0x5a>
 8009be2:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <recv_udp+0xe8>)
 8009be4:	22ee      	movs	r2, #238	; 0xee
 8009be6:	4929      	ldr	r1, [pc, #164]	; (8009c8c <recv_udp+0xf8>)
 8009be8:	4826      	ldr	r0, [pc, #152]	; (8009c84 <recv_udp+0xf0>)
 8009bea:	f010 ffdb 	bl	801aba4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f010 fdfe 	bl	801a7f4 <sys_mbox_valid>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f009 fa90 	bl	8013124 <pbuf_free>
    return;
 8009c04:	e036      	b.n	8009c74 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009c06:	2006      	movs	r0, #6
 8009c08:	f008 fb34 	bl	8012274 <memp_malloc>
 8009c0c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <recv_udp+0x88>
    pbuf_free(p);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f009 fa85 	bl	8013124 <pbuf_free>
    return;
 8009c1a:	e02b      	b.n	8009c74 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <recv_udp+0xa0>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	e000      	b.n	8009c36 <recv_udp+0xa2>
 8009c34:	2300      	movs	r3, #0
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009c3e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	891b      	ldrh	r3, [r3, #8]
 8009c44:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	3310      	adds	r3, #16
 8009c4a:	69b9      	ldr	r1, [r7, #24]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f010 fd6f 	bl	801a730 <sys_mbox_trypost>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f002 f93c 	bl	800bed6 <netbuf_delete>
    return;
 8009c5e:	e009      	b.n	8009c74 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <recv_udp+0xe0>
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	8afa      	ldrh	r2, [r7, #22]
 8009c6e:	2100      	movs	r1, #0
 8009c70:	69f8      	ldr	r0, [r7, #28]
 8009c72:	4798      	blx	r3
  }
}
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	0801c2a8 	.word	0x0801c2a8
 8009c80:	0801c3a0 	.word	0x0801c3a0
 8009c84:	0801c36c 	.word	0x0801c36c
 8009c88:	0801c3c4 	.word	0x0801c3c4
 8009c8c:	0801c3e4 	.word	0x0801c3e4

08009c90 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <recv_tcp+0x22>
 8009ca4:	4b36      	ldr	r3, [pc, #216]	; (8009d80 <recv_tcp+0xf0>)
 8009ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009caa:	4936      	ldr	r1, [pc, #216]	; (8009d84 <recv_tcp+0xf4>)
 8009cac:	4836      	ldr	r0, [pc, #216]	; (8009d88 <recv_tcp+0xf8>)
 8009cae:	f010 ff79 	bl	801aba4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <recv_tcp+0x36>
 8009cb8:	4b31      	ldr	r3, [pc, #196]	; (8009d80 <recv_tcp+0xf0>)
 8009cba:	f240 122d 	movw	r2, #301	; 0x12d
 8009cbe:	4933      	ldr	r1, [pc, #204]	; (8009d8c <recv_tcp+0xfc>)
 8009cc0:	4831      	ldr	r0, [pc, #196]	; (8009d88 <recv_tcp+0xf8>)
 8009cc2:	f010 ff6f 	bl	801aba4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d006      	beq.n	8009cdc <recv_tcp+0x4c>
 8009cce:	4b2c      	ldr	r3, [pc, #176]	; (8009d80 <recv_tcp+0xf0>)
 8009cd0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009cd4:	492e      	ldr	r1, [pc, #184]	; (8009d90 <recv_tcp+0x100>)
 8009cd6:	482c      	ldr	r0, [pc, #176]	; (8009d88 <recv_tcp+0xf8>)
 8009cd8:	f010 ff64 	bl	801aba4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <recv_tcp+0x5c>
    return ERR_VAL;
 8009ce6:	f06f 0305 	mvn.w	r3, #5
 8009cea:	e045      	b.n	8009d78 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d006      	beq.n	8009d04 <recv_tcp+0x74>
 8009cf6:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <recv_tcp+0xf0>)
 8009cf8:	f240 1235 	movw	r2, #309	; 0x135
 8009cfc:	4925      	ldr	r1, [pc, #148]	; (8009d94 <recv_tcp+0x104>)
 8009cfe:	4822      	ldr	r0, [pc, #136]	; (8009d88 <recv_tcp+0xf8>)
 8009d00:	f010 ff50 	bl	801aba4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3310      	adds	r3, #16
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f010 fd73 	bl	801a7f4 <sys_mbox_valid>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10d      	bne.n	8009d30 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	891b      	ldrh	r3, [r3, #8]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	68b8      	ldr	r0, [r7, #8]
 8009d22:	f00a f9c7 	bl	80140b4 <tcp_recved>
      pbuf_free(p);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f009 f9fc 	bl	8013124 <pbuf_free>
    }
    return ERR_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e023      	b.n	8009d78 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <recv_tcp+0xb2>
    msg = p;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	891b      	ldrh	r3, [r3, #8]
 8009d3e:	83fb      	strh	r3, [r7, #30]
 8009d40:	e003      	b.n	8009d4a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009d42:	4b15      	ldr	r3, [pc, #84]	; (8009d98 <recv_tcp+0x108>)
 8009d44:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	69b9      	ldr	r1, [r7, #24]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f010 fced 	bl	801a730 <sys_mbox_trypost>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d60:	e00a      	b.n	8009d78 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <recv_tcp+0xe6>
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	8bfa      	ldrh	r2, [r7, #30]
 8009d70:	2100      	movs	r1, #0
 8009d72:	6978      	ldr	r0, [r7, #20]
 8009d74:	4798      	blx	r3
  }

  return ERR_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	0801c2a8 	.word	0x0801c2a8
 8009d84:	0801c404 	.word	0x0801c404
 8009d88:	0801c36c 	.word	0x0801c36c
 8009d8c:	0801c428 	.word	0x0801c428
 8009d90:	0801c448 	.word	0x0801c448
 8009d94:	0801c460 	.word	0x0801c460
 8009d98:	08020f2e 	.word	0x08020f2e

08009d9c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <poll_tcp+0x22>
 8009db0:	4b2a      	ldr	r3, [pc, #168]	; (8009e5c <poll_tcp+0xc0>)
 8009db2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009db6:	492a      	ldr	r1, [pc, #168]	; (8009e60 <poll_tcp+0xc4>)
 8009db8:	482a      	ldr	r0, [pc, #168]	; (8009e64 <poll_tcp+0xc8>)
 8009dba:	f010 fef3 	bl	801aba4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d104      	bne.n	8009dd0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 ffb1 	bl	800ad30 <lwip_netconn_do_writemore>
 8009dce:	e016      	b.n	8009dfe <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d112      	bne.n	8009dfe <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <poll_tcp+0x5a>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	7a5b      	ldrb	r3, [r3, #9]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	7a5a      	ldrb	r2, [r3, #9]
 8009df0:	3a01      	subs	r2, #1
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009df6:	2101      	movs	r1, #1
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fbfb 	bl	800a5f4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	7f1b      	ldrb	r3, [r3, #28]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d022      	beq.n	8009e50 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01e      	beq.n	8009e50 <poll_tcp+0xb4>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e1a:	f640 3269 	movw	r2, #2921	; 0xb69
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d916      	bls.n	8009e50 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	d810      	bhi.n	8009e50 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	7f1b      	ldrb	r3, [r3, #28]
 8009e32:	f023 0310 	bic.w	r3, r3, #16
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d005      	beq.n	8009e50 <poll_tcp+0xb4>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2102      	movs	r1, #2
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0801c2a8 	.word	0x0801c2a8
 8009e60:	0801c480 	.word	0x0801c480
 8009e64:	0801c36c 	.word	0x0801c36c

08009e68 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <sent_tcp+0x26>
 8009e80:	4b21      	ldr	r3, [pc, #132]	; (8009f08 <sent_tcp+0xa0>)
 8009e82:	f240 1293 	movw	r2, #403	; 0x193
 8009e86:	4921      	ldr	r1, [pc, #132]	; (8009f0c <sent_tcp+0xa4>)
 8009e88:	4821      	ldr	r0, [pc, #132]	; (8009f10 <sent_tcp+0xa8>)
 8009e8a:	f010 fe8b 	bl	801aba4 <iprintf>

  if (conn) {
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d033      	beq.n	8009efc <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d104      	bne.n	8009ea6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	6978      	ldr	r0, [r7, #20]
 8009ea0:	f000 ff46 	bl	800ad30 <lwip_netconn_do_writemore>
 8009ea4:	e007      	b.n	8009eb6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d103      	bne.n	8009eb6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009eae:	2101      	movs	r1, #1
 8009eb0:	6978      	ldr	r0, [r7, #20]
 8009eb2:	f000 fb9f 	bl	800a5f4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01e      	beq.n	8009efc <sent_tcp+0x94>
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ec6:	f640 3269 	movw	r2, #2921	; 0xb69
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d916      	bls.n	8009efc <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d810      	bhi.n	8009efc <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	7f1b      	ldrb	r3, [r3, #28]
 8009ede:	f023 0310 	bic.w	r3, r3, #16
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <sent_tcp+0x94>
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	88fa      	ldrh	r2, [r7, #6]
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	6978      	ldr	r0, [r7, #20]
 8009efa:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	0801c2a8 	.word	0x0801c2a8
 8009f0c:	0801c480 	.word	0x0801c480
 8009f10:	0801c36c 	.word	0x0801c36c

08009f14 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <err_tcp+0x24>
 8009f2a:	4b5f      	ldr	r3, [pc, #380]	; (800a0a8 <err_tcp+0x194>)
 8009f2c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009f30:	495e      	ldr	r1, [pc, #376]	; (800a0ac <err_tcp+0x198>)
 8009f32:	485f      	ldr	r0, [pc, #380]	; (800a0b0 <err_tcp+0x19c>)
 8009f34:	f010 fe36 	bl	801aba4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009f38:	f010 fd66 	bl	801aa08 <sys_arch_protect>
 8009f3c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	2200      	movs	r2, #0
 8009f42:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	7f1b      	ldrb	r3, [r3, #28]
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	785b      	ldrb	r3, [r3, #1]
 8009f5c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	2200      	movs	r2, #0
 8009f62:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009f64:	69b8      	ldr	r0, [r7, #24]
 8009f66:	f010 fd5d 	bl	801aa24 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <err_tcp+0x6a>
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	2200      	movs	r2, #0
 8009f78:	2104      	movs	r1, #4
 8009f7a:	69f8      	ldr	r0, [r7, #28]
 8009f7c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <err_tcp+0x7e>
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	69f8      	ldr	r0, [r7, #28]
 8009f90:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <err_tcp+0x92>
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2102      	movs	r1, #2
 8009fa2:	69f8      	ldr	r0, [r7, #28]
 8009fa4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fd82 	bl	8009ab4 <lwip_netconn_err_to_msg>
 8009fb0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	3310      	adds	r3, #16
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f010 fc1c 	bl	801a7f4 <sys_mbox_valid>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	3310      	adds	r3, #16
 8009fc6:	6939      	ldr	r1, [r7, #16]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f010 fbb1 	bl	801a730 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	3314      	adds	r3, #20
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f010 fc0e 	bl	801a7f4 <sys_mbox_valid>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d005      	beq.n	8009fea <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	3314      	adds	r3, #20
 8009fe2:	6939      	ldr	r1, [r7, #16]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f010 fba3 	bl	801a730 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d005      	beq.n	8009ffc <err_tcp+0xe8>
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	d002      	beq.n	8009ffc <err_tcp+0xe8>
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d143      	bne.n	800a084 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	7f1b      	ldrb	r3, [r3, #28]
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	bf14      	ite	ne
 800a008:	2301      	movne	r3, #1
 800a00a:	2300      	moveq	r3, #0
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	7f1b      	ldrb	r3, [r3, #28]
 800a014:	f023 0304 	bic.w	r3, r3, #4
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d13b      	bne.n	800a09c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <err_tcp+0x126>
 800a02c:	4b1e      	ldr	r3, [pc, #120]	; (800a0a8 <err_tcp+0x194>)
 800a02e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a032:	4920      	ldr	r1, [pc, #128]	; (800a0b4 <err_tcp+0x1a0>)
 800a034:	481e      	ldr	r0, [pc, #120]	; (800a0b0 <err_tcp+0x19c>)
 800a036:	f010 fdb5 	bl	801aba4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d104      	bne.n	800a04a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	2200      	movs	r2, #0
 800a046:	711a      	strb	r2, [r3, #4]
 800a048:	e003      	b.n	800a052 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	78fa      	ldrb	r2, [r7, #3]
 800a050:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	330c      	adds	r3, #12
 800a05a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a05c:	68b8      	ldr	r0, [r7, #8]
 800a05e:	f010 fc57 	bl	801a910 <sys_sem_valid>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d106      	bne.n	800a076 <err_tcp+0x162>
 800a068:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <err_tcp+0x194>)
 800a06a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a06e:	4912      	ldr	r1, [pc, #72]	; (800a0b8 <err_tcp+0x1a4>)
 800a070:	480f      	ldr	r0, [pc, #60]	; (800a0b0 <err_tcp+0x19c>)
 800a072:	f010 fd97 	bl	801aba4 <iprintf>
      conn->current_msg = NULL;
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	2200      	movs	r2, #0
 800a07a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a07c:	68b8      	ldr	r0, [r7, #8]
 800a07e:	f010 fc2d 	bl	801a8dc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a082:	e00b      	b.n	800a09c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d008      	beq.n	800a09e <err_tcp+0x18a>
 800a08c:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <err_tcp+0x194>)
 800a08e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a092:	490a      	ldr	r1, [pc, #40]	; (800a0bc <err_tcp+0x1a8>)
 800a094:	4806      	ldr	r0, [pc, #24]	; (800a0b0 <err_tcp+0x19c>)
 800a096:	f010 fd85 	bl	801aba4 <iprintf>
  }
}
 800a09a:	e000      	b.n	800a09e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a09c:	bf00      	nop
}
 800a09e:	bf00      	nop
 800a0a0:	3720      	adds	r7, #32
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	0801c2a8 	.word	0x0801c2a8
 800a0ac:	0801c480 	.word	0x0801c480
 800a0b0:	0801c36c 	.word	0x0801c36c
 800a0b4:	0801c490 	.word	0x0801c490
 800a0b8:	0801c4ac 	.word	0x0801c4ac
 800a0bc:	0801c4c8 	.word	0x0801c4c8

0800a0c0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f00a feb9 	bl	8014e48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a0d6:	490a      	ldr	r1, [pc, #40]	; (800a100 <setup_tcp+0x40>)
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f00a fec7 	bl	8014e6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a0de:	4909      	ldr	r1, [pc, #36]	; (800a104 <setup_tcp+0x44>)
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f00a fee5 	bl	8014eb0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	4907      	ldr	r1, [pc, #28]	; (800a108 <setup_tcp+0x48>)
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f00a ff3c 	bl	8014f68 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a0f0:	4906      	ldr	r1, [pc, #24]	; (800a10c <setup_tcp+0x4c>)
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f00a fefe 	bl	8014ef4 <tcp_err>
}
 800a0f8:	bf00      	nop
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08009c91 	.word	0x08009c91
 800a104:	08009e69 	.word	0x08009e69
 800a108:	08009d9d 	.word	0x08009d9d
 800a10c:	08009f15 	.word	0x08009f15

0800a110 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	b089      	sub	sp, #36	; 0x24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	4613      	mov	r3, r2
 800a11c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <accept_function+0x1e>
    return ERR_VAL;
 800a128:	f06f 0305 	mvn.w	r3, #5
 800a12c:	e0a1      	b.n	800a272 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	3314      	adds	r3, #20
 800a132:	4618      	mov	r0, r3
 800a134:	f010 fb5e 	bl	801a7f4 <sys_mbox_valid>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d102      	bne.n	800a144 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a13e:	f06f 0305 	mvn.w	r3, #5
 800a142:	e096      	b.n	800a272 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11b      	bne.n	800a182 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	f103 0414 	add.w	r4, r3, #20
 800a150:	f06f 000c 	mvn.w	r0, #12
 800a154:	f7ff fcae 	bl	8009ab4 <lwip_netconn_err_to_msg>
 800a158:	4603      	mov	r3, r0
 800a15a:	4619      	mov	r1, r3
 800a15c:	4620      	mov	r0, r4
 800a15e:	f010 fae7 	bl	801a730 <sys_mbox_trypost>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d109      	bne.n	800a17c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d005      	beq.n	800a17c <accept_function+0x6c>
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	69f8      	ldr	r0, [r7, #28]
 800a17a:	4798      	blx	r3
    }
    return ERR_VAL;
 800a17c:	f06f 0305 	mvn.w	r3, #5
 800a180:	e077      	b.n	800a272 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d006      	beq.n	800a198 <accept_function+0x88>
 800a18a:	4b3c      	ldr	r3, [pc, #240]	; (800a27c <accept_function+0x16c>)
 800a18c:	f240 222a 	movw	r2, #554	; 0x22a
 800a190:	493b      	ldr	r1, [pc, #236]	; (800a280 <accept_function+0x170>)
 800a192:	483c      	ldr	r0, [pc, #240]	; (800a284 <accept_function+0x174>)
 800a194:	f010 fd06 	bl	801aba4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	781a      	ldrb	r2, [r3, #0]
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f000 f8f0 	bl	800a388 <netconn_alloc>
 800a1a8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d11b      	bne.n	800a1e8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f103 0414 	add.w	r4, r3, #20
 800a1b6:	f06f 000c 	mvn.w	r0, #12
 800a1ba:	f7ff fc7b 	bl	8009ab4 <lwip_netconn_err_to_msg>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f010 fab4 	bl	801a730 <sys_mbox_trypost>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <accept_function+0xd2>
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	69f8      	ldr	r0, [r7, #28]
 800a1e0:	4798      	blx	r3
    }
    return ERR_MEM;
 800a1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e6:	e044      	b.n	800a272 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a1ee:	69b8      	ldr	r0, [r7, #24]
 800a1f0:	f7ff ff66 	bl	800a0c0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	3314      	adds	r3, #20
 800a1f8:	69b9      	ldr	r1, [r7, #24]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f010 fa98 	bl	801a730 <sys_mbox_trypost>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d02a      	beq.n	800a25c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a20c:	2100      	movs	r1, #0
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f00a fe1a 	bl	8014e48 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a214:	2100      	movs	r1, #0
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f00a fe28 	bl	8014e6c <tcp_recv>
    tcp_sent(pcb, NULL);
 800a21c:	2100      	movs	r1, #0
 800a21e:	6978      	ldr	r0, [r7, #20]
 800a220:	f00a fe46 	bl	8014eb0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a224:	2200      	movs	r2, #0
 800a226:	2100      	movs	r1, #0
 800a228:	6978      	ldr	r0, [r7, #20]
 800a22a:	f00a fe9d 	bl	8014f68 <tcp_poll>
    tcp_err(pcb, NULL);
 800a22e:	2100      	movs	r1, #0
 800a230:	6978      	ldr	r0, [r7, #20]
 800a232:	f00a fe5f 	bl	8014ef4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	2200      	movs	r2, #0
 800a23a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	3310      	adds	r3, #16
 800a240:	4618      	mov	r0, r3
 800a242:	f010 fa63 	bl	801a70c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	3310      	adds	r3, #16
 800a24a:	4618      	mov	r0, r3
 800a24c:	f010 fae3 	bl	801a816 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a250:	69b8      	ldr	r0, [r7, #24]
 800a252:	f000 f907 	bl	800a464 <netconn_free>
    return ERR_MEM;
 800a256:	f04f 33ff 	mov.w	r3, #4294967295
 800a25a:	e00a      	b.n	800a272 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <accept_function+0x160>
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	2200      	movs	r2, #0
 800a26a:	2100      	movs	r1, #0
 800a26c:	69f8      	ldr	r0, [r7, #28]
 800a26e:	4798      	blx	r3
  }

  return ERR_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd90      	pop	{r4, r7, pc}
 800a27a:	bf00      	nop
 800a27c:	0801c2a8 	.word	0x0801c2a8
 800a280:	0801c4e4 	.word	0x0801c4e4
 800a284:	0801c36c 	.word	0x0801c36c

0800a288 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a288:	b590      	push	{r4, r7, lr}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d006      	beq.n	800a2ac <pcb_new+0x24>
 800a29e:	4b2b      	ldr	r3, [pc, #172]	; (800a34c <pcb_new+0xc4>)
 800a2a0:	f240 2265 	movw	r2, #613	; 0x265
 800a2a4:	492a      	ldr	r1, [pc, #168]	; (800a350 <pcb_new+0xc8>)
 800a2a6:	482b      	ldr	r0, [pc, #172]	; (800a354 <pcb_new+0xcc>)
 800a2a8:	f010 fc7c 	bl	801aba4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2b6:	2b10      	cmp	r3, #16
 800a2b8:	d022      	beq.n	800a300 <pcb_new+0x78>
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	d133      	bne.n	800a326 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681c      	ldr	r4, [r3, #0]
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f010 f8f4 	bl	801a4b2 <udp_new_ip_type>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02a      	beq.n	800a32e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b22      	cmp	r3, #34	; 0x22
 800a2e0:	d104      	bne.n	800a2ec <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6858      	ldr	r0, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4917      	ldr	r1, [pc, #92]	; (800a358 <pcb_new+0xd0>)
 800a2fa:	f010 f861 	bl	801a3c0 <udp_recv>
      }
      break;
 800a2fe:	e016      	b.n	800a32e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681c      	ldr	r4, [r3, #0]
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	4618      	mov	r0, r3
 800a308:	f00a fd90 	bl	8014e2c <tcp_new_ip_type>
 800a30c:	4603      	mov	r3, r0
 800a30e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff fece 	bl	800a0c0 <setup_tcp>
      }
      break;
 800a324:	e005      	b.n	800a332 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	22fa      	movs	r2, #250	; 0xfa
 800a32a:	711a      	strb	r2, [r3, #4]
      return;
 800a32c:	e00a      	b.n	800a344 <pcb_new+0xbc>
      break;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <pcb_new+0xac>
      break;
 800a332:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	22ff      	movs	r2, #255	; 0xff
 800a342:	711a      	strb	r2, [r3, #4]
  }
}
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	bd90      	pop	{r4, r7, pc}
 800a34a:	bf00      	nop
 800a34c:	0801c2a8 	.word	0x0801c2a8
 800a350:	0801c50c 	.word	0x0801c50c
 800a354:	0801c36c 	.word	0x0801c36c
 800a358:	08009b95 	.word	0x08009b95

0800a35c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff ff85 	bl	800a288 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	6039      	str	r1, [r7, #0]
 800a392:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a398:	2007      	movs	r0, #7
 800a39a:	f007 ff6b 	bl	8012274 <memp_malloc>
 800a39e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <netconn_alloc+0x22>
    return NULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e052      	b.n	800a450 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	79fa      	ldrb	r2, [r7, #7]
 800a3b4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3c2:	2b10      	cmp	r3, #16
 800a3c4:	d004      	beq.n	800a3d0 <netconn_alloc+0x48>
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	d105      	bne.n	800a3d6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a3ca:	2306      	movs	r3, #6
 800a3cc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a3ce:	e00a      	b.n	800a3e6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a3d0:	2306      	movs	r3, #6
 800a3d2:	617b      	str	r3, [r7, #20]
      break;
 800a3d4:	e007      	b.n	800a3e6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a3d6:	4b20      	ldr	r3, [pc, #128]	; (800a458 <netconn_alloc+0xd0>)
 800a3d8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a3dc:	491f      	ldr	r1, [pc, #124]	; (800a45c <netconn_alloc+0xd4>)
 800a3de:	4820      	ldr	r0, [pc, #128]	; (800a460 <netconn_alloc+0xd8>)
 800a3e0:	f010 fbe0 	bl	801aba4 <iprintf>
      goto free_and_return;
 800a3e4:	e02f      	b.n	800a446 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	6979      	ldr	r1, [r7, #20]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f010 f973 	bl	801a6d8 <sys_mbox_new>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d125      	bne.n	800a444 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	330c      	adds	r3, #12
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f010 fa16 	bl	801a830 <sys_sem_new>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d005      	beq.n	800a416 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3310      	adds	r3, #16
 800a40e:	4618      	mov	r0, r3
 800a410:	f010 f97c 	bl	801a70c <sys_mbox_free>
    goto free_and_return;
 800a414:	e017      	b.n	800a446 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3314      	adds	r3, #20
 800a41a:	4618      	mov	r0, r3
 800a41c:	f010 f9fb 	bl	801a816 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f04f 32ff 	mov.w	r2, #4294967295
 800a42c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	7cfa      	ldrb	r2, [r7, #19]
 800a43e:	771a      	strb	r2, [r3, #28]
  return conn;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	e005      	b.n	800a450 <netconn_alloc+0xc8>
    goto free_and_return;
 800a444:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a446:	68f9      	ldr	r1, [r7, #12]
 800a448:	2007      	movs	r0, #7
 800a44a:	f007 ff89 	bl	8012360 <memp_free>
  return NULL;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	0801c2a8 	.word	0x0801c2a8
 800a45c:	0801c52c 	.word	0x0801c52c
 800a460:	0801c36c 	.word	0x0801c36c

0800a464 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d006      	beq.n	800a482 <netconn_free+0x1e>
 800a474:	4b1b      	ldr	r3, [pc, #108]	; (800a4e4 <netconn_free+0x80>)
 800a476:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a47a:	491b      	ldr	r1, [pc, #108]	; (800a4e8 <netconn_free+0x84>)
 800a47c:	481b      	ldr	r0, [pc, #108]	; (800a4ec <netconn_free+0x88>)
 800a47e:	f010 fb91 	bl	801aba4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3310      	adds	r3, #16
 800a486:	4618      	mov	r0, r3
 800a488:	f010 f9b4 	bl	801a7f4 <sys_mbox_valid>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <netconn_free+0x3c>
 800a492:	4b14      	ldr	r3, [pc, #80]	; (800a4e4 <netconn_free+0x80>)
 800a494:	f240 3223 	movw	r2, #803	; 0x323
 800a498:	4915      	ldr	r1, [pc, #84]	; (800a4f0 <netconn_free+0x8c>)
 800a49a:	4814      	ldr	r0, [pc, #80]	; (800a4ec <netconn_free+0x88>)
 800a49c:	f010 fb82 	bl	801aba4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3314      	adds	r3, #20
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f010 f9a5 	bl	801a7f4 <sys_mbox_valid>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d006      	beq.n	800a4be <netconn_free+0x5a>
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	; (800a4e4 <netconn_free+0x80>)
 800a4b2:	f240 3226 	movw	r2, #806	; 0x326
 800a4b6:	490f      	ldr	r1, [pc, #60]	; (800a4f4 <netconn_free+0x90>)
 800a4b8:	480c      	ldr	r0, [pc, #48]	; (800a4ec <netconn_free+0x88>)
 800a4ba:	f010 fb73 	bl	801aba4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f010 fa17 	bl	801a8f6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	330c      	adds	r3, #12
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f010 fa30 	bl	801a932 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	2007      	movs	r0, #7
 800a4d6:	f007 ff43 	bl	8012360 <memp_free>
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	0801c2a8 	.word	0x0801c2a8
 800a4e8:	0801c554 	.word	0x0801c554
 800a4ec:	0801c36c 	.word	0x0801c36c
 800a4f0:	0801c584 	.word	0x0801c584
 800a4f4:	0801c5c0 	.word	0x0801c5c0

0800a4f8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3310      	adds	r3, #16
 800a504:	4618      	mov	r0, r3
 800a506:	f010 f975 	bl	801a7f4 <sys_mbox_valid>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d02f      	beq.n	800a570 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a510:	e018      	b.n	800a544 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a51a:	2b10      	cmp	r3, #16
 800a51c:	d10e      	bne.n	800a53c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f107 020f 	add.w	r2, r7, #15
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff fafa 	bl	8009b20 <lwip_netconn_is_err_msg>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d108      	bne.n	800a544 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	4618      	mov	r0, r3
 800a536:	f008 fdf5 	bl	8013124 <pbuf_free>
 800a53a:	e003      	b.n	800a544 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 fcc9 	bl	800bed6 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3310      	adds	r3, #16
 800a548:	f107 0210 	add.w	r2, r7, #16
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f010 f939 	bl	801a7c6 <sys_arch_mbox_tryfetch>
 800a554:	4603      	mov	r3, r0
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d1da      	bne.n	800a512 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3310      	adds	r3, #16
 800a560:	4618      	mov	r0, r3
 800a562:	f010 f8d3 	bl	801a70c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3310      	adds	r3, #16
 800a56a:	4618      	mov	r0, r3
 800a56c:	f010 f953 	bl	801a816 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3314      	adds	r3, #20
 800a574:	4618      	mov	r0, r3
 800a576:	f010 f93d 	bl	801a7f4 <sys_mbox_valid>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d034      	beq.n	800a5ea <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a580:	e01d      	b.n	800a5be <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f107 020e 	add.w	r2, r7, #14
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7ff fac8 	bl	8009b20 <lwip_netconn_is_err_msg>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d113      	bne.n	800a5be <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a59a:	6978      	ldr	r0, [r7, #20]
 800a59c:	f7ff ffac 	bl	800a4f8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d007      	beq.n	800a5b8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f009 fbb9 	bl	8013d24 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a5b8:	6978      	ldr	r0, [r7, #20]
 800a5ba:	f7ff ff53 	bl	800a464 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3314      	adds	r3, #20
 800a5c2:	f107 0210 	add.w	r2, r7, #16
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f010 f8fc 	bl	801a7c6 <sys_arch_mbox_tryfetch>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d4:	d1d5      	bne.n	800a582 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3314      	adds	r3, #20
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f010 f896 	bl	801a70c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3314      	adds	r3, #20
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f010 f916 	bl	801a816 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a5ea:	bf00      	nop
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d106      	bne.n	800a618 <lwip_netconn_do_close_internal+0x24>
 800a60a:	4ba1      	ldr	r3, [pc, #644]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a60c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a610:	49a0      	ldr	r1, [pc, #640]	; (800a894 <lwip_netconn_do_close_internal+0x2a0>)
 800a612:	48a1      	ldr	r0, [pc, #644]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a614:	f010 fac6 	bl	801aba4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a620:	2b10      	cmp	r3, #16
 800a622:	d006      	beq.n	800a632 <lwip_netconn_do_close_internal+0x3e>
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a626:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a62a:	499c      	ldr	r1, [pc, #624]	; (800a89c <lwip_netconn_do_close_internal+0x2a8>)
 800a62c:	489a      	ldr	r0, [pc, #616]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a62e:	f010 fab9 	bl	801aba4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b04      	cmp	r3, #4
 800a638:	d006      	beq.n	800a648 <lwip_netconn_do_close_internal+0x54>
 800a63a:	4b95      	ldr	r3, [pc, #596]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a63c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a640:	4997      	ldr	r1, [pc, #604]	; (800a8a0 <lwip_netconn_do_close_internal+0x2ac>)
 800a642:	4895      	ldr	r0, [pc, #596]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a644:	f010 faae 	bl	801aba4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d106      	bne.n	800a65e <lwip_netconn_do_close_internal+0x6a>
 800a650:	4b8f      	ldr	r3, [pc, #572]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a652:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a656:	4993      	ldr	r1, [pc, #588]	; (800a8a4 <lwip_netconn_do_close_internal+0x2b0>)
 800a658:	488f      	ldr	r0, [pc, #572]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a65a:	f010 faa3 	bl	801aba4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <lwip_netconn_do_close_internal+0x80>
 800a666:	4b8a      	ldr	r3, [pc, #552]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a668:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a66c:	498e      	ldr	r1, [pc, #568]	; (800a8a8 <lwip_netconn_do_close_internal+0x2b4>)
 800a66e:	488a      	ldr	r0, [pc, #552]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a670:	f010 fa98 	bl	801aba4 <iprintf>

  tpcb = conn->pcb.tcp;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	7a1b      	ldrb	r3, [r3, #8]
 800a680:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	2b03      	cmp	r3, #3
 800a696:	d102      	bne.n	800a69e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a698:	2301      	movs	r3, #1
 800a69a:	75bb      	strb	r3, [r7, #22]
 800a69c:	e01f      	b.n	800a6de <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00e      	beq.n	800a6c2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a6a8:	2b05      	cmp	r3, #5
 800a6aa:	d007      	beq.n	800a6bc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a6b0:	2b06      	cmp	r3, #6
 800a6b2:	d003      	beq.n	800a6bc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d102      	bne.n	800a6c2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	75bb      	strb	r3, [r7, #22]
 800a6c0:	e00d      	b.n	800a6de <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a6c2:	7b7b      	ldrb	r3, [r7, #13]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d008      	beq.n	800a6da <lwip_netconn_do_close_internal+0xe6>
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	8b5b      	ldrh	r3, [r3, #26]
 800a6cc:	f003 0310 	and.w	r3, r3, #16
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	75bb      	strb	r3, [r7, #22]
 800a6d8:	e001      	b.n	800a6de <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a6de:	7dbb      	ldrb	r3, [r7, #22]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6938      	ldr	r0, [r7, #16]
 800a6e8:	f00a fbae 	bl	8014e48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	7d1b      	ldrb	r3, [r3, #20]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d104      	bne.n	800a6fe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	6938      	ldr	r0, [r7, #16]
 800a6f8:	f00a fc1e 	bl	8014f38 <tcp_accept>
 800a6fc:	e01d      	b.n	800a73a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d007      	beq.n	800a714 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a704:	2100      	movs	r1, #0
 800a706:	6938      	ldr	r0, [r7, #16]
 800a708:	f00a fbb0 	bl	8014e6c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a70c:	2100      	movs	r1, #0
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f00a fc12 	bl	8014f38 <tcp_accept>
    }
    if (shut_tx) {
 800a714:	7b7b      	ldrb	r3, [r7, #13]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a71a:	2100      	movs	r1, #0
 800a71c:	6938      	ldr	r0, [r7, #16]
 800a71e:	f00a fbc7 	bl	8014eb0 <tcp_sent>
    }
    if (shut_close) {
 800a722:	7dbb      	ldrb	r3, [r7, #22]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d008      	beq.n	800a73a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a728:	2200      	movs	r2, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	6938      	ldr	r0, [r7, #16]
 800a72e:	f00a fc1b 	bl	8014f68 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a732:	2100      	movs	r1, #0
 800a734:	6938      	ldr	r0, [r7, #16]
 800a736:	f00a fbdd 	bl	8014ef4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a73a:	7dbb      	ldrb	r3, [r7, #22]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a740:	6938      	ldr	r0, [r7, #16]
 800a742:	f009 f9a9 	bl	8013a98 <tcp_close>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]
 800a74a:	e007      	b.n	800a75c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	7b7a      	ldrb	r2, [r7, #13]
 800a750:	4619      	mov	r1, r3
 800a752:	6938      	ldr	r0, [r7, #16]
 800a754:	f009 f9cc 	bl	8013af0 <tcp_shutdown>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a764:	2301      	movs	r3, #1
 800a766:	757b      	strb	r3, [r7, #21]
 800a768:	e016      	b.n	800a798 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a76a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d10f      	bne.n	800a794 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	7a5b      	ldrb	r3, [r3, #9]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10c      	bne.n	800a798 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a782:	7dbb      	ldrb	r3, [r7, #22]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d007      	beq.n	800a798 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a788:	6938      	ldr	r0, [r7, #16]
 800a78a:	f009 facb 	bl	8013d24 <tcp_abort>
          err = ERR_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e001      	b.n	800a798 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a794:	2301      	movs	r3, #1
 800a796:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a798:	7d7b      	ldrb	r3, [r7, #21]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d044      	beq.n	800a828 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	330c      	adds	r3, #12
 800a7a6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	7dfa      	ldrb	r2, [r7, #23]
 800a7ae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d129      	bne.n	800a818 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a7c4:	7dbb      	ldrb	r3, [r7, #22]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00c      	beq.n	800a7e4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <lwip_netconn_do_close_internal+0x1f0>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2104      	movs	r1, #4
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	4798      	blx	r3
      }
      if (shut_rx) {
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d009      	beq.n	800a7fe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d005      	beq.n	800a7fe <lwip_netconn_do_close_internal+0x20a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
      }
      if (shut_tx) {
 800a7fe:	7b7b      	ldrb	r3, [r7, #13]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d009      	beq.n	800a818 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <lwip_netconn_do_close_internal+0x224>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2200      	movs	r2, #0
 800a812:	2102      	movs	r1, #2
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a81e:	68b8      	ldr	r0, [r7, #8]
 800a820:	f010 f85c 	bl	801a8dc <sys_sem_signal>
    }
    return ERR_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	e02e      	b.n	800a886 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a828:	7d7b      	ldrb	r3, [r7, #21]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d11e      	bne.n	800a86c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	7d1b      	ldrb	r3, [r3, #20]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d106      	bne.n	800a844 <lwip_netconn_do_close_internal+0x250>
 800a836:	4b16      	ldr	r3, [pc, #88]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a838:	f240 4241 	movw	r2, #1089	; 0x441
 800a83c:	491b      	ldr	r1, [pc, #108]	; (800a8ac <lwip_netconn_do_close_internal+0x2b8>)
 800a83e:	4816      	ldr	r0, [pc, #88]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a840:	f010 f9b0 	bl	801aba4 <iprintf>
    if (shut_tx) {
 800a844:	7b7b      	ldrb	r3, [r7, #13]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a84a:	4919      	ldr	r1, [pc, #100]	; (800a8b0 <lwip_netconn_do_close_internal+0x2bc>)
 800a84c:	6938      	ldr	r0, [r7, #16]
 800a84e:	f00a fb2f 	bl	8014eb0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a852:	2201      	movs	r2, #1
 800a854:	4917      	ldr	r1, [pc, #92]	; (800a8b4 <lwip_netconn_do_close_internal+0x2c0>)
 800a856:	6938      	ldr	r0, [r7, #16]
 800a858:	f00a fb86 	bl	8014f68 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a85c:	4916      	ldr	r1, [pc, #88]	; (800a8b8 <lwip_netconn_do_close_internal+0x2c4>)
 800a85e:	6938      	ldr	r0, [r7, #16]
 800a860:	f00a fb48 	bl	8014ef4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	6938      	ldr	r0, [r7, #16]
 800a868:	f00a faee 	bl	8014e48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a86c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <lwip_netconn_do_close_internal+0x28e>
 800a874:	4b06      	ldr	r3, [pc, #24]	; (800a890 <lwip_netconn_do_close_internal+0x29c>)
 800a876:	f240 424d 	movw	r2, #1101	; 0x44d
 800a87a:	4910      	ldr	r1, [pc, #64]	; (800a8bc <lwip_netconn_do_close_internal+0x2c8>)
 800a87c:	4806      	ldr	r0, [pc, #24]	; (800a898 <lwip_netconn_do_close_internal+0x2a4>)
 800a87e:	f010 f991 	bl	801aba4 <iprintf>
  return err;
 800a882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	0801c2a8 	.word	0x0801c2a8
 800a894:	0801c5fc 	.word	0x0801c5fc
 800a898:	0801c36c 	.word	0x0801c36c
 800a89c:	0801c60c 	.word	0x0801c60c
 800a8a0:	0801c62c 	.word	0x0801c62c
 800a8a4:	0801c650 	.word	0x0801c650
 800a8a8:	0801c490 	.word	0x0801c490
 800a8ac:	0801c664 	.word	0x0801c664
 800a8b0:	08009e69 	.word	0x08009e69
 800a8b4:	08009d9d 	.word	0x08009d9d
 800a8b8:	08009f15 	.word	0x08009f15
 800a8bc:	0801c688 	.word	0x0801c688

0800a8c0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00d      	beq.n	800a8f6 <lwip_netconn_do_delconn+0x36>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d006      	beq.n	800a8f6 <lwip_netconn_do_delconn+0x36>
 800a8e8:	4b60      	ldr	r3, [pc, #384]	; (800aa6c <lwip_netconn_do_delconn+0x1ac>)
 800a8ea:	f240 425e 	movw	r2, #1118	; 0x45e
 800a8ee:	4960      	ldr	r1, [pc, #384]	; (800aa70 <lwip_netconn_do_delconn+0x1b0>)
 800a8f0:	4860      	ldr	r0, [pc, #384]	; (800aa74 <lwip_netconn_do_delconn+0x1b4>)
 800a8f2:	f010 f957 	bl	801aba4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d005      	beq.n	800a908 <lwip_netconn_do_delconn+0x48>
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d002      	beq.n	800a908 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	2b03      	cmp	r3, #3
 800a906:	d109      	bne.n	800a91c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a908:	7afb      	ldrb	r3, [r7, #11]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d10a      	bne.n	800a924 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	7f1b      	ldrb	r3, [r3, #28]
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	22fb      	movs	r2, #251	; 0xfb
 800a920:	711a      	strb	r2, [r3, #4]
 800a922:	e097      	b.n	800aa54 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	2b03      	cmp	r3, #3
 800a928:	d10d      	bne.n	800a946 <lwip_netconn_do_delconn+0x86>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	7f1b      	ldrb	r3, [r3, #28]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <lwip_netconn_do_delconn+0x86>
 800a938:	4b4c      	ldr	r3, [pc, #304]	; (800aa6c <lwip_netconn_do_delconn+0x1ac>)
 800a93a:	f240 427a 	movw	r2, #1146	; 0x47a
 800a93e:	494e      	ldr	r1, [pc, #312]	; (800aa78 <lwip_netconn_do_delconn+0x1b8>)
 800a940:	484c      	ldr	r0, [pc, #304]	; (800aa74 <lwip_netconn_do_delconn+0x1b4>)
 800a942:	f010 f92f 	bl	801aba4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fdd1 	bl	800a4f8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d05f      	beq.n	800aa20 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a96a:	2b10      	cmp	r3, #16
 800a96c:	d00d      	beq.n	800a98a <lwip_netconn_do_delconn+0xca>
 800a96e:	2b20      	cmp	r3, #32
 800a970:	d151      	bne.n	800aa16 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	4618      	mov	r0, r3
 800a984:	f00f fd3c 	bl	801a400 <udp_remove>
          break;
 800a988:	e046      	b.n	800aa18 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <lwip_netconn_do_delconn+0xe2>
 800a994:	4b35      	ldr	r3, [pc, #212]	; (800aa6c <lwip_netconn_do_delconn+0x1ac>)
 800a996:	f240 4294 	movw	r2, #1172	; 0x494
 800a99a:	4938      	ldr	r1, [pc, #224]	; (800aa7c <lwip_netconn_do_delconn+0x1bc>)
 800a99c:	4835      	ldr	r0, [pc, #212]	; (800aa74 <lwip_netconn_do_delconn+0x1b4>)
 800a99e:	f010 f901 	bl	801aba4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2204      	movs	r2, #4
 800a9a8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2203      	movs	r2, #3
 800a9ae:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2100      	movs	r1, #0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fe18 	bl	800a5f4 <lwip_netconn_do_close_internal>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d04b      	beq.n	800aa62 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	2b04      	cmp	r3, #4
 800a9d2:	d006      	beq.n	800a9e2 <lwip_netconn_do_delconn+0x122>
 800a9d4:	4b25      	ldr	r3, [pc, #148]	; (800aa6c <lwip_netconn_do_delconn+0x1ac>)
 800a9d6:	f240 429a 	movw	r2, #1178	; 0x49a
 800a9da:	4929      	ldr	r1, [pc, #164]	; (800aa80 <lwip_netconn_do_delconn+0x1c0>)
 800a9dc:	4825      	ldr	r0, [pc, #148]	; (800aa74 <lwip_netconn_do_delconn+0x1b4>)
 800a9de:	f010 f8e1 	bl	801aba4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a9e2:	4828      	ldr	r0, [pc, #160]	; (800aa84 <lwip_netconn_do_delconn+0x1c4>)
 800a9e4:	f00f ffe3 	bl	801a9ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	330c      	adds	r3, #12
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f00f ff42 	bl	801a87a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a9f6:	4823      	ldr	r0, [pc, #140]	; (800aa84 <lwip_netconn_do_delconn+0x1c4>)
 800a9f8:	f00f ffca 	bl	801a990 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02d      	beq.n	800aa62 <lwip_netconn_do_delconn+0x1a2>
 800aa06:	4b19      	ldr	r3, [pc, #100]	; (800aa6c <lwip_netconn_do_delconn+0x1ac>)
 800aa08:	f240 429e 	movw	r2, #1182	; 0x49e
 800aa0c:	491c      	ldr	r1, [pc, #112]	; (800aa80 <lwip_netconn_do_delconn+0x1c0>)
 800aa0e:	4819      	ldr	r0, [pc, #100]	; (800aa74 <lwip_netconn_do_delconn+0x1b4>)
 800aa10:	f010 f8c8 	bl	801aba4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aa14:	e025      	b.n	800aa62 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aa16:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <lwip_netconn_do_delconn+0x17a>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	6810      	ldr	r0, [r2, #0]
 800aa34:	2200      	movs	r2, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <lwip_netconn_do_delconn+0x194>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	6810      	ldr	r0, [r2, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2102      	movs	r1, #2
 800aa52:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	330c      	adds	r3, #12
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f00f ff58 	bl	801a910 <sys_sem_valid>
 800aa60:	e000      	b.n	800aa64 <lwip_netconn_do_delconn+0x1a4>
          return;
 800aa62:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0801c2a8 	.word	0x0801c2a8
 800aa70:	0801c698 	.word	0x0801c698
 800aa74:	0801c36c 	.word	0x0801c36c
 800aa78:	0801c6ac 	.word	0x0801c6ac
 800aa7c:	0801c6cc 	.word	0x0801c6cc
 800aa80:	0801c6e8 	.word	0x0801c6e8
 800aa84:	20008870 	.word	0x20008870

0800aa88 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d025      	beq.n	800aaea <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaa8:	2b10      	cmp	r3, #16
 800aaaa:	d00e      	beq.n	800aaca <lwip_netconn_do_bind+0x42>
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	d119      	bne.n	800aae4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6858      	ldr	r0, [r3, #4]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	6899      	ldr	r1, [r3, #8]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	899b      	ldrh	r3, [r3, #12]
 800aabe:	461a      	mov	r2, r3
 800aac0:	f00f fb88 	bl	801a1d4 <udp_bind>
 800aac4:	4603      	mov	r3, r0
 800aac6:	73fb      	strb	r3, [r7, #15]
        break;
 800aac8:	e011      	b.n	800aaee <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6858      	ldr	r0, [r3, #4]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	6899      	ldr	r1, [r3, #8]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	899b      	ldrh	r3, [r3, #12]
 800aad8:	461a      	mov	r2, r3
 800aada:	f009 f92f 	bl	8013d3c <tcp_bind>
 800aade:	4603      	mov	r3, r0
 800aae0:	73fb      	strb	r3, [r7, #15]
        break;
 800aae2:	e004      	b.n	800aaee <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800aae4:	23fa      	movs	r3, #250	; 0xfa
 800aae6:	73fb      	strb	r3, [r7, #15]
        break;
 800aae8:	e001      	b.n	800aaee <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800aaea:	23fa      	movs	r3, #250	; 0xfa
 800aaec:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	7bfa      	ldrb	r2, [r7, #15]
 800aaf2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800aaf4:	bf00      	nop
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d07f      	beq.n	800ac12 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab1c:	2b10      	cmp	r3, #16
 800ab1e:	d175      	bne.n	800ac0c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d165      	bne.n	800abf6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	7d1b      	ldrb	r3, [r3, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ab36:	23fa      	movs	r3, #250	; 0xfa
 800ab38:	72fb      	strb	r3, [r7, #11]
 800ab3a:	e06c      	b.n	800ac16 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ab3c:	23ff      	movs	r3, #255	; 0xff
 800ab3e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f107 020b 	add.w	r2, r7, #11
 800ab4a:	7cf9      	ldrb	r1, [r7, #19]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f009 f9ad 	bl	8013eac <tcp_listen_with_backlog_and_err>
 800ab52:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d05d      	beq.n	800ac16 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3310      	adds	r3, #16
 800ab60:	4618      	mov	r0, r3
 800ab62:	f00f fe47 	bl	801a7f4 <sys_mbox_valid>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3310      	adds	r3, #16
 800ab72:	4618      	mov	r0, r3
 800ab74:	f00f fdca 	bl	801a70c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3310      	adds	r3, #16
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f00f fe49 	bl	801a816 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f00f fe30 	bl	801a7f4 <sys_mbox_valid>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d108      	bne.n	800abac <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3314      	adds	r3, #20
 800aba0:	2106      	movs	r1, #6
 800aba2:	4618      	mov	r0, r3
 800aba4:	f00f fd98 	bl	801a6d8 <sys_mbox_new>
 800aba8:	4603      	mov	r3, r0
 800abaa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800abac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d118      	bne.n	800abe6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2202      	movs	r2, #2
 800abba:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f00a f939 	bl	8014e48 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	4912      	ldr	r1, [pc, #72]	; (800ac28 <lwip_netconn_do_listen+0x12c>)
 800abde:	4618      	mov	r0, r3
 800abe0:	f00a f9aa 	bl	8014f38 <tcp_accept>
 800abe4:	e017      	b.n	800ac16 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f008 ff56 	bl	8013a98 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2200      	movs	r2, #0
 800abf2:	605a      	str	r2, [r3, #4]
 800abf4:	e00f      	b.n	800ac16 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d102      	bne.n	800ac06 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	72fb      	strb	r3, [r7, #11]
 800ac04:	e007      	b.n	800ac16 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ac06:	23f5      	movs	r3, #245	; 0xf5
 800ac08:	72fb      	strb	r3, [r7, #11]
 800ac0a:	e004      	b.n	800ac16 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ac0c:	23f0      	movs	r3, #240	; 0xf0
 800ac0e:	72fb      	strb	r3, [r7, #11]
 800ac10:	e001      	b.n	800ac16 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ac12:	23f5      	movs	r3, #245	; 0xf5
 800ac14:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ac16:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac1e:	bf00      	nop
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	0800a111 	.word	0x0800a111

0800ac2c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f001 f92f 	bl	800bea0 <netconn_err>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ac46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d134      	bne.n	800acb8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d02d      	beq.n	800acb4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac62:	2b20      	cmp	r3, #32
 800ac64:	d123      	bne.n	800acae <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10c      	bne.n	800ac8a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f00f f8be 	bl	8019e00 <udp_send>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ac88:	e016      	b.n	800acb8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6858      	ldr	r0, [r3, #4]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	6819      	ldr	r1, [r3, #0]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f103 0208 	add.w	r2, r3, #8
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	899b      	ldrh	r3, [r3, #12]
 800aca4:	f00f f8e0 	bl	8019e68 <udp_sendto>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
          break;
 800acac:	e004      	b.n	800acb8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800acae:	23f5      	movs	r3, #245	; 0xf5
 800acb0:	73fb      	strb	r3, [r7, #15]
          break;
 800acb2:	e001      	b.n	800acb8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800acb4:	23f5      	movs	r3, #245	; 0xf5
 800acb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	7bfa      	ldrb	r2, [r7, #15]
 800acbc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800acbe:	bf00      	nop
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b086      	sub	sp, #24
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2200      	movs	r2, #0
 800acd6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d022      	beq.n	800ad28 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acec:	2b10      	cmp	r3, #16
 800acee:	d11b      	bne.n	800ad28 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acfc:	d202      	bcs.n	800ad04 <lwip_netconn_do_recv+0x3e>
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	e001      	b.n	800ad08 <lwip_netconn_do_recv+0x42>
 800ad04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad08:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	89fa      	ldrh	r2, [r7, #14]
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f009 f9cd 	bl	80140b4 <tcp_recved>
        remaining -= recved;
 800ad1a:	89fb      	ldrh	r3, [r7, #14]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e6      	bne.n	800acf6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ad28:	bf00      	nop
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <lwip_netconn_do_writemore+0x24>
 800ad46:	4b96      	ldr	r3, [pc, #600]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800ad48:	f240 6273 	movw	r2, #1651	; 0x673
 800ad4c:	4995      	ldr	r1, [pc, #596]	; (800afa4 <lwip_netconn_do_writemore+0x274>)
 800ad4e:	4896      	ldr	r0, [pc, #600]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800ad50:	f00f ff28 	bl	801aba4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	785b      	ldrb	r3, [r3, #1]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d006      	beq.n	800ad6a <lwip_netconn_do_writemore+0x3a>
 800ad5c:	4b90      	ldr	r3, [pc, #576]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800ad5e:	f240 6274 	movw	r2, #1652	; 0x674
 800ad62:	4992      	ldr	r1, [pc, #584]	; (800afac <lwip_netconn_do_writemore+0x27c>)
 800ad64:	4890      	ldr	r0, [pc, #576]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800ad66:	f00f ff1d 	bl	801aba4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <lwip_netconn_do_writemore+0x50>
 800ad72:	4b8b      	ldr	r3, [pc, #556]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800ad74:	f240 6275 	movw	r2, #1653	; 0x675
 800ad78:	498d      	ldr	r1, [pc, #564]	; (800afb0 <lwip_netconn_do_writemore+0x280>)
 800ad7a:	488b      	ldr	r0, [pc, #556]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800ad7c:	f00f ff12 	bl	801aba4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <lwip_netconn_do_writemore+0x66>
 800ad88:	4b85      	ldr	r3, [pc, #532]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800ad8a:	f240 6276 	movw	r2, #1654	; 0x676
 800ad8e:	4989      	ldr	r1, [pc, #548]	; (800afb4 <lwip_netconn_do_writemore+0x284>)
 800ad90:	4885      	ldr	r0, [pc, #532]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800ad92:	f00f ff07 	bl	801aba4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	699a      	ldr	r2, [r3, #24]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d306      	bcc.n	800adb4 <lwip_netconn_do_writemore+0x84>
 800ada6:	4b7e      	ldr	r3, [pc, #504]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800ada8:	f240 6277 	movw	r2, #1655	; 0x677
 800adac:	4982      	ldr	r1, [pc, #520]	; (800afb8 <lwip_netconn_do_writemore+0x288>)
 800adae:	487e      	ldr	r0, [pc, #504]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800adb0:	f00f fef8 	bl	801aba4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	899b      	ldrh	r3, [r3, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d106      	bne.n	800adcc <lwip_netconn_do_writemore+0x9c>
 800adbe:	4b78      	ldr	r3, [pc, #480]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800adc0:	f240 6279 	movw	r2, #1657	; 0x679
 800adc4:	497d      	ldr	r1, [pc, #500]	; (800afbc <lwip_netconn_do_writemore+0x28c>)
 800adc6:	4878      	ldr	r0, [pc, #480]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800adc8:	f00f feec 	bl	801aba4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	7f1b      	ldrb	r3, [r3, #28]
 800add2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	7f1b      	ldrb	r3, [r3, #28]
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <lwip_netconn_do_writemore+0xba>
 800ade0:	7ebb      	ldrb	r3, [r7, #26]
 800ade2:	f003 0304 	and.w	r3, r3, #4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <lwip_netconn_do_writemore+0xbe>
 800adea:	2301      	movs	r3, #1
 800adec:	e000      	b.n	800adf0 <lwip_netconn_do_writemore+0xc0>
 800adee:	2300      	movs	r3, #0
 800adf0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	4413      	add	r3, r2
 800ae02:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1c:	d307      	bcc.n	800ae2e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ae1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae22:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae24:	7ebb      	ldrb	r3, [r7, #26]
 800ae26:	f043 0302 	orr.w	r3, r3, #2
 800ae2a:	76bb      	strb	r3, [r7, #26]
 800ae2c:	e001      	b.n	800ae32 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae3a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ae3c:	89fa      	ldrh	r2, [r7, #14]
 800ae3e:	8bbb      	ldrh	r3, [r7, #28]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d216      	bcs.n	800ae72 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ae44:	89fb      	ldrh	r3, [r7, #14]
 800ae46:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae48:	7e3b      	ldrb	r3, [r7, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00d      	beq.n	800ae6a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae4e:	8bbb      	ldrh	r3, [r7, #28]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10e      	bne.n	800ae72 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d102      	bne.n	800ae64 <lwip_netconn_do_writemore+0x134>
 800ae5e:	f06f 0306 	mvn.w	r3, #6
 800ae62:	e000      	b.n	800ae66 <lwip_netconn_do_writemore+0x136>
 800ae64:	2300      	movs	r3, #0
 800ae66:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae68:	e07d      	b.n	800af66 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae6a:	7ebb      	ldrb	r3, [r7, #26]
 800ae6c:	f043 0302 	orr.w	r3, r3, #2
 800ae70:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	691a      	ldr	r2, [r3, #16]
 800ae78:	8bbb      	ldrh	r3, [r7, #28]
 800ae7a:	441a      	add	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d906      	bls.n	800ae96 <lwip_netconn_do_writemore+0x166>
 800ae88:	4b45      	ldr	r3, [pc, #276]	; (800afa0 <lwip_netconn_do_writemore+0x270>)
 800ae8a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ae8e:	494c      	ldr	r1, [pc, #304]	; (800afc0 <lwip_netconn_do_writemore+0x290>)
 800ae90:	4845      	ldr	r0, [pc, #276]	; (800afa8 <lwip_netconn_do_writemore+0x278>)
 800ae92:	f00f fe87 	bl	801aba4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae96:	8bbb      	ldrh	r3, [r7, #28]
 800ae98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d103      	bne.n	800aea8 <lwip_netconn_do_writemore+0x178>
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea6:	d209      	bcs.n	800aebc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aeac:	8bba      	ldrh	r2, [r7, #28]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d10b      	bne.n	800aeca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	899b      	ldrh	r3, [r3, #12]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d906      	bls.n	800aeca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800aebc:	2301      	movs	r3, #1
 800aebe:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aec0:	7ebb      	ldrb	r3, [r7, #26]
 800aec2:	f043 0302 	orr.w	r3, r3, #2
 800aec6:	76bb      	strb	r3, [r7, #26]
 800aec8:	e001      	b.n	800aece <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6858      	ldr	r0, [r3, #4]
 800aed2:	7ebb      	ldrb	r3, [r7, #26]
 800aed4:	8bba      	ldrh	r2, [r7, #28]
 800aed6:	6979      	ldr	r1, [r7, #20]
 800aed8:	f00c fef6 	bl	8017cc8 <tcp_write>
 800aedc:	4603      	mov	r3, r0
 800aede:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d12c      	bne.n	800af42 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	6999      	ldr	r1, [r3, #24]
 800aeee:	8bba      	ldrh	r2, [r7, #28]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	440a      	add	r2, r1
 800aef6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	6919      	ldr	r1, [r3, #16]
 800aefe:	8bba      	ldrh	r2, [r7, #28]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a1b      	ldr	r3, [r3, #32]
 800af04:	440a      	add	r2, r1
 800af06:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	691a      	ldr	r2, [r3, #16]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d113      	bne.n	800af42 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	899a      	ldrh	r2, [r3, #12]
 800af20:	3a01      	subs	r2, #1
 800af22:	b292      	uxth	r2, r2
 800af24:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	899b      	ldrh	r3, [r3, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d008      	beq.n	800af42 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	3208      	adds	r2, #8
 800af38:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	2200      	movs	r2, #0
 800af40:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800af42:	7e7b      	ldrb	r3, [r7, #25]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <lwip_netconn_do_writemore+0x222>
 800af48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f43f af50 	beq.w	800adf2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <lwip_netconn_do_writemore+0x234>
 800af5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af62:	d147      	bne.n	800aff4 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800af64:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af66:	7e3b      	ldrb	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02b      	beq.n	800afc4 <lwip_netconn_do_writemore+0x294>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	699a      	ldr	r2, [r3, #24]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d223      	bcs.n	800afc4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <lwip_netconn_do_writemore+0x260>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	2200      	movs	r2, #0
 800af8a:	2103      	movs	r1, #3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	7f1b      	ldrb	r3, [r3, #28]
 800af94:	f043 0310 	orr.w	r3, r3, #16
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	771a      	strb	r2, [r3, #28]
 800af9e:	e029      	b.n	800aff4 <lwip_netconn_do_writemore+0x2c4>
 800afa0:	0801c2a8 	.word	0x0801c2a8
 800afa4:	0801c480 	.word	0x0801c480
 800afa8:	0801c36c 	.word	0x0801c36c
 800afac:	0801c788 	.word	0x0801c788
 800afb0:	0801c490 	.word	0x0801c490
 800afb4:	0801c7a8 	.word	0x0801c7a8
 800afb8:	0801c7c0 	.word	0x0801c7c0
 800afbc:	0801c800 	.word	0x0801c800
 800afc0:	0801c828 	.word	0x0801c828
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afcc:	f640 3269 	movw	r2, #2921	; 0xb69
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d905      	bls.n	800afe0 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d909      	bls.n	800aff4 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d005      	beq.n	800aff4 <lwip_netconn_do_writemore+0x2c4>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2200      	movs	r2, #0
 800afee:	2103      	movs	r1, #3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800aff4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d11d      	bne.n	800b038 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	699a      	ldr	r2, [r3, #24]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d002      	beq.n	800b012 <lwip_netconn_do_writemore+0x2e2>
 800b00c:	7e3b      	ldrb	r3, [r7, #24]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b012:	2301      	movs	r3, #1
 800b014:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f00d fc3e 	bl	801889c <tcp_output>
 800b020:	4603      	mov	r3, r0
 800b022:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b024:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b028:	f113 0f04 	cmn.w	r3, #4
 800b02c:	d12c      	bne.n	800b088 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b02e:	7b3b      	ldrb	r3, [r7, #12]
 800b030:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b032:	2301      	movs	r3, #1
 800b034:	76fb      	strb	r3, [r7, #27]
 800b036:	e027      	b.n	800b088 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800b038:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b040:	d120      	bne.n	800b084 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	4618      	mov	r0, r3
 800b048:	f00d fc28 	bl	801889c <tcp_output>
 800b04c:	4603      	mov	r3, r0
 800b04e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b050:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b054:	f113 0f04 	cmn.w	r3, #4
 800b058:	d104      	bne.n	800b064 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b05a:	7b7b      	ldrb	r3, [r7, #13]
 800b05c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b05e:	2301      	movs	r3, #1
 800b060:	76fb      	strb	r3, [r7, #27]
 800b062:	e011      	b.n	800b088 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800b064:	7e3b      	ldrb	r3, [r7, #24]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00e      	beq.n	800b088 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d102      	bne.n	800b07a <lwip_netconn_do_writemore+0x34a>
 800b074:	f06f 0306 	mvn.w	r3, #6
 800b078:	e000      	b.n	800b07c <lwip_netconn_do_writemore+0x34c>
 800b07a:	2300      	movs	r3, #0
 800b07c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b07e:	2301      	movs	r3, #1
 800b080:	76fb      	strb	r3, [r7, #27]
 800b082:	e001      	b.n	800b088 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b084:	2301      	movs	r3, #1
 800b086:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b088:	7efb      	ldrb	r3, [r7, #27]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d015      	beq.n	800b0ba <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	330c      	adds	r3, #12
 800b096:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a1b      	ldr	r3, [r3, #32]
 800b09c:	7ffa      	ldrb	r2, [r7, #31]
 800b09e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d006      	beq.n	800b0c0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b0b2:	68b8      	ldr	r0, [r7, #8]
 800b0b4:	f00f fc12 	bl	801a8dc <sys_sem_signal>
 800b0b8:	e002      	b.n	800b0c0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b0be:	e000      	b.n	800b0c2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop

0800b0cc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fedf 	bl	800bea0 <netconn_err>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d166      	bne.n	800b1bc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0f8:	2b10      	cmp	r3, #16
 800b0fa:	d15d      	bne.n	800b1b8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	785b      	ldrb	r3, [r3, #1]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b106:	23fb      	movs	r3, #251	; 0xfb
 800b108:	73fb      	strb	r3, [r7, #15]
 800b10a:	e057      	b.n	800b1bc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d04d      	beq.n	800b1b2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2201      	movs	r2, #1
 800b11c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <lwip_netconn_do_write+0x6a>
 800b128:	4b28      	ldr	r3, [pc, #160]	; (800b1cc <lwip_netconn_do_write+0x100>)
 800b12a:	f240 7223 	movw	r2, #1827	; 0x723
 800b12e:	4928      	ldr	r1, [pc, #160]	; (800b1d0 <lwip_netconn_do_write+0x104>)
 800b130:	4828      	ldr	r0, [pc, #160]	; (800b1d4 <lwip_netconn_do_write+0x108>)
 800b132:	f00f fd37 	bl	801aba4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <lwip_netconn_do_write+0x80>
 800b13e:	4b23      	ldr	r3, [pc, #140]	; (800b1cc <lwip_netconn_do_write+0x100>)
 800b140:	f240 7224 	movw	r2, #1828	; 0x724
 800b144:	4924      	ldr	r1, [pc, #144]	; (800b1d8 <lwip_netconn_do_write+0x10c>)
 800b146:	4823      	ldr	r0, [pc, #140]	; (800b1d4 <lwip_netconn_do_write+0x108>)
 800b148:	f00f fd2c 	bl	801aba4 <iprintf>
        msg->conn->current_msg = msg;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2100      	movs	r1, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fde8 	bl	800ad30 <lwip_netconn_do_writemore>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d02e      	beq.n	800b1c4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	785b      	ldrb	r3, [r3, #1]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d006      	beq.n	800b17e <lwip_netconn_do_write+0xb2>
 800b170:	4b16      	ldr	r3, [pc, #88]	; (800b1cc <lwip_netconn_do_write+0x100>)
 800b172:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b176:	4919      	ldr	r1, [pc, #100]	; (800b1dc <lwip_netconn_do_write+0x110>)
 800b178:	4816      	ldr	r0, [pc, #88]	; (800b1d4 <lwip_netconn_do_write+0x108>)
 800b17a:	f00f fd13 	bl	801aba4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b17e:	4818      	ldr	r0, [pc, #96]	; (800b1e0 <lwip_netconn_do_write+0x114>)
 800b180:	f00f fc15 	bl	801a9ae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	330c      	adds	r3, #12
 800b18a:	2100      	movs	r1, #0
 800b18c:	4618      	mov	r0, r3
 800b18e:	f00f fb74 	bl	801a87a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b192:	4813      	ldr	r0, [pc, #76]	; (800b1e0 <lwip_netconn_do_write+0x114>)
 800b194:	f00f fbfc 	bl	801a990 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	785b      	ldrb	r3, [r3, #1]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d110      	bne.n	800b1c4 <lwip_netconn_do_write+0xf8>
 800b1a2:	4b0a      	ldr	r3, [pc, #40]	; (800b1cc <lwip_netconn_do_write+0x100>)
 800b1a4:	f240 722c 	movw	r2, #1836	; 0x72c
 800b1a8:	490c      	ldr	r1, [pc, #48]	; (800b1dc <lwip_netconn_do_write+0x110>)
 800b1aa:	480a      	ldr	r0, [pc, #40]	; (800b1d4 <lwip_netconn_do_write+0x108>)
 800b1ac:	f00f fcfa 	bl	801aba4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b1b0:	e008      	b.n	800b1c4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b1b2:	23f5      	movs	r3, #245	; 0xf5
 800b1b4:	73fb      	strb	r3, [r7, #15]
 800b1b6:	e001      	b.n	800b1bc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b1b8:	23fa      	movs	r3, #250	; 0xfa
 800b1ba:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	7bfa      	ldrb	r2, [r7, #15]
 800b1c0:	711a      	strb	r2, [r3, #4]
 800b1c2:	e000      	b.n	800b1c6 <lwip_netconn_do_write+0xfa>
        return;
 800b1c4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	0801c2a8 	.word	0x0801c2a8
 800b1d0:	0801c6cc 	.word	0x0801c6cc
 800b1d4:	0801c36c 	.word	0x0801c36c
 800b1d8:	0801c854 	.word	0x0801c854
 800b1dc:	0801c6e8 	.word	0x0801c6e8
 800b1e0:	20008870 	.word	0x20008870

0800b1e4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d06b      	beq.n	800b2d2 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	7c1b      	ldrb	r3, [r3, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d007      	beq.n	800b212 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	6812      	ldr	r2, [r2, #0]
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	e006      	b.n	800b220 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	6852      	ldr	r2, [r2, #4]
 800b21e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b230:	2b10      	cmp	r3, #16
 800b232:	d021      	beq.n	800b278 <lwip_netconn_do_getaddr+0x94>
 800b234:	2b20      	cmp	r3, #32
 800b236:	d144      	bne.n	800b2c2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	7c1b      	ldrb	r3, [r3, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d007      	beq.n	800b250 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	8a52      	ldrh	r2, [r2, #18]
 800b24c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800b24e:	e044      	b.n	800b2da <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	7c1b      	ldrb	r3, [r3, #16]
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d103      	bne.n	800b268 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	22f5      	movs	r2, #245	; 0xf5
 800b264:	711a      	strb	r2, [r3, #4]
        break;
 800b266:	e038      	b.n	800b2da <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	8a92      	ldrh	r2, [r2, #20]
 800b274:	801a      	strh	r2, [r3, #0]
        break;
 800b276:	e030      	b.n	800b2da <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	7c1b      	ldrb	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10f      	bne.n	800b2a0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d005      	beq.n	800b298 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	7d1b      	ldrb	r3, [r3, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d103      	bne.n	800b2a0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	22f5      	movs	r2, #245	; 0xf5
 800b29c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b29e:	e01c      	b.n	800b2da <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	7c1b      	ldrb	r3, [r3, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d004      	beq.n	800b2b2 <lwip_netconn_do_getaddr+0xce>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	8adb      	ldrh	r3, [r3, #22]
 800b2b0:	e003      	b.n	800b2ba <lwip_netconn_do_getaddr+0xd6>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	8b1b      	ldrh	r3, [r3, #24]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	68d2      	ldr	r2, [r2, #12]
 800b2be:	8013      	strh	r3, [r2, #0]
        break;
 800b2c0:	e00b      	b.n	800b2da <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b2c2:	4b08      	ldr	r3, [pc, #32]	; (800b2e4 <lwip_netconn_do_getaddr+0x100>)
 800b2c4:	f240 727d 	movw	r2, #1917	; 0x77d
 800b2c8:	4907      	ldr	r1, [pc, #28]	; (800b2e8 <lwip_netconn_do_getaddr+0x104>)
 800b2ca:	4808      	ldr	r0, [pc, #32]	; (800b2ec <lwip_netconn_do_getaddr+0x108>)
 800b2cc:	f00f fc6a 	bl	801aba4 <iprintf>
        break;
 800b2d0:	e003      	b.n	800b2da <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22f5      	movs	r2, #245	; 0xf5
 800b2d6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	0801c2a8 	.word	0x0801c2a8
 800b2e8:	0801c868 	.word	0x0801c868
 800b2ec:	0801c36c 	.word	0x0801c36c

0800b2f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	785b      	ldrb	r3, [r3, #1]
 800b302:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d069      	beq.n	800b3e2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d162      	bne.n	800b3e2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b320:	2b03      	cmp	r3, #3
 800b322:	d002      	beq.n	800b32a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	2b02      	cmp	r3, #2
 800b328:	d05b      	beq.n	800b3e2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d103      	bne.n	800b338 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	22f5      	movs	r2, #245	; 0xf5
 800b334:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b336:	e059      	b.n	800b3ec <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d103      	bne.n	800b346 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	22fb      	movs	r2, #251	; 0xfb
 800b342:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b344:	e052      	b.n	800b3ec <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	7a1b      	ldrb	r3, [r3, #8]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff f8ce 	bl	800a4f8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d006      	beq.n	800b374 <lwip_netconn_do_close+0x84>
 800b366:	4b23      	ldr	r3, [pc, #140]	; (800b3f4 <lwip_netconn_do_close+0x104>)
 800b368:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b36c:	4922      	ldr	r1, [pc, #136]	; (800b3f8 <lwip_netconn_do_close+0x108>)
 800b36e:	4823      	ldr	r0, [pc, #140]	; (800b3fc <lwip_netconn_do_close+0x10c>)
 800b370:	f00f fc18 	bl	801aba4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2204      	movs	r2, #4
 800b37a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff f932 	bl	800a5f4 <lwip_netconn_do_close_internal>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d029      	beq.n	800b3ea <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	785b      	ldrb	r3, [r3, #1]
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d006      	beq.n	800b3ae <lwip_netconn_do_close+0xbe>
 800b3a0:	4b14      	ldr	r3, [pc, #80]	; (800b3f4 <lwip_netconn_do_close+0x104>)
 800b3a2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b3a6:	4916      	ldr	r1, [pc, #88]	; (800b400 <lwip_netconn_do_close+0x110>)
 800b3a8:	4814      	ldr	r0, [pc, #80]	; (800b3fc <lwip_netconn_do_close+0x10c>)
 800b3aa:	f00f fbfb 	bl	801aba4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b3ae:	4815      	ldr	r0, [pc, #84]	; (800b404 <lwip_netconn_do_close+0x114>)
 800b3b0:	f00f fafd 	bl	801a9ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f00f fa5c 	bl	801a87a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b3c2:	4810      	ldr	r0, [pc, #64]	; (800b404 <lwip_netconn_do_close+0x114>)
 800b3c4:	f00f fae4 	bl	801a990 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	785b      	ldrb	r3, [r3, #1]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <lwip_netconn_do_close+0xfa>
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <lwip_netconn_do_close+0x104>)
 800b3d4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b3d8:	4909      	ldr	r1, [pc, #36]	; (800b400 <lwip_netconn_do_close+0x110>)
 800b3da:	4808      	ldr	r0, [pc, #32]	; (800b3fc <lwip_netconn_do_close+0x10c>)
 800b3dc:	f00f fbe2 	bl	801aba4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b3e0:	e003      	b.n	800b3ea <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	22f5      	movs	r2, #245	; 0xf5
 800b3e6:	711a      	strb	r2, [r3, #4]
 800b3e8:	e000      	b.n	800b3ec <lwip_netconn_do_close+0xfc>
      return;
 800b3ea:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0801c2a8 	.word	0x0801c2a8
 800b3f8:	0801c6cc 	.word	0x0801c6cc
 800b3fc:	0801c36c 	.word	0x0801c36c
 800b400:	0801c6e8 	.word	0x0801c6e8
 800b404:	20008870 	.word	0x20008870

0800b408 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	330c      	adds	r3, #12
 800b418:	461a      	mov	r2, r3
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f002 f8cb 	bl	800d5b8 <tcpip_send_msg_wait_sem>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d103      	bne.n	800b436 <netconn_apimsg+0x2e>
    return apimsg->err;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b434:	e001      	b.n	800b43a <netconn_apimsg+0x32>
  }
  return err;
 800b436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08c      	sub	sp, #48	; 0x30
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	603a      	str	r2, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
 800b450:	460b      	mov	r3, r1
 800b452:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe ff95 	bl	800a388 <netconn_alloc>
 800b45e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d054      	beq.n	800b510 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b466:	79bb      	ldrb	r3, [r7, #6]
 800b468:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b46e:	f107 0308 	add.w	r3, r7, #8
 800b472:	4619      	mov	r1, r3
 800b474:	4829      	ldr	r0, [pc, #164]	; (800b51c <netconn_new_with_proto_and_callback+0xd8>)
 800b476:	f7ff ffc7 	bl	800b408 <netconn_apimsg>
 800b47a:	4603      	mov	r3, r0
 800b47c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800b480:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b484:	2b00      	cmp	r3, #0
 800b486:	d043      	beq.n	800b510 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <netconn_new_with_proto_and_callback+0x58>
 800b490:	4b23      	ldr	r3, [pc, #140]	; (800b520 <netconn_new_with_proto_and_callback+0xdc>)
 800b492:	22a3      	movs	r2, #163	; 0xa3
 800b494:	4923      	ldr	r1, [pc, #140]	; (800b524 <netconn_new_with_proto_and_callback+0xe0>)
 800b496:	4824      	ldr	r0, [pc, #144]	; (800b528 <netconn_new_with_proto_and_callback+0xe4>)
 800b498:	f00f fb84 	bl	801aba4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	3310      	adds	r3, #16
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f00f f9a7 	bl	801a7f4 <sys_mbox_valid>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d105      	bne.n	800b4b8 <netconn_new_with_proto_and_callback+0x74>
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <netconn_new_with_proto_and_callback+0xdc>)
 800b4ae:	22a4      	movs	r2, #164	; 0xa4
 800b4b0:	491e      	ldr	r1, [pc, #120]	; (800b52c <netconn_new_with_proto_and_callback+0xe8>)
 800b4b2:	481d      	ldr	r0, [pc, #116]	; (800b528 <netconn_new_with_proto_and_callback+0xe4>)
 800b4b4:	f00f fb76 	bl	801aba4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ba:	3314      	adds	r3, #20
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f00f f999 	bl	801a7f4 <sys_mbox_valid>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <netconn_new_with_proto_and_callback+0x90>
 800b4c8:	4b15      	ldr	r3, [pc, #84]	; (800b520 <netconn_new_with_proto_and_callback+0xdc>)
 800b4ca:	22a6      	movs	r2, #166	; 0xa6
 800b4cc:	4918      	ldr	r1, [pc, #96]	; (800b530 <netconn_new_with_proto_and_callback+0xec>)
 800b4ce:	4816      	ldr	r0, [pc, #88]	; (800b528 <netconn_new_with_proto_and_callback+0xe4>)
 800b4d0:	f00f fb68 	bl	801aba4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	330c      	adds	r3, #12
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f00f fa19 	bl	801a910 <sys_sem_valid>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d105      	bne.n	800b4f0 <netconn_new_with_proto_and_callback+0xac>
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <netconn_new_with_proto_and_callback+0xdc>)
 800b4e6:	22a9      	movs	r2, #169	; 0xa9
 800b4e8:	4912      	ldr	r1, [pc, #72]	; (800b534 <netconn_new_with_proto_and_callback+0xf0>)
 800b4ea:	480f      	ldr	r0, [pc, #60]	; (800b528 <netconn_new_with_proto_and_callback+0xe4>)
 800b4ec:	f00f fb5a 	bl	801aba4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	330c      	adds	r3, #12
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f00f f9fe 	bl	801a8f6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	3310      	adds	r3, #16
 800b4fe:	4618      	mov	r0, r3
 800b500:	f00f f904 	bl	801a70c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b506:	2007      	movs	r0, #7
 800b508:	f006 ff2a 	bl	8012360 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	e000      	b.n	800b512 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b512:	4618      	mov	r0, r3
 800b514:	3730      	adds	r7, #48	; 0x30
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	0800a35d 	.word	0x0800a35d
 800b520:	0801c880 	.word	0x0801c880
 800b524:	0801c934 	.word	0x0801c934
 800b528:	0801c36c 	.word	0x0801c36c
 800b52c:	0801c958 	.word	0x0801c958
 800b530:	0801c970 	.word	0x0801c970
 800b534:	0801c994 	.word	0x0801c994

0800b538 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08c      	sub	sp, #48	; 0x30
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	e014      	b.n	800b574 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b54e:	2329      	movs	r3, #41	; 0x29
 800b550:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	4619      	mov	r1, r3
 800b558:	4808      	ldr	r0, [pc, #32]	; (800b57c <netconn_prepare_delete+0x44>)
 800b55a:	f7ff ff55 	bl	800b408 <netconn_apimsg>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <netconn_prepare_delete+0x3a>
    return err;
 800b56c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b570:	e000      	b.n	800b574 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3730      	adds	r7, #48	; 0x30
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	0800a8c1 	.word	0x0800a8c1

0800b580 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <netconn_delete+0x12>
    return ERR_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e00d      	b.n	800b5ae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff ffd0 	bl	800b538 <netconn_prepare_delete>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <netconn_delete+0x2a>
    netconn_free(conn);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7fe ff5d 	bl	800a464 <netconn_free>
  }
  return err;
 800b5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08e      	sub	sp, #56	; 0x38
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d109      	bne.n	800b5e0 <netconn_getaddr+0x28>
 800b5cc:	4b1d      	ldr	r3, [pc, #116]	; (800b644 <netconn_getaddr+0x8c>)
 800b5ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b5d2:	491d      	ldr	r1, [pc, #116]	; (800b648 <netconn_getaddr+0x90>)
 800b5d4:	481d      	ldr	r0, [pc, #116]	; (800b64c <netconn_getaddr+0x94>)
 800b5d6:	f00f fae5 	bl	801aba4 <iprintf>
 800b5da:	f06f 030f 	mvn.w	r3, #15
 800b5de:	e02d      	b.n	800b63c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d109      	bne.n	800b5fa <netconn_getaddr+0x42>
 800b5e6:	4b17      	ldr	r3, [pc, #92]	; (800b644 <netconn_getaddr+0x8c>)
 800b5e8:	f240 1213 	movw	r2, #275	; 0x113
 800b5ec:	4918      	ldr	r1, [pc, #96]	; (800b650 <netconn_getaddr+0x98>)
 800b5ee:	4817      	ldr	r0, [pc, #92]	; (800b64c <netconn_getaddr+0x94>)
 800b5f0:	f00f fad8 	bl	801aba4 <iprintf>
 800b5f4:	f06f 030f 	mvn.w	r3, #15
 800b5f8:	e020      	b.n	800b63c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d109      	bne.n	800b614 <netconn_getaddr+0x5c>
 800b600:	4b10      	ldr	r3, [pc, #64]	; (800b644 <netconn_getaddr+0x8c>)
 800b602:	f44f 728a 	mov.w	r2, #276	; 0x114
 800b606:	4913      	ldr	r1, [pc, #76]	; (800b654 <netconn_getaddr+0x9c>)
 800b608:	4810      	ldr	r0, [pc, #64]	; (800b64c <netconn_getaddr+0x94>)
 800b60a:	f00f facb 	bl	801aba4 <iprintf>
 800b60e:	f06f 030f 	mvn.w	r3, #15
 800b612:	e013      	b.n	800b63c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800b626:	f107 0314 	add.w	r3, r7, #20
 800b62a:	4619      	mov	r1, r3
 800b62c:	480a      	ldr	r0, [pc, #40]	; (800b658 <netconn_getaddr+0xa0>)
 800b62e:	f7ff feeb 	bl	800b408 <netconn_apimsg>
 800b632:	4603      	mov	r3, r0
 800b634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800b638:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3738      	adds	r7, #56	; 0x38
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	0801c880 	.word	0x0801c880
 800b648:	0801c9b0 	.word	0x0801c9b0
 800b64c:	0801c36c 	.word	0x0801c36c
 800b650:	0801c9d0 	.word	0x0801c9d0
 800b654:	0801c9f0 	.word	0x0801c9f0
 800b658:	0800b1e5 	.word	0x0800b1e5

0800b65c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08e      	sub	sp, #56	; 0x38
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d109      	bne.n	800b684 <netconn_bind+0x28>
 800b670:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <netconn_bind+0x5c>)
 800b672:	f44f 729c 	mov.w	r2, #312	; 0x138
 800b676:	4911      	ldr	r1, [pc, #68]	; (800b6bc <netconn_bind+0x60>)
 800b678:	4811      	ldr	r0, [pc, #68]	; (800b6c0 <netconn_bind+0x64>)
 800b67a:	f00f fa93 	bl	801aba4 <iprintf>
 800b67e:	f06f 030f 	mvn.w	r3, #15
 800b682:	e015      	b.n	800b6b0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800b68a:	4b0e      	ldr	r3, [pc, #56]	; (800b6c4 <netconn_bind+0x68>)
 800b68c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b696:	88fb      	ldrh	r3, [r7, #6]
 800b698:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b69a:	f107 0314 	add.w	r3, r7, #20
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4809      	ldr	r0, [pc, #36]	; (800b6c8 <netconn_bind+0x6c>)
 800b6a2:	f7ff feb1 	bl	800b408 <netconn_apimsg>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b6ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3738      	adds	r7, #56	; 0x38
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	0801c880 	.word	0x0801c880
 800b6bc:	0801ca10 	.word	0x0801ca10
 800b6c0:	0801c36c 	.word	0x0801c36c
 800b6c4:	08020f30 	.word	0x08020f30
 800b6c8:	0800aa89 	.word	0x0800aa89

0800b6cc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	; 0x30
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d109      	bne.n	800b6f2 <netconn_listen_with_backlog+0x26>
 800b6de:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <netconn_listen_with_backlog+0x48>)
 800b6e0:	f240 12bb 	movw	r2, #443	; 0x1bb
 800b6e4:	490c      	ldr	r1, [pc, #48]	; (800b718 <netconn_listen_with_backlog+0x4c>)
 800b6e6:	480d      	ldr	r0, [pc, #52]	; (800b71c <netconn_listen_with_backlog+0x50>)
 800b6e8:	f00f fa5c 	bl	801aba4 <iprintf>
 800b6ec:	f06f 030f 	mvn.w	r3, #15
 800b6f0:	e00c      	b.n	800b70c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800b6f6:	f107 030c 	add.w	r3, r7, #12
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4808      	ldr	r0, [pc, #32]	; (800b720 <netconn_listen_with_backlog+0x54>)
 800b6fe:	f7ff fe83 	bl	800b408 <netconn_apimsg>
 800b702:	4603      	mov	r3, r0
 800b704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b708:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3730      	adds	r7, #48	; 0x30
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	0801c880 	.word	0x0801c880
 800b718:	0801ca90 	.word	0x0801ca90
 800b71c:	0801c36c 	.word	0x0801c36c
 800b720:	0800aafd 	.word	0x0800aafd

0800b724 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d109      	bne.n	800b748 <netconn_accept+0x24>
 800b734:	4b3d      	ldr	r3, [pc, #244]	; (800b82c <netconn_accept+0x108>)
 800b736:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b73a:	493d      	ldr	r1, [pc, #244]	; (800b830 <netconn_accept+0x10c>)
 800b73c:	483d      	ldr	r0, [pc, #244]	; (800b834 <netconn_accept+0x110>)
 800b73e:	f00f fa31 	bl	801aba4 <iprintf>
 800b742:	f06f 030f 	mvn.w	r3, #15
 800b746:	e06c      	b.n	800b822 <netconn_accept+0xfe>
  *new_conn = NULL;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2200      	movs	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d109      	bne.n	800b768 <netconn_accept+0x44>
 800b754:	4b35      	ldr	r3, [pc, #212]	; (800b82c <netconn_accept+0x108>)
 800b756:	f240 12e3 	movw	r2, #483	; 0x1e3
 800b75a:	4937      	ldr	r1, [pc, #220]	; (800b838 <netconn_accept+0x114>)
 800b75c:	4835      	ldr	r0, [pc, #212]	; (800b834 <netconn_accept+0x110>)
 800b75e:	f00f fa21 	bl	801aba4 <iprintf>
 800b762:	f06f 030f 	mvn.w	r3, #15
 800b766:	e05c      	b.n	800b822 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fb99 	bl	800bea0 <netconn_err>
 800b76e:	4603      	mov	r3, r0
 800b770:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800b772:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800b77a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b77e:	e050      	b.n	800b822 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3314      	adds	r3, #20
 800b784:	4618      	mov	r0, r3
 800b786:	f00f f835 	bl	801a7f4 <sys_mbox_valid>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <netconn_accept+0x78>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	7f1b      	ldrb	r3, [r3, #28]
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800b79c:	f06f 030e 	mvn.w	r3, #14
 800b7a0:	e03f      	b.n	800b822 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7f1b      	ldrb	r3, [r3, #28]
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00e      	beq.n	800b7cc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	f107 020c 	add.w	r2, r7, #12
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f00f f804 	bl	801a7c6 <sys_arch_mbox_tryfetch>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c4:	d10a      	bne.n	800b7dc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800b7c6:	f06f 0306 	mvn.w	r3, #6
 800b7ca:	e02a      	b.n	800b822 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3314      	adds	r3, #20
 800b7d0:	f107 010c 	add.w	r1, r7, #12
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f00e ffc4 	bl	801a764 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <netconn_accept+0xcc>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f107 0213 	add.w	r2, r7, #19
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe f991 	bl	8009b20 <lwip_netconn_is_err_msg>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800b804:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b808:	e00b      	b.n	800b822 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800b810:	f06f 030e 	mvn.w	r3, #14
 800b814:	e005      	b.n	800b822 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b820:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	0801c880 	.word	0x0801c880
 800b830:	0801cab0 	.word	0x0801cab0
 800b834:	0801c36c 	.word	0x0801c36c
 800b838:	0801cad0 	.word	0x0801cad0

0800b83c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b088      	sub	sp, #32
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <netconn_recv_data+0x2c>
 800b854:	4b58      	ldr	r3, [pc, #352]	; (800b9b8 <netconn_recv_data+0x17c>)
 800b856:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b85a:	4958      	ldr	r1, [pc, #352]	; (800b9bc <netconn_recv_data+0x180>)
 800b85c:	4858      	ldr	r0, [pc, #352]	; (800b9c0 <netconn_recv_data+0x184>)
 800b85e:	f00f f9a1 	bl	801aba4 <iprintf>
 800b862:	f06f 030f 	mvn.w	r3, #15
 800b866:	e0a2      	b.n	800b9ae <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2200      	movs	r2, #0
 800b86c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d109      	bne.n	800b888 <netconn_recv_data+0x4c>
 800b874:	4b50      	ldr	r3, [pc, #320]	; (800b9b8 <netconn_recv_data+0x17c>)
 800b876:	f240 224a 	movw	r2, #586	; 0x24a
 800b87a:	4952      	ldr	r1, [pc, #328]	; (800b9c4 <netconn_recv_data+0x188>)
 800b87c:	4850      	ldr	r0, [pc, #320]	; (800b9c0 <netconn_recv_data+0x184>)
 800b87e:	f00f f991 	bl	801aba4 <iprintf>
 800b882:	f06f 030f 	mvn.w	r3, #15
 800b886:	e092      	b.n	800b9ae <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3310      	adds	r3, #16
 800b88c:	4618      	mov	r0, r3
 800b88e:	f00e ffb1 	bl	801a7f4 <sys_mbox_valid>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10e      	bne.n	800b8b6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fb01 	bl	800bea0 <netconn_err>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b8a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b8aa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b8ae:	e07e      	b.n	800b9ae <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b8b0:	f06f 030a 	mvn.w	r3, #10
 800b8b4:	e07b      	b.n	800b9ae <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	7f1b      	ldrb	r3, [r3, #28]
 800b8ba:	f003 0302 	and.w	r3, r3, #2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10f      	bne.n	800b8e2 <netconn_recv_data+0xa6>
 800b8c2:	79fb      	ldrb	r3, [r7, #7]
 800b8c4:	f003 0304 	and.w	r3, r3, #4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	7f1b      	ldrb	r3, [r3, #28]
 800b8d0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d023      	beq.n	800b92a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3310      	adds	r3, #16
 800b8e6:	f107 0218 	add.w	r2, r7, #24
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f00e ff6a 	bl	801a7c6 <sys_arch_mbox_tryfetch>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f8:	d11f      	bne.n	800b93a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 fad0 	bl	800bea0 <netconn_err>
 800b900:	4603      	mov	r3, r0
 800b902:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b904:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b90c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b910:	e04d      	b.n	800b9ae <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	7f1b      	ldrb	r3, [r3, #28]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b91e:	f06f 030a 	mvn.w	r3, #10
 800b922:	e044      	b.n	800b9ae <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b924:	f06f 0306 	mvn.w	r3, #6
 800b928:	e041      	b.n	800b9ae <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3310      	adds	r3, #16
 800b92e:	f107 0118 	add.w	r1, r7, #24
 800b932:	2200      	movs	r2, #0
 800b934:	4618      	mov	r0, r3
 800b936:	f00e ff15 	bl	801a764 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b942:	2b10      	cmp	r3, #16
 800b944:	d117      	bne.n	800b976 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	f107 0217 	add.w	r2, r7, #23
 800b94c:	4611      	mov	r1, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fe f8e6 	bl	8009b20 <lwip_netconn_is_err_msg>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b95e:	f113 0f0f 	cmn.w	r3, #15
 800b962:	d101      	bne.n	800b968 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	e022      	b.n	800b9ae <netconn_recv_data+0x172>
      }
      return err;
 800b968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b96c:	e01f      	b.n	800b9ae <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	891b      	ldrh	r3, [r3, #8]
 800b972:	83fb      	strh	r3, [r7, #30]
 800b974:	e00d      	b.n	800b992 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d106      	bne.n	800b98a <netconn_recv_data+0x14e>
 800b97c:	4b0e      	ldr	r3, [pc, #56]	; (800b9b8 <netconn_recv_data+0x17c>)
 800b97e:	f240 2291 	movw	r2, #657	; 0x291
 800b982:	4911      	ldr	r1, [pc, #68]	; (800b9c8 <netconn_recv_data+0x18c>)
 800b984:	480e      	ldr	r0, [pc, #56]	; (800b9c0 <netconn_recv_data+0x184>)
 800b986:	f00f f90d 	bl	801aba4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	891b      	ldrh	r3, [r3, #8]
 800b990:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	d005      	beq.n	800b9a6 <netconn_recv_data+0x16a>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	8bfa      	ldrh	r2, [r7, #30]
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0801c880 	.word	0x0801c880
 800b9bc:	0801caf0 	.word	0x0801caf0
 800b9c0:	0801c36c 	.word	0x0801c36c
 800b9c4:	0801cb10 	.word	0x0801cb10
 800b9c8:	0801cb2c 	.word	0x0801cb2c

0800b9cc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d005      	beq.n	800b9ea <netconn_tcp_recvd_msg+0x1e>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9e6:	2b10      	cmp	r3, #16
 800b9e8:	d009      	beq.n	800b9fe <netconn_tcp_recvd_msg+0x32>
 800b9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <netconn_tcp_recvd_msg+0x50>)
 800b9ec:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b9f0:	490b      	ldr	r1, [pc, #44]	; (800ba20 <netconn_tcp_recvd_msg+0x54>)
 800b9f2:	480c      	ldr	r0, [pc, #48]	; (800ba24 <netconn_tcp_recvd_msg+0x58>)
 800b9f4:	f00f f8d6 	bl	801aba4 <iprintf>
 800b9f8:	f06f 030f 	mvn.w	r3, #15
 800b9fc:	e00a      	b.n	800ba14 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ba0a:	6879      	ldr	r1, [r7, #4]
 800ba0c:	4806      	ldr	r0, [pc, #24]	; (800ba28 <netconn_tcp_recvd_msg+0x5c>)
 800ba0e:	f7ff fcfb 	bl	800b408 <netconn_apimsg>
 800ba12:	4603      	mov	r3, r0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	0801c880 	.word	0x0801c880
 800ba20:	0801cb38 	.word	0x0801cb38
 800ba24:	0801c36c 	.word	0x0801c36c
 800ba28:	0800acc7 	.word	0x0800acc7

0800ba2c <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08c      	sub	sp, #48	; 0x30
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <netconn_tcp_recvd+0x1c>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba44:	2b10      	cmp	r3, #16
 800ba46:	d009      	beq.n	800ba5c <netconn_tcp_recvd+0x30>
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <netconn_tcp_recvd+0x50>)
 800ba4a:	f240 22b5 	movw	r2, #693	; 0x2b5
 800ba4e:	490c      	ldr	r1, [pc, #48]	; (800ba80 <netconn_tcp_recvd+0x54>)
 800ba50:	480c      	ldr	r0, [pc, #48]	; (800ba84 <netconn_tcp_recvd+0x58>)
 800ba52:	f00f f8a7 	bl	801aba4 <iprintf>
 800ba56:	f06f 030f 	mvn.w	r3, #15
 800ba5a:	e00b      	b.n	800ba74 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800ba5c:	f107 030c 	add.w	r3, r7, #12
 800ba60:	461a      	mov	r2, r3
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff ffb1 	bl	800b9cc <netconn_tcp_recvd_msg>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800ba70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3730      	adds	r7, #48	; 0x30
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	0801c880 	.word	0x0801c880
 800ba80:	0801cb38 	.word	0x0801cb38
 800ba84:	0801c36c 	.word	0x0801c36c

0800ba88 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b090      	sub	sp, #64	; 0x40
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	4613      	mov	r3, r2
 800ba94:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3310      	adds	r3, #16
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f00e feaa 	bl	801a7f4 <sys_mbox_valid>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800baa6:	f06f 030a 	mvn.w	r3, #10
 800baaa:	e06d      	b.n	800bb88 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	7f1b      	ldrb	r3, [r3, #28]
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	da07      	bge.n	800bac6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	7f1b      	ldrb	r3, [r3, #28]
 800baba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800bac4:	e039      	b.n	800bb3a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	461a      	mov	r2, r3
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7ff feb5 	bl	800b83c <netconn_recv_data>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800bad8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800bae0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bae4:	e050      	b.n	800bb88 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800baec:	79fb      	ldrb	r3, [r7, #7]
 800baee:	f003 0308 	and.w	r3, r3, #8
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10e      	bne.n	800bb14 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <netconn_recv_data_tcp+0x7a>
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	891b      	ldrh	r3, [r3, #8]
 800bb00:	e000      	b.n	800bb04 <netconn_recv_data_tcp+0x7c>
 800bb02:	2301      	movs	r3, #1
 800bb04:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800bb06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb08:	f107 0214 	add.w	r2, r7, #20
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff ff5c 	bl	800b9cc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d134      	bne.n	800bb84 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	7f1b      	ldrb	r3, [r3, #28]
 800bb28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800bb32:	f06f 0306 	mvn.w	r3, #6
 800bb36:	e027      	b.n	800bb88 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800bb38:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <netconn_recv_data_tcp+0xc6>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	2200      	movs	r2, #0
 800bb48:	2101      	movs	r1, #1
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10f      	bne.n	800bb76 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 f9a2 	bl	800bea0 <netconn_err>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800bb62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <netconn_recv_data_tcp+0xe8>
          return err;
 800bb6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb6e:	e00b      	b.n	800bb88 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800bb70:	f06f 030d 	mvn.w	r3, #13
 800bb74:	e008      	b.n	800bb88 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800bb76:	2101      	movs	r1, #1
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 f961 	bl	800be40 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800bb7e:	f06f 030e 	mvn.w	r3, #14
 800bb82:	e001      	b.n	800bb88 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800bb84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3740      	adds	r7, #64	; 0x40
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <netconn_recv_tcp_pbuf_flags+0x20>
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbac:	2b10      	cmp	r3, #16
 800bbae:	d009      	beq.n	800bbc4 <netconn_recv_tcp_pbuf_flags+0x34>
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <netconn_recv_tcp_pbuf_flags+0x4c>)
 800bbb2:	f240 3225 	movw	r2, #805	; 0x325
 800bbb6:	490a      	ldr	r1, [pc, #40]	; (800bbe0 <netconn_recv_tcp_pbuf_flags+0x50>)
 800bbb8:	480a      	ldr	r0, [pc, #40]	; (800bbe4 <netconn_recv_tcp_pbuf_flags+0x54>)
 800bbba:	f00e fff3 	bl	801aba4 <iprintf>
 800bbbe:	f06f 030f 	mvn.w	r3, #15
 800bbc2:	e006      	b.n	800bbd2 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7ff ff5c 	bl	800ba88 <netconn_recv_data_tcp>
 800bbd0:	4603      	mov	r3, r0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	0801c880 	.word	0x0801c880
 800bbe0:	0801cb38 	.word	0x0801cb38
 800bbe4:	0801c36c 	.word	0x0801c36c

0800bbe8 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc04:	2b10      	cmp	r3, #16
 800bc06:	d109      	bne.n	800bc1c <netconn_recv_udp_raw_netbuf_flags+0x34>
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800bc0a:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800bc0e:	490a      	ldr	r1, [pc, #40]	; (800bc38 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800bc10:	480a      	ldr	r0, [pc, #40]	; (800bc3c <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800bc12:	f00e ffc7 	bl	801aba4 <iprintf>
 800bc16:	f06f 030f 	mvn.w	r3, #15
 800bc1a:	e006      	b.n	800bc2a <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff fe0a 	bl	800b83c <netconn_recv_data>
 800bc28:	4603      	mov	r3, r0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	0801c880 	.word	0x0801c880
 800bc38:	0801cb5c 	.word	0x0801cb5c
 800bc3c:	0801c36c 	.word	0x0801c36c

0800bc40 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	; 0x30
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <netconn_send+0x24>
 800bc50:	4b0e      	ldr	r3, [pc, #56]	; (800bc8c <netconn_send+0x4c>)
 800bc52:	f240 32b2 	movw	r2, #946	; 0x3b2
 800bc56:	490e      	ldr	r1, [pc, #56]	; (800bc90 <netconn_send+0x50>)
 800bc58:	480e      	ldr	r0, [pc, #56]	; (800bc94 <netconn_send+0x54>)
 800bc5a:	f00e ffa3 	bl	801aba4 <iprintf>
 800bc5e:	f06f 030f 	mvn.w	r3, #15
 800bc62:	e00e      	b.n	800bc82 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	4619      	mov	r1, r3
 800bc72:	4809      	ldr	r0, [pc, #36]	; (800bc98 <netconn_send+0x58>)
 800bc74:	f7ff fbc8 	bl	800b408 <netconn_apimsg>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bc7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3730      	adds	r7, #48	; 0x30
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	0801c880 	.word	0x0801c880
 800bc90:	0801cb94 	.word	0x0801cb94
 800bc94:	0801c36c 	.word	0x0801c36c
 800bc98:	0800ac2d 	.word	0x0800ac2d

0800bc9c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800bcb2:	78fa      	ldrb	r2, [r7, #3]
 800bcb4:	f107 0110 	add.w	r1, r7, #16
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f805 	bl	800bcd0 <netconn_write_vectors_partly>
 800bcc6:	4603      	mov	r3, r0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b092      	sub	sp, #72	; 0x48
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4611      	mov	r1, r2
 800bcdc:	461a      	mov	r2, r3
 800bcde:	460b      	mov	r3, r1
 800bce0:	80fb      	strh	r3, [r7, #6]
 800bce2:	4613      	mov	r3, r2
 800bce4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d109      	bne.n	800bd00 <netconn_write_vectors_partly+0x30>
 800bcec:	4b4e      	ldr	r3, [pc, #312]	; (800be28 <netconn_write_vectors_partly+0x158>)
 800bcee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bcf2:	494e      	ldr	r1, [pc, #312]	; (800be2c <netconn_write_vectors_partly+0x15c>)
 800bcf4:	484e      	ldr	r0, [pc, #312]	; (800be30 <netconn_write_vectors_partly+0x160>)
 800bcf6:	f00e ff55 	bl	801aba4 <iprintf>
 800bcfa:	f06f 030f 	mvn.w	r3, #15
 800bcfe:	e08e      	b.n	800be1e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd08:	2b10      	cmp	r3, #16
 800bd0a:	d009      	beq.n	800bd20 <netconn_write_vectors_partly+0x50>
 800bd0c:	4b46      	ldr	r3, [pc, #280]	; (800be28 <netconn_write_vectors_partly+0x158>)
 800bd0e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800bd12:	4948      	ldr	r1, [pc, #288]	; (800be34 <netconn_write_vectors_partly+0x164>)
 800bd14:	4846      	ldr	r0, [pc, #280]	; (800be30 <netconn_write_vectors_partly+0x160>)
 800bd16:	f00e ff45 	bl	801aba4 <iprintf>
 800bd1a:	f06f 0305 	mvn.w	r3, #5
 800bd1e:	e07e      	b.n	800be1e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	7f1b      	ldrb	r3, [r3, #28]
 800bd24:	f003 0302 	and.w	r3, r3, #2
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d104      	bne.n	800bd36 <netconn_write_vectors_partly+0x66>
 800bd2c:	797b      	ldrb	r3, [r7, #5]
 800bd2e:	f003 0304 	and.w	r3, r3, #4
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <netconn_write_vectors_partly+0x6a>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <netconn_write_vectors_partly+0x6c>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800bd40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d005      	beq.n	800bd54 <netconn_write_vectors_partly+0x84>
 800bd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d102      	bne.n	800bd54 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800bd4e:	f06f 0305 	mvn.w	r3, #5
 800bd52:	e064      	b.n	800be1e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800bd58:	2300      	movs	r3, #0
 800bd5a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd5c:	e015      	b.n	800bd8a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800bd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	4413      	add	r3, r2
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd6a:	4413      	add	r3, r2
 800bd6c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800bd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	4413      	add	r3, r2
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d202      	bcs.n	800bd84 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800bd7e:	f06f 0305 	mvn.w	r3, #5
 800bd82:	e04c      	b.n	800be1e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800bd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd86:	3301      	adds	r3, #1
 800bd88:	643b      	str	r3, [r7, #64]	; 0x40
 800bd8a:	88fb      	ldrh	r3, [r7, #6]
 800bd8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	dbe5      	blt.n	800bd5e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800bd92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	e040      	b.n	800be1e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800bd9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	da0a      	bge.n	800bdb8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800bda2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800bda8:	f06f 0305 	mvn.w	r3, #5
 800bdac:	e037      	b.n	800be1e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800bdae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bdb2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800bdc8:	797b      	ldrb	r3, [r7, #5]
 800bdca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800bdce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800bdd6:	f107 0314 	add.w	r3, r7, #20
 800bdda:	4619      	mov	r1, r3
 800bddc:	4816      	ldr	r0, [pc, #88]	; (800be38 <netconn_write_vectors_partly+0x168>)
 800bdde:	f7ff fb13 	bl	800b408 <netconn_apimsg>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800bde8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d114      	bne.n	800be1a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800bdf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800bdf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdfa:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800bdfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10a      	bne.n	800be1a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be08:	429a      	cmp	r2, r3
 800be0a:	d006      	beq.n	800be1a <netconn_write_vectors_partly+0x14a>
 800be0c:	4b06      	ldr	r3, [pc, #24]	; (800be28 <netconn_write_vectors_partly+0x158>)
 800be0e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800be12:	490a      	ldr	r1, [pc, #40]	; (800be3c <netconn_write_vectors_partly+0x16c>)
 800be14:	4806      	ldr	r0, [pc, #24]	; (800be30 <netconn_write_vectors_partly+0x160>)
 800be16:	f00e fec5 	bl	801aba4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800be1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3748      	adds	r7, #72	; 0x48
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	0801c880 	.word	0x0801c880
 800be2c:	0801cbb0 	.word	0x0801cbb0
 800be30:	0801c36c 	.word	0x0801c36c
 800be34:	0801cbcc 	.word	0x0801cbcc
 800be38:	0800b0cd 	.word	0x0800b0cd
 800be3c:	0801cbf0 	.word	0x0801cbf0

0800be40 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b08c      	sub	sp, #48	; 0x30
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d109      	bne.n	800be66 <netconn_close_shutdown+0x26>
 800be52:	4b0f      	ldr	r3, [pc, #60]	; (800be90 <netconn_close_shutdown+0x50>)
 800be54:	f240 4247 	movw	r2, #1095	; 0x447
 800be58:	490e      	ldr	r1, [pc, #56]	; (800be94 <netconn_close_shutdown+0x54>)
 800be5a:	480f      	ldr	r0, [pc, #60]	; (800be98 <netconn_close_shutdown+0x58>)
 800be5c:	f00e fea2 	bl	801aba4 <iprintf>
 800be60:	f06f 030f 	mvn.w	r3, #15
 800be64:	e010      	b.n	800be88 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800be6a:	78fb      	ldrb	r3, [r7, #3]
 800be6c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800be6e:	2329      	movs	r3, #41	; 0x29
 800be70:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800be72:	f107 030c 	add.w	r3, r7, #12
 800be76:	4619      	mov	r1, r3
 800be78:	4808      	ldr	r0, [pc, #32]	; (800be9c <netconn_close_shutdown+0x5c>)
 800be7a:	f7ff fac5 	bl	800b408 <netconn_apimsg>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800be84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3730      	adds	r7, #48	; 0x30
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	0801c880 	.word	0x0801c880
 800be94:	0801cc14 	.word	0x0801cc14
 800be98:	0801c36c 	.word	0x0801c36c
 800be9c:	0800b2f1 	.word	0x0800b2f1

0800bea0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <netconn_err+0x12>
    return ERR_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	e00d      	b.n	800bece <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800beb2:	f00e fda9 	bl	801aa08 <sys_arch_protect>
 800beb6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	7a1b      	ldrb	r3, [r3, #8]
 800bebc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f00e fdad 	bl	801aa24 <sys_arch_unprotect>
  return err;
 800beca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d013      	beq.n	800bf0c <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00b      	beq.n	800bf04 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f007 f917 	bl	8013124 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	605a      	str	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	2006      	movs	r0, #6
 800bf08:	f006 fa2a 	bl	8012360 <memp_free>
  }
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <netbuf_free+0x1c>
 800bf22:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <netbuf_free+0x44>)
 800bf24:	2281      	movs	r2, #129	; 0x81
 800bf26:	490d      	ldr	r1, [pc, #52]	; (800bf5c <netbuf_free+0x48>)
 800bf28:	480d      	ldr	r0, [pc, #52]	; (800bf60 <netbuf_free+0x4c>)
 800bf2a:	f00e fe3b 	bl	801aba4 <iprintf>
 800bf2e:	e00f      	b.n	800bf50 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d004      	beq.n	800bf42 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f007 f8f1 	bl	8013124 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	605a      	str	r2, [r3, #4]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685a      	ldr	r2, [r3, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	0801cc30 	.word	0x0801cc30
 800bf5c:	0801cd24 	.word	0x0801cd24
 800bf60:	0801c36c 	.word	0x0801c36c

0800bf64 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d108      	bne.n	800bf8a <netbuf_ref+0x26>
 800bf78:	4b1c      	ldr	r3, [pc, #112]	; (800bfec <netbuf_ref+0x88>)
 800bf7a:	2299      	movs	r2, #153	; 0x99
 800bf7c:	491c      	ldr	r1, [pc, #112]	; (800bff0 <netbuf_ref+0x8c>)
 800bf7e:	481d      	ldr	r0, [pc, #116]	; (800bff4 <netbuf_ref+0x90>)
 800bf80:	f00e fe10 	bl	801aba4 <iprintf>
 800bf84:	f06f 030f 	mvn.w	r3, #15
 800bf88:	e02b      	b.n	800bfe2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f007 f8c4 	bl	8013124 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800bf9c:	2241      	movs	r2, #65	; 0x41
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	2036      	movs	r0, #54	; 0x36
 800bfa2:	f006 fda9 	bl	8012af8 <pbuf_alloc>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d105      	bne.n	800bfc0 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800bfba:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbe:	e010      	b.n	800bfe2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	88fa      	ldrh	r2, [r7, #6]
 800bfce:	811a      	strh	r2, [r3, #8]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	891b      	ldrh	r3, [r3, #8]
 800bfd6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	0801cc30 	.word	0x0801cc30
 800bff0:	0801cd40 	.word	0x0801cd40
 800bff4:	0801c36c 	.word	0x0801c36c

0800bff8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	db02      	blt.n	800c010 <tryget_socket_unconn_nouse+0x18>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	dd01      	ble.n	800c014 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	e003      	b.n	800c01c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	4a03      	ldr	r2, [pc, #12]	; (800c028 <tryget_socket_unconn_nouse+0x30>)
 800c01a:	4413      	add	r3, r2
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	20008434 	.word	0x20008434

0800c02c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ffdf 	bl	800bff8 <tryget_socket_unconn_nouse>
 800c03a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800c03c:	68fb      	ldr	r3, [r7, #12]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff ffec 	bl	800c02c <tryget_socket_unconn>
 800c054:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d005      	beq.n	800c068 <tryget_socket+0x22>
    if (sock->conn) {
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <tryget_socket+0x22>
      return sock;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	e000      	b.n	800c06a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff ffe2 	bl	800c046 <tryget_socket>
 800c082:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d104      	bne.n	800c094 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800c08a:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <get_socket+0x2c>)
 800c08c:	2209      	movs	r2, #9
 800c08e:	601a      	str	r2, [r3, #0]
    return NULL;
 800c090:	2300      	movs	r3, #0
 800c092:	e000      	b.n	800c096 <get_socket+0x22>
  }
  return sock;
 800c094:	68fb      	ldr	r3, [r7, #12]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	2000c680 	.word	0x2000c680

0800c0a4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e052      	b.n	800c15a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800c0b4:	f00e fca8 	bl	801aa08 <sys_arch_protect>
 800c0b8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800c0ba:	4a2c      	ldr	r2, [pc, #176]	; (800c16c <alloc_socket+0xc8>)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	011b      	lsls	r3, r3, #4
 800c0c0:	4413      	add	r3, r2
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d142      	bne.n	800c14e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800c0c8:	4a28      	ldr	r2, [pc, #160]	; (800c16c <alloc_socket+0xc8>)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	011b      	lsls	r3, r3, #4
 800c0ce:	4413      	add	r3, r2
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800c0d4:	68b8      	ldr	r0, [r7, #8]
 800c0d6:	f00e fca5 	bl	801aa24 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800c0da:	4a24      	ldr	r2, [pc, #144]	; (800c16c <alloc_socket+0xc8>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	4413      	add	r3, r2
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800c0e8:	4a20      	ldr	r2, [pc, #128]	; (800c16c <alloc_socket+0xc8>)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	011b      	lsls	r3, r3, #4
 800c0ee:	4413      	add	r3, r2
 800c0f0:	330e      	adds	r3, #14
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d006      	beq.n	800c106 <alloc_socket+0x62>
 800c0f8:	4b1d      	ldr	r3, [pc, #116]	; (800c170 <alloc_socket+0xcc>)
 800c0fa:	f240 220e 	movw	r2, #526	; 0x20e
 800c0fe:	491d      	ldr	r1, [pc, #116]	; (800c174 <alloc_socket+0xd0>)
 800c100:	481d      	ldr	r0, [pc, #116]	; (800c178 <alloc_socket+0xd4>)
 800c102:	f00e fd4f 	bl	801aba4 <iprintf>
      sockets[i].rcvevent   = 0;
 800c106:	4a19      	ldr	r2, [pc, #100]	; (800c16c <alloc_socket+0xc8>)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	011b      	lsls	r3, r3, #4
 800c10c:	4413      	add	r3, r2
 800c10e:	3308      	adds	r3, #8
 800c110:	2200      	movs	r2, #0
 800c112:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c11c:	2b10      	cmp	r3, #16
 800c11e:	d102      	bne.n	800c126 <alloc_socket+0x82>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <alloc_socket+0x86>
 800c126:	2301      	movs	r3, #1
 800c128:	e000      	b.n	800c12c <alloc_socket+0x88>
 800c12a:	2300      	movs	r3, #0
 800c12c:	b299      	uxth	r1, r3
 800c12e:	4a0f      	ldr	r2, [pc, #60]	; (800c16c <alloc_socket+0xc8>)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	011b      	lsls	r3, r3, #4
 800c134:	4413      	add	r3, r2
 800c136:	330a      	adds	r3, #10
 800c138:	460a      	mov	r2, r1
 800c13a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800c13c:	4a0b      	ldr	r2, [pc, #44]	; (800c16c <alloc_socket+0xc8>)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	011b      	lsls	r3, r3, #4
 800c142:	4413      	add	r3, r2
 800c144:	330c      	adds	r3, #12
 800c146:	2200      	movs	r2, #0
 800c148:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	e00a      	b.n	800c164 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800c14e:	68b8      	ldr	r0, [r7, #8]
 800c150:	f00e fc68 	bl	801aa24 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	dda9      	ble.n	800c0b4 <alloc_socket+0x10>
  }
  return -1;
 800c160:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20008434 	.word	0x20008434
 800c170:	0801ce20 	.word	0x0801ce20
 800c174:	0801ced4 	.word	0x0801ced4
 800c178:	0801c36c 	.word	0x0801c36c

0800c17c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	6852      	ldr	r2, [r2, #4]
 800c190:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	601a      	str	r2, [r3, #0]
  return 1;
 800c1a6:	2301      	movs	r3, #1
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00d      	beq.n	800c1e4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d005      	beq.n	800c1da <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f006 ffa6 	bl	8013124 <pbuf_free>
 800c1d8:	e004      	b.n	800c1e4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff fe79 	bl	800bed6 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800c1ea:	68b8      	ldr	r0, [r7, #8]
 800c1ec:	f7ff f9c8 	bl	800b580 <netconn_delete>
  }
}
 800c1f0:	bf00      	nop
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800c202:	f00e fc01 	bl	801aa08 <sys_arch_protect>
 800c206:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800c208:	f107 0308 	add.w	r3, r7, #8
 800c20c:	f107 020c 	add.w	r2, r7, #12
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff ffb2 	bl	800c17c <free_socket_locked>
 800c218:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800c21a:	6978      	ldr	r0, [r7, #20]
 800c21c:	f00e fc02 	bl	801aa24 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d006      	beq.n	800c234 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f107 0208 	add.w	r2, r7, #8
 800c22c:	4619      	mov	r1, r3
 800c22e:	6838      	ldr	r0, [r7, #0]
 800c230:	f7ff ffc0 	bl	800c1b4 <free_socket_free_elements>
  }
}
 800c234:	bf00      	nop
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800c23c:	b590      	push	{r4, r7, lr}
 800c23e:	b099      	sub	sp, #100	; 0x64
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f7ff ff11 	bl	800c074 <get_socket>
 800c252:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800c254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c256:	2b00      	cmp	r3, #0
 800c258:	d102      	bne.n	800c260 <lwip_accept+0x24>
    return -1;
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295
 800c25e:	e0f8      	b.n	800c452 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800c260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c268:	4611      	mov	r1, r2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fa5a 	bl	800b724 <netconn_accept>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800c276:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d02c      	beq.n	800c2d8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c27e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c288:	2b10      	cmp	r3, #16
 800c28a:	d008      	beq.n	800c29e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800c28c:	235f      	movs	r3, #95	; 0x5f
 800c28e:	633b      	str	r3, [r7, #48]	; 0x30
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	2b00      	cmp	r3, #0
 800c294:	d01d      	beq.n	800c2d2 <lwip_accept+0x96>
 800c296:	4a71      	ldr	r2, [pc, #452]	; (800c45c <lwip_accept+0x220>)
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	e019      	b.n	800c2d2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800c29e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2a2:	f113 0f0f 	cmn.w	r3, #15
 800c2a6:	d108      	bne.n	800c2ba <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800c2a8:	2316      	movs	r3, #22
 800c2aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <lwip_accept+0x96>
 800c2b2:	4a6a      	ldr	r2, [pc, #424]	; (800c45c <lwip_accept+0x220>)
 800c2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	e00b      	b.n	800c2d2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c2ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fd fbda 	bl	8009a78 <err_to_errno>
 800c2c4:	63b8      	str	r0, [r7, #56]	; 0x38
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <lwip_accept+0x96>
 800c2cc:	4a63      	ldr	r2, [pc, #396]	; (800c45c <lwip_accept+0x220>)
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d6:	e0bc      	b.n	800c452 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d106      	bne.n	800c2ec <lwip_accept+0xb0>
 800c2de:	4b60      	ldr	r3, [pc, #384]	; (800c460 <lwip_accept+0x224>)
 800c2e0:	f240 228b 	movw	r2, #651	; 0x28b
 800c2e4:	495f      	ldr	r1, [pc, #380]	; (800c464 <lwip_accept+0x228>)
 800c2e6:	4860      	ldr	r0, [pc, #384]	; (800c468 <lwip_accept+0x22c>)
 800c2e8:	f00e fc5c 	bl	801aba4 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff fed7 	bl	800c0a4 <alloc_socket>
 800c2f6:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800c2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fe:	d10e      	bne.n	800c31e <lwip_accept+0xe2>
    netconn_delete(newconn);
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	4618      	mov	r0, r3
 800c304:	f7ff f93c 	bl	800b580 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800c308:	2317      	movs	r3, #23
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d002      	beq.n	800c318 <lwip_accept+0xdc>
 800c312:	4a52      	ldr	r2, [pc, #328]	; (800c45c <lwip_accept+0x220>)
 800c314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c316:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c318:	f04f 33ff 	mov.w	r3, #4294967295
 800c31c:	e099      	b.n	800c452 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800c31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c320:	2b00      	cmp	r3, #0
 800c322:	db02      	blt.n	800c32a <lwip_accept+0xee>
 800c324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c326:	2b03      	cmp	r3, #3
 800c328:	dd06      	ble.n	800c338 <lwip_accept+0xfc>
 800c32a:	4b4d      	ldr	r3, [pc, #308]	; (800c460 <lwip_accept+0x224>)
 800c32c:	f44f 7225 	mov.w	r2, #660	; 0x294
 800c330:	494e      	ldr	r1, [pc, #312]	; (800c46c <lwip_accept+0x230>)
 800c332:	484d      	ldr	r0, [pc, #308]	; (800c468 <lwip_accept+0x22c>)
 800c334:	f00e fc36 	bl	801aba4 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800c338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	4a4c      	ldr	r2, [pc, #304]	; (800c470 <lwip_accept+0x234>)
 800c33e:	4413      	add	r3, r2
 800c340:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800c342:	f00e fb61 	bl	801aa08 <sys_arch_protect>
 800c346:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800c348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	b21b      	sxth	r3, r3
 800c34e:	43db      	mvns	r3, r3
 800c350:	b21b      	sxth	r3, r3
 800c352:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c358:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800c35a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c35c:	f00e fb62 	bl	801aa24 <sys_arch_unprotect>

  if (newconn->callback) {
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	2b00      	cmp	r3, #0
 800c366:	d012      	beq.n	800c38e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800c368:	4842      	ldr	r0, [pc, #264]	; (800c474 <lwip_accept+0x238>)
 800c36a:	f00e fb11 	bl	801a990 <sys_mutex_lock>
    while (recvevent > 0) {
 800c36e:	e008      	b.n	800c382 <lwip_accept+0x146>
      recvevent--;
 800c370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c372:	3b01      	subs	r3, #1
 800c374:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c37c:	2200      	movs	r2, #0
 800c37e:	2100      	movs	r1, #0
 800c380:	4798      	blx	r3
    while (recvevent > 0) {
 800c382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c384:	2b00      	cmp	r3, #0
 800c386:	dcf3      	bgt.n	800c370 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800c388:	483a      	ldr	r0, [pc, #232]	; (800c474 <lwip_accept+0x238>)
 800c38a:	f00e fb10 	bl	801a9ae <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d055      	beq.n	800c440 <lwip_accept+0x204>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d052      	beq.n	800c440 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800c39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c39c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800c3a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f7ff f907 	bl	800b5b8 <netconn_getaddr>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800c3b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d016      	beq.n	800c3e6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff f8e0 	bl	800b580 <netconn_delete>
      free_socket(nsock, 1);
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c3c4:	f7ff ff18 	bl	800c1f8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800c3c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fd fb53 	bl	8009a78 <err_to_errno>
 800c3d2:	6478      	str	r0, [r7, #68]	; 0x44
 800c3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <lwip_accept+0x1a4>
 800c3da:	4a20      	ldr	r2, [pc, #128]	; (800c45c <lwip_accept+0x220>)
 800c3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3de:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e4:	e035      	b.n	800c452 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800c3e6:	f107 0314 	add.w	r3, r7, #20
 800c3ea:	2210      	movs	r2, #16
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	f107 0314 	add.w	r3, r7, #20
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	705a      	strb	r2, [r3, #1]
 800c3f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3f8:	f107 0414 	add.w	r4, r7, #20
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f005 f9f7 	bl	80117f0 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	8063      	strh	r3, [r4, #2]
 800c406:	f107 0314 	add.w	r3, r7, #20
 800c40a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c40c:	605a      	str	r2, [r3, #4]
 800c40e:	f107 0314 	add.w	r3, r7, #20
 800c412:	3308      	adds	r3, #8
 800c414:	2208      	movs	r2, #8
 800c416:	2100      	movs	r1, #0
 800c418:	4618      	mov	r0, r3
 800c41a:	f00e fbbb 	bl	801ab94 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	7d3a      	ldrb	r2, [r7, #20]
 800c424:	4293      	cmp	r3, r2
 800c426:	d903      	bls.n	800c430 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800c428:	7d3b      	ldrb	r3, [r7, #20]
 800c42a:	461a      	mov	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	f107 0314 	add.w	r3, r7, #20
 800c438:	4619      	mov	r1, r3
 800c43a:	68b8      	ldr	r0, [r7, #8]
 800c43c:	f00e fb82 	bl	801ab44 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800c440:	2300      	movs	r3, #0
 800c442:	643b      	str	r3, [r7, #64]	; 0x40
 800c444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <lwip_accept+0x214>
 800c44a:	4a04      	ldr	r2, [pc, #16]	; (800c45c <lwip_accept+0x220>)
 800c44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c44e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800c450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c452:	4618      	mov	r0, r3
 800c454:	3764      	adds	r7, #100	; 0x64
 800c456:	46bd      	mov	sp, r7
 800c458:	bd90      	pop	{r4, r7, pc}
 800c45a:	bf00      	nop
 800c45c:	2000c680 	.word	0x2000c680
 800c460:	0801ce20 	.word	0x0801ce20
 800c464:	0801cef4 	.word	0x0801cef4
 800c468:	0801c36c 	.word	0x0801c36c
 800c46c:	0801cf04 	.word	0x0801cf04
 800c470:	20008434 	.word	0x20008434
 800c474:	20008870 	.word	0x20008870

0800c478 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff fdf5 	bl	800c074 <get_socket>
 800c48a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <lwip_bind+0x20>
    return -1;
 800c492:	f04f 33ff 	mov.w	r3, #4294967295
 800c496:	e051      	b.n	800c53c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b10      	cmp	r3, #16
 800c49c:	d108      	bne.n	800c4b0 <lwip_bind+0x38>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	785b      	ldrb	r3, [r3, #1]
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d104      	bne.n	800c4b0 <lwip_bind+0x38>
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f003 0303 	and.w	r3, r3, #3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d014      	beq.n	800c4da <lwip_bind+0x62>
 800c4b0:	4b24      	ldr	r3, [pc, #144]	; (800c544 <lwip_bind+0xcc>)
 800c4b2:	f240 22e2 	movw	r2, #738	; 0x2e2
 800c4b6:	4924      	ldr	r1, [pc, #144]	; (800c548 <lwip_bind+0xd0>)
 800c4b8:	4824      	ldr	r0, [pc, #144]	; (800c54c <lwip_bind+0xd4>)
 800c4ba:	f00e fb73 	bl	801aba4 <iprintf>
 800c4be:	f06f 000f 	mvn.w	r0, #15
 800c4c2:	f7fd fad9 	bl	8009a78 <err_to_errno>
 800c4c6:	6178      	str	r0, [r7, #20]
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <lwip_bind+0x5c>
 800c4ce:	4a20      	ldr	r2, [pc, #128]	; (800c550 <lwip_bind+0xd8>)
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d8:	e030      	b.n	800c53c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	613b      	str	r3, [r7, #16]
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	885b      	ldrh	r3, [r3, #2]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f005 f983 	bl	80117f0 <lwip_htons>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4f4:	f107 0110 	add.w	r1, r7, #16
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff f8af 	bl	800b65c <netconn_bind>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800c504:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00e      	beq.n	800c52a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c50c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c510:	4618      	mov	r0, r3
 800c512:	f7fd fab1 	bl	8009a78 <err_to_errno>
 800c516:	61b8      	str	r0, [r7, #24]
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <lwip_bind+0xac>
 800c51e:	4a0c      	ldr	r2, [pc, #48]	; (800c550 <lwip_bind+0xd8>)
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c524:	f04f 33ff 	mov.w	r3, #4294967295
 800c528:	e008      	b.n	800c53c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c52a:	2300      	movs	r3, #0
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <lwip_bind+0xc2>
 800c534:	4a06      	ldr	r2, [pc, #24]	; (800c550 <lwip_bind+0xd8>)
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3728      	adds	r7, #40	; 0x28
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	0801ce20 	.word	0x0801ce20
 800c548:	0801cf1c 	.word	0x0801cf1c
 800c54c:	0801c36c 	.word	0x0801c36c
 800c550:	2000c680 	.word	0x2000c680

0800c554 <lwip_close>:

int
lwip_close(int s)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b086      	sub	sp, #24
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff fd87 	bl	800c074 <get_socket>
 800c566:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d102      	bne.n	800c574 <lwip_close+0x20>
    return -1;
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295
 800c572:	e039      	b.n	800c5e8 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00b      	beq.n	800c594 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c586:	2b10      	cmp	r3, #16
 800c588:	bf0c      	ite	eq
 800c58a:	2301      	moveq	r3, #1
 800c58c:	2300      	movne	r3, #0
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	e00a      	b.n	800c5aa <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d006      	beq.n	800c5aa <lwip_close+0x56>
 800c59c:	4b14      	ldr	r3, [pc, #80]	; (800c5f0 <lwip_close+0x9c>)
 800c59e:	f44f 7245 	mov.w	r2, #788	; 0x314
 800c5a2:	4914      	ldr	r1, [pc, #80]	; (800c5f4 <lwip_close+0xa0>)
 800c5a4:	4814      	ldr	r0, [pc, #80]	; (800c5f8 <lwip_close+0xa4>)
 800c5a6:	f00e fafd 	bl	801aba4 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe ffc2 	bl	800b538 <netconn_prepare_delete>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00e      	beq.n	800c5de <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800c5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fd fa57 	bl	8009a78 <err_to_errno>
 800c5ca:	60b8      	str	r0, [r7, #8]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d002      	beq.n	800c5d8 <lwip_close+0x84>
 800c5d2:	4a0a      	ldr	r2, [pc, #40]	; (800c5fc <lwip_close+0xa8>)
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5dc:	e004      	b.n	800c5e8 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800c5de:	6979      	ldr	r1, [r7, #20]
 800c5e0:	6938      	ldr	r0, [r7, #16]
 800c5e2:	f7ff fe09 	bl	800c1f8 <free_socket>
  set_errno(0);
  return 0;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0801ce20 	.word	0x0801ce20
 800c5f4:	0801cf38 	.word	0x0801cf38
 800c5f8:	0801c36c 	.word	0x0801c36c
 800c5fc:	2000c680 	.word	0x2000c680

0800c600 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7ff fd32 	bl	800c074 <get_socket>
 800c610:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d102      	bne.n	800c61e <lwip_listen+0x1e>
    return -1;
 800c618:	f04f 33ff 	mov.w	r3, #4294967295
 800c61c:	e03e      	b.n	800c69c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2bfe      	cmp	r3, #254	; 0xfe
 800c622:	dc03      	bgt.n	800c62c <lwip_listen+0x2c>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c62a:	e000      	b.n	800c62e <lwip_listen+0x2e>
 800c62c:	23ff      	movs	r3, #255	; 0xff
 800c62e:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	4611      	mov	r1, r2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff f846 	bl	800b6cc <netconn_listen_with_backlog>
 800c640:	4603      	mov	r3, r0
 800c642:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800c644:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01e      	beq.n	800c68a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c656:	2b10      	cmp	r3, #16
 800c658:	d008      	beq.n	800c66c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800c65a:	235f      	movs	r3, #95	; 0x5f
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00f      	beq.n	800c684 <lwip_listen+0x84>
 800c664:	4a0f      	ldr	r2, [pc, #60]	; (800c6a4 <lwip_listen+0xa4>)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	e00b      	b.n	800c684 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c66c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c670:	4618      	mov	r0, r3
 800c672:	f7fd fa01 	bl	8009a78 <err_to_errno>
 800c676:	6138      	str	r0, [r7, #16]
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <lwip_listen+0x84>
 800c67e:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <lwip_listen+0xa4>)
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c684:	f04f 33ff 	mov.w	r3, #4294967295
 800c688:	e008      	b.n	800c69c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800c68a:	2300      	movs	r3, #0
 800c68c:	617b      	str	r3, [r7, #20]
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <lwip_listen+0x9a>
 800c694:	4a03      	ldr	r2, [pc, #12]	; (800c6a4 <lwip_listen+0xa4>)
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	2000c680 	.word	0x2000c680

0800c6a8 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	db01      	blt.n	800c6ca <lwip_recv_tcp+0x22>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	e001      	b.n	800c6ce <lwip_recv_tcp+0x26>
 800c6ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c6ce:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <lwip_recv_tcp+0x3c>
 800c6d6:	4b74      	ldr	r3, [pc, #464]	; (800c8a8 <lwip_recv_tcp+0x200>)
 800c6d8:	f240 329e 	movw	r2, #926	; 0x39e
 800c6dc:	4973      	ldr	r1, [pc, #460]	; (800c8ac <lwip_recv_tcp+0x204>)
 800c6de:	4874      	ldr	r0, [pc, #464]	; (800c8b0 <lwip_recv_tcp+0x208>)
 800c6e0:	f00e fa60 	bl	801aba4 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6ee:	2b10      	cmp	r3, #16
 800c6f0:	d006      	beq.n	800c700 <lwip_recv_tcp+0x58>
 800c6f2:	4b6d      	ldr	r3, [pc, #436]	; (800c8a8 <lwip_recv_tcp+0x200>)
 800c6f4:	f240 329f 	movw	r2, #927	; 0x39f
 800c6f8:	496e      	ldr	r1, [pc, #440]	; (800c8b4 <lwip_recv_tcp+0x20c>)
 800c6fa:	486d      	ldr	r0, [pc, #436]	; (800c8b0 <lwip_recv_tcp+0x208>)
 800c6fc:	f00e fa52 	bl	801aba4 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b00      	cmp	r3, #0
 800c708:	d005      	beq.n	800c716 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c70a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c70e:	f043 0304 	orr.w	r3, r3, #4
 800c712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	617b      	str	r3, [r7, #20]
 800c724:	e036      	b.n	800c794 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c72e:	f107 0114 	add.w	r1, r7, #20
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff fa2c 	bl	800bb90 <netconn_recv_tcp_pbuf_flags>
 800c738:	4603      	mov	r3, r0
 800c73a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c73e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c742:	2b00      	cmp	r3, #0
 800c744:	d019      	beq.n	800c77a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f300 808d 	bgt.w	800c868 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c74e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c752:	4618      	mov	r0, r3
 800c754:	f7fd f990 	bl	8009a78 <err_to_errno>
 800c758:	61f8      	str	r0, [r7, #28]
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <lwip_recv_tcp+0xbe>
 800c760:	4a55      	ldr	r2, [pc, #340]	; (800c8b8 <lwip_recv_tcp+0x210>)
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c766:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c76a:	f113 0f0f 	cmn.w	r3, #15
 800c76e:	d101      	bne.n	800c774 <lwip_recv_tcp+0xcc>
          return 0;
 800c770:	2300      	movs	r3, #0
 800c772:	e094      	b.n	800c89e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c774:	f04f 33ff 	mov.w	r3, #4294967295
 800c778:	e091      	b.n	800c89e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d106      	bne.n	800c78e <lwip_recv_tcp+0xe6>
 800c780:	4b49      	ldr	r3, [pc, #292]	; (800c8a8 <lwip_recv_tcp+0x200>)
 800c782:	f240 32c5 	movw	r2, #965	; 0x3c5
 800c786:	494d      	ldr	r1, [pc, #308]	; (800c8bc <lwip_recv_tcp+0x214>)
 800c788:	4849      	ldr	r0, [pc, #292]	; (800c8b0 <lwip_recv_tcp+0x208>)
 800c78a:	f00e fa0b 	bl	801aba4 <iprintf>
      sock->lastdata.pbuf = p;
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	891b      	ldrh	r3, [r3, #8]
 800c798:	461a      	mov	r2, r3
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	4293      	cmp	r3, r2
 800c79e:	dd03      	ble.n	800c7a8 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	891b      	ldrh	r3, [r3, #8]
 800c7a4:	847b      	strh	r3, [r7, #34]	; 0x22
 800c7a6:	e001      	b.n	800c7ac <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800c7ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	4413      	add	r3, r2
 800c7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	dd03      	ble.n	800c7c0 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	43db      	mvns	r3, r3
 800c7be:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c7c0:	6978      	ldr	r0, [r7, #20]
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	18d1      	adds	r1, r2, r3
 800c7c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f006 feb0 	bl	8013530 <pbuf_copy_partial>

    recvd += copylen;
 800c7d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d4:	4413      	add	r3, r2
 800c7d6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c7d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	da06      	bge.n	800c7ee <lwip_recv_tcp+0x146>
 800c7e0:	4b31      	ldr	r3, [pc, #196]	; (800c8a8 <lwip_recv_tcp+0x200>)
 800c7e2:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c7e6:	4936      	ldr	r1, [pc, #216]	; (800c8c0 <lwip_recv_tcp+0x218>)
 800c7e8:	4831      	ldr	r0, [pc, #196]	; (800c8b0 <lwip_recv_tcp+0x208>)
 800c7ea:	f00e f9db 	bl	801aba4 <iprintf>
    recv_left -= copylen;
 800c7ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d123      	bne.n	800c848 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	891b      	ldrh	r3, [r3, #8]
 800c804:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c806:	429a      	cmp	r2, r3
 800c808:	d906      	bls.n	800c818 <lwip_recv_tcp+0x170>
 800c80a:	4b27      	ldr	r3, [pc, #156]	; (800c8a8 <lwip_recv_tcp+0x200>)
 800c80c:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c810:	492c      	ldr	r1, [pc, #176]	; (800c8c4 <lwip_recv_tcp+0x21c>)
 800c812:	4827      	ldr	r0, [pc, #156]	; (800c8b0 <lwip_recv_tcp+0x208>)
 800c814:	f00e f9c6 	bl	801aba4 <iprintf>
      if (p->tot_len - copylen > 0) {
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	891b      	ldrh	r3, [r3, #8]
 800c81c:	461a      	mov	r2, r3
 800c81e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	dd09      	ble.n	800c83a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f006 fc46 	bl	80130be <pbuf_free_header>
 800c832:	4602      	mov	r2, r0
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	605a      	str	r2, [r3, #4]
 800c838:	e006      	b.n	800c848 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	4618      	mov	r0, r3
 800c844:	f006 fc6e 	bl	8013124 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c84c:	f043 0314 	orr.w	r3, r3, #20
 800c850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	dd08      	ble.n	800c86c <lwip_recv_tcp+0x1c4>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	2b00      	cmp	r3, #0
 800c862:	f43f af58 	beq.w	800c716 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c866:	e001      	b.n	800c86c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c868:	bf00      	nop
 800c86a:	e000      	b.n	800c86e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c86c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	2b00      	cmp	r3, #0
 800c872:	dd0b      	ble.n	800c88c <lwip_recv_tcp+0x1e4>
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d106      	bne.n	800c88c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c884:	4611      	mov	r1, r2
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff f8d0 	bl	800ba2c <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c88c:	2300      	movs	r3, #0
 800c88e:	61bb      	str	r3, [r7, #24]
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <lwip_recv_tcp+0x1f4>
 800c896:	4a08      	ldr	r2, [pc, #32]	; (800c8b8 <lwip_recv_tcp+0x210>)
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	6013      	str	r3, [r2, #0]
  return recvd;
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3730      	adds	r7, #48	; 0x30
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	0801ce20 	.word	0x0801ce20
 800c8ac:	0801cf70 	.word	0x0801cf70
 800c8b0:	0801c36c 	.word	0x0801c36c
 800c8b4:	0801cf80 	.word	0x0801cf80
 800c8b8:	2000c680 	.word	0x2000c680
 800c8bc:	0801cb88 	.word	0x0801cb88
 800c8c0:	0801cfa4 	.word	0x0801cfa4
 800c8c4:	0801cfcc 	.word	0x0801cfcc

0800c8c8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c8c8:	b590      	push	{r4, r7, lr}
 800c8ca:	b08b      	sub	sp, #44	; 0x2c
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <lwip_sock_make_addr+0x28>
 800c8e2:	4b2b      	ldr	r3, [pc, #172]	; (800c990 <lwip_sock_make_addr+0xc8>)
 800c8e4:	f240 4207 	movw	r2, #1031	; 0x407
 800c8e8:	492a      	ldr	r1, [pc, #168]	; (800c994 <lwip_sock_make_addr+0xcc>)
 800c8ea:	482b      	ldr	r0, [pc, #172]	; (800c998 <lwip_sock_make_addr+0xd0>)
 800c8ec:	f00e f95a 	bl	801aba4 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d106      	bne.n	800c904 <lwip_sock_make_addr+0x3c>
 800c8f6:	4b26      	ldr	r3, [pc, #152]	; (800c990 <lwip_sock_make_addr+0xc8>)
 800c8f8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c8fc:	4927      	ldr	r1, [pc, #156]	; (800c99c <lwip_sock_make_addr+0xd4>)
 800c8fe:	4826      	ldr	r0, [pc, #152]	; (800c998 <lwip_sock_make_addr+0xd0>)
 800c900:	f00e f950 	bl	801aba4 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	2b00      	cmp	r3, #0
 800c908:	d106      	bne.n	800c918 <lwip_sock_make_addr+0x50>
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <lwip_sock_make_addr+0xc8>)
 800c90c:	f240 4209 	movw	r2, #1033	; 0x409
 800c910:	4923      	ldr	r1, [pc, #140]	; (800c9a0 <lwip_sock_make_addr+0xd8>)
 800c912:	4821      	ldr	r0, [pc, #132]	; (800c998 <lwip_sock_make_addr+0xd0>)
 800c914:	f00e f946 	bl	801aba4 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c918:	f107 0314 	add.w	r3, r7, #20
 800c91c:	2210      	movs	r2, #16
 800c91e:	701a      	strb	r2, [r3, #0]
 800c920:	f107 0314 	add.w	r3, r7, #20
 800c924:	2202      	movs	r2, #2
 800c926:	705a      	strb	r2, [r3, #1]
 800c928:	f107 0414 	add.w	r4, r7, #20
 800c92c:	88fb      	ldrh	r3, [r7, #6]
 800c92e:	4618      	mov	r0, r3
 800c930:	f004 ff5e 	bl	80117f0 <lwip_htons>
 800c934:	4603      	mov	r3, r0
 800c936:	8063      	strh	r3, [r4, #2]
 800c938:	f107 0314 	add.w	r3, r7, #20
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	6812      	ldr	r2, [r2, #0]
 800c940:	605a      	str	r2, [r3, #4]
 800c942:	f107 0314 	add.w	r3, r7, #20
 800c946:	3308      	adds	r3, #8
 800c948:	2208      	movs	r2, #8
 800c94a:	2100      	movs	r1, #0
 800c94c:	4618      	mov	r0, r3
 800c94e:	f00e f921 	bl	801ab94 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	7d3a      	ldrb	r2, [r7, #20]
 800c958:	4293      	cmp	r3, r2
 800c95a:	d202      	bcs.n	800c962 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c95c:	2301      	movs	r3, #1
 800c95e:	627b      	str	r3, [r7, #36]	; 0x24
 800c960:	e008      	b.n	800c974 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	7d3a      	ldrb	r2, [r7, #20]
 800c968:	4293      	cmp	r3, r2
 800c96a:	d903      	bls.n	800c974 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c96c:	7d3b      	ldrb	r3, [r7, #20]
 800c96e:	461a      	mov	r2, r3
 800c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c972:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	f107 0314 	add.w	r3, r7, #20
 800c97c:	4619      	mov	r1, r3
 800c97e:	6838      	ldr	r0, [r7, #0]
 800c980:	f00e f8e0 	bl	801ab44 <memcpy>
  return truncated;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c986:	4618      	mov	r0, r3
 800c988:	372c      	adds	r7, #44	; 0x2c
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd90      	pop	{r4, r7, pc}
 800c98e:	bf00      	nop
 800c990:	0801ce20 	.word	0x0801ce20
 800c994:	0801cfdc 	.word	0x0801cfdc
 800c998:	0801c36c 	.word	0x0801c36c
 800c99c:	0801cff0 	.word	0x0801cff0
 800c9a0:	0801d000 	.word	0x0801d000

0800c9a4 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af02      	add	r7, sp, #8
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <lwip_recv_tcp_from+0x18>
    return 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	e021      	b.n	800ca00 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d01d      	beq.n	800c9fe <lwip_recv_tcp_from+0x5a>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d01a      	beq.n	800c9fe <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	f107 0216 	add.w	r2, r7, #22
 800c9d0:	f107 0110 	add.w	r1, r7, #16
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f7fe fdef 	bl	800b5b8 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00e      	beq.n	800c9fe <lwip_recv_tcp_from+0x5a>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	8afa      	ldrh	r2, [r7, #22]
 800c9ec:	f107 0110 	add.w	r1, r7, #16
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	f7ff ff67 	bl	800c8c8 <lwip_sock_make_addr>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	e000      	b.n	800ca00 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3718      	adds	r7, #24
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800ca08:	b590      	push	{r4, r7, lr}
 800ca0a:	b08d      	sub	sp, #52	; 0x34
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10d      	bne.n	800ca3a <lwip_recvfrom_udp_raw+0x32>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dd09      	ble.n	800ca3a <lwip_recvfrom_udp_raw+0x32>
 800ca26:	4b5e      	ldr	r3, [pc, #376]	; (800cba0 <lwip_recvfrom_udp_raw+0x198>)
 800ca28:	f240 4249 	movw	r2, #1097	; 0x449
 800ca2c:	495d      	ldr	r1, [pc, #372]	; (800cba4 <lwip_recvfrom_udp_raw+0x19c>)
 800ca2e:	485e      	ldr	r0, [pc, #376]	; (800cba8 <lwip_recvfrom_udp_raw+0x1a0>)
 800ca30:	f00e f8b8 	bl	801aba4 <iprintf>
 800ca34:	f06f 030f 	mvn.w	r3, #15
 800ca38:	e0ad      	b.n	800cb96 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	f003 0308 	and.w	r3, r3, #8
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ca44:	2304      	movs	r3, #4
 800ca46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca4a:	e002      	b.n	800ca52 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d11e      	bne.n	800ca9c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca66:	f107 0110 	add.w	r1, r7, #16
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff f8bc 	bl	800bbe8 <netconn_recv_udp_raw_netbuf_flags>
 800ca70:	4603      	mov	r3, r0
 800ca72:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ca74:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ca7c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca80:	e089      	b.n	800cb96 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d106      	bne.n	800ca96 <lwip_recvfrom_udp_raw+0x8e>
 800ca88:	4b45      	ldr	r3, [pc, #276]	; (800cba0 <lwip_recvfrom_udp_raw+0x198>)
 800ca8a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ca8e:	4947      	ldr	r1, [pc, #284]	; (800cbac <lwip_recvfrom_udp_raw+0x1a4>)
 800ca90:	4845      	ldr	r0, [pc, #276]	; (800cba8 <lwip_recvfrom_udp_raw+0x1a0>)
 800ca92:	f00e f887 	bl	801aba4 <iprintf>
    sock->lastdata.netbuf = buf;
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	891b      	ldrh	r3, [r3, #8]
 800caa2:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800caa8:	2300      	movs	r3, #0
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	e029      	b.n	800cb02 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800caae:	8b3a      	ldrh	r2, [r7, #24]
 800cab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	00db      	lsls	r3, r3, #3
 800cabe:	4413      	add	r3, r2
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	8afb      	ldrh	r3, [r7, #22]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d902      	bls.n	800cace <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800cac8:	8afb      	ldrh	r3, [r7, #22]
 800caca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cacc:	e006      	b.n	800cadc <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	689a      	ldr	r2, [r3, #8]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	4413      	add	r3, r2
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	6818      	ldr	r0, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	4413      	add	r3, r2
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800caf0:	f006 fd1e 	bl	8013530 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800caf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800caf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf8:	4413      	add	r3, r2
 800cafa:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	3301      	adds	r3, #1
 800cb00:	61fb      	str	r3, [r7, #28]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	69fa      	ldr	r2, [r7, #28]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	da03      	bge.n	800cb14 <lwip_recvfrom_udp_raw+0x10c>
 800cb0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb0e:	8b3b      	ldrh	r3, [r7, #24]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d3cc      	bcc.n	800caae <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01a      	beq.n	800cb52 <lwip_recvfrom_udp_raw+0x14a>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d016      	beq.n	800cb52 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d012      	beq.n	800cb52 <lwip_recvfrom_udp_raw+0x14a>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00e      	beq.n	800cb52 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f103 0108 	add.w	r1, r3, #8
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3304      	adds	r3, #4
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4623      	mov	r3, r4
 800cb4e:	f7ff febb 	bl	800c8c8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d007      	beq.n	800cb70 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800cb64:	7d7b      	ldrb	r3, [r7, #21]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d102      	bne.n	800cb70 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff f9a7 	bl	800bed6 <netbuf_delete>
  }
  if (datagram_len) {
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	8b3a      	ldrh	r2, [r7, #24]
 800cb92:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	372c      	adds	r7, #44	; 0x2c
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd90      	pop	{r4, r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0801ce20 	.word	0x0801ce20
 800cba4:	0801d010 	.word	0x0801d010
 800cba8:	0801c36c 	.word	0x0801c36c
 800cbac:	0801cb2c 	.word	0x0801cb2c

0800cbb0 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b096      	sub	sp, #88	; 0x58
 800cbb4:	af02      	add	r7, sp, #8
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff fa58 	bl	800c074 <get_socket>
 800cbc4:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800cbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <lwip_recvfrom+0x22>
    return -1;
 800cbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd0:	e078      	b.n	800ccc4 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbdc:	2b10      	cmp	r3, #16
 800cbde:	d112      	bne.n	800cc06 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	68b9      	ldr	r1, [r7, #8]
 800cbe6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cbe8:	f7ff fd5e 	bl	800c6a8 <lwip_recv_tcp>
 800cbec:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800cbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4b35      	ldr	r3, [pc, #212]	; (800cccc <lwip_recvfrom+0x11c>)
 800cbf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbfc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cbfe:	f7ff fed1 	bl	800c9a4 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800cc02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc04:	e05e      	b.n	800ccc4 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800cc12:	2300      	movs	r3, #0
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800cc1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc22:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800cc24:	2301      	movs	r3, #1
 800cc26:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800cc28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc2a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800cc2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <lwip_recvfrom+0x88>
 800cc32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	e000      	b.n	800cc3a <lwip_recvfrom+0x8a>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800cc3c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800cc40:	f107 0214 	add.w	r2, r7, #20
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc4e:	f7ff fedb 	bl	800ca08 <lwip_recvfrom_udp_raw>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800cc58:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00e      	beq.n	800cc7e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800cc60:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fc ff07 	bl	8009a78 <err_to_errno>
 800cc6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <lwip_recvfrom+0xc8>
 800cc72:	4a17      	ldr	r2, [pc, #92]	; (800ccd0 <lwip_recvfrom+0x120>)
 800cc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc76:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7c:	e022      	b.n	800ccc4 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800cc7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc80:	461a      	mov	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4293      	cmp	r3, r2
 800cc86:	bf28      	it	cs
 800cc88:	4613      	movcs	r3, r2
 800cc8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d206      	bcs.n	800cca0 <lwip_recvfrom+0xf0>
 800cc92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc94:	461a      	mov	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	bf28      	it	cs
 800cc9c:	4613      	movcs	r3, r2
 800cc9e:	e001      	b.n	800cca4 <lwip_recvfrom+0xf4>
 800cca0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cca4:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800cca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ccac:	69ba      	ldr	r2, [r7, #24]
 800ccae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccb0:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	643b      	str	r3, [r7, #64]	; 0x40
 800ccb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <lwip_recvfrom+0x112>
 800ccbc:	4a04      	ldr	r2, [pc, #16]	; (800ccd0 <lwip_recvfrom+0x120>)
 800ccbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccc0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800ccc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3750      	adds	r7, #80	; 0x50
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	0801d03c 	.word	0x0801d03c
 800ccd0:	2000c680 	.word	0x2000c680

0800ccd4 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af02      	add	r7, sp, #8
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 800cce0:	2300      	movs	r3, #0
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	2300      	movs	r3, #0
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	2300      	movs	r3, #0
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	68b9      	ldr	r1, [r7, #8]
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff ff5e 	bl	800cbb0 <lwip_recvfrom>
 800ccf4:	4603      	mov	r3, r0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
	...

0800cd00 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b08a      	sub	sp, #40	; 0x28
 800cd04:	af02      	add	r7, sp, #8
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
 800cd0c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f7ff f9b0 	bl	800c074 <get_socket>
 800cd14:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d102      	bne.n	800cd22 <lwip_send+0x22>
    return -1;
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	e046      	b.n	800cdb0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd2c:	2b10      	cmp	r3, #16
 800cd2e:	d00b      	beq.n	800cd48 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800cd30:	2300      	movs	r3, #0
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	2300      	movs	r3, #0
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f000 f83c 	bl	800cdbc <lwip_sendto>
 800cd44:	4603      	mov	r3, r0
 800cd46:	e033      	b.n	800cdb0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <lwip_send+0x56>
 800cd52:	2203      	movs	r2, #3
 800cd54:	e000      	b.n	800cd58 <lwip_send+0x58>
 800cd56:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	105b      	asrs	r3, r3, #1
 800cd5c:	b25b      	sxtb	r3, r3
 800cd5e:	f003 0304 	and.w	r3, r3, #4
 800cd62:	b25b      	sxtb	r3, r3
 800cd64:	4313      	orrs	r3, r2
 800cd66:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800cd68:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	7efa      	ldrb	r2, [r7, #27]
 800cd74:	f107 0310 	add.w	r3, r7, #16
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	68b9      	ldr	r1, [r7, #8]
 800cd80:	f7fe ff8c 	bl	800bc9c <netconn_write_partly>
 800cd84:	4603      	mov	r3, r0
 800cd86:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800cd88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fc fe73 	bl	8009a78 <err_to_errno>
 800cd92:	6178      	str	r0, [r7, #20]
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <lwip_send+0xa0>
 800cd9a:	4a07      	ldr	r2, [pc, #28]	; (800cdb8 <lwip_send+0xb8>)
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800cda0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <lwip_send+0xac>
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	e001      	b.n	800cdb0 <lwip_send+0xb0>
 800cdac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3720      	adds	r7, #32
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	2000c680 	.word	0x2000c680

0800cdbc <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08e      	sub	sp, #56	; 0x38
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7ff f952 	bl	800c074 <get_socket>
 800cdd0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d102      	bne.n	800cdde <lwip_sendto+0x22>
    return -1;
 800cdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cddc:	e093      	b.n	800cf06 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cde8:	2b10      	cmp	r3, #16
 800cdea:	d107      	bne.n	800cdfc <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	68b9      	ldr	r1, [r7, #8]
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f7ff ff84 	bl	800cd00 <lwip_send>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	e084      	b.n	800cf06 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce02:	d30a      	bcc.n	800ce1a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800ce04:	235a      	movs	r3, #90	; 0x5a
 800ce06:	623b      	str	r3, [r7, #32]
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <lwip_sendto+0x58>
 800ce0e:	4a40      	ldr	r2, [pc, #256]	; (800cf10 <lwip_sendto+0x154>)
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ce14:	f04f 33ff 	mov.w	r3, #4294967295
 800ce18:	e075      	b.n	800cf06 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800ce1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <lwip_sendto+0x6e>
 800ce24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d023      	beq.n	800ce72 <lwip_sendto+0xb6>
 800ce2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce2c:	2b10      	cmp	r3, #16
 800ce2e:	d10b      	bne.n	800ce48 <lwip_sendto+0x8c>
 800ce30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d008      	beq.n	800ce48 <lwip_sendto+0x8c>
 800ce36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce38:	785b      	ldrb	r3, [r3, #1]
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d104      	bne.n	800ce48 <lwip_sendto+0x8c>
 800ce3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce40:	f003 0303 	and.w	r3, r3, #3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d014      	beq.n	800ce72 <lwip_sendto+0xb6>
 800ce48:	4b32      	ldr	r3, [pc, #200]	; (800cf14 <lwip_sendto+0x158>)
 800ce4a:	f240 6252 	movw	r2, #1618	; 0x652
 800ce4e:	4932      	ldr	r1, [pc, #200]	; (800cf18 <lwip_sendto+0x15c>)
 800ce50:	4832      	ldr	r0, [pc, #200]	; (800cf1c <lwip_sendto+0x160>)
 800ce52:	f00d fea7 	bl	801aba4 <iprintf>
 800ce56:	f06f 000f 	mvn.w	r0, #15
 800ce5a:	f7fc fe0d 	bl	8009a78 <err_to_errno>
 800ce5e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <lwip_sendto+0xb0>
 800ce66:	4a2a      	ldr	r2, [pc, #168]	; (800cf10 <lwip_sendto+0x154>)
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce70:	e049      	b.n	800cf06 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	617b      	str	r3, [r7, #20]
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00a      	beq.n	800ce96 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ce80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	61bb      	str	r3, [r7, #24]
 800ce86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce88:	885b      	ldrh	r3, [r3, #2]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f004 fcb0 	bl	80117f0 <lwip_htons>
 800ce90:	4603      	mov	r3, r0
 800ce92:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ce94:	e003      	b.n	800ce9e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ce9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cea0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800cea2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cea4:	f107 0310 	add.w	r3, r7, #16
 800cea8:	68b9      	ldr	r1, [r7, #8]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff f85a 	bl	800bf64 <netbuf_ref>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800ceb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f107 0210 	add.w	r2, r7, #16
 800cec6:	4611      	mov	r1, r2
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe feb9 	bl	800bc40 <netconn_send>
 800cece:	4603      	mov	r3, r0
 800ced0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800ced4:	f107 0310 	add.w	r3, r7, #16
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff f81b 	bl	800bf14 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800cede:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fc fdc8 	bl	8009a78 <err_to_errno>
 800cee8:	6278      	str	r0, [r7, #36]	; 0x24
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <lwip_sendto+0x13a>
 800cef0:	4a07      	ldr	r2, [pc, #28]	; (800cf10 <lwip_sendto+0x154>)
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800cef6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <lwip_sendto+0x146>
 800cefe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf00:	e001      	b.n	800cf06 <lwip_sendto+0x14a>
 800cf02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3738      	adds	r7, #56	; 0x38
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	2000c680 	.word	0x2000c680
 800cf14:	0801ce20 	.word	0x0801ce20
 800cf18:	0801d140 	.word	0x0801d140
 800cf1c:	0801c36c 	.word	0x0801c36c

0800cf20 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2b03      	cmp	r3, #3
 800cf30:	d009      	beq.n	800cf46 <lwip_socket+0x26>
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	dc23      	bgt.n	800cf80 <lwip_socket+0x60>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d019      	beq.n	800cf72 <lwip_socket+0x52>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d009      	beq.n	800cf58 <lwip_socket+0x38>
 800cf44:	e01c      	b.n	800cf80 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	4a22      	ldr	r2, [pc, #136]	; (800cfd4 <lwip_socket+0xb4>)
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	2040      	movs	r0, #64	; 0x40
 800cf50:	f7fe fa78 	bl	800b444 <netconn_new_with_proto_and_callback>
 800cf54:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800cf56:	e019      	b.n	800cf8c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b88      	cmp	r3, #136	; 0x88
 800cf5c:	d101      	bne.n	800cf62 <lwip_socket+0x42>
 800cf5e:	2321      	movs	r3, #33	; 0x21
 800cf60:	e000      	b.n	800cf64 <lwip_socket+0x44>
 800cf62:	2320      	movs	r3, #32
 800cf64:	4a1b      	ldr	r2, [pc, #108]	; (800cfd4 <lwip_socket+0xb4>)
 800cf66:	2100      	movs	r1, #0
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fa6b 	bl	800b444 <netconn_new_with_proto_and_callback>
 800cf6e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800cf70:	e00c      	b.n	800cf8c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800cf72:	4a18      	ldr	r2, [pc, #96]	; (800cfd4 <lwip_socket+0xb4>)
 800cf74:	2100      	movs	r1, #0
 800cf76:	2010      	movs	r0, #16
 800cf78:	f7fe fa64 	bl	800b444 <netconn_new_with_proto_and_callback>
 800cf7c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800cf7e:	e005      	b.n	800cf8c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800cf80:	4b15      	ldr	r3, [pc, #84]	; (800cfd8 <lwip_socket+0xb8>)
 800cf82:	2216      	movs	r2, #22
 800cf84:	601a      	str	r2, [r3, #0]
      return -1;
 800cf86:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8a:	e01e      	b.n	800cfca <lwip_socket+0xaa>
  }

  if (!conn) {
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d105      	bne.n	800cf9e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800cf92:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <lwip_socket+0xb8>)
 800cf94:	2269      	movs	r2, #105	; 0x69
 800cf96:	601a      	str	r2, [r3, #0]
    return -1;
 800cf98:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9c:	e015      	b.n	800cfca <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	6978      	ldr	r0, [r7, #20]
 800cfa2:	f7ff f87f 	bl	800c0a4 <alloc_socket>
 800cfa6:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfae:	d108      	bne.n	800cfc2 <lwip_socket+0xa2>
    netconn_delete(conn);
 800cfb0:	6978      	ldr	r0, [r7, #20]
 800cfb2:	f7fe fae5 	bl	800b580 <netconn_delete>
    set_errno(ENFILE);
 800cfb6:	4b08      	ldr	r3, [pc, #32]	; (800cfd8 <lwip_socket+0xb8>)
 800cfb8:	2217      	movs	r2, #23
 800cfba:	601a      	str	r2, [r3, #0]
    return -1;
 800cfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc0:	e003      	b.n	800cfca <lwip_socket+0xaa>
  }
  conn->socket = i;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800cfc8:	693b      	ldr	r3, [r7, #16]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	0800d085 	.word	0x0800d085
 800cfd8:	2000c680 	.word	0x2000c680

0800cfdc <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800cfe8:	2300      	movs	r3, #0
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	68b9      	ldr	r1, [r7, #8]
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f7ff fe86 	bl	800cd00 <lwip_send>
 800cff4:	4603      	mov	r3, r0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cffe:	b480      	push	{r7}
 800d000:	b087      	sub	sp, #28
 800d002:	af00      	add	r7, sp, #0
 800d004:	60f8      	str	r0, [r7, #12]
 800d006:	60b9      	str	r1, [r7, #8]
 800d008:	607a      	str	r2, [r7, #4]
 800d00a:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d00c:	2300      	movs	r3, #0
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	e02c      	b.n	800d06c <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	695a      	ldr	r2, [r3, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4413      	add	r3, r2
 800d01c:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	429a      	cmp	r2, r3
 800d026:	d11e      	bne.n	800d066 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d009      	beq.n	800d042 <lwip_poll_should_wake+0x44>
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d034:	b29b      	uxth	r3, r3
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <lwip_poll_should_wake+0x44>
        return 1;
 800d03e:	2301      	movs	r3, #1
 800d040:	e01a      	b.n	800d078 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d009      	beq.n	800d05c <lwip_poll_should_wake+0x5e>
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	f003 0302 	and.w	r3, r3, #2
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <lwip_poll_should_wake+0x5e>
        return 1;
 800d058:	2301      	movs	r3, #1
 800d05a:	e00d      	b.n	800d078 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800d062:	2301      	movs	r3, #1
 800d064:	e008      	b.n	800d078 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	3301      	adds	r3, #1
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	697a      	ldr	r2, [r7, #20]
 800d072:	429a      	cmp	r2, r3
 800d074:	d3cd      	bcc.n	800d012 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	371c      	adds	r7, #28
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08a      	sub	sp, #40	; 0x28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
 800d090:	4613      	mov	r3, r2
 800d092:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	f000 80a4 	beq.w	800d1e4 <event_callback+0x160>
    s = conn->socket;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	da18      	bge.n	800d0da <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800d0a8:	f00d fcae 	bl	801aa08 <sys_arch_protect>
 800d0ac:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	da0b      	bge.n	800d0ce <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800d0b6:	78fb      	ldrb	r3, [r7, #3]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d104      	bne.n	800d0c6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	1e5a      	subs	r2, r3, #1
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800d0c6:	69f8      	ldr	r0, [r7, #28]
 800d0c8:	f00d fcac 	bl	801aa24 <sys_arch_unprotect>
        return;
 800d0cc:	e08d      	b.n	800d1ea <event_callback+0x166>
      }
      s = conn->socket;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800d0d4:	69f8      	ldr	r0, [r7, #28]
 800d0d6:	f00d fca5 	bl	801aa24 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800d0da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0dc:	f7fe ffca 	bl	800c074 <get_socket>
 800d0e0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d07f      	beq.n	800d1e8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800d0ec:	f00d fc8c 	bl	801aa08 <sys_arch_protect>
 800d0f0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	2b04      	cmp	r3, #4
 800d0f6:	d83e      	bhi.n	800d176 <event_callback+0xf2>
 800d0f8:	a201      	add	r2, pc, #4	; (adr r2, 800d100 <event_callback+0x7c>)
 800d0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fe:	bf00      	nop
 800d100:	0800d115 	.word	0x0800d115
 800d104:	0800d137 	.word	0x0800d137
 800d108:	0800d14f 	.word	0x0800d14f
 800d10c:	0800d163 	.word	0x0800d163
 800d110:	0800d16f 	.word	0x0800d16f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	3301      	adds	r3, #1
 800d11e:	b29b      	uxth	r3, r3
 800d120:	b21a      	sxth	r2, r3
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	dd2a      	ble.n	800d186 <event_callback+0x102>
        check_waiters = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	623b      	str	r3, [r7, #32]
      }
      break;
 800d134:	e027      	b.n	800d186 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	3b01      	subs	r3, #1
 800d140:	b29b      	uxth	r3, r3
 800d142:	b21a      	sxth	r2, r3
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800d148:	2300      	movs	r3, #0
 800d14a:	623b      	str	r3, [r7, #32]
      break;
 800d14c:	e01c      	b.n	800d188 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	895b      	ldrh	r3, [r3, #10]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <event_callback+0xd6>
        check_waiters = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	2201      	movs	r2, #1
 800d15e:	815a      	strh	r2, [r3, #10]
      break;
 800d160:	e012      	b.n	800d188 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	2200      	movs	r2, #0
 800d166:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	623b      	str	r3, [r7, #32]
      break;
 800d16c:	e00c      	b.n	800d188 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	2201      	movs	r2, #1
 800d172:	819a      	strh	r2, [r3, #12]
      break;
 800d174:	e008      	b.n	800d188 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800d176:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <event_callback+0x16c>)
 800d178:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800d17c:	491d      	ldr	r1, [pc, #116]	; (800d1f4 <event_callback+0x170>)
 800d17e:	481e      	ldr	r0, [pc, #120]	; (800d1f8 <event_callback+0x174>)
 800d180:	f00d fd10 	bl	801aba4 <iprintf>
      break;
 800d184:	e000      	b.n	800d188 <event_callback+0x104>
      break;
 800d186:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	7b9b      	ldrb	r3, [r3, #14]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d025      	beq.n	800d1dc <event_callback+0x158>
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d022      	beq.n	800d1dc <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	bfcc      	ite	gt
 800d1a0:	2301      	movgt	r3, #1
 800d1a2:	2300      	movle	r3, #0
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	895b      	ldrh	r3, [r3, #10]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	bf14      	ite	ne
 800d1b0:	2301      	movne	r3, #1
 800d1b2:	2300      	moveq	r3, #0
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	899b      	ldrh	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	bf14      	ite	ne
 800d1c0:	2301      	movne	r3, #1
 800d1c2:	2300      	moveq	r3, #0
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800d1c8:	69f8      	ldr	r0, [r7, #28]
 800d1ca:	f00d fc2b 	bl	801aa24 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	6979      	ldr	r1, [r7, #20]
 800d1d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1d6:	f000 f811 	bl	800d1fc <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800d1da:	e006      	b.n	800d1ea <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800d1dc:	69f8      	ldr	r0, [r7, #28]
 800d1de:	f00d fc21 	bl	801aa24 <sys_arch_unprotect>
 800d1e2:	e002      	b.n	800d1ea <event_callback+0x166>
    return;
 800d1e4:	bf00      	nop
 800d1e6:	e000      	b.n	800d1ea <event_callback+0x166>
      return;
 800d1e8:	bf00      	nop
  }
  done_socket(sock);
}
 800d1ea:	3728      	adds	r7, #40	; 0x28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	0801ce20 	.word	0x0801ce20
 800d1f4:	0801d1dc 	.word	0x0801d1dc
 800d1f8:	0801c36c 	.word	0x0801c36c

0800d1fc <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af02      	add	r7, sp, #8
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d20a:	4b3e      	ldr	r3, [pc, #248]	; (800d304 <select_check_waiters+0x108>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	e06f      	b.n	800d2f2 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	69db      	ldr	r3, [r3, #28]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d168      	bne.n	800d2ec <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d009      	beq.n	800d23a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	68ba      	ldr	r2, [r7, #8]
 800d22e:	68f9      	ldr	r1, [r7, #12]
 800d230:	6978      	ldr	r0, [r7, #20]
 800d232:	f7ff fee4 	bl	800cffe <lwip_poll_should_wake>
 800d236:	6138      	str	r0, [r7, #16]
 800d238:	e04d      	b.n	800d2d6 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d014      	beq.n	800d26a <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d010      	beq.n	800d26a <select_check_waiters+0x6e>
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	0952      	lsrs	r2, r2, #5
 800d250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	f002 021f 	and.w	r2, r2, #31
 800d25a:	2101      	movs	r1, #1
 800d25c:	fa01 f202 	lsl.w	r2, r1, r2
 800d260:	4013      	ands	r3, r2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d001      	beq.n	800d26a <select_check_waiters+0x6e>
            do_signal = 1;
 800d266:	2301      	movs	r3, #1
 800d268:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d017      	beq.n	800d2a0 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d114      	bne.n	800d2a0 <select_check_waiters+0xa4>
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d010      	beq.n	800d2a0 <select_check_waiters+0xa4>
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	0952      	lsrs	r2, r2, #5
 800d286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	f002 021f 	and.w	r2, r2, #31
 800d290:	2101      	movs	r1, #1
 800d292:	fa01 f202 	lsl.w	r2, r1, r2
 800d296:	4013      	ands	r3, r2
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <select_check_waiters+0xa4>
            do_signal = 1;
 800d29c:	2301      	movs	r3, #1
 800d29e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d017      	beq.n	800d2d6 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d114      	bne.n	800d2d6 <select_check_waiters+0xda>
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d010      	beq.n	800d2d6 <select_check_waiters+0xda>
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	691b      	ldr	r3, [r3, #16]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	0952      	lsrs	r2, r2, #5
 800d2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	f002 021f 	and.w	r2, r2, #31
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	fa01 f202 	lsl.w	r2, r1, r2
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <select_check_waiters+0xda>
            do_signal = 1;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d007      	beq.n	800d2ec <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	3320      	adds	r3, #32
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f00d faf8 	bl	801a8dc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	617b      	str	r3, [r7, #20]
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d18c      	bne.n	800d212 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800d2f8:	bf00      	nop
 800d2fa:	bf00      	nop
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	20008474 	.word	0x20008474

0800d308 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d312:	f00c fb7b 	bl	8019a0c <sys_timeouts_sleeptime>
 800d316:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31e:	d10b      	bne.n	800d338 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d320:	4813      	ldr	r0, [pc, #76]	; (800d370 <tcpip_timeouts_mbox_fetch+0x68>)
 800d322:	f00d fb44 	bl	801a9ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d326:	2200      	movs	r2, #0
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f00d fa1a 	bl	801a764 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d330:	480f      	ldr	r0, [pc, #60]	; (800d370 <tcpip_timeouts_mbox_fetch+0x68>)
 800d332:	f00d fb2d 	bl	801a990 <sys_mutex_lock>
    return;
 800d336:	e018      	b.n	800d36a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d102      	bne.n	800d344 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d33e:	f00c fb2b 	bl	8019998 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d342:	e7e6      	b.n	800d312 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d344:	480a      	ldr	r0, [pc, #40]	; (800d370 <tcpip_timeouts_mbox_fetch+0x68>)
 800d346:	f00d fb32 	bl	801a9ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f00d fa08 	bl	801a764 <sys_arch_mbox_fetch>
 800d354:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d356:	4806      	ldr	r0, [pc, #24]	; (800d370 <tcpip_timeouts_mbox_fetch+0x68>)
 800d358:	f00d fb1a 	bl	801a990 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d362:	d102      	bne.n	800d36a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d364:	f00c fb18 	bl	8019998 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d368:	e7d3      	b.n	800d312 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	20008870 	.word	0x20008870

0800d374 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d37c:	4810      	ldr	r0, [pc, #64]	; (800d3c0 <tcpip_thread+0x4c>)
 800d37e:	f00d fb07 	bl	801a990 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d382:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <tcpip_thread+0x50>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d005      	beq.n	800d396 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d38a:	4b0e      	ldr	r3, [pc, #56]	; (800d3c4 <tcpip_thread+0x50>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a0e      	ldr	r2, [pc, #56]	; (800d3c8 <tcpip_thread+0x54>)
 800d390:	6812      	ldr	r2, [r2, #0]
 800d392:	4610      	mov	r0, r2
 800d394:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d396:	f107 030c 	add.w	r3, r7, #12
 800d39a:	4619      	mov	r1, r3
 800d39c:	480b      	ldr	r0, [pc, #44]	; (800d3cc <tcpip_thread+0x58>)
 800d39e:	f7ff ffb3 	bl	800d308 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d3a8:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <tcpip_thread+0x5c>)
 800d3aa:	2291      	movs	r2, #145	; 0x91
 800d3ac:	4909      	ldr	r1, [pc, #36]	; (800d3d4 <tcpip_thread+0x60>)
 800d3ae:	480a      	ldr	r0, [pc, #40]	; (800d3d8 <tcpip_thread+0x64>)
 800d3b0:	f00d fbf8 	bl	801aba4 <iprintf>
      continue;
 800d3b4:	e003      	b.n	800d3be <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 f80f 	bl	800d3dc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d3be:	e7ea      	b.n	800d396 <tcpip_thread+0x22>
 800d3c0:	20008870 	.word	0x20008870
 800d3c4:	20008478 	.word	0x20008478
 800d3c8:	2000847c 	.word	0x2000847c
 800d3cc:	20008480 	.word	0x20008480
 800d3d0:	0801d230 	.word	0x0801d230
 800d3d4:	0801d2e4 	.word	0x0801d2e4
 800d3d8:	0801d304 	.word	0x0801d304

0800d3dc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d026      	beq.n	800d43a <tcpip_thread_handle_msg+0x5e>
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	dc2b      	bgt.n	800d448 <tcpip_thread_handle_msg+0x6c>
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <tcpip_thread_handle_msg+0x1e>
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d015      	beq.n	800d424 <tcpip_thread_handle_msg+0x48>
 800d3f8:	e026      	b.n	800d448 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	6850      	ldr	r0, [r2, #4]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	6892      	ldr	r2, [r2, #8]
 800d406:	4611      	mov	r1, r2
 800d408:	4798      	blx	r3
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	f005 fe85 	bl	8013124 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	2009      	movs	r0, #9
 800d41e:	f004 ff9f 	bl	8012360 <memp_free>
      break;
 800d422:	e018      	b.n	800d456 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	6892      	ldr	r2, [r2, #8]
 800d42c:	4610      	mov	r0, r2
 800d42e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	2008      	movs	r0, #8
 800d434:	f004 ff94 	bl	8012360 <memp_free>
      break;
 800d438:	e00d      	b.n	800d456 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	6892      	ldr	r2, [r2, #8]
 800d442:	4610      	mov	r0, r2
 800d444:	4798      	blx	r3
      break;
 800d446:	e006      	b.n	800d456 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d448:	4b05      	ldr	r3, [pc, #20]	; (800d460 <tcpip_thread_handle_msg+0x84>)
 800d44a:	22cf      	movs	r2, #207	; 0xcf
 800d44c:	4905      	ldr	r1, [pc, #20]	; (800d464 <tcpip_thread_handle_msg+0x88>)
 800d44e:	4806      	ldr	r0, [pc, #24]	; (800d468 <tcpip_thread_handle_msg+0x8c>)
 800d450:	f00d fba8 	bl	801aba4 <iprintf>
      break;
 800d454:	bf00      	nop
  }
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	0801d230 	.word	0x0801d230
 800d464:	0801d2e4 	.word	0x0801d2e4
 800d468:	0801d304 	.word	0x0801d304

0800d46c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d478:	481a      	ldr	r0, [pc, #104]	; (800d4e4 <tcpip_inpkt+0x78>)
 800d47a:	f00d f9bb 	bl	801a7f4 <sys_mbox_valid>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <tcpip_inpkt+0x24>
 800d484:	4b18      	ldr	r3, [pc, #96]	; (800d4e8 <tcpip_inpkt+0x7c>)
 800d486:	22fc      	movs	r2, #252	; 0xfc
 800d488:	4918      	ldr	r1, [pc, #96]	; (800d4ec <tcpip_inpkt+0x80>)
 800d48a:	4819      	ldr	r0, [pc, #100]	; (800d4f0 <tcpip_inpkt+0x84>)
 800d48c:	f00d fb8a 	bl	801aba4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d490:	2009      	movs	r0, #9
 800d492:	f004 feef 	bl	8012274 <memp_malloc>
 800d496:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d102      	bne.n	800d4a4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d49e:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a2:	e01a      	b.n	800d4da <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d4bc:	6979      	ldr	r1, [r7, #20]
 800d4be:	4809      	ldr	r0, [pc, #36]	; (800d4e4 <tcpip_inpkt+0x78>)
 800d4c0:	f00d f936 	bl	801a730 <sys_mbox_trypost>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d006      	beq.n	800d4d8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d4ca:	6979      	ldr	r1, [r7, #20]
 800d4cc:	2009      	movs	r0, #9
 800d4ce:	f004 ff47 	bl	8012360 <memp_free>
    return ERR_MEM;
 800d4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d6:	e000      	b.n	800d4da <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d4d8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20008480 	.word	0x20008480
 800d4e8:	0801d230 	.word	0x0801d230
 800d4ec:	0801d32c 	.word	0x0801d32c
 800d4f0:	0801d304 	.word	0x0801d304

0800d4f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d504:	f003 0318 	and.w	r3, r3, #24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d006      	beq.n	800d51a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d50c:	4a08      	ldr	r2, [pc, #32]	; (800d530 <tcpip_input+0x3c>)
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ffab 	bl	800d46c <tcpip_inpkt>
 800d516:	4603      	mov	r3, r0
 800d518:	e005      	b.n	800d526 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d51a:	4a06      	ldr	r2, [pc, #24]	; (800d534 <tcpip_input+0x40>)
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff ffa4 	bl	800d46c <tcpip_inpkt>
 800d524:	4603      	mov	r3, r0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	0801a52d 	.word	0x0801a52d
 800d534:	080106c9 	.word	0x080106c9

0800d538 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d542:	4819      	ldr	r0, [pc, #100]	; (800d5a8 <tcpip_try_callback+0x70>)
 800d544:	f00d f956 	bl	801a7f4 <sys_mbox_valid>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d106      	bne.n	800d55c <tcpip_try_callback+0x24>
 800d54e:	4b17      	ldr	r3, [pc, #92]	; (800d5ac <tcpip_try_callback+0x74>)
 800d550:	f240 125d 	movw	r2, #349	; 0x15d
 800d554:	4916      	ldr	r1, [pc, #88]	; (800d5b0 <tcpip_try_callback+0x78>)
 800d556:	4817      	ldr	r0, [pc, #92]	; (800d5b4 <tcpip_try_callback+0x7c>)
 800d558:	f00d fb24 	bl	801aba4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d55c:	2008      	movs	r0, #8
 800d55e:	f004 fe89 	bl	8012274 <memp_malloc>
 800d562:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d102      	bne.n	800d570 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d56a:	f04f 33ff 	mov.w	r3, #4294967295
 800d56e:	e017      	b.n	800d5a0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2201      	movs	r2, #1
 800d574:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d582:	68f9      	ldr	r1, [r7, #12]
 800d584:	4808      	ldr	r0, [pc, #32]	; (800d5a8 <tcpip_try_callback+0x70>)
 800d586:	f00d f8d3 	bl	801a730 <sys_mbox_trypost>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d006      	beq.n	800d59e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d590:	68f9      	ldr	r1, [r7, #12]
 800d592:	2008      	movs	r0, #8
 800d594:	f004 fee4 	bl	8012360 <memp_free>
    return ERR_MEM;
 800d598:	f04f 33ff 	mov.w	r3, #4294967295
 800d59c:	e000      	b.n	800d5a0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	20008480 	.word	0x20008480
 800d5ac:	0801d230 	.word	0x0801d230
 800d5b0:	0801d32c 	.word	0x0801d32c
 800d5b4:	0801d304 	.word	0x0801d304

0800d5b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d5c4:	4806      	ldr	r0, [pc, #24]	; (800d5e0 <tcpip_send_msg_wait_sem+0x28>)
 800d5c6:	f00d f9e3 	bl	801a990 <sys_mutex_lock>
  fn(apimsg);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	68b8      	ldr	r0, [r7, #8]
 800d5ce:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d5d0:	4803      	ldr	r0, [pc, #12]	; (800d5e0 <tcpip_send_msg_wait_sem+0x28>)
 800d5d2:	f00d f9ec 	bl	801a9ae <sys_mutex_unlock>
  return ERR_OK;
 800d5d6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20008870 	.word	0x20008870

0800d5e4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d5ee:	f004 f99c 	bl	801192a <lwip_init>

  tcpip_init_done = initfunc;
 800d5f2:	4a17      	ldr	r2, [pc, #92]	; (800d650 <tcpip_init+0x6c>)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d5f8:	4a16      	ldr	r2, [pc, #88]	; (800d654 <tcpip_init+0x70>)
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d5fe:	2106      	movs	r1, #6
 800d600:	4815      	ldr	r0, [pc, #84]	; (800d658 <tcpip_init+0x74>)
 800d602:	f00d f869 	bl	801a6d8 <sys_mbox_new>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d60c:	4b13      	ldr	r3, [pc, #76]	; (800d65c <tcpip_init+0x78>)
 800d60e:	f240 2261 	movw	r2, #609	; 0x261
 800d612:	4913      	ldr	r1, [pc, #76]	; (800d660 <tcpip_init+0x7c>)
 800d614:	4813      	ldr	r0, [pc, #76]	; (800d664 <tcpip_init+0x80>)
 800d616:	f00d fac5 	bl	801aba4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d61a:	4813      	ldr	r0, [pc, #76]	; (800d668 <tcpip_init+0x84>)
 800d61c:	f00d f9a2 	bl	801a964 <sys_mutex_new>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d006      	beq.n	800d634 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d626:	4b0d      	ldr	r3, [pc, #52]	; (800d65c <tcpip_init+0x78>)
 800d628:	f240 2265 	movw	r2, #613	; 0x265
 800d62c:	490f      	ldr	r1, [pc, #60]	; (800d66c <tcpip_init+0x88>)
 800d62e:	480d      	ldr	r0, [pc, #52]	; (800d664 <tcpip_init+0x80>)
 800d630:	f00d fab8 	bl	801aba4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d634:	2328      	movs	r3, #40	; 0x28
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d63c:	2200      	movs	r2, #0
 800d63e:	490c      	ldr	r1, [pc, #48]	; (800d670 <tcpip_init+0x8c>)
 800d640:	480c      	ldr	r0, [pc, #48]	; (800d674 <tcpip_init+0x90>)
 800d642:	f00d f9c1 	bl	801a9c8 <sys_thread_new>
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20008478 	.word	0x20008478
 800d654:	2000847c 	.word	0x2000847c
 800d658:	20008480 	.word	0x20008480
 800d65c:	0801d230 	.word	0x0801d230
 800d660:	0801d33c 	.word	0x0801d33c
 800d664:	0801d304 	.word	0x0801d304
 800d668:	20008870 	.word	0x20008870
 800d66c:	0801d360 	.word	0x0801d360
 800d670:	0800d375 	.word	0x0800d375
 800d674:	0801d384 	.word	0x0801d384

0800d678 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800d67c:	4b20      	ldr	r3, [pc, #128]	; (800d700 <dhcp_inc_pcb_refcount+0x88>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d133      	bne.n	800d6ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d684:	4b1f      	ldr	r3, [pc, #124]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <dhcp_inc_pcb_refcount+0x20>
 800d68c:	4b1e      	ldr	r3, [pc, #120]	; (800d708 <dhcp_inc_pcb_refcount+0x90>)
 800d68e:	22e5      	movs	r2, #229	; 0xe5
 800d690:	491e      	ldr	r1, [pc, #120]	; (800d70c <dhcp_inc_pcb_refcount+0x94>)
 800d692:	481f      	ldr	r0, [pc, #124]	; (800d710 <dhcp_inc_pcb_refcount+0x98>)
 800d694:	f00d fa86 	bl	801aba4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800d698:	f00c fef4 	bl	801a484 <udp_new>
 800d69c:	4603      	mov	r3, r0
 800d69e:	4a19      	ldr	r2, [pc, #100]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6a0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800d6a2:	4b18      	ldr	r3, [pc, #96]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d102      	bne.n	800d6b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800d6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ae:	e024      	b.n	800d6fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d6b0:	4b14      	ldr	r3, [pc, #80]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	7a5a      	ldrb	r2, [r3, #9]
 800d6b6:	4b13      	ldr	r3, [pc, #76]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f042 0220 	orr.w	r2, r2, #32
 800d6be:	b2d2      	uxtb	r2, r2
 800d6c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d6c2:	4b10      	ldr	r3, [pc, #64]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2244      	movs	r2, #68	; 0x44
 800d6c8:	4912      	ldr	r1, [pc, #72]	; (800d714 <dhcp_inc_pcb_refcount+0x9c>)
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f00c fd82 	bl	801a1d4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d6d0:	4b0c      	ldr	r3, [pc, #48]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2243      	movs	r2, #67	; 0x43
 800d6d6:	490f      	ldr	r1, [pc, #60]	; (800d714 <dhcp_inc_pcb_refcount+0x9c>)
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f00c fe03 	bl	801a2e4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d6de:	4b09      	ldr	r3, [pc, #36]	; (800d704 <dhcp_inc_pcb_refcount+0x8c>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	490c      	ldr	r1, [pc, #48]	; (800d718 <dhcp_inc_pcb_refcount+0xa0>)
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f00c fe6a 	bl	801a3c0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800d6ec:	4b04      	ldr	r3, [pc, #16]	; (800d700 <dhcp_inc_pcb_refcount+0x88>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	4b02      	ldr	r3, [pc, #8]	; (800d700 <dhcp_inc_pcb_refcount+0x88>)
 800d6f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20008488 	.word	0x20008488
 800d704:	20008484 	.word	0x20008484
 800d708:	0801d38c 	.word	0x0801d38c
 800d70c:	0801d444 	.word	0x0801d444
 800d710:	0801d46c 	.word	0x0801d46c
 800d714:	08020f30 	.word	0x08020f30
 800d718:	0800efb1 	.word	0x0800efb1

0800d71c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d720:	4b0e      	ldr	r3, [pc, #56]	; (800d75c <dhcp_dec_pcb_refcount+0x40>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d105      	bne.n	800d734 <dhcp_dec_pcb_refcount+0x18>
 800d728:	4b0d      	ldr	r3, [pc, #52]	; (800d760 <dhcp_dec_pcb_refcount+0x44>)
 800d72a:	22ff      	movs	r2, #255	; 0xff
 800d72c:	490d      	ldr	r1, [pc, #52]	; (800d764 <dhcp_dec_pcb_refcount+0x48>)
 800d72e:	480e      	ldr	r0, [pc, #56]	; (800d768 <dhcp_dec_pcb_refcount+0x4c>)
 800d730:	f00d fa38 	bl	801aba4 <iprintf>
  dhcp_pcb_refcount--;
 800d734:	4b09      	ldr	r3, [pc, #36]	; (800d75c <dhcp_dec_pcb_refcount+0x40>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	3b01      	subs	r3, #1
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	4b07      	ldr	r3, [pc, #28]	; (800d75c <dhcp_dec_pcb_refcount+0x40>)
 800d73e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800d740:	4b06      	ldr	r3, [pc, #24]	; (800d75c <dhcp_dec_pcb_refcount+0x40>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d107      	bne.n	800d758 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800d748:	4b08      	ldr	r3, [pc, #32]	; (800d76c <dhcp_dec_pcb_refcount+0x50>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f00c fe57 	bl	801a400 <udp_remove>
    dhcp_pcb = NULL;
 800d752:	4b06      	ldr	r3, [pc, #24]	; (800d76c <dhcp_dec_pcb_refcount+0x50>)
 800d754:	2200      	movs	r2, #0
 800d756:	601a      	str	r2, [r3, #0]
  }
}
 800d758:	bf00      	nop
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20008488 	.word	0x20008488
 800d760:	0801d38c 	.word	0x0801d38c
 800d764:	0801d494 	.word	0x0801d494
 800d768:	0801d46c 	.word	0x0801d46c
 800d76c:	20008484 	.word	0x20008484

0800d770 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d77e:	210c      	movs	r1, #12
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f001 f857 	bl	800e834 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d786:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <dhcp_handle_nak+0x30>)
 800d788:	4a05      	ldr	r2, [pc, #20]	; (800d7a0 <dhcp_handle_nak+0x30>)
 800d78a:	4905      	ldr	r1, [pc, #20]	; (800d7a0 <dhcp_handle_nak+0x30>)
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f004 ff89 	bl	80126a4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 fc4a 	bl	800e02c <dhcp_discover>
}
 800d798:	bf00      	nop
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	08020f30 	.word	0x08020f30

0800d7a4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d7b2:	2108      	movs	r1, #8
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f001 f83d 	bl	800e834 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	331c      	adds	r3, #28
 800d7be:	2200      	movs	r2, #0
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f002 fb3e 	bl	800fe44 <etharp_query>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	799b      	ldrb	r3, [r3, #6]
 800d7d0:	2bff      	cmp	r3, #255	; 0xff
 800d7d2:	d005      	beq.n	800d7e0 <dhcp_check+0x3c>
    dhcp->tries++;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	799b      	ldrb	r3, [r3, #6]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800d7e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d7e4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d7e6:	893b      	ldrh	r3, [r7, #8]
 800d7e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d7ec:	4a06      	ldr	r2, [pc, #24]	; (800d808 <dhcp_check+0x64>)
 800d7ee:	fb82 1203 	smull	r1, r2, r2, r3
 800d7f2:	1152      	asrs	r2, r2, #5
 800d7f4:	17db      	asrs	r3, r3, #31
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800d7fe:	bf00      	nop
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	10624dd3 	.word	0x10624dd3

0800d80c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d81c:	4b0c      	ldr	r3, [pc, #48]	; (800d850 <dhcp_handle_offer+0x44>)
 800d81e:	789b      	ldrb	r3, [r3, #2]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d011      	beq.n	800d848 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d82a:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <dhcp_handle_offer+0x48>)
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	4618      	mov	r0, r3
 800d830:	f003 fff3 	bl	801181a <lwip_htonl>
 800d834:	4602      	mov	r2, r0
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	691a      	ldr	r2, [r3, #16]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f808 	bl	800d858 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20008874 	.word	0x20008874
 800d854:	2000887c 	.word	0x2000887c

0800d858 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800d858:	b5b0      	push	{r4, r5, r7, lr}
 800d85a:	b08a      	sub	sp, #40	; 0x28
 800d85c:	af02      	add	r7, sp, #8
 800d85e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <dhcp_select+0x22>
 800d866:	4b71      	ldr	r3, [pc, #452]	; (800da2c <dhcp_select+0x1d4>)
 800d868:	f240 1277 	movw	r2, #375	; 0x177
 800d86c:	4970      	ldr	r1, [pc, #448]	; (800da30 <dhcp_select+0x1d8>)
 800d86e:	4871      	ldr	r0, [pc, #452]	; (800da34 <dhcp_select+0x1dc>)
 800d870:	f00d f998 	bl	801aba4 <iprintf>
 800d874:	f06f 030f 	mvn.w	r3, #15
 800d878:	e0d3      	b.n	800da22 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d109      	bne.n	800d89a <dhcp_select+0x42>
 800d886:	4b69      	ldr	r3, [pc, #420]	; (800da2c <dhcp_select+0x1d4>)
 800d888:	f240 1279 	movw	r2, #377	; 0x179
 800d88c:	496a      	ldr	r1, [pc, #424]	; (800da38 <dhcp_select+0x1e0>)
 800d88e:	4869      	ldr	r0, [pc, #420]	; (800da34 <dhcp_select+0x1dc>)
 800d890:	f00d f988 	bl	801aba4 <iprintf>
 800d894:	f06f 0305 	mvn.w	r3, #5
 800d898:	e0c3      	b.n	800da22 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d89a:	2101      	movs	r1, #1
 800d89c:	69b8      	ldr	r0, [r7, #24]
 800d89e:	f000 ffc9 	bl	800e834 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d8a2:	f107 030c 	add.w	r3, r7, #12
 800d8a6:	2203      	movs	r2, #3
 800d8a8:	69b9      	ldr	r1, [r7, #24]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f001 fc4e 	bl	800f14c <dhcp_create_msg>
 800d8b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f000 8085 	beq.w	800d9c4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d8c0:	89b8      	ldrh	r0, [r7, #12]
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	2239      	movs	r2, #57	; 0x39
 800d8cc:	f000 ffcc 	bl	800e868 <dhcp_option>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d8d4:	89b8      	ldrh	r0, [r7, #12]
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	f001 f81b 	bl	800e91c <dhcp_option_short>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d8ea:	89b8      	ldrh	r0, [r7, #12]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8f2:	2304      	movs	r3, #4
 800d8f4:	2232      	movs	r2, #50	; 0x32
 800d8f6:	f000 ffb7 	bl	800e868 <dhcp_option>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d8fe:	89bc      	ldrh	r4, [r7, #12]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f003 ff85 	bl	801181a <lwip_htonl>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	4629      	mov	r1, r5
 800d916:	4620      	mov	r0, r4
 800d918:	f001 f832 	bl	800e980 <dhcp_option_long>
 800d91c:	4603      	mov	r3, r0
 800d91e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d920:	89b8      	ldrh	r0, [r7, #12]
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d928:	2304      	movs	r3, #4
 800d92a:	2236      	movs	r2, #54	; 0x36
 800d92c:	f000 ff9c 	bl	800e868 <dhcp_option>
 800d930:	4603      	mov	r3, r0
 800d932:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d934:	89bc      	ldrh	r4, [r7, #12]
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	4618      	mov	r0, r3
 800d942:	f003 ff6a 	bl	801181a <lwip_htonl>
 800d946:	4603      	mov	r3, r0
 800d948:	461a      	mov	r2, r3
 800d94a:	4629      	mov	r1, r5
 800d94c:	4620      	mov	r0, r4
 800d94e:	f001 f817 	bl	800e980 <dhcp_option_long>
 800d952:	4603      	mov	r3, r0
 800d954:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d956:	89b8      	ldrh	r0, [r7, #12]
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d95e:	2303      	movs	r3, #3
 800d960:	2237      	movs	r2, #55	; 0x37
 800d962:	f000 ff81 	bl	800e868 <dhcp_option>
 800d966:	4603      	mov	r3, r0
 800d968:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d96a:	2300      	movs	r3, #0
 800d96c:	77bb      	strb	r3, [r7, #30]
 800d96e:	e00e      	b.n	800d98e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d970:	89b8      	ldrh	r0, [r7, #12]
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d978:	7fbb      	ldrb	r3, [r7, #30]
 800d97a:	4a30      	ldr	r2, [pc, #192]	; (800da3c <dhcp_select+0x1e4>)
 800d97c:	5cd3      	ldrb	r3, [r2, r3]
 800d97e:	461a      	mov	r2, r3
 800d980:	f000 ffa6 	bl	800e8d0 <dhcp_option_byte>
 800d984:	4603      	mov	r3, r0
 800d986:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d988:	7fbb      	ldrb	r3, [r7, #30]
 800d98a:	3301      	adds	r3, #1
 800d98c:	77bb      	strb	r3, [r7, #30]
 800d98e:	7fbb      	ldrb	r3, [r7, #30]
 800d990:	2b02      	cmp	r3, #2
 800d992:	d9ed      	bls.n	800d970 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d994:	89b8      	ldrh	r0, [r7, #12]
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	33f0      	adds	r3, #240	; 0xf0
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	4619      	mov	r1, r3
 800d99e:	f001 fcab 	bl	800f2f8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d9a2:	4b27      	ldr	r3, [pc, #156]	; (800da40 <dhcp_select+0x1e8>)
 800d9a4:	6818      	ldr	r0, [r3, #0]
 800d9a6:	4b27      	ldr	r3, [pc, #156]	; (800da44 <dhcp_select+0x1ec>)
 800d9a8:	9301      	str	r3, [sp, #4]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	2343      	movs	r3, #67	; 0x43
 800d9b0:	4a25      	ldr	r2, [pc, #148]	; (800da48 <dhcp_select+0x1f0>)
 800d9b2:	6979      	ldr	r1, [r7, #20]
 800d9b4:	f00c fb28 	bl	801a008 <udp_sendto_if_src>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d9bc:	6978      	ldr	r0, [r7, #20]
 800d9be:	f005 fbb1 	bl	8013124 <pbuf_free>
 800d9c2:	e001      	b.n	800d9c8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d9c4:	23ff      	movs	r3, #255	; 0xff
 800d9c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	799b      	ldrb	r3, [r3, #6]
 800d9cc:	2bff      	cmp	r3, #255	; 0xff
 800d9ce:	d005      	beq.n	800d9dc <dhcp_select+0x184>
    dhcp->tries++;
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	799b      	ldrb	r3, [r3, #6]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	799b      	ldrb	r3, [r3, #6]
 800d9e0:	2b05      	cmp	r3, #5
 800d9e2:	d80d      	bhi.n	800da00 <dhcp_select+0x1a8>
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	799b      	ldrb	r3, [r3, #6]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	4093      	lsls	r3, r2
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	0152      	lsls	r2, r2, #5
 800d9f4:	1ad2      	subs	r2, r2, r3
 800d9f6:	0092      	lsls	r2, r2, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	e001      	b.n	800da04 <dhcp_select+0x1ac>
 800da00:	f64e 2360 	movw	r3, #60000	; 0xea60
 800da04:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800da06:	89fb      	ldrh	r3, [r7, #14]
 800da08:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800da0c:	4a0f      	ldr	r2, [pc, #60]	; (800da4c <dhcp_select+0x1f4>)
 800da0e:	fb82 1203 	smull	r1, r2, r2, r3
 800da12:	1152      	asrs	r2, r2, #5
 800da14:	17db      	asrs	r3, r3, #31
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	b29a      	uxth	r2, r3
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800da1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bdb0      	pop	{r4, r5, r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0801d38c 	.word	0x0801d38c
 800da30:	0801d4b8 	.word	0x0801d4b8
 800da34:	0801d46c 	.word	0x0801d46c
 800da38:	0801d4d4 	.word	0x0801d4d4
 800da3c:	20000034 	.word	0x20000034
 800da40:	20008484 	.word	0x20008484
 800da44:	08020f30 	.word	0x08020f30
 800da48:	08020f34 	.word	0x08020f34
 800da4c:	10624dd3 	.word	0x10624dd3

0800da50 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800da56:	4b27      	ldr	r3, [pc, #156]	; (800daf4 <dhcp_coarse_tmr+0xa4>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	607b      	str	r3, [r7, #4]
 800da5c:	e042      	b.n	800dae4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d039      	beq.n	800dade <dhcp_coarse_tmr+0x8e>
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	795b      	ldrb	r3, [r3, #5]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d035      	beq.n	800dade <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	8a9b      	ldrh	r3, [r3, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d012      	beq.n	800daa0 <dhcp_coarse_tmr+0x50>
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	8a5b      	ldrh	r3, [r3, #18]
 800da7e:	3301      	adds	r3, #1
 800da80:	b29a      	uxth	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	825a      	strh	r2, [r3, #18]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	8a5a      	ldrh	r2, [r3, #18]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	8a9b      	ldrh	r3, [r3, #20]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d106      	bne.n	800daa0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fe34 	bl	800e700 <dhcp_release_and_stop>
        dhcp_start(netif);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f96b 	bl	800dd74 <dhcp_start>
 800da9e:	e01e      	b.n	800dade <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	8a1b      	ldrh	r3, [r3, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00b      	beq.n	800dac0 <dhcp_coarse_tmr+0x70>
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	8a1b      	ldrh	r3, [r3, #16]
 800daac:	1e5a      	subs	r2, r3, #1
 800daae:	b291      	uxth	r1, r2
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	8211      	strh	r1, [r2, #16]
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d103      	bne.n	800dac0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f8c7 	bl	800dc4c <dhcp_t2_timeout>
 800dabe:	e00e      	b.n	800dade <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	89db      	ldrh	r3, [r3, #14]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00a      	beq.n	800dade <dhcp_coarse_tmr+0x8e>
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	89db      	ldrh	r3, [r3, #14]
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	b291      	uxth	r1, r2
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	81d1      	strh	r1, [r2, #14]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d102      	bne.n	800dade <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f888 	bl	800dbee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	607b      	str	r3, [r7, #4]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1b9      	bne.n	800da5e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800daea:	bf00      	nop
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	2000c654 	.word	0x2000c654

0800daf8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800dafe:	4b16      	ldr	r3, [pc, #88]	; (800db58 <dhcp_fine_tmr+0x60>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	607b      	str	r3, [r7, #4]
 800db04:	e020      	b.n	800db48 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d017      	beq.n	800db42 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	891b      	ldrh	r3, [r3, #8]
 800db16:	2b01      	cmp	r3, #1
 800db18:	d906      	bls.n	800db28 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	891b      	ldrh	r3, [r3, #8]
 800db1e:	3b01      	subs	r3, #1
 800db20:	b29a      	uxth	r2, r3
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	811a      	strh	r2, [r3, #8]
 800db26:	e00c      	b.n	800db42 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	891b      	ldrh	r3, [r3, #8]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d108      	bne.n	800db42 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	891b      	ldrh	r3, [r3, #8]
 800db34:	3b01      	subs	r3, #1
 800db36:	b29a      	uxth	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f80d 	bl	800db5c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	607b      	str	r3, [r7, #4]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d1db      	bne.n	800db06 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800db4e:	bf00      	nop
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	2000c654 	.word	0x2000c654

0800db5c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db68:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	795b      	ldrb	r3, [r3, #5]
 800db6e:	2b0c      	cmp	r3, #12
 800db70:	d003      	beq.n	800db7a <dhcp_timeout+0x1e>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	795b      	ldrb	r3, [r3, #5]
 800db76:	2b06      	cmp	r3, #6
 800db78:	d103      	bne.n	800db82 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fa56 	bl	800e02c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800db80:	e031      	b.n	800dbe6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	795b      	ldrb	r3, [r3, #5]
 800db86:	2b01      	cmp	r3, #1
 800db88:	d10e      	bne.n	800dba8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	799b      	ldrb	r3, [r3, #6]
 800db8e:	2b05      	cmp	r3, #5
 800db90:	d803      	bhi.n	800db9a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff fe60 	bl	800d858 <dhcp_select>
}
 800db98:	e025      	b.n	800dbe6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fdb0 	bl	800e700 <dhcp_release_and_stop>
      dhcp_start(netif);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f8e7 	bl	800dd74 <dhcp_start>
}
 800dba6:	e01e      	b.n	800dbe6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	795b      	ldrb	r3, [r3, #5]
 800dbac:	2b08      	cmp	r3, #8
 800dbae:	d10b      	bne.n	800dbc8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	799b      	ldrb	r3, [r3, #6]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d803      	bhi.n	800dbc0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff fdf3 	bl	800d7a4 <dhcp_check>
}
 800dbbe:	e012      	b.n	800dbe6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fad5 	bl	800e170 <dhcp_bind>
}
 800dbc6:	e00e      	b.n	800dbe6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	795b      	ldrb	r3, [r3, #5]
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	d10a      	bne.n	800dbe6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	799b      	ldrb	r3, [r3, #6]
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d803      	bhi.n	800dbe0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 fcdb 	bl	800e594 <dhcp_reboot>
}
 800dbde:	e002      	b.n	800dbe6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 fa23 	bl	800e02c <dhcp_discover>
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	795b      	ldrb	r3, [r3, #5]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d007      	beq.n	800dc14 <dhcp_t1_timeout+0x26>
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	795b      	ldrb	r3, [r3, #5]
 800dc08:	2b0a      	cmp	r3, #10
 800dc0a:	d003      	beq.n	800dc14 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc10:	2b05      	cmp	r3, #5
 800dc12:	d117      	bne.n	800dc44 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fb85 	bl	800e324 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	899b      	ldrh	r3, [r3, #12]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	8a5b      	ldrh	r3, [r3, #18]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	dd0c      	ble.n	800dc44 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	899b      	ldrh	r3, [r3, #12]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	8a5b      	ldrh	r3, [r3, #18]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	da00      	bge.n	800dc3c <dhcp_t1_timeout+0x4e>
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	105b      	asrs	r3, r3, #1
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800dc44:	bf00      	nop
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	795b      	ldrb	r3, [r3, #5]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d00b      	beq.n	800dc7a <dhcp_t2_timeout+0x2e>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	795b      	ldrb	r3, [r3, #5]
 800dc66:	2b0a      	cmp	r3, #10
 800dc68:	d007      	beq.n	800dc7a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc6e:	2b05      	cmp	r3, #5
 800dc70:	d003      	beq.n	800dc7a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	795b      	ldrb	r3, [r3, #5]
 800dc76:	2b04      	cmp	r3, #4
 800dc78:	d117      	bne.n	800dcaa <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 fbee 	bl	800e45c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	8a9b      	ldrh	r3, [r3, #20]
 800dc84:	461a      	mov	r2, r3
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	8a5b      	ldrh	r3, [r3, #18]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	dd0c      	ble.n	800dcaa <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	8a9b      	ldrh	r3, [r3, #20]
 800dc94:	461a      	mov	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	8a5b      	ldrh	r3, [r3, #18]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	da00      	bge.n	800dca2 <dhcp_t2_timeout+0x56>
 800dca0:	3301      	adds	r3, #1
 800dca2:	105b      	asrs	r3, r3, #1
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800dcaa:	bf00      	nop
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800dcd0:	4b26      	ldr	r3, [pc, #152]	; (800dd6c <dhcp_handle_ack+0xb8>)
 800dcd2:	78db      	ldrb	r3, [r3, #3]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d003      	beq.n	800dce0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800dcd8:	4b25      	ldr	r3, [pc, #148]	; (800dd70 <dhcp_handle_ack+0xbc>)
 800dcda:	68da      	ldr	r2, [r3, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800dce0:	4b22      	ldr	r3, [pc, #136]	; (800dd6c <dhcp_handle_ack+0xb8>)
 800dce2:	791b      	ldrb	r3, [r3, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800dce8:	4b21      	ldr	r3, [pc, #132]	; (800dd70 <dhcp_handle_ack+0xbc>)
 800dcea:	691a      	ldr	r2, [r3, #16]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	62da      	str	r2, [r3, #44]	; 0x2c
 800dcf0:	e004      	b.n	800dcfc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf6:	085a      	lsrs	r2, r3, #1
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800dcfc:	4b1b      	ldr	r3, [pc, #108]	; (800dd6c <dhcp_handle_ack+0xb8>)
 800dcfe:	795b      	ldrb	r3, [r3, #5]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d004      	beq.n	800dd0e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800dd04:	4b1a      	ldr	r3, [pc, #104]	; (800dd70 <dhcp_handle_ack+0xbc>)
 800dd06:	695a      	ldr	r2, [r3, #20]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	631a      	str	r2, [r3, #48]	; 0x30
 800dd0c:	e007      	b.n	800dd1e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd12:	4613      	mov	r3, r2
 800dd14:	00db      	lsls	r3, r3, #3
 800dd16:	1a9b      	subs	r3, r3, r2
 800dd18:	08da      	lsrs	r2, r3, #3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	691a      	ldr	r2, [r3, #16]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800dd26:	4b11      	ldr	r3, [pc, #68]	; (800dd6c <dhcp_handle_ack+0xb8>)
 800dd28:	799b      	ldrb	r3, [r3, #6]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00b      	beq.n	800dd46 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800dd2e:	4b10      	ldr	r3, [pc, #64]	; (800dd70 <dhcp_handle_ack+0xbc>)
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f003 fd71 	bl	801181a <lwip_htonl>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2201      	movs	r2, #1
 800dd42:	71da      	strb	r2, [r3, #7]
 800dd44:	e002      	b.n	800dd4c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800dd4c:	4b07      	ldr	r3, [pc, #28]	; (800dd6c <dhcp_handle_ack+0xb8>)
 800dd4e:	79db      	ldrb	r3, [r3, #7]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d007      	beq.n	800dd64 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800dd54:	4b06      	ldr	r3, [pc, #24]	; (800dd70 <dhcp_handle_ack+0xbc>)
 800dd56:	69db      	ldr	r3, [r3, #28]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f003 fd5e 	bl	801181a <lwip_htonl>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800dd64:	bf00      	nop
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	20008874 	.word	0x20008874
 800dd70:	2000887c 	.word	0x2000887c

0800dd74 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d109      	bne.n	800dd96 <dhcp_start+0x22>
 800dd82:	4b37      	ldr	r3, [pc, #220]	; (800de60 <dhcp_start+0xec>)
 800dd84:	f240 22e7 	movw	r2, #743	; 0x2e7
 800dd88:	4936      	ldr	r1, [pc, #216]	; (800de64 <dhcp_start+0xf0>)
 800dd8a:	4837      	ldr	r0, [pc, #220]	; (800de68 <dhcp_start+0xf4>)
 800dd8c:	f00c ff0a 	bl	801aba4 <iprintf>
 800dd90:	f06f 030f 	mvn.w	r3, #15
 800dd94:	e060      	b.n	800de58 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd9c:	f003 0301 	and.w	r3, r3, #1
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d109      	bne.n	800ddb8 <dhcp_start+0x44>
 800dda4:	4b2e      	ldr	r3, [pc, #184]	; (800de60 <dhcp_start+0xec>)
 800dda6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ddaa:	4930      	ldr	r1, [pc, #192]	; (800de6c <dhcp_start+0xf8>)
 800ddac:	482e      	ldr	r0, [pc, #184]	; (800de68 <dhcp_start+0xf4>)
 800ddae:	f00c fef9 	bl	801aba4 <iprintf>
 800ddb2:	f06f 030f 	mvn.w	r3, #15
 800ddb6:	e04f      	b.n	800de58 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddc2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ddc6:	d202      	bcs.n	800ddce <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddcc:	e044      	b.n	800de58 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10d      	bne.n	800ddf0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ddd4:	2034      	movs	r0, #52	; 0x34
 800ddd6:	f004 f8a9 	bl	8011f2c <mem_malloc>
 800ddda:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800dde2:	f04f 33ff 	mov.w	r3, #4294967295
 800dde6:	e037      	b.n	800de58 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	625a      	str	r2, [r3, #36]	; 0x24
 800ddee:	e005      	b.n	800ddfc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	791b      	ldrb	r3, [r3, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ddf8:	f7ff fc90 	bl	800d71c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ddfc:	2234      	movs	r2, #52	; 0x34
 800ddfe:	2100      	movs	r1, #0
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f00c fec7 	bl	801ab94 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800de06:	f7ff fc37 	bl	800d678 <dhcp_inc_pcb_refcount>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <dhcp_start+0xa2>
    return ERR_MEM;
 800de10:	f04f 33ff 	mov.w	r3, #4294967295
 800de14:	e020      	b.n	800de58 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2201      	movs	r2, #1
 800de1a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de22:	f003 0304 	and.w	r3, r3, #4
 800de26:	2b00      	cmp	r3, #0
 800de28:	d105      	bne.n	800de36 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800de2a:	2102      	movs	r1, #2
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f000 fd01 	bl	800e834 <dhcp_set_state>
    return ERR_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	e010      	b.n	800de58 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 f8f8 	bl	800e02c <dhcp_discover>
 800de3c:	4603      	mov	r3, r0
 800de3e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800de40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fc59 	bl	800e700 <dhcp_release_and_stop>
    return ERR_MEM;
 800de4e:	f04f 33ff 	mov.w	r3, #4294967295
 800de52:	e001      	b.n	800de58 <dhcp_start+0xe4>
  }
  return result;
 800de54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	0801d38c 	.word	0x0801d38c
 800de64:	0801d4f0 	.word	0x0801d4f0
 800de68:	0801d46c 	.word	0x0801d46c
 800de6c:	0801d534 	.word	0x0801d534

0800de70 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d025      	beq.n	800ded0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	795b      	ldrb	r3, [r3, #5]
 800de88:	2b0a      	cmp	r3, #10
 800de8a:	d008      	beq.n	800de9e <dhcp_network_changed+0x2e>
 800de8c:	2b0a      	cmp	r3, #10
 800de8e:	dc0d      	bgt.n	800deac <dhcp_network_changed+0x3c>
 800de90:	2b00      	cmp	r3, #0
 800de92:	d01f      	beq.n	800ded4 <dhcp_network_changed+0x64>
 800de94:	2b00      	cmp	r3, #0
 800de96:	db09      	blt.n	800deac <dhcp_network_changed+0x3c>
 800de98:	3b03      	subs	r3, #3
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	d806      	bhi.n	800deac <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2200      	movs	r2, #0
 800dea2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fb75 	bl	800e594 <dhcp_reboot>
      break;
 800deaa:	e014      	b.n	800ded6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	795b      	ldrb	r3, [r3, #5]
 800deb0:	2b0c      	cmp	r3, #12
 800deb2:	d906      	bls.n	800dec2 <dhcp_network_changed+0x52>
 800deb4:	4b09      	ldr	r3, [pc, #36]	; (800dedc <dhcp_network_changed+0x6c>)
 800deb6:	f240 326d 	movw	r2, #877	; 0x36d
 800deba:	4909      	ldr	r1, [pc, #36]	; (800dee0 <dhcp_network_changed+0x70>)
 800debc:	4809      	ldr	r0, [pc, #36]	; (800dee4 <dhcp_network_changed+0x74>)
 800debe:	f00c fe71 	bl	801aba4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f8af 	bl	800e02c <dhcp_discover>
      break;
 800dece:	e002      	b.n	800ded6 <dhcp_network_changed+0x66>
    return;
 800ded0:	bf00      	nop
 800ded2:	e000      	b.n	800ded6 <dhcp_network_changed+0x66>
      break;
 800ded4:	bf00      	nop
  }
}
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	0801d38c 	.word	0x0801d38c
 800dee0:	0801d558 	.word	0x0801d558
 800dee4:	0801d46c 	.word	0x0801d46c

0800dee8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d107      	bne.n	800df08 <dhcp_arp_reply+0x20>
 800def8:	4b0e      	ldr	r3, [pc, #56]	; (800df34 <dhcp_arp_reply+0x4c>)
 800defa:	f240 328b 	movw	r2, #907	; 0x38b
 800defe:	490e      	ldr	r1, [pc, #56]	; (800df38 <dhcp_arp_reply+0x50>)
 800df00:	480e      	ldr	r0, [pc, #56]	; (800df3c <dhcp_arp_reply+0x54>)
 800df02:	f00c fe4f 	bl	801aba4 <iprintf>
 800df06:	e012      	b.n	800df2e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00c      	beq.n	800df2e <dhcp_arp_reply+0x46>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	795b      	ldrb	r3, [r3, #5]
 800df18:	2b08      	cmp	r3, #8
 800df1a:	d108      	bne.n	800df2e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	69db      	ldr	r3, [r3, #28]
 800df24:	429a      	cmp	r2, r3
 800df26:	d102      	bne.n	800df2e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 f809 	bl	800df40 <dhcp_decline>
    }
  }
}
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	0801d38c 	.word	0x0801d38c
 800df38:	0801d4f0 	.word	0x0801d4f0
 800df3c:	0801d46c 	.word	0x0801d46c

0800df40 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b08a      	sub	sp, #40	; 0x28
 800df44:	af02      	add	r7, sp, #8
 800df46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800df4e:	210c      	movs	r1, #12
 800df50:	69b8      	ldr	r0, [r7, #24]
 800df52:	f000 fc6f 	bl	800e834 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800df56:	f107 030c 	add.w	r3, r7, #12
 800df5a:	2204      	movs	r2, #4
 800df5c:	69b9      	ldr	r1, [r7, #24]
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f001 f8f4 	bl	800f14c <dhcp_create_msg>
 800df64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d035      	beq.n	800dfd8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800df72:	89b8      	ldrh	r0, [r7, #12]
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df7a:	2304      	movs	r3, #4
 800df7c:	2232      	movs	r2, #50	; 0x32
 800df7e:	f000 fc73 	bl	800e868 <dhcp_option>
 800df82:	4603      	mov	r3, r0
 800df84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800df86:	89bc      	ldrh	r4, [r7, #12]
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	69db      	ldr	r3, [r3, #28]
 800df92:	4618      	mov	r0, r3
 800df94:	f003 fc41 	bl	801181a <lwip_htonl>
 800df98:	4603      	mov	r3, r0
 800df9a:	461a      	mov	r2, r3
 800df9c:	4629      	mov	r1, r5
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f000 fcee 	bl	800e980 <dhcp_option_long>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dfa8:	89b8      	ldrh	r0, [r7, #12]
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	33f0      	adds	r3, #240	; 0xf0
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	f001 f9a1 	bl	800f2f8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800dfb6:	4b19      	ldr	r3, [pc, #100]	; (800e01c <dhcp_decline+0xdc>)
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	4b19      	ldr	r3, [pc, #100]	; (800e020 <dhcp_decline+0xe0>)
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	2343      	movs	r3, #67	; 0x43
 800dfc4:	4a17      	ldr	r2, [pc, #92]	; (800e024 <dhcp_decline+0xe4>)
 800dfc6:	6979      	ldr	r1, [r7, #20]
 800dfc8:	f00c f81e 	bl	801a008 <udp_sendto_if_src>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800dfd0:	6978      	ldr	r0, [r7, #20]
 800dfd2:	f005 f8a7 	bl	8013124 <pbuf_free>
 800dfd6:	e001      	b.n	800dfdc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800dfd8:	23ff      	movs	r3, #255	; 0xff
 800dfda:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	799b      	ldrb	r3, [r3, #6]
 800dfe0:	2bff      	cmp	r3, #255	; 0xff
 800dfe2:	d005      	beq.n	800dff0 <dhcp_decline+0xb0>
    dhcp->tries++;
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	799b      	ldrb	r3, [r3, #6]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800dff0:	f242 7310 	movw	r3, #10000	; 0x2710
 800dff4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dff6:	89fb      	ldrh	r3, [r7, #14]
 800dff8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dffc:	4a0a      	ldr	r2, [pc, #40]	; (800e028 <dhcp_decline+0xe8>)
 800dffe:	fb82 1203 	smull	r1, r2, r2, r3
 800e002:	1152      	asrs	r2, r2, #5
 800e004:	17db      	asrs	r3, r3, #31
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	b29a      	uxth	r2, r3
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e00e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3720      	adds	r7, #32
 800e016:	46bd      	mov	sp, r7
 800e018:	bdb0      	pop	{r4, r5, r7, pc}
 800e01a:	bf00      	nop
 800e01c:	20008484 	.word	0x20008484
 800e020:	08020f30 	.word	0x08020f30
 800e024:	08020f34 	.word	0x08020f34
 800e028:	10624dd3 	.word	0x10624dd3

0800e02c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	; 0x28
 800e030:	af02      	add	r7, sp, #8
 800e032:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e038:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	2200      	movs	r2, #0
 800e042:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e044:	2106      	movs	r1, #6
 800e046:	69b8      	ldr	r0, [r7, #24]
 800e048:	f000 fbf4 	bl	800e834 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800e04c:	f107 0308 	add.w	r3, r7, #8
 800e050:	2201      	movs	r2, #1
 800e052:	69b9      	ldr	r1, [r7, #24]
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f001 f879 	bl	800f14c <dhcp_create_msg>
 800e05a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d04b      	beq.n	800e0fa <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e068:	8938      	ldrh	r0, [r7, #8]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e070:	2302      	movs	r3, #2
 800e072:	2239      	movs	r2, #57	; 0x39
 800e074:	f000 fbf8 	bl	800e868 <dhcp_option>
 800e078:	4603      	mov	r3, r0
 800e07a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e07c:	8938      	ldrh	r0, [r7, #8]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e088:	461a      	mov	r2, r3
 800e08a:	f000 fc47 	bl	800e91c <dhcp_option_short>
 800e08e:	4603      	mov	r3, r0
 800e090:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e092:	8938      	ldrh	r0, [r7, #8]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e09a:	2303      	movs	r3, #3
 800e09c:	2237      	movs	r2, #55	; 0x37
 800e09e:	f000 fbe3 	bl	800e868 <dhcp_option>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	77fb      	strb	r3, [r7, #31]
 800e0aa:	e00e      	b.n	800e0ca <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e0ac:	8938      	ldrh	r0, [r7, #8]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0b4:	7ffb      	ldrb	r3, [r7, #31]
 800e0b6:	4a29      	ldr	r2, [pc, #164]	; (800e15c <dhcp_discover+0x130>)
 800e0b8:	5cd3      	ldrb	r3, [r2, r3]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	f000 fc08 	bl	800e8d0 <dhcp_option_byte>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0c4:	7ffb      	ldrb	r3, [r7, #31]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	77fb      	strb	r3, [r7, #31]
 800e0ca:	7ffb      	ldrb	r3, [r7, #31]
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d9ed      	bls.n	800e0ac <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e0d0:	8938      	ldrh	r0, [r7, #8]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	33f0      	adds	r3, #240	; 0xf0
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f001 f90d 	bl	800f2f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e0de:	4b20      	ldr	r3, [pc, #128]	; (800e160 <dhcp_discover+0x134>)
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	4b20      	ldr	r3, [pc, #128]	; (800e164 <dhcp_discover+0x138>)
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	2343      	movs	r3, #67	; 0x43
 800e0ec:	4a1e      	ldr	r2, [pc, #120]	; (800e168 <dhcp_discover+0x13c>)
 800e0ee:	6939      	ldr	r1, [r7, #16]
 800e0f0:	f00b ff8a 	bl	801a008 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800e0f4:	6938      	ldr	r0, [r7, #16]
 800e0f6:	f005 f815 	bl	8013124 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	799b      	ldrb	r3, [r3, #6]
 800e0fe:	2bff      	cmp	r3, #255	; 0xff
 800e100:	d005      	beq.n	800e10e <dhcp_discover+0xe2>
    dhcp->tries++;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	799b      	ldrb	r3, [r3, #6]
 800e106:	3301      	adds	r3, #1
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	799b      	ldrb	r3, [r3, #6]
 800e112:	2b05      	cmp	r3, #5
 800e114:	d80d      	bhi.n	800e132 <dhcp_discover+0x106>
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	799b      	ldrb	r3, [r3, #6]
 800e11a:	461a      	mov	r2, r3
 800e11c:	2301      	movs	r3, #1
 800e11e:	4093      	lsls	r3, r2
 800e120:	b29b      	uxth	r3, r3
 800e122:	461a      	mov	r2, r3
 800e124:	0152      	lsls	r2, r2, #5
 800e126:	1ad2      	subs	r2, r2, r3
 800e128:	0092      	lsls	r2, r2, #2
 800e12a:	4413      	add	r3, r2
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	b29b      	uxth	r3, r3
 800e130:	e001      	b.n	800e136 <dhcp_discover+0x10a>
 800e132:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e136:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e138:	897b      	ldrh	r3, [r7, #10]
 800e13a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e13e:	4a0b      	ldr	r2, [pc, #44]	; (800e16c <dhcp_discover+0x140>)
 800e140:	fb82 1203 	smull	r1, r2, r2, r3
 800e144:	1152      	asrs	r2, r2, #5
 800e146:	17db      	asrs	r3, r3, #31
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3720      	adds	r7, #32
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	20000034 	.word	0x20000034
 800e160:	20008484 	.word	0x20008484
 800e164:	08020f30 	.word	0x08020f30
 800e168:	08020f34 	.word	0x08020f34
 800e16c:	10624dd3 	.word	0x10624dd3

0800e170 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d107      	bne.n	800e18e <dhcp_bind+0x1e>
 800e17e:	4b64      	ldr	r3, [pc, #400]	; (800e310 <dhcp_bind+0x1a0>)
 800e180:	f240 4215 	movw	r2, #1045	; 0x415
 800e184:	4963      	ldr	r1, [pc, #396]	; (800e314 <dhcp_bind+0x1a4>)
 800e186:	4864      	ldr	r0, [pc, #400]	; (800e318 <dhcp_bind+0x1a8>)
 800e188:	f00c fd0c 	bl	801aba4 <iprintf>
 800e18c:	e0bc      	b.n	800e308 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e192:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d107      	bne.n	800e1aa <dhcp_bind+0x3a>
 800e19a:	4b5d      	ldr	r3, [pc, #372]	; (800e310 <dhcp_bind+0x1a0>)
 800e19c:	f240 4217 	movw	r2, #1047	; 0x417
 800e1a0:	495e      	ldr	r1, [pc, #376]	; (800e31c <dhcp_bind+0x1ac>)
 800e1a2:	485d      	ldr	r0, [pc, #372]	; (800e318 <dhcp_bind+0x1a8>)
 800e1a4:	f00c fcfe 	bl	801aba4 <iprintf>
 800e1a8:	e0ae      	b.n	800e308 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b8:	d019      	beq.n	800e1ee <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1be:	331e      	adds	r3, #30
 800e1c0:	4a57      	ldr	r2, [pc, #348]	; (800e320 <dhcp_bind+0x1b0>)
 800e1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c6:	095b      	lsrs	r3, r3, #5
 800e1c8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1d0:	d302      	bcc.n	800e1d8 <dhcp_bind+0x68>
      timeout = 0xffff;
 800e1d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1d6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	8a9b      	ldrh	r3, [r3, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f6:	d01d      	beq.n	800e234 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fc:	331e      	adds	r3, #30
 800e1fe:	4a48      	ldr	r2, [pc, #288]	; (800e320 <dhcp_bind+0x1b0>)
 800e200:	fba2 2303 	umull	r2, r3, r2, r3
 800e204:	095b      	lsrs	r3, r3, #5
 800e206:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e20e:	d302      	bcc.n	800e216 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800e210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e214:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	b29a      	uxth	r2, r3
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	895b      	ldrh	r3, [r3, #10]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d102      	bne.n	800e22c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	2201      	movs	r2, #1
 800e22a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	895a      	ldrh	r2, [r3, #10]
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23c:	d01d      	beq.n	800e27a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e242:	331e      	adds	r3, #30
 800e244:	4a36      	ldr	r2, [pc, #216]	; (800e320 <dhcp_bind+0x1b0>)
 800e246:	fba2 2303 	umull	r2, r3, r2, r3
 800e24a:	095b      	lsrs	r3, r3, #5
 800e24c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e254:	d302      	bcc.n	800e25c <dhcp_bind+0xec>
      timeout = 0xffff;
 800e256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e25a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	b29a      	uxth	r2, r3
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	899b      	ldrh	r3, [r3, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d102      	bne.n	800e272 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	2201      	movs	r2, #1
 800e270:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	899a      	ldrh	r2, [r3, #12]
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	895a      	ldrh	r2, [r3, #10]
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	429a      	cmp	r2, r3
 800e284:	d306      	bcc.n	800e294 <dhcp_bind+0x124>
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	899b      	ldrh	r3, [r3, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	2200      	movs	r2, #0
 800e292:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	79db      	ldrb	r3, [r3, #7]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	6a1b      	ldr	r3, [r3, #32]
 800e2a0:	613b      	str	r3, [r7, #16]
 800e2a2:	e014      	b.n	800e2ce <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	331c      	adds	r3, #28
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800e2ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	db02      	blt.n	800e2ba <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800e2b4:	23ff      	movs	r3, #255	; 0xff
 800e2b6:	613b      	str	r3, [r7, #16]
 800e2b8:	e009      	b.n	800e2ce <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
 800e2bc:	2bbf      	cmp	r3, #191	; 0xbf
 800e2be:	d903      	bls.n	800e2c8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800e2c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e2c4:	613b      	str	r3, [r7, #16]
 800e2c6:	e002      	b.n	800e2ce <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800e2c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2cc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d108      	bne.n	800e2ec <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	69da      	ldr	r2, [r3, #28]
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e2ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e2ec:	210a      	movs	r1, #10
 800e2ee:	69b8      	ldr	r0, [r7, #24]
 800e2f0:	f000 faa0 	bl	800e834 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	f103 011c 	add.w	r1, r3, #28
 800e2fa:	f107 030c 	add.w	r3, r7, #12
 800e2fe:	f107 0210 	add.w	r2, r7, #16
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f004 f9ce 	bl	80126a4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800e308:	3720      	adds	r7, #32
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	0801d38c 	.word	0x0801d38c
 800e314:	0801d56c 	.word	0x0801d56c
 800e318:	0801d46c 	.word	0x0801d46c
 800e31c:	0801d588 	.word	0x0801d588
 800e320:	88888889 	.word	0x88888889

0800e324 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08a      	sub	sp, #40	; 0x28
 800e328:	af02      	add	r7, sp, #8
 800e32a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e332:	2105      	movs	r1, #5
 800e334:	69b8      	ldr	r0, [r7, #24]
 800e336:	f000 fa7d 	bl	800e834 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e33a:	f107 030c 	add.w	r3, r7, #12
 800e33e:	2203      	movs	r2, #3
 800e340:	69b9      	ldr	r1, [r7, #24]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 ff02 	bl	800f14c <dhcp_create_msg>
 800e348:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d04e      	beq.n	800e3ee <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e356:	89b8      	ldrh	r0, [r7, #12]
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e35e:	2302      	movs	r3, #2
 800e360:	2239      	movs	r2, #57	; 0x39
 800e362:	f000 fa81 	bl	800e868 <dhcp_option>
 800e366:	4603      	mov	r3, r0
 800e368:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e36a:	89b8      	ldrh	r0, [r7, #12]
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e376:	461a      	mov	r2, r3
 800e378:	f000 fad0 	bl	800e91c <dhcp_option_short>
 800e37c:	4603      	mov	r3, r0
 800e37e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e380:	89b8      	ldrh	r0, [r7, #12]
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e388:	2303      	movs	r3, #3
 800e38a:	2237      	movs	r2, #55	; 0x37
 800e38c:	f000 fa6c 	bl	800e868 <dhcp_option>
 800e390:	4603      	mov	r3, r0
 800e392:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e394:	2300      	movs	r3, #0
 800e396:	77bb      	strb	r3, [r7, #30]
 800e398:	e00e      	b.n	800e3b8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e39a:	89b8      	ldrh	r0, [r7, #12]
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e3a2:	7fbb      	ldrb	r3, [r7, #30]
 800e3a4:	4a2a      	ldr	r2, [pc, #168]	; (800e450 <dhcp_renew+0x12c>)
 800e3a6:	5cd3      	ldrb	r3, [r2, r3]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	f000 fa91 	bl	800e8d0 <dhcp_option_byte>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e3b2:	7fbb      	ldrb	r3, [r7, #30]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	77bb      	strb	r3, [r7, #30]
 800e3b8:	7fbb      	ldrb	r3, [r7, #30]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d9ed      	bls.n	800e39a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e3be:	89b8      	ldrh	r0, [r7, #12]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	33f0      	adds	r3, #240	; 0xf0
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	f000 ff96 	bl	800f2f8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e3cc:	4b21      	ldr	r3, [pc, #132]	; (800e454 <dhcp_renew+0x130>)
 800e3ce:	6818      	ldr	r0, [r3, #0]
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	f103 0218 	add.w	r2, r3, #24
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	2343      	movs	r3, #67	; 0x43
 800e3dc:	6979      	ldr	r1, [r7, #20]
 800e3de:	f00b fd9f 	bl	8019f20 <udp_sendto_if>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e3e6:	6978      	ldr	r0, [r7, #20]
 800e3e8:	f004 fe9c 	bl	8013124 <pbuf_free>
 800e3ec:	e001      	b.n	800e3f2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e3ee:	23ff      	movs	r3, #255	; 0xff
 800e3f0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	799b      	ldrb	r3, [r3, #6]
 800e3f6:	2bff      	cmp	r3, #255	; 0xff
 800e3f8:	d005      	beq.n	800e406 <dhcp_renew+0xe2>
    dhcp->tries++;
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	799b      	ldrb	r3, [r3, #6]
 800e3fe:	3301      	adds	r3, #1
 800e400:	b2da      	uxtb	r2, r3
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	799b      	ldrb	r3, [r3, #6]
 800e40a:	2b09      	cmp	r3, #9
 800e40c:	d80a      	bhi.n	800e424 <dhcp_renew+0x100>
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	799b      	ldrb	r3, [r3, #6]
 800e412:	b29b      	uxth	r3, r3
 800e414:	461a      	mov	r2, r3
 800e416:	0152      	lsls	r2, r2, #5
 800e418:	1ad2      	subs	r2, r2, r3
 800e41a:	0092      	lsls	r2, r2, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	011b      	lsls	r3, r3, #4
 800e420:	b29b      	uxth	r3, r3
 800e422:	e001      	b.n	800e428 <dhcp_renew+0x104>
 800e424:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e428:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e42a:	89fb      	ldrh	r3, [r7, #14]
 800e42c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e430:	4a09      	ldr	r2, [pc, #36]	; (800e458 <dhcp_renew+0x134>)
 800e432:	fb82 1203 	smull	r1, r2, r2, r3
 800e436:	1152      	asrs	r2, r2, #5
 800e438:	17db      	asrs	r3, r3, #31
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e442:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3720      	adds	r7, #32
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	20000034 	.word	0x20000034
 800e454:	20008484 	.word	0x20008484
 800e458:	10624dd3 	.word	0x10624dd3

0800e45c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08a      	sub	sp, #40	; 0x28
 800e460:	af02      	add	r7, sp, #8
 800e462:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e46a:	2104      	movs	r1, #4
 800e46c:	69b8      	ldr	r0, [r7, #24]
 800e46e:	f000 f9e1 	bl	800e834 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e472:	f107 030c 	add.w	r3, r7, #12
 800e476:	2203      	movs	r2, #3
 800e478:	69b9      	ldr	r1, [r7, #24]
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 fe66 	bl	800f14c <dhcp_create_msg>
 800e480:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d04c      	beq.n	800e522 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e48e:	89b8      	ldrh	r0, [r7, #12]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e496:	2302      	movs	r3, #2
 800e498:	2239      	movs	r2, #57	; 0x39
 800e49a:	f000 f9e5 	bl	800e868 <dhcp_option>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e4a2:	89b8      	ldrh	r0, [r7, #12]
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f000 fa34 	bl	800e91c <dhcp_option_short>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e4b8:	89b8      	ldrh	r0, [r7, #12]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	2237      	movs	r2, #55	; 0x37
 800e4c4:	f000 f9d0 	bl	800e868 <dhcp_option>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	77bb      	strb	r3, [r7, #30]
 800e4d0:	e00e      	b.n	800e4f0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e4d2:	89b8      	ldrh	r0, [r7, #12]
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4da:	7fbb      	ldrb	r3, [r7, #30]
 800e4dc:	4a29      	ldr	r2, [pc, #164]	; (800e584 <dhcp_rebind+0x128>)
 800e4de:	5cd3      	ldrb	r3, [r2, r3]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	f000 f9f5 	bl	800e8d0 <dhcp_option_byte>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e4ea:	7fbb      	ldrb	r3, [r7, #30]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	77bb      	strb	r3, [r7, #30]
 800e4f0:	7fbb      	ldrb	r3, [r7, #30]
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d9ed      	bls.n	800e4d2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e4f6:	89b8      	ldrh	r0, [r7, #12]
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	33f0      	adds	r3, #240	; 0xf0
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	4619      	mov	r1, r3
 800e500:	f000 fefa 	bl	800f2f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e504:	4b20      	ldr	r3, [pc, #128]	; (800e588 <dhcp_rebind+0x12c>)
 800e506:	6818      	ldr	r0, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	2343      	movs	r3, #67	; 0x43
 800e50e:	4a1f      	ldr	r2, [pc, #124]	; (800e58c <dhcp_rebind+0x130>)
 800e510:	6979      	ldr	r1, [r7, #20]
 800e512:	f00b fd05 	bl	8019f20 <udp_sendto_if>
 800e516:	4603      	mov	r3, r0
 800e518:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e51a:	6978      	ldr	r0, [r7, #20]
 800e51c:	f004 fe02 	bl	8013124 <pbuf_free>
 800e520:	e001      	b.n	800e526 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e522:	23ff      	movs	r3, #255	; 0xff
 800e524:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	799b      	ldrb	r3, [r3, #6]
 800e52a:	2bff      	cmp	r3, #255	; 0xff
 800e52c:	d005      	beq.n	800e53a <dhcp_rebind+0xde>
    dhcp->tries++;
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	799b      	ldrb	r3, [r3, #6]
 800e532:	3301      	adds	r3, #1
 800e534:	b2da      	uxtb	r2, r3
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	799b      	ldrb	r3, [r3, #6]
 800e53e:	2b09      	cmp	r3, #9
 800e540:	d80a      	bhi.n	800e558 <dhcp_rebind+0xfc>
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	799b      	ldrb	r3, [r3, #6]
 800e546:	b29b      	uxth	r3, r3
 800e548:	461a      	mov	r2, r3
 800e54a:	0152      	lsls	r2, r2, #5
 800e54c:	1ad2      	subs	r2, r2, r3
 800e54e:	0092      	lsls	r2, r2, #2
 800e550:	4413      	add	r3, r2
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	b29b      	uxth	r3, r3
 800e556:	e001      	b.n	800e55c <dhcp_rebind+0x100>
 800e558:	f242 7310 	movw	r3, #10000	; 0x2710
 800e55c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e55e:	89fb      	ldrh	r3, [r7, #14]
 800e560:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e564:	4a0a      	ldr	r2, [pc, #40]	; (800e590 <dhcp_rebind+0x134>)
 800e566:	fb82 1203 	smull	r1, r2, r2, r3
 800e56a:	1152      	asrs	r2, r2, #5
 800e56c:	17db      	asrs	r3, r3, #31
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	b29a      	uxth	r2, r3
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e576:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3720      	adds	r7, #32
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20000034 	.word	0x20000034
 800e588:	20008484 	.word	0x20008484
 800e58c:	08020f34 	.word	0x08020f34
 800e590:	10624dd3 	.word	0x10624dd3

0800e594 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800e594:	b5b0      	push	{r4, r5, r7, lr}
 800e596:	b08a      	sub	sp, #40	; 0x28
 800e598:	af02      	add	r7, sp, #8
 800e59a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e5a2:	2103      	movs	r1, #3
 800e5a4:	69b8      	ldr	r0, [r7, #24]
 800e5a6:	f000 f945 	bl	800e834 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e5aa:	f107 030c 	add.w	r3, r7, #12
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	69b9      	ldr	r1, [r7, #24]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fdca 	bl	800f14c <dhcp_create_msg>
 800e5b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d066      	beq.n	800e68e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e5c6:	89b8      	ldrh	r0, [r7, #12]
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	2239      	movs	r2, #57	; 0x39
 800e5d2:	f000 f949 	bl	800e868 <dhcp_option>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e5da:	89b8      	ldrh	r0, [r7, #12]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	33f0      	adds	r3, #240	; 0xf0
 800e5e0:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f000 f999 	bl	800e91c <dhcp_option_short>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e5ee:	89b8      	ldrh	r0, [r7, #12]
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e5f6:	2304      	movs	r3, #4
 800e5f8:	2232      	movs	r2, #50	; 0x32
 800e5fa:	f000 f935 	bl	800e868 <dhcp_option>
 800e5fe:	4603      	mov	r3, r0
 800e600:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e602:	89bc      	ldrh	r4, [r7, #12]
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	4618      	mov	r0, r3
 800e610:	f003 f903 	bl	801181a <lwip_htonl>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	4629      	mov	r1, r5
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 f9b0 	bl	800e980 <dhcp_option_long>
 800e620:	4603      	mov	r3, r0
 800e622:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e624:	89b8      	ldrh	r0, [r7, #12]
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e62c:	2303      	movs	r3, #3
 800e62e:	2237      	movs	r2, #55	; 0x37
 800e630:	f000 f91a 	bl	800e868 <dhcp_option>
 800e634:	4603      	mov	r3, r0
 800e636:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e638:	2300      	movs	r3, #0
 800e63a:	77bb      	strb	r3, [r7, #30]
 800e63c:	e00e      	b.n	800e65c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e63e:	89b8      	ldrh	r0, [r7, #12]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e646:	7fbb      	ldrb	r3, [r7, #30]
 800e648:	4a29      	ldr	r2, [pc, #164]	; (800e6f0 <dhcp_reboot+0x15c>)
 800e64a:	5cd3      	ldrb	r3, [r2, r3]
 800e64c:	461a      	mov	r2, r3
 800e64e:	f000 f93f 	bl	800e8d0 <dhcp_option_byte>
 800e652:	4603      	mov	r3, r0
 800e654:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e656:	7fbb      	ldrb	r3, [r7, #30]
 800e658:	3301      	adds	r3, #1
 800e65a:	77bb      	strb	r3, [r7, #30]
 800e65c:	7fbb      	ldrb	r3, [r7, #30]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d9ed      	bls.n	800e63e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e662:	89b8      	ldrh	r0, [r7, #12]
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	33f0      	adds	r3, #240	; 0xf0
 800e668:	697a      	ldr	r2, [r7, #20]
 800e66a:	4619      	mov	r1, r3
 800e66c:	f000 fe44 	bl	800f2f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e670:	4b20      	ldr	r3, [pc, #128]	; (800e6f4 <dhcp_reboot+0x160>)
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	2343      	movs	r3, #67	; 0x43
 800e67a:	4a1f      	ldr	r2, [pc, #124]	; (800e6f8 <dhcp_reboot+0x164>)
 800e67c:	6979      	ldr	r1, [r7, #20]
 800e67e:	f00b fc4f 	bl	8019f20 <udp_sendto_if>
 800e682:	4603      	mov	r3, r0
 800e684:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e686:	6978      	ldr	r0, [r7, #20]
 800e688:	f004 fd4c 	bl	8013124 <pbuf_free>
 800e68c:	e001      	b.n	800e692 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e68e:	23ff      	movs	r3, #255	; 0xff
 800e690:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	799b      	ldrb	r3, [r3, #6]
 800e696:	2bff      	cmp	r3, #255	; 0xff
 800e698:	d005      	beq.n	800e6a6 <dhcp_reboot+0x112>
    dhcp->tries++;
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	799b      	ldrb	r3, [r3, #6]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	799b      	ldrb	r3, [r3, #6]
 800e6aa:	2b09      	cmp	r3, #9
 800e6ac:	d80a      	bhi.n	800e6c4 <dhcp_reboot+0x130>
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	799b      	ldrb	r3, [r3, #6]
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	0152      	lsls	r2, r2, #5
 800e6b8:	1ad2      	subs	r2, r2, r3
 800e6ba:	0092      	lsls	r2, r2, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	e001      	b.n	800e6c8 <dhcp_reboot+0x134>
 800e6c4:	f242 7310 	movw	r3, #10000	; 0x2710
 800e6c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e6ca:	89fb      	ldrh	r3, [r7, #14]
 800e6cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e6d0:	4a0a      	ldr	r2, [pc, #40]	; (800e6fc <dhcp_reboot+0x168>)
 800e6d2:	fb82 1203 	smull	r1, r2, r2, r3
 800e6d6:	1152      	asrs	r2, r2, #5
 800e6d8:	17db      	asrs	r3, r3, #31
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e6e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3720      	adds	r7, #32
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	20000034 	.word	0x20000034
 800e6f4:	20008484 	.word	0x20008484
 800e6f8:	08020f34 	.word	0x08020f34
 800e6fc:	10624dd3 	.word	0x10624dd3

0800e700 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800e700:	b5b0      	push	{r4, r5, r7, lr}
 800e702:	b08a      	sub	sp, #40	; 0x28
 800e704:	af02      	add	r7, sp, #8
 800e706:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	2b00      	cmp	r3, #0
 800e712:	f000 8084 	beq.w	800e81e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	795b      	ldrb	r3, [r3, #5]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 8081 	beq.w	800e822 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	2200      	movs	r2, #0
 800e72a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	2200      	movs	r2, #0
 800e730:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	2200      	movs	r2, #0
 800e736:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	2200      	movs	r2, #0
 800e73c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	2200      	movs	r2, #0
 800e742:	631a      	str	r2, [r3, #48]	; 0x30
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2200      	movs	r2, #0
 800e758:	829a      	strh	r2, [r3, #20]
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	8a9a      	ldrh	r2, [r3, #20]
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	825a      	strh	r2, [r3, #18]
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	8a5a      	ldrh	r2, [r3, #18]
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	821a      	strh	r2, [r3, #16]
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	8a1a      	ldrh	r2, [r3, #16]
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 fdee 	bl	800f354 <dhcp_supplied_address>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d03b      	beq.n	800e7f6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e77e:	f107 030e 	add.w	r3, r7, #14
 800e782:	2207      	movs	r2, #7
 800e784:	69f9      	ldr	r1, [r7, #28]
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fce0 	bl	800f14c <dhcp_create_msg>
 800e78c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d030      	beq.n	800e7f6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e79a:	89f8      	ldrh	r0, [r7, #14]
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e7a2:	2304      	movs	r3, #4
 800e7a4:	2236      	movs	r2, #54	; 0x36
 800e7a6:	f000 f85f 	bl	800e868 <dhcp_option>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e7ae:	89fc      	ldrh	r4, [r7, #14]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f003 f82e 	bl	801181a <lwip_htonl>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f000 f8db 	bl	800e980 <dhcp_option_long>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e7ce:	89f8      	ldrh	r0, [r7, #14]
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	33f0      	adds	r3, #240	; 0xf0
 800e7d4:	69ba      	ldr	r2, [r7, #24]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	f000 fd8e 	bl	800f2f8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e7dc:	4b13      	ldr	r3, [pc, #76]	; (800e82c <dhcp_release_and_stop+0x12c>)
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	f107 0210 	add.w	r2, r7, #16
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	2343      	movs	r3, #67	; 0x43
 800e7ea:	69b9      	ldr	r1, [r7, #24]
 800e7ec:	f00b fb98 	bl	8019f20 <udp_sendto_if>
      pbuf_free(p_out);
 800e7f0:	69b8      	ldr	r0, [r7, #24]
 800e7f2:	f004 fc97 	bl	8013124 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e7f6:	4b0e      	ldr	r3, [pc, #56]	; (800e830 <dhcp_release_and_stop+0x130>)
 800e7f8:	4a0d      	ldr	r2, [pc, #52]	; (800e830 <dhcp_release_and_stop+0x130>)
 800e7fa:	490d      	ldr	r1, [pc, #52]	; (800e830 <dhcp_release_and_stop+0x130>)
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f003 ff51 	bl	80126a4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e802:	2100      	movs	r1, #0
 800e804:	69f8      	ldr	r0, [r7, #28]
 800e806:	f000 f815 	bl	800e834 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	791b      	ldrb	r3, [r3, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d008      	beq.n	800e824 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e812:	f7fe ff83 	bl	800d71c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	2200      	movs	r2, #0
 800e81a:	711a      	strb	r2, [r3, #4]
 800e81c:	e002      	b.n	800e824 <dhcp_release_and_stop+0x124>
    return;
 800e81e:	bf00      	nop
 800e820:	e000      	b.n	800e824 <dhcp_release_and_stop+0x124>
    return;
 800e822:	bf00      	nop
  }
}
 800e824:	3720      	adds	r7, #32
 800e826:	46bd      	mov	sp, r7
 800e828:	bdb0      	pop	{r4, r5, r7, pc}
 800e82a:	bf00      	nop
 800e82c:	20008484 	.word	0x20008484
 800e830:	08020f30 	.word	0x08020f30

0800e834 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	460b      	mov	r3, r1
 800e83e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	795b      	ldrb	r3, [r3, #5]
 800e844:	78fa      	ldrb	r2, [r7, #3]
 800e846:	429a      	cmp	r2, r3
 800e848:	d008      	beq.n	800e85c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	78fa      	ldrb	r2, [r7, #3]
 800e84e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	811a      	strh	r2, [r3, #8]
  }
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6039      	str	r1, [r7, #0]
 800e870:	4611      	mov	r1, r2
 800e872:	461a      	mov	r2, r3
 800e874:	4603      	mov	r3, r0
 800e876:	80fb      	strh	r3, [r7, #6]
 800e878:	460b      	mov	r3, r1
 800e87a:	717b      	strb	r3, [r7, #5]
 800e87c:	4613      	mov	r3, r2
 800e87e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e880:	88fa      	ldrh	r2, [r7, #6]
 800e882:	793b      	ldrb	r3, [r7, #4]
 800e884:	4413      	add	r3, r2
 800e886:	3302      	adds	r3, #2
 800e888:	2b44      	cmp	r3, #68	; 0x44
 800e88a:	d906      	bls.n	800e89a <dhcp_option+0x32>
 800e88c:	4b0d      	ldr	r3, [pc, #52]	; (800e8c4 <dhcp_option+0x5c>)
 800e88e:	f240 529a 	movw	r2, #1434	; 0x59a
 800e892:	490d      	ldr	r1, [pc, #52]	; (800e8c8 <dhcp_option+0x60>)
 800e894:	480d      	ldr	r0, [pc, #52]	; (800e8cc <dhcp_option+0x64>)
 800e896:	f00c f985 	bl	801aba4 <iprintf>
  options[options_out_len++] = option_type;
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	1c5a      	adds	r2, r3, #1
 800e89e:	80fa      	strh	r2, [r7, #6]
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	797a      	ldrb	r2, [r7, #5]
 800e8a8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800e8aa:	88fb      	ldrh	r3, [r7, #6]
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	80fa      	strh	r2, [r7, #6]
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	793a      	ldrb	r2, [r7, #4]
 800e8b8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e8ba:	88fb      	ldrh	r3, [r7, #6]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	0801d38c 	.word	0x0801d38c
 800e8c8:	0801d5a0 	.word	0x0801d5a0
 800e8cc:	0801d46c 	.word	0x0801d46c

0800e8d0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	6039      	str	r1, [r7, #0]
 800e8da:	80fb      	strh	r3, [r7, #6]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e8e0:	88fb      	ldrh	r3, [r7, #6]
 800e8e2:	2b43      	cmp	r3, #67	; 0x43
 800e8e4:	d906      	bls.n	800e8f4 <dhcp_option_byte+0x24>
 800e8e6:	4b0a      	ldr	r3, [pc, #40]	; (800e910 <dhcp_option_byte+0x40>)
 800e8e8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800e8ec:	4909      	ldr	r1, [pc, #36]	; (800e914 <dhcp_option_byte+0x44>)
 800e8ee:	480a      	ldr	r0, [pc, #40]	; (800e918 <dhcp_option_byte+0x48>)
 800e8f0:	f00c f958 	bl	801aba4 <iprintf>
  options[options_out_len++] = value;
 800e8f4:	88fb      	ldrh	r3, [r7, #6]
 800e8f6:	1c5a      	adds	r2, r3, #1
 800e8f8:	80fa      	strh	r2, [r7, #6]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	4413      	add	r3, r2
 800e900:	797a      	ldrb	r2, [r7, #5]
 800e902:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e904:	88fb      	ldrh	r3, [r7, #6]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	0801d38c 	.word	0x0801d38c
 800e914:	0801d5e4 	.word	0x0801d5e4
 800e918:	0801d46c 	.word	0x0801d46c

0800e91c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	6039      	str	r1, [r7, #0]
 800e926:	80fb      	strh	r3, [r7, #6]
 800e928:	4613      	mov	r3, r2
 800e92a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e92c:	88fb      	ldrh	r3, [r7, #6]
 800e92e:	3302      	adds	r3, #2
 800e930:	2b44      	cmp	r3, #68	; 0x44
 800e932:	d906      	bls.n	800e942 <dhcp_option_short+0x26>
 800e934:	4b0f      	ldr	r3, [pc, #60]	; (800e974 <dhcp_option_short+0x58>)
 800e936:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e93a:	490f      	ldr	r1, [pc, #60]	; (800e978 <dhcp_option_short+0x5c>)
 800e93c:	480f      	ldr	r0, [pc, #60]	; (800e97c <dhcp_option_short+0x60>)
 800e93e:	f00c f931 	bl	801aba4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e942:	88bb      	ldrh	r3, [r7, #4]
 800e944:	0a1b      	lsrs	r3, r3, #8
 800e946:	b29a      	uxth	r2, r3
 800e948:	88fb      	ldrh	r3, [r7, #6]
 800e94a:	1c59      	adds	r1, r3, #1
 800e94c:	80f9      	strh	r1, [r7, #6]
 800e94e:	4619      	mov	r1, r3
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	440b      	add	r3, r1
 800e954:	b2d2      	uxtb	r2, r2
 800e956:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e958:	88fb      	ldrh	r3, [r7, #6]
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	80fa      	strh	r2, [r7, #6]
 800e95e:	461a      	mov	r2, r3
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	4413      	add	r3, r2
 800e964:	88ba      	ldrh	r2, [r7, #4]
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e96a:	88fb      	ldrh	r3, [r7, #6]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	0801d38c 	.word	0x0801d38c
 800e978:	0801d61c 	.word	0x0801d61c
 800e97c:	0801d46c 	.word	0x0801d46c

0800e980 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
 800e98c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e98e:	89fb      	ldrh	r3, [r7, #14]
 800e990:	3304      	adds	r3, #4
 800e992:	2b44      	cmp	r3, #68	; 0x44
 800e994:	d906      	bls.n	800e9a4 <dhcp_option_long+0x24>
 800e996:	4b19      	ldr	r3, [pc, #100]	; (800e9fc <dhcp_option_long+0x7c>)
 800e998:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800e99c:	4918      	ldr	r1, [pc, #96]	; (800ea00 <dhcp_option_long+0x80>)
 800e99e:	4819      	ldr	r0, [pc, #100]	; (800ea04 <dhcp_option_long+0x84>)
 800e9a0:	f00c f900 	bl	801aba4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	0e1a      	lsrs	r2, r3, #24
 800e9a8:	89fb      	ldrh	r3, [r7, #14]
 800e9aa:	1c59      	adds	r1, r3, #1
 800e9ac:	81f9      	strh	r1, [r7, #14]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	440b      	add	r3, r1
 800e9b4:	b2d2      	uxtb	r2, r2
 800e9b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	0c1a      	lsrs	r2, r3, #16
 800e9bc:	89fb      	ldrh	r3, [r7, #14]
 800e9be:	1c59      	adds	r1, r3, #1
 800e9c0:	81f9      	strh	r1, [r7, #14]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	440b      	add	r3, r1
 800e9c8:	b2d2      	uxtb	r2, r2
 800e9ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	0a1a      	lsrs	r2, r3, #8
 800e9d0:	89fb      	ldrh	r3, [r7, #14]
 800e9d2:	1c59      	adds	r1, r3, #1
 800e9d4:	81f9      	strh	r1, [r7, #14]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	440b      	add	r3, r1
 800e9dc:	b2d2      	uxtb	r2, r2
 800e9de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800e9e0:	89fb      	ldrh	r3, [r7, #14]
 800e9e2:	1c5a      	adds	r2, r3, #1
 800e9e4:	81fa      	strh	r2, [r7, #14]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	b2d2      	uxtb	r2, r2
 800e9f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e9f2:	89fb      	ldrh	r3, [r7, #14]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	0801d38c 	.word	0x0801d38c
 800ea00:	0801d658 	.word	0x0801d658
 800ea04:	0801d46c 	.word	0x0801d46c

0800ea08 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b090      	sub	sp, #64	; 0x40
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800ea1a:	2208      	movs	r2, #8
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	48be      	ldr	r0, [pc, #760]	; (800ed18 <dhcp_parse_reply+0x310>)
 800ea20:	f00c f8b8 	bl	801ab94 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	895b      	ldrh	r3, [r3, #10]
 800ea28:	2b2b      	cmp	r3, #43	; 0x2b
 800ea2a:	d802      	bhi.n	800ea32 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800ea2c:	f06f 0301 	mvn.w	r3, #1
 800ea30:	e2a8      	b.n	800ef84 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800ea38:	23f0      	movs	r3, #240	; 0xf0
 800ea3a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	891b      	ldrh	r3, [r3, #8]
 800ea40:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800ea46:	e00c      	b.n	800ea62 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800ea48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4a:	895b      	ldrh	r3, [r3, #10]
 800ea4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	895b      	ldrh	r3, [r3, #10]
 800ea56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d004      	beq.n	800ea72 <dhcp_parse_reply+0x6a>
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	895b      	ldrh	r3, [r3, #10]
 800ea6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d2ea      	bcs.n	800ea48 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d102      	bne.n	800ea7e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800ea78:	f06f 0301 	mvn.w	r3, #1
 800ea7c:	e282      	b.n	800ef84 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800ea7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea80:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800ea82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ea84:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ea8c:	e23a      	b.n	800ef04 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800ea8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea92:	4413      	add	r3, r2
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800ea9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800eaa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eaa6:	3302      	adds	r3, #2
 800eaa8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800eaaa:	8bfa      	ldrh	r2, [r7, #30]
 800eaac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d202      	bcs.n	800eab8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800eab2:	f06f 0301 	mvn.w	r3, #1
 800eab6:	e265      	b.n	800ef84 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800eab8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eaba:	3301      	adds	r3, #1
 800eabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eabe:	8952      	ldrh	r2, [r2, #10]
 800eac0:	4293      	cmp	r3, r2
 800eac2:	da07      	bge.n	800ead4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800eac4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eac6:	3301      	adds	r3, #1
 800eac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaca:	4413      	add	r3, r2
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ead2:	e00b      	b.n	800eaec <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d004      	beq.n	800eae6 <dhcp_parse_reply+0xde>
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	e000      	b.n	800eae8 <dhcp_parse_reply+0xe0>
 800eae6:	2300      	movs	r3, #0
 800eae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800eaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
 800eaf6:	2b3b      	cmp	r3, #59	; 0x3b
 800eaf8:	f200 812d 	bhi.w	800ed56 <dhcp_parse_reply+0x34e>
 800eafc:	a201      	add	r2, pc, #4	; (adr r2, 800eb04 <dhcp_parse_reply+0xfc>)
 800eafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb02:	bf00      	nop
 800eb04:	0800ebf5 	.word	0x0800ebf5
 800eb08:	0800ec05 	.word	0x0800ec05
 800eb0c:	0800ed57 	.word	0x0800ed57
 800eb10:	0800ec27 	.word	0x0800ec27
 800eb14:	0800ed57 	.word	0x0800ed57
 800eb18:	0800ed57 	.word	0x0800ed57
 800eb1c:	0800ed57 	.word	0x0800ed57
 800eb20:	0800ed57 	.word	0x0800ed57
 800eb24:	0800ed57 	.word	0x0800ed57
 800eb28:	0800ed57 	.word	0x0800ed57
 800eb2c:	0800ed57 	.word	0x0800ed57
 800eb30:	0800ed57 	.word	0x0800ed57
 800eb34:	0800ed57 	.word	0x0800ed57
 800eb38:	0800ed57 	.word	0x0800ed57
 800eb3c:	0800ed57 	.word	0x0800ed57
 800eb40:	0800ed57 	.word	0x0800ed57
 800eb44:	0800ed57 	.word	0x0800ed57
 800eb48:	0800ed57 	.word	0x0800ed57
 800eb4c:	0800ed57 	.word	0x0800ed57
 800eb50:	0800ed57 	.word	0x0800ed57
 800eb54:	0800ed57 	.word	0x0800ed57
 800eb58:	0800ed57 	.word	0x0800ed57
 800eb5c:	0800ed57 	.word	0x0800ed57
 800eb60:	0800ed57 	.word	0x0800ed57
 800eb64:	0800ed57 	.word	0x0800ed57
 800eb68:	0800ed57 	.word	0x0800ed57
 800eb6c:	0800ed57 	.word	0x0800ed57
 800eb70:	0800ed57 	.word	0x0800ed57
 800eb74:	0800ed57 	.word	0x0800ed57
 800eb78:	0800ed57 	.word	0x0800ed57
 800eb7c:	0800ed57 	.word	0x0800ed57
 800eb80:	0800ed57 	.word	0x0800ed57
 800eb84:	0800ed57 	.word	0x0800ed57
 800eb88:	0800ed57 	.word	0x0800ed57
 800eb8c:	0800ed57 	.word	0x0800ed57
 800eb90:	0800ed57 	.word	0x0800ed57
 800eb94:	0800ed57 	.word	0x0800ed57
 800eb98:	0800ed57 	.word	0x0800ed57
 800eb9c:	0800ed57 	.word	0x0800ed57
 800eba0:	0800ed57 	.word	0x0800ed57
 800eba4:	0800ed57 	.word	0x0800ed57
 800eba8:	0800ed57 	.word	0x0800ed57
 800ebac:	0800ed57 	.word	0x0800ed57
 800ebb0:	0800ed57 	.word	0x0800ed57
 800ebb4:	0800ed57 	.word	0x0800ed57
 800ebb8:	0800ed57 	.word	0x0800ed57
 800ebbc:	0800ed57 	.word	0x0800ed57
 800ebc0:	0800ed57 	.word	0x0800ed57
 800ebc4:	0800ed57 	.word	0x0800ed57
 800ebc8:	0800ed57 	.word	0x0800ed57
 800ebcc:	0800ed57 	.word	0x0800ed57
 800ebd0:	0800ec53 	.word	0x0800ec53
 800ebd4:	0800ec75 	.word	0x0800ec75
 800ebd8:	0800ecb1 	.word	0x0800ecb1
 800ebdc:	0800ecd3 	.word	0x0800ecd3
 800ebe0:	0800ed57 	.word	0x0800ed57
 800ebe4:	0800ed57 	.word	0x0800ed57
 800ebe8:	0800ed57 	.word	0x0800ed57
 800ebec:	0800ecf5 	.word	0x0800ecf5
 800ebf0:	0800ed35 	.word	0x0800ed35
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800ec02:	e0ac      	b.n	800ed5e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec08:	2b04      	cmp	r3, #4
 800ec0a:	d009      	beq.n	800ec20 <dhcp_parse_reply+0x218>
 800ec0c:	4b43      	ldr	r3, [pc, #268]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ec0e:	f240 622e 	movw	r2, #1582	; 0x62e
 800ec12:	4943      	ldr	r1, [pc, #268]	; (800ed20 <dhcp_parse_reply+0x318>)
 800ec14:	4843      	ldr	r0, [pc, #268]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ec16:	f00b ffc5 	bl	801aba4 <iprintf>
 800ec1a:	f06f 0305 	mvn.w	r3, #5
 800ec1e:	e1b1      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ec20:	2306      	movs	r3, #6
 800ec22:	623b      	str	r3, [r7, #32]
        break;
 800ec24:	e09b      	b.n	800ed5e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ec26:	2304      	movs	r3, #4
 800ec28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ec2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d209      	bcs.n	800ec4c <dhcp_parse_reply+0x244>
 800ec38:	4b38      	ldr	r3, [pc, #224]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ec3a:	f240 6233 	movw	r2, #1587	; 0x633
 800ec3e:	493a      	ldr	r1, [pc, #232]	; (800ed28 <dhcp_parse_reply+0x320>)
 800ec40:	4838      	ldr	r0, [pc, #224]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ec42:	f00b ffaf 	bl	801aba4 <iprintf>
 800ec46:	f06f 0305 	mvn.w	r3, #5
 800ec4a:	e19b      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ec4c:	2307      	movs	r3, #7
 800ec4e:	623b      	str	r3, [r7, #32]
        break;
 800ec50:	e085      	b.n	800ed5e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec56:	2b04      	cmp	r3, #4
 800ec58:	d009      	beq.n	800ec6e <dhcp_parse_reply+0x266>
 800ec5a:	4b30      	ldr	r3, [pc, #192]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ec5c:	f240 6241 	movw	r2, #1601	; 0x641
 800ec60:	492f      	ldr	r1, [pc, #188]	; (800ed20 <dhcp_parse_reply+0x318>)
 800ec62:	4830      	ldr	r0, [pc, #192]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ec64:	f00b ff9e 	bl	801aba4 <iprintf>
 800ec68:	f06f 0305 	mvn.w	r3, #5
 800ec6c:	e18a      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	623b      	str	r3, [r7, #32]
        break;
 800ec72:	e074      	b.n	800ed5e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ec74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d009      	beq.n	800ec90 <dhcp_parse_reply+0x288>
 800ec7c:	4b27      	ldr	r3, [pc, #156]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ec7e:	f240 624f 	movw	r2, #1615	; 0x64f
 800ec82:	492a      	ldr	r1, [pc, #168]	; (800ed2c <dhcp_parse_reply+0x324>)
 800ec84:	4827      	ldr	r0, [pc, #156]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ec86:	f00b ff8d 	bl	801aba4 <iprintf>
 800ec8a:	f06f 0305 	mvn.w	r3, #5
 800ec8e:	e179      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ec90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec92:	2bf0      	cmp	r3, #240	; 0xf0
 800ec94:	d009      	beq.n	800ecaa <dhcp_parse_reply+0x2a2>
 800ec96:	4b21      	ldr	r3, [pc, #132]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ec98:	f240 6251 	movw	r2, #1617	; 0x651
 800ec9c:	4924      	ldr	r1, [pc, #144]	; (800ed30 <dhcp_parse_reply+0x328>)
 800ec9e:	4821      	ldr	r0, [pc, #132]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800eca0:	f00b ff80 	bl	801aba4 <iprintf>
 800eca4:	f06f 0305 	mvn.w	r3, #5
 800eca8:	e16c      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	623b      	str	r3, [r7, #32]
        break;
 800ecae:	e056      	b.n	800ed5e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ecb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d009      	beq.n	800eccc <dhcp_parse_reply+0x2c4>
 800ecb8:	4b18      	ldr	r3, [pc, #96]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ecba:	f240 6255 	movw	r2, #1621	; 0x655
 800ecbe:	491b      	ldr	r1, [pc, #108]	; (800ed2c <dhcp_parse_reply+0x324>)
 800ecc0:	4818      	ldr	r0, [pc, #96]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ecc2:	f00b ff6f 	bl	801aba4 <iprintf>
 800ecc6:	f06f 0305 	mvn.w	r3, #5
 800ecca:	e15b      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800eccc:	2301      	movs	r3, #1
 800ecce:	623b      	str	r3, [r7, #32]
        break;
 800ecd0:	e045      	b.n	800ed5e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ecd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecd6:	2b04      	cmp	r3, #4
 800ecd8:	d009      	beq.n	800ecee <dhcp_parse_reply+0x2e6>
 800ecda:	4b10      	ldr	r3, [pc, #64]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ecdc:	f240 6259 	movw	r2, #1625	; 0x659
 800ece0:	490f      	ldr	r1, [pc, #60]	; (800ed20 <dhcp_parse_reply+0x318>)
 800ece2:	4810      	ldr	r0, [pc, #64]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ece4:	f00b ff5e 	bl	801aba4 <iprintf>
 800ece8:	f06f 0305 	mvn.w	r3, #5
 800ecec:	e14a      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ecee:	2302      	movs	r3, #2
 800ecf0:	623b      	str	r3, [r7, #32]
        break;
 800ecf2:	e034      	b.n	800ed5e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ecf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf8:	2b04      	cmp	r3, #4
 800ecfa:	d009      	beq.n	800ed10 <dhcp_parse_reply+0x308>
 800ecfc:	4b07      	ldr	r3, [pc, #28]	; (800ed1c <dhcp_parse_reply+0x314>)
 800ecfe:	f240 625d 	movw	r2, #1629	; 0x65d
 800ed02:	4907      	ldr	r1, [pc, #28]	; (800ed20 <dhcp_parse_reply+0x318>)
 800ed04:	4807      	ldr	r0, [pc, #28]	; (800ed24 <dhcp_parse_reply+0x31c>)
 800ed06:	f00b ff4d 	bl	801aba4 <iprintf>
 800ed0a:	f06f 0305 	mvn.w	r3, #5
 800ed0e:	e139      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800ed10:	2304      	movs	r3, #4
 800ed12:	623b      	str	r3, [r7, #32]
        break;
 800ed14:	e023      	b.n	800ed5e <dhcp_parse_reply+0x356>
 800ed16:	bf00      	nop
 800ed18:	20008874 	.word	0x20008874
 800ed1c:	0801d38c 	.word	0x0801d38c
 800ed20:	0801d694 	.word	0x0801d694
 800ed24:	0801d46c 	.word	0x0801d46c
 800ed28:	0801d6a0 	.word	0x0801d6a0
 800ed2c:	0801d6b4 	.word	0x0801d6b4
 800ed30:	0801d6c0 	.word	0x0801d6c0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d009      	beq.n	800ed50 <dhcp_parse_reply+0x348>
 800ed3c:	4b93      	ldr	r3, [pc, #588]	; (800ef8c <dhcp_parse_reply+0x584>)
 800ed3e:	f240 6261 	movw	r2, #1633	; 0x661
 800ed42:	4993      	ldr	r1, [pc, #588]	; (800ef90 <dhcp_parse_reply+0x588>)
 800ed44:	4893      	ldr	r0, [pc, #588]	; (800ef94 <dhcp_parse_reply+0x58c>)
 800ed46:	f00b ff2d 	bl	801aba4 <iprintf>
 800ed4a:	f06f 0305 	mvn.w	r3, #5
 800ed4e:	e119      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ed50:	2305      	movs	r3, #5
 800ed52:	623b      	str	r3, [r7, #32]
        break;
 800ed54:	e003      	b.n	800ed5e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800ed56:	2300      	movs	r3, #0
 800ed58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800ed5c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d103      	bne.n	800ed6c <dhcp_parse_reply+0x364>
      offset++;
 800ed64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed66:	3301      	adds	r3, #1
 800ed68:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ed6a:	e0a1      	b.n	800eeb0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800ed6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ed6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed72:	4413      	add	r3, r2
 800ed74:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	dd02      	ble.n	800ed82 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800ed7c:	f06f 0301 	mvn.w	r3, #1
 800ed80:	e100      	b.n	800ef84 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800ed82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed8a:	4413      	add	r3, r2
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	3302      	adds	r3, #2
 800ed90:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800ed92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f000 808a 	beq.w	800eeb0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800eda0:	6a3b      	ldr	r3, [r7, #32]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	db02      	blt.n	800edac <dhcp_parse_reply+0x3a4>
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	2b07      	cmp	r3, #7
 800edaa:	dd06      	ble.n	800edba <dhcp_parse_reply+0x3b2>
 800edac:	4b77      	ldr	r3, [pc, #476]	; (800ef8c <dhcp_parse_reply+0x584>)
 800edae:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800edb2:	4979      	ldr	r1, [pc, #484]	; (800ef98 <dhcp_parse_reply+0x590>)
 800edb4:	4877      	ldr	r0, [pc, #476]	; (800ef94 <dhcp_parse_reply+0x58c>)
 800edb6:	f00b fef5 	bl	801aba4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800edba:	4a78      	ldr	r2, [pc, #480]	; (800ef9c <dhcp_parse_reply+0x594>)
 800edbc:	6a3b      	ldr	r3, [r7, #32]
 800edbe:	4413      	add	r3, r2
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d174      	bne.n	800eeb0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800edc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edca:	2b04      	cmp	r3, #4
 800edcc:	bf28      	it	cs
 800edce:	2304      	movcs	r3, #4
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800edd4:	8bfb      	ldrh	r3, [r7, #30]
 800edd6:	8aba      	ldrh	r2, [r7, #20]
 800edd8:	f107 0108 	add.w	r1, r7, #8
 800eddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edde:	f004 fba7 	bl	8013530 <pbuf_copy_partial>
 800ede2:	4603      	mov	r3, r0
 800ede4:	461a      	mov	r2, r3
 800ede6:	8abb      	ldrh	r3, [r7, #20]
 800ede8:	4293      	cmp	r3, r2
 800edea:	d002      	beq.n	800edf2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800edec:	f06f 0301 	mvn.w	r3, #1
 800edf0:	e0c8      	b.n	800ef84 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800edf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edf6:	2b04      	cmp	r3, #4
 800edf8:	d933      	bls.n	800ee62 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800edfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edfe:	f003 0303 	and.w	r3, r3, #3
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d009      	beq.n	800ee1c <dhcp_parse_reply+0x414>
 800ee08:	4b60      	ldr	r3, [pc, #384]	; (800ef8c <dhcp_parse_reply+0x584>)
 800ee0a:	f240 6281 	movw	r2, #1665	; 0x681
 800ee0e:	4964      	ldr	r1, [pc, #400]	; (800efa0 <dhcp_parse_reply+0x598>)
 800ee10:	4860      	ldr	r0, [pc, #384]	; (800ef94 <dhcp_parse_reply+0x58c>)
 800ee12:	f00b fec7 	bl	801aba4 <iprintf>
 800ee16:	f06f 0305 	mvn.w	r3, #5
 800ee1a:	e0b3      	b.n	800ef84 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800ee1c:	4a5f      	ldr	r2, [pc, #380]	; (800ef9c <dhcp_parse_reply+0x594>)
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	4413      	add	r3, r2
 800ee22:	2201      	movs	r2, #1
 800ee24:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f002 fcf6 	bl	801181a <lwip_htonl>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	495c      	ldr	r1, [pc, #368]	; (800efa4 <dhcp_parse_reply+0x59c>)
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800ee38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee3c:	3b04      	subs	r3, #4
 800ee3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800ee42:	8bfb      	ldrh	r3, [r7, #30]
 800ee44:	3304      	adds	r3, #4
 800ee46:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800ee48:	8a7a      	ldrh	r2, [r7, #18]
 800ee4a:	8bfb      	ldrh	r3, [r7, #30]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d202      	bcs.n	800ee56 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800ee50:	f06f 0301 	mvn.w	r3, #1
 800ee54:	e096      	b.n	800ef84 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800ee56:	8a7b      	ldrh	r3, [r7, #18]
 800ee58:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800ee60:	e79e      	b.n	800eda0 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800ee62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee66:	2b04      	cmp	r3, #4
 800ee68:	d106      	bne.n	800ee78 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f002 fcd4 	bl	801181a <lwip_htonl>
 800ee72:	4603      	mov	r3, r0
 800ee74:	60bb      	str	r3, [r7, #8]
 800ee76:	e011      	b.n	800ee9c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ee78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d009      	beq.n	800ee94 <dhcp_parse_reply+0x48c>
 800ee80:	4b42      	ldr	r3, [pc, #264]	; (800ef8c <dhcp_parse_reply+0x584>)
 800ee82:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ee86:	4948      	ldr	r1, [pc, #288]	; (800efa8 <dhcp_parse_reply+0x5a0>)
 800ee88:	4842      	ldr	r0, [pc, #264]	; (800ef94 <dhcp_parse_reply+0x58c>)
 800ee8a:	f00b fe8b 	bl	801aba4 <iprintf>
 800ee8e:	f06f 0305 	mvn.w	r3, #5
 800ee92:	e077      	b.n	800ef84 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800ee94:	f107 0308 	add.w	r3, r7, #8
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800ee9c:	4a3f      	ldr	r2, [pc, #252]	; (800ef9c <dhcp_parse_reply+0x594>)
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	4413      	add	r3, r2
 800eea2:	2201      	movs	r2, #1
 800eea4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800eea6:	68ba      	ldr	r2, [r7, #8]
 800eea8:	493e      	ldr	r1, [pc, #248]	; (800efa4 <dhcp_parse_reply+0x59c>)
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb2:	895b      	ldrh	r3, [r3, #10]
 800eeb4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d324      	bcc.n	800ef04 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800eeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebc:	895b      	ldrh	r3, [r3, #10]
 800eebe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	895b      	ldrh	r3, [r3, #10]
 800eec8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800eece:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eed0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d213      	bcs.n	800eefe <dhcp_parse_reply+0x4f6>
        q = q->next;
 800eed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d109      	bne.n	800eef6 <dhcp_parse_reply+0x4ee>
 800eee2:	4b2a      	ldr	r3, [pc, #168]	; (800ef8c <dhcp_parse_reply+0x584>)
 800eee4:	f240 629d 	movw	r2, #1693	; 0x69d
 800eee8:	4930      	ldr	r1, [pc, #192]	; (800efac <dhcp_parse_reply+0x5a4>)
 800eeea:	482a      	ldr	r0, [pc, #168]	; (800ef94 <dhcp_parse_reply+0x58c>)
 800eeec:	f00b fe5a 	bl	801aba4 <iprintf>
 800eef0:	f06f 0305 	mvn.w	r3, #5
 800eef4:	e046      	b.n	800ef84 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eefc:	e002      	b.n	800ef04 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800eefe:	f06f 0301 	mvn.w	r3, #1
 800ef02:	e03f      	b.n	800ef84 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00a      	beq.n	800ef20 <dhcp_parse_reply+0x518>
 800ef0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d206      	bcs.n	800ef20 <dhcp_parse_reply+0x518>
 800ef12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef16:	4413      	add	r3, r2
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	2bff      	cmp	r3, #255	; 0xff
 800ef1c:	f47f adb7 	bne.w	800ea8e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ef20:	4b1e      	ldr	r3, [pc, #120]	; (800ef9c <dhcp_parse_reply+0x594>)
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d018      	beq.n	800ef5a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ef28:	4b1e      	ldr	r3, [pc, #120]	; (800efa4 <dhcp_parse_reply+0x59c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ef2e:	4b1b      	ldr	r3, [pc, #108]	; (800ef9c <dhcp_parse_reply+0x594>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d102      	bne.n	800ef40 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef3e:	e00c      	b.n	800ef5a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d102      	bne.n	800ef4c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800ef46:	2301      	movs	r3, #1
 800ef48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef4a:	e006      	b.n	800ef5a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b03      	cmp	r3, #3
 800ef50:	d103      	bne.n	800ef5a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800ef52:	2301      	movs	r3, #1
 800ef54:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800ef56:	2301      	movs	r3, #1
 800ef58:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ef5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d006      	beq.n	800ef6e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800ef64:	236c      	movs	r3, #108	; 0x6c
 800ef66:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ef68:	23ec      	movs	r3, #236	; 0xec
 800ef6a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800ef6c:	e569      	b.n	800ea42 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800ef74:	2300      	movs	r3, #0
 800ef76:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800ef78:	232c      	movs	r3, #44	; 0x2c
 800ef7a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800ef7c:	236c      	movs	r3, #108	; 0x6c
 800ef7e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800ef80:	e55f      	b.n	800ea42 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3740      	adds	r7, #64	; 0x40
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	0801d38c 	.word	0x0801d38c
 800ef90:	0801d694 	.word	0x0801d694
 800ef94:	0801d46c 	.word	0x0801d46c
 800ef98:	0801d6d8 	.word	0x0801d6d8
 800ef9c:	20008874 	.word	0x20008874
 800efa0:	0801d6ec 	.word	0x0801d6ec
 800efa4:	2000887c 	.word	0x2000887c
 800efa8:	0801d704 	.word	0x0801d704
 800efac:	0801d718 	.word	0x0801d718

0800efb0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08a      	sub	sp, #40	; 0x28
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
 800efbc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800efbe:	4b60      	ldr	r3, [pc, #384]	; (800f140 <dhcp_recv+0x190>)
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f000 809d 	beq.w	800f112 <dhcp_recv+0x162>
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	791b      	ldrb	r3, [r3, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f000 8098 	beq.w	800f112 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	895b      	ldrh	r3, [r3, #10]
 800efe6:	2b2b      	cmp	r3, #43	; 0x2b
 800efe8:	f240 8095 	bls.w	800f116 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	f040 8092 	bne.w	800f11a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800eff6:	2300      	movs	r3, #0
 800eff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800effc:	e012      	b.n	800f024 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800effe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f002:	6a3a      	ldr	r2, [r7, #32]
 800f004:	4413      	add	r3, r2
 800f006:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f00a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f00e:	69b9      	ldr	r1, [r7, #24]
 800f010:	440b      	add	r3, r1
 800f012:	7f1b      	ldrb	r3, [r3, #28]
 800f014:	429a      	cmp	r2, r3
 800f016:	f040 8082 	bne.w	800f11e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f01a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f01e:	3301      	adds	r3, #1
 800f020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f02a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f02e:	429a      	cmp	r2, r3
 800f030:	d203      	bcs.n	800f03a <dhcp_recv+0x8a>
 800f032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f036:	2b05      	cmp	r3, #5
 800f038:	d9e1      	bls.n	800effe <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	4618      	mov	r0, r3
 800f040:	f002 fbeb 	bl	801181a <lwip_htonl>
 800f044:	4602      	mov	r2, r0
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d169      	bne.n	800f122 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800f04e:	69f9      	ldr	r1, [r7, #28]
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff fcd9 	bl	800ea08 <dhcp_parse_reply>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d164      	bne.n	800f126 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800f05c:	4b39      	ldr	r3, [pc, #228]	; (800f144 <dhcp_recv+0x194>)
 800f05e:	785b      	ldrb	r3, [r3, #1]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d062      	beq.n	800f12a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800f06a:	4b37      	ldr	r3, [pc, #220]	; (800f148 <dhcp_recv+0x198>)
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800f070:	7cfb      	ldrb	r3, [r7, #19]
 800f072:	2b05      	cmp	r3, #5
 800f074:	d12a      	bne.n	800f0cc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	795b      	ldrb	r3, [r3, #5]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d112      	bne.n	800f0a4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800f07e:	6979      	ldr	r1, [r7, #20]
 800f080:	6a38      	ldr	r0, [r7, #32]
 800f082:	f7fe fe17 	bl	800dcb4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f08c:	f003 0308 	and.w	r3, r3, #8
 800f090:	2b00      	cmp	r3, #0
 800f092:	d003      	beq.n	800f09c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800f094:	6a38      	ldr	r0, [r7, #32]
 800f096:	f7fe fb85 	bl	800d7a4 <dhcp_check>
 800f09a:	e049      	b.n	800f130 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800f09c:	6a38      	ldr	r0, [r7, #32]
 800f09e:	f7ff f867 	bl	800e170 <dhcp_bind>
 800f0a2:	e045      	b.n	800f130 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	795b      	ldrb	r3, [r3, #5]
 800f0a8:	2b03      	cmp	r3, #3
 800f0aa:	d007      	beq.n	800f0bc <dhcp_recv+0x10c>
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	795b      	ldrb	r3, [r3, #5]
 800f0b0:	2b04      	cmp	r3, #4
 800f0b2:	d003      	beq.n	800f0bc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f0b8:	2b05      	cmp	r3, #5
 800f0ba:	d139      	bne.n	800f130 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800f0bc:	6979      	ldr	r1, [r7, #20]
 800f0be:	6a38      	ldr	r0, [r7, #32]
 800f0c0:	f7fe fdf8 	bl	800dcb4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800f0c4:	6a38      	ldr	r0, [r7, #32]
 800f0c6:	f7ff f853 	bl	800e170 <dhcp_bind>
 800f0ca:	e031      	b.n	800f130 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800f0cc:	7cfb      	ldrb	r3, [r7, #19]
 800f0ce:	2b06      	cmp	r3, #6
 800f0d0:	d113      	bne.n	800f0fa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800f0d6:	2b03      	cmp	r3, #3
 800f0d8:	d00b      	beq.n	800f0f2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	795b      	ldrb	r3, [r3, #5]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d007      	beq.n	800f0f2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f0e6:	2b04      	cmp	r3, #4
 800f0e8:	d003      	beq.n	800f0f2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	795b      	ldrb	r3, [r3, #5]
 800f0ee:	2b05      	cmp	r3, #5
 800f0f0:	d103      	bne.n	800f0fa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800f0f2:	6a38      	ldr	r0, [r7, #32]
 800f0f4:	f7fe fb3c 	bl	800d770 <dhcp_handle_nak>
 800f0f8:	e01a      	b.n	800f130 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800f0fa:	7cfb      	ldrb	r3, [r7, #19]
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	d116      	bne.n	800f12e <dhcp_recv+0x17e>
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	795b      	ldrb	r3, [r3, #5]
 800f104:	2b06      	cmp	r3, #6
 800f106:	d112      	bne.n	800f12e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800f108:	6979      	ldr	r1, [r7, #20]
 800f10a:	6a38      	ldr	r0, [r7, #32]
 800f10c:	f7fe fb7e 	bl	800d80c <dhcp_handle_offer>
 800f110:	e00e      	b.n	800f130 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f112:	bf00      	nop
 800f114:	e00c      	b.n	800f130 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f116:	bf00      	nop
 800f118:	e00a      	b.n	800f130 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f11a:	bf00      	nop
 800f11c:	e008      	b.n	800f130 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800f11e:	bf00      	nop
 800f120:	e006      	b.n	800f130 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f122:	bf00      	nop
 800f124:	e004      	b.n	800f130 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f126:	bf00      	nop
 800f128:	e002      	b.n	800f130 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800f12a:	bf00      	nop
 800f12c:	e000      	b.n	800f130 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800f12e:	bf00      	nop
  pbuf_free(p);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f003 fff7 	bl	8013124 <pbuf_free>
}
 800f136:	bf00      	nop
 800f138:	3728      	adds	r7, #40	; 0x28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	2000889c 	.word	0x2000889c
 800f144:	20008874 	.word	0x20008874
 800f148:	2000887c 	.word	0x2000887c

0800f14c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b088      	sub	sp, #32
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	4613      	mov	r3, r2
 800f15a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d108      	bne.n	800f174 <dhcp_create_msg+0x28>
 800f162:	4b5f      	ldr	r3, [pc, #380]	; (800f2e0 <dhcp_create_msg+0x194>)
 800f164:	f240 7269 	movw	r2, #1897	; 0x769
 800f168:	495e      	ldr	r1, [pc, #376]	; (800f2e4 <dhcp_create_msg+0x198>)
 800f16a:	485f      	ldr	r0, [pc, #380]	; (800f2e8 <dhcp_create_msg+0x19c>)
 800f16c:	f00b fd1a 	bl	801aba4 <iprintf>
 800f170:	2300      	movs	r3, #0
 800f172:	e0b1      	b.n	800f2d8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d108      	bne.n	800f18c <dhcp_create_msg+0x40>
 800f17a:	4b59      	ldr	r3, [pc, #356]	; (800f2e0 <dhcp_create_msg+0x194>)
 800f17c:	f240 726a 	movw	r2, #1898	; 0x76a
 800f180:	495a      	ldr	r1, [pc, #360]	; (800f2ec <dhcp_create_msg+0x1a0>)
 800f182:	4859      	ldr	r0, [pc, #356]	; (800f2e8 <dhcp_create_msg+0x19c>)
 800f184:	f00b fd0e 	bl	801aba4 <iprintf>
 800f188:	2300      	movs	r3, #0
 800f18a:	e0a5      	b.n	800f2d8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800f18c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f190:	f44f 719a 	mov.w	r1, #308	; 0x134
 800f194:	2036      	movs	r0, #54	; 0x36
 800f196:	f003 fcaf 	bl	8012af8 <pbuf_alloc>
 800f19a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e098      	b.n	800f2d8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	895b      	ldrh	r3, [r3, #10]
 800f1aa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800f1ae:	d206      	bcs.n	800f1be <dhcp_create_msg+0x72>
 800f1b0:	4b4b      	ldr	r3, [pc, #300]	; (800f2e0 <dhcp_create_msg+0x194>)
 800f1b2:	f240 7271 	movw	r2, #1905	; 0x771
 800f1b6:	494e      	ldr	r1, [pc, #312]	; (800f2f0 <dhcp_create_msg+0x1a4>)
 800f1b8:	484b      	ldr	r0, [pc, #300]	; (800f2e8 <dhcp_create_msg+0x19c>)
 800f1ba:	f00b fcf3 	bl	801aba4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800f1be:	79fb      	ldrb	r3, [r7, #7]
 800f1c0:	2b03      	cmp	r3, #3
 800f1c2:	d103      	bne.n	800f1cc <dhcp_create_msg+0x80>
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	795b      	ldrb	r3, [r3, #5]
 800f1c8:	2b03      	cmp	r3, #3
 800f1ca:	d10d      	bne.n	800f1e8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	799b      	ldrb	r3, [r3, #6]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d105      	bne.n	800f1e0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800f1d4:	f00b fcfe 	bl	801abd4 <rand>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	461a      	mov	r2, r3
 800f1dc:	4b45      	ldr	r3, [pc, #276]	; (800f2f4 <dhcp_create_msg+0x1a8>)
 800f1de:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800f1e0:	4b44      	ldr	r3, [pc, #272]	; (800f2f4 <dhcp_create_msg+0x1a8>)
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800f1ee:	f44f 729a 	mov.w	r2, #308	; 0x134
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	6978      	ldr	r0, [r7, #20]
 800f1f6:	f00b fccd 	bl	801ab94 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	2201      	movs	r2, #1
 800f204:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4618      	mov	r0, r3
 800f216:	f002 fb00 	bl	801181a <lwip_htonl>
 800f21a:	4602      	mov	r2, r0
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	2b08      	cmp	r3, #8
 800f224:	d010      	beq.n	800f248 <dhcp_create_msg+0xfc>
 800f226:	79fb      	ldrb	r3, [r7, #7]
 800f228:	2b04      	cmp	r3, #4
 800f22a:	d00d      	beq.n	800f248 <dhcp_create_msg+0xfc>
 800f22c:	79fb      	ldrb	r3, [r7, #7]
 800f22e:	2b07      	cmp	r3, #7
 800f230:	d00a      	beq.n	800f248 <dhcp_create_msg+0xfc>
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	2b03      	cmp	r3, #3
 800f236:	d10c      	bne.n	800f252 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800f23c:	2b05      	cmp	r3, #5
 800f23e:	d003      	beq.n	800f248 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	795b      	ldrb	r3, [r3, #5]
 800f244:	2b04      	cmp	r3, #4
 800f246:	d104      	bne.n	800f252 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	3304      	adds	r3, #4
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f252:	2300      	movs	r3, #0
 800f254:	83fb      	strh	r3, [r7, #30]
 800f256:	e00c      	b.n	800f272 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800f258:	8bfa      	ldrh	r2, [r7, #30]
 800f25a:	8bfb      	ldrh	r3, [r7, #30]
 800f25c:	68f9      	ldr	r1, [r7, #12]
 800f25e:	440a      	add	r2, r1
 800f260:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800f264:	697a      	ldr	r2, [r7, #20]
 800f266:	4413      	add	r3, r2
 800f268:	460a      	mov	r2, r1
 800f26a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f26c:	8bfb      	ldrh	r3, [r7, #30]
 800f26e:	3301      	adds	r3, #1
 800f270:	83fb      	strh	r3, [r7, #30]
 800f272:	8bfb      	ldrh	r3, [r7, #30]
 800f274:	2b05      	cmp	r3, #5
 800f276:	d9ef      	bls.n	800f258 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	2200      	movs	r2, #0
 800f27c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f280:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800f284:	2200      	movs	r2, #0
 800f286:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800f28a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800f28e:	2200      	movs	r2, #0
 800f290:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800f294:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800f298:	2200      	movs	r2, #0
 800f29a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f29e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	2235      	movs	r2, #53	; 0x35
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	f7ff fadb 	bl	800e868 <dhcp_option>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2bc:	79fa      	ldrb	r2, [r7, #7]
 800f2be:	8a7b      	ldrh	r3, [r7, #18]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff fb05 	bl	800e8d0 <dhcp_option_byte>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	8a7a      	ldrh	r2, [r7, #18]
 800f2d4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800f2d6:	69bb      	ldr	r3, [r7, #24]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3720      	adds	r7, #32
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	0801d38c 	.word	0x0801d38c
 800f2e4:	0801d72c 	.word	0x0801d72c
 800f2e8:	0801d46c 	.word	0x0801d46c
 800f2ec:	0801d74c 	.word	0x0801d74c
 800f2f0:	0801d76c 	.word	0x0801d76c
 800f2f4:	2000848c 	.word	0x2000848c

0800f2f8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	4603      	mov	r3, r0
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
 800f304:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800f306:	89fb      	ldrh	r3, [r7, #14]
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	81fa      	strh	r2, [r7, #14]
 800f30c:	461a      	mov	r2, r3
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	4413      	add	r3, r2
 800f312:	22ff      	movs	r2, #255	; 0xff
 800f314:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f316:	e007      	b.n	800f328 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800f318:	89fb      	ldrh	r3, [r7, #14]
 800f31a:	1c5a      	adds	r2, r3, #1
 800f31c:	81fa      	strh	r2, [r7, #14]
 800f31e:	461a      	mov	r2, r3
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	4413      	add	r3, r2
 800f324:	2200      	movs	r2, #0
 800f326:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f328:	89fb      	ldrh	r3, [r7, #14]
 800f32a:	2b43      	cmp	r3, #67	; 0x43
 800f32c:	d904      	bls.n	800f338 <dhcp_option_trailer+0x40>
 800f32e:	89fb      	ldrh	r3, [r7, #14]
 800f330:	f003 0303 	and.w	r3, r3, #3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <dhcp_option_trailer+0x46>
 800f338:	89fb      	ldrh	r3, [r7, #14]
 800f33a:	2b43      	cmp	r3, #67	; 0x43
 800f33c:	d9ec      	bls.n	800f318 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800f33e:	89fb      	ldrh	r3, [r7, #14]
 800f340:	33f0      	adds	r3, #240	; 0xf0
 800f342:	b29b      	uxth	r3, r3
 800f344:	4619      	mov	r1, r3
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f003 fd34 	bl	8012db4 <pbuf_realloc>
}
 800f34c:	bf00      	nop
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d017      	beq.n	800f392 <dhcp_supplied_address+0x3e>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f366:	2b00      	cmp	r3, #0
 800f368:	d013      	beq.n	800f392 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	795b      	ldrb	r3, [r3, #5]
 800f374:	2b0a      	cmp	r3, #10
 800f376:	d007      	beq.n	800f388 <dhcp_supplied_address+0x34>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	795b      	ldrb	r3, [r3, #5]
 800f37c:	2b05      	cmp	r3, #5
 800f37e:	d003      	beq.n	800f388 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f384:	2b04      	cmp	r3, #4
 800f386:	d101      	bne.n	800f38c <dhcp_supplied_address+0x38>
 800f388:	2301      	movs	r3, #1
 800f38a:	e000      	b.n	800f38e <dhcp_supplied_address+0x3a>
 800f38c:	2300      	movs	r3, #0
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	e000      	b.n	800f394 <dhcp_supplied_address+0x40>
  }
  return 0;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3714      	adds	r7, #20
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f3a8:	4915      	ldr	r1, [pc, #84]	; (800f400 <etharp_free_entry+0x60>)
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	4413      	add	r3, r2
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	440b      	add	r3, r1
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d013      	beq.n	800f3e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f3bc:	4910      	ldr	r1, [pc, #64]	; (800f400 <etharp_free_entry+0x60>)
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	4413      	add	r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	440b      	add	r3, r1
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f003 fea9 	bl	8013124 <pbuf_free>
    arp_table[i].q = NULL;
 800f3d2:	490b      	ldr	r1, [pc, #44]	; (800f400 <etharp_free_entry+0x60>)
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	4413      	add	r3, r2
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	440b      	add	r3, r1
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f3e4:	4906      	ldr	r1, [pc, #24]	; (800f400 <etharp_free_entry+0x60>)
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	005b      	lsls	r3, r3, #1
 800f3ec:	4413      	add	r3, r2
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	440b      	add	r3, r1
 800f3f2:	3314      	adds	r3, #20
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f3f8:	bf00      	nop
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20008490 	.word	0x20008490

0800f404 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f40a:	2300      	movs	r3, #0
 800f40c:	607b      	str	r3, [r7, #4]
 800f40e:	e096      	b.n	800f53e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f410:	494f      	ldr	r1, [pc, #316]	; (800f550 <etharp_tmr+0x14c>)
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	4613      	mov	r3, r2
 800f416:	005b      	lsls	r3, r3, #1
 800f418:	4413      	add	r3, r2
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	440b      	add	r3, r1
 800f41e:	3314      	adds	r3, #20
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f424:	78fb      	ldrb	r3, [r7, #3]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 8086 	beq.w	800f538 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f42c:	4948      	ldr	r1, [pc, #288]	; (800f550 <etharp_tmr+0x14c>)
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	4613      	mov	r3, r2
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	4413      	add	r3, r2
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	440b      	add	r3, r1
 800f43a:	3312      	adds	r3, #18
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	3301      	adds	r3, #1
 800f440:	b298      	uxth	r0, r3
 800f442:	4943      	ldr	r1, [pc, #268]	; (800f550 <etharp_tmr+0x14c>)
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	4613      	mov	r3, r2
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	4413      	add	r3, r2
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	440b      	add	r3, r1
 800f450:	3312      	adds	r3, #18
 800f452:	4602      	mov	r2, r0
 800f454:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f456:	493e      	ldr	r1, [pc, #248]	; (800f550 <etharp_tmr+0x14c>)
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	4613      	mov	r3, r2
 800f45c:	005b      	lsls	r3, r3, #1
 800f45e:	4413      	add	r3, r2
 800f460:	00db      	lsls	r3, r3, #3
 800f462:	440b      	add	r3, r1
 800f464:	3312      	adds	r3, #18
 800f466:	881b      	ldrh	r3, [r3, #0]
 800f468:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f46c:	d215      	bcs.n	800f49a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f46e:	4938      	ldr	r1, [pc, #224]	; (800f550 <etharp_tmr+0x14c>)
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4613      	mov	r3, r2
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	4413      	add	r3, r2
 800f478:	00db      	lsls	r3, r3, #3
 800f47a:	440b      	add	r3, r1
 800f47c:	3314      	adds	r3, #20
 800f47e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f480:	2b01      	cmp	r3, #1
 800f482:	d10e      	bne.n	800f4a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f484:	4932      	ldr	r1, [pc, #200]	; (800f550 <etharp_tmr+0x14c>)
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	4613      	mov	r3, r2
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	4413      	add	r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	440b      	add	r3, r1
 800f492:	3312      	adds	r3, #18
 800f494:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f496:	2b04      	cmp	r3, #4
 800f498:	d903      	bls.n	800f4a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff ff80 	bl	800f3a0 <etharp_free_entry>
 800f4a0:	e04a      	b.n	800f538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f4a2:	492b      	ldr	r1, [pc, #172]	; (800f550 <etharp_tmr+0x14c>)
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	005b      	lsls	r3, r3, #1
 800f4aa:	4413      	add	r3, r2
 800f4ac:	00db      	lsls	r3, r3, #3
 800f4ae:	440b      	add	r3, r1
 800f4b0:	3314      	adds	r3, #20
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d10a      	bne.n	800f4ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f4b8:	4925      	ldr	r1, [pc, #148]	; (800f550 <etharp_tmr+0x14c>)
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	4613      	mov	r3, r2
 800f4be:	005b      	lsls	r3, r3, #1
 800f4c0:	4413      	add	r3, r2
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	440b      	add	r3, r1
 800f4c6:	3314      	adds	r3, #20
 800f4c8:	2204      	movs	r2, #4
 800f4ca:	701a      	strb	r2, [r3, #0]
 800f4cc:	e034      	b.n	800f538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f4ce:	4920      	ldr	r1, [pc, #128]	; (800f550 <etharp_tmr+0x14c>)
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	005b      	lsls	r3, r3, #1
 800f4d6:	4413      	add	r3, r2
 800f4d8:	00db      	lsls	r3, r3, #3
 800f4da:	440b      	add	r3, r1
 800f4dc:	3314      	adds	r3, #20
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b04      	cmp	r3, #4
 800f4e2:	d10a      	bne.n	800f4fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f4e4:	491a      	ldr	r1, [pc, #104]	; (800f550 <etharp_tmr+0x14c>)
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	005b      	lsls	r3, r3, #1
 800f4ec:	4413      	add	r3, r2
 800f4ee:	00db      	lsls	r3, r3, #3
 800f4f0:	440b      	add	r3, r1
 800f4f2:	3314      	adds	r3, #20
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	701a      	strb	r2, [r3, #0]
 800f4f8:	e01e      	b.n	800f538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f4fa:	4915      	ldr	r1, [pc, #84]	; (800f550 <etharp_tmr+0x14c>)
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	4613      	mov	r3, r2
 800f500:	005b      	lsls	r3, r3, #1
 800f502:	4413      	add	r3, r2
 800f504:	00db      	lsls	r3, r3, #3
 800f506:	440b      	add	r3, r1
 800f508:	3314      	adds	r3, #20
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d113      	bne.n	800f538 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f510:	490f      	ldr	r1, [pc, #60]	; (800f550 <etharp_tmr+0x14c>)
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	4613      	mov	r3, r2
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	4413      	add	r3, r2
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	440b      	add	r3, r1
 800f51e:	3308      	adds	r3, #8
 800f520:	6818      	ldr	r0, [r3, #0]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	4613      	mov	r3, r2
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	4a08      	ldr	r2, [pc, #32]	; (800f550 <etharp_tmr+0x14c>)
 800f52e:	4413      	add	r3, r2
 800f530:	3304      	adds	r3, #4
 800f532:	4619      	mov	r1, r3
 800f534:	f000 fe72 	bl	801021c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3301      	adds	r3, #1
 800f53c:	607b      	str	r3, [r7, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b09      	cmp	r3, #9
 800f542:	f77f af65 	ble.w	800f410 <etharp_tmr+0xc>
      }
    }
  }
}
 800f546:	bf00      	nop
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	20008490 	.word	0x20008490

0800f554 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b08a      	sub	sp, #40	; 0x28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	460b      	mov	r3, r1
 800f55e:	607a      	str	r2, [r7, #4]
 800f560:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f562:	230a      	movs	r3, #10
 800f564:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f566:	230a      	movs	r3, #10
 800f568:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f56a:	230a      	movs	r3, #10
 800f56c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f56e:	2300      	movs	r3, #0
 800f570:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f572:	230a      	movs	r3, #10
 800f574:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	83bb      	strh	r3, [r7, #28]
 800f57a:	2300      	movs	r3, #0
 800f57c:	837b      	strh	r3, [r7, #26]
 800f57e:	2300      	movs	r3, #0
 800f580:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f582:	2300      	movs	r3, #0
 800f584:	843b      	strh	r3, [r7, #32]
 800f586:	e0ae      	b.n	800f6e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f58c:	49a6      	ldr	r1, [pc, #664]	; (800f828 <etharp_find_entry+0x2d4>)
 800f58e:	4613      	mov	r3, r2
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4413      	add	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	440b      	add	r3, r1
 800f598:	3314      	adds	r3, #20
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f59e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f5a2:	2b0a      	cmp	r3, #10
 800f5a4:	d105      	bne.n	800f5b2 <etharp_find_entry+0x5e>
 800f5a6:	7dfb      	ldrb	r3, [r7, #23]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d102      	bne.n	800f5b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f5ac:	8c3b      	ldrh	r3, [r7, #32]
 800f5ae:	847b      	strh	r3, [r7, #34]	; 0x22
 800f5b0:	e095      	b.n	800f6de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f000 8092 	beq.w	800f6de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f5ba:	7dfb      	ldrb	r3, [r7, #23]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d009      	beq.n	800f5d4 <etharp_find_entry+0x80>
 800f5c0:	7dfb      	ldrb	r3, [r7, #23]
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d806      	bhi.n	800f5d4 <etharp_find_entry+0x80>
 800f5c6:	4b99      	ldr	r3, [pc, #612]	; (800f82c <etharp_find_entry+0x2d8>)
 800f5c8:	f240 1223 	movw	r2, #291	; 0x123
 800f5cc:	4998      	ldr	r1, [pc, #608]	; (800f830 <etharp_find_entry+0x2dc>)
 800f5ce:	4899      	ldr	r0, [pc, #612]	; (800f834 <etharp_find_entry+0x2e0>)
 800f5d0:	f00b fae8 	bl	801aba4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d020      	beq.n	800f61c <etharp_find_entry+0xc8>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6819      	ldr	r1, [r3, #0]
 800f5de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5e2:	4891      	ldr	r0, [pc, #580]	; (800f828 <etharp_find_entry+0x2d4>)
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	005b      	lsls	r3, r3, #1
 800f5e8:	4413      	add	r3, r2
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4403      	add	r3, r0
 800f5ee:	3304      	adds	r3, #4
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4299      	cmp	r1, r3
 800f5f4:	d112      	bne.n	800f61c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00c      	beq.n	800f616 <etharp_find_entry+0xc2>
 800f5fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f600:	4989      	ldr	r1, [pc, #548]	; (800f828 <etharp_find_entry+0x2d4>)
 800f602:	4613      	mov	r3, r2
 800f604:	005b      	lsls	r3, r3, #1
 800f606:	4413      	add	r3, r2
 800f608:	00db      	lsls	r3, r3, #3
 800f60a:	440b      	add	r3, r1
 800f60c:	3308      	adds	r3, #8
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	429a      	cmp	r2, r3
 800f614:	d102      	bne.n	800f61c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f61a:	e100      	b.n	800f81e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f61c:	7dfb      	ldrb	r3, [r7, #23]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d140      	bne.n	800f6a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f626:	4980      	ldr	r1, [pc, #512]	; (800f828 <etharp_find_entry+0x2d4>)
 800f628:	4613      	mov	r3, r2
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	4413      	add	r3, r2
 800f62e:	00db      	lsls	r3, r3, #3
 800f630:	440b      	add	r3, r1
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d01a      	beq.n	800f66e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f63c:	497a      	ldr	r1, [pc, #488]	; (800f828 <etharp_find_entry+0x2d4>)
 800f63e:	4613      	mov	r3, r2
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	4413      	add	r3, r2
 800f644:	00db      	lsls	r3, r3, #3
 800f646:	440b      	add	r3, r1
 800f648:	3312      	adds	r3, #18
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	8bba      	ldrh	r2, [r7, #28]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d845      	bhi.n	800f6de <etharp_find_entry+0x18a>
            old_queue = i;
 800f652:	8c3b      	ldrh	r3, [r7, #32]
 800f654:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f656:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f65a:	4973      	ldr	r1, [pc, #460]	; (800f828 <etharp_find_entry+0x2d4>)
 800f65c:	4613      	mov	r3, r2
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	4413      	add	r3, r2
 800f662:	00db      	lsls	r3, r3, #3
 800f664:	440b      	add	r3, r1
 800f666:	3312      	adds	r3, #18
 800f668:	881b      	ldrh	r3, [r3, #0]
 800f66a:	83bb      	strh	r3, [r7, #28]
 800f66c:	e037      	b.n	800f6de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f66e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f672:	496d      	ldr	r1, [pc, #436]	; (800f828 <etharp_find_entry+0x2d4>)
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	440b      	add	r3, r1
 800f67e:	3312      	adds	r3, #18
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	8b7a      	ldrh	r2, [r7, #26]
 800f684:	429a      	cmp	r2, r3
 800f686:	d82a      	bhi.n	800f6de <etharp_find_entry+0x18a>
            old_pending = i;
 800f688:	8c3b      	ldrh	r3, [r7, #32]
 800f68a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f68c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f690:	4965      	ldr	r1, [pc, #404]	; (800f828 <etharp_find_entry+0x2d4>)
 800f692:	4613      	mov	r3, r2
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	4413      	add	r3, r2
 800f698:	00db      	lsls	r3, r3, #3
 800f69a:	440b      	add	r3, r1
 800f69c:	3312      	adds	r3, #18
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	837b      	strh	r3, [r7, #26]
 800f6a2:	e01c      	b.n	800f6de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f6a4:	7dfb      	ldrb	r3, [r7, #23]
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d919      	bls.n	800f6de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f6aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6ae:	495e      	ldr	r1, [pc, #376]	; (800f828 <etharp_find_entry+0x2d4>)
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	4413      	add	r3, r2
 800f6b6:	00db      	lsls	r3, r3, #3
 800f6b8:	440b      	add	r3, r1
 800f6ba:	3312      	adds	r3, #18
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	8b3a      	ldrh	r2, [r7, #24]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d80c      	bhi.n	800f6de <etharp_find_entry+0x18a>
            old_stable = i;
 800f6c4:	8c3b      	ldrh	r3, [r7, #32]
 800f6c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6cc:	4956      	ldr	r1, [pc, #344]	; (800f828 <etharp_find_entry+0x2d4>)
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	4413      	add	r3, r2
 800f6d4:	00db      	lsls	r3, r3, #3
 800f6d6:	440b      	add	r3, r1
 800f6d8:	3312      	adds	r3, #18
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f6de:	8c3b      	ldrh	r3, [r7, #32]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	843b      	strh	r3, [r7, #32]
 800f6e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f6ea:	2b09      	cmp	r3, #9
 800f6ec:	f77f af4c 	ble.w	800f588 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f6f0:	7afb      	ldrb	r3, [r7, #11]
 800f6f2:	f003 0302 	and.w	r3, r3, #2
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d108      	bne.n	800f70c <etharp_find_entry+0x1b8>
 800f6fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f6fe:	2b0a      	cmp	r3, #10
 800f700:	d107      	bne.n	800f712 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f702:	7afb      	ldrb	r3, [r7, #11]
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d102      	bne.n	800f712 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f70c:	f04f 33ff 	mov.w	r3, #4294967295
 800f710:	e085      	b.n	800f81e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f712:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f716:	2b09      	cmp	r3, #9
 800f718:	dc02      	bgt.n	800f720 <etharp_find_entry+0x1cc>
    i = empty;
 800f71a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f71c:	843b      	strh	r3, [r7, #32]
 800f71e:	e039      	b.n	800f794 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f720:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f724:	2b09      	cmp	r3, #9
 800f726:	dc14      	bgt.n	800f752 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f72a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f72c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f730:	493d      	ldr	r1, [pc, #244]	; (800f828 <etharp_find_entry+0x2d4>)
 800f732:	4613      	mov	r3, r2
 800f734:	005b      	lsls	r3, r3, #1
 800f736:	4413      	add	r3, r2
 800f738:	00db      	lsls	r3, r3, #3
 800f73a:	440b      	add	r3, r1
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d018      	beq.n	800f774 <etharp_find_entry+0x220>
 800f742:	4b3a      	ldr	r3, [pc, #232]	; (800f82c <etharp_find_entry+0x2d8>)
 800f744:	f240 126d 	movw	r2, #365	; 0x16d
 800f748:	493b      	ldr	r1, [pc, #236]	; (800f838 <etharp_find_entry+0x2e4>)
 800f74a:	483a      	ldr	r0, [pc, #232]	; (800f834 <etharp_find_entry+0x2e0>)
 800f74c:	f00b fa2a 	bl	801aba4 <iprintf>
 800f750:	e010      	b.n	800f774 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f752:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f756:	2b09      	cmp	r3, #9
 800f758:	dc02      	bgt.n	800f760 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f75a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f75c:	843b      	strh	r3, [r7, #32]
 800f75e:	e009      	b.n	800f774 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f764:	2b09      	cmp	r3, #9
 800f766:	dc02      	bgt.n	800f76e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f768:	8bfb      	ldrh	r3, [r7, #30]
 800f76a:	843b      	strh	r3, [r7, #32]
 800f76c:	e002      	b.n	800f774 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f76e:	f04f 33ff 	mov.w	r3, #4294967295
 800f772:	e054      	b.n	800f81e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f774:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f778:	2b09      	cmp	r3, #9
 800f77a:	dd06      	ble.n	800f78a <etharp_find_entry+0x236>
 800f77c:	4b2b      	ldr	r3, [pc, #172]	; (800f82c <etharp_find_entry+0x2d8>)
 800f77e:	f240 127f 	movw	r2, #383	; 0x17f
 800f782:	492e      	ldr	r1, [pc, #184]	; (800f83c <etharp_find_entry+0x2e8>)
 800f784:	482b      	ldr	r0, [pc, #172]	; (800f834 <etharp_find_entry+0x2e0>)
 800f786:	f00b fa0d 	bl	801aba4 <iprintf>
    etharp_free_entry(i);
 800f78a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff fe06 	bl	800f3a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f794:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f798:	2b09      	cmp	r3, #9
 800f79a:	dd06      	ble.n	800f7aa <etharp_find_entry+0x256>
 800f79c:	4b23      	ldr	r3, [pc, #140]	; (800f82c <etharp_find_entry+0x2d8>)
 800f79e:	f240 1283 	movw	r2, #387	; 0x183
 800f7a2:	4926      	ldr	r1, [pc, #152]	; (800f83c <etharp_find_entry+0x2e8>)
 800f7a4:	4823      	ldr	r0, [pc, #140]	; (800f834 <etharp_find_entry+0x2e0>)
 800f7a6:	f00b f9fd 	bl	801aba4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f7aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7ae:	491e      	ldr	r1, [pc, #120]	; (800f828 <etharp_find_entry+0x2d4>)
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	4413      	add	r3, r2
 800f7b6:	00db      	lsls	r3, r3, #3
 800f7b8:	440b      	add	r3, r1
 800f7ba:	3314      	adds	r3, #20
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d006      	beq.n	800f7d0 <etharp_find_entry+0x27c>
 800f7c2:	4b1a      	ldr	r3, [pc, #104]	; (800f82c <etharp_find_entry+0x2d8>)
 800f7c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f7c8:	491d      	ldr	r1, [pc, #116]	; (800f840 <etharp_find_entry+0x2ec>)
 800f7ca:	481a      	ldr	r0, [pc, #104]	; (800f834 <etharp_find_entry+0x2e0>)
 800f7cc:	f00b f9ea 	bl	801aba4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00b      	beq.n	800f7ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f7d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6819      	ldr	r1, [r3, #0]
 800f7de:	4812      	ldr	r0, [pc, #72]	; (800f828 <etharp_find_entry+0x2d4>)
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	005b      	lsls	r3, r3, #1
 800f7e4:	4413      	add	r3, r2
 800f7e6:	00db      	lsls	r3, r3, #3
 800f7e8:	4403      	add	r3, r0
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f7ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7f2:	490d      	ldr	r1, [pc, #52]	; (800f828 <etharp_find_entry+0x2d4>)
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	4413      	add	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	440b      	add	r3, r1
 800f7fe:	3312      	adds	r3, #18
 800f800:	2200      	movs	r2, #0
 800f802:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f808:	4907      	ldr	r1, [pc, #28]	; (800f828 <etharp_find_entry+0x2d4>)
 800f80a:	4613      	mov	r3, r2
 800f80c:	005b      	lsls	r3, r3, #1
 800f80e:	4413      	add	r3, r2
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	440b      	add	r3, r1
 800f814:	3308      	adds	r3, #8
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f81a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3728      	adds	r7, #40	; 0x28
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	20008490 	.word	0x20008490
 800f82c:	0801d7ac 	.word	0x0801d7ac
 800f830:	0801d868 	.word	0x0801d868
 800f834:	0801d8a8 	.word	0x0801d8a8
 800f838:	0801d8d0 	.word	0x0801d8d0
 800f83c:	0801d8e8 	.word	0x0801d8e8
 800f840:	0801d8fc 	.word	0x0801d8fc

0800f844 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af02      	add	r7, sp, #8
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f858:	2b06      	cmp	r3, #6
 800f85a:	d006      	beq.n	800f86a <etharp_update_arp_entry+0x26>
 800f85c:	4b48      	ldr	r3, [pc, #288]	; (800f980 <etharp_update_arp_entry+0x13c>)
 800f85e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f862:	4948      	ldr	r1, [pc, #288]	; (800f984 <etharp_update_arp_entry+0x140>)
 800f864:	4848      	ldr	r0, [pc, #288]	; (800f988 <etharp_update_arp_entry+0x144>)
 800f866:	f00b f99d 	bl	801aba4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d012      	beq.n	800f896 <etharp_update_arp_entry+0x52>
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00e      	beq.n	800f896 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	68f9      	ldr	r1, [r7, #12]
 800f87e:	4618      	mov	r0, r3
 800f880:	f001 f93c 	bl	8010afc <ip4_addr_isbroadcast_u32>
 800f884:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f886:	2b00      	cmp	r3, #0
 800f888:	d105      	bne.n	800f896 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f892:	2be0      	cmp	r3, #224	; 0xe0
 800f894:	d102      	bne.n	800f89c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f896:	f06f 030f 	mvn.w	r3, #15
 800f89a:	e06c      	b.n	800f976 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	68fa      	ldr	r2, [r7, #12]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	68b8      	ldr	r0, [r7, #8]
 800f8a4:	f7ff fe56 	bl	800f554 <etharp_find_entry>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f8ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	da02      	bge.n	800f8ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f8b4:	8afb      	ldrh	r3, [r7, #22]
 800f8b6:	b25b      	sxtb	r3, r3
 800f8b8:	e05d      	b.n	800f976 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f8ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8be:	4933      	ldr	r1, [pc, #204]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	4413      	add	r3, r2
 800f8c6:	00db      	lsls	r3, r3, #3
 800f8c8:	440b      	add	r3, r1
 800f8ca:	3314      	adds	r3, #20
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8d4:	492d      	ldr	r1, [pc, #180]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	4413      	add	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	440b      	add	r3, r1
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f8e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	4413      	add	r3, r2
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	4a25      	ldr	r2, [pc, #148]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f8f6:	4413      	add	r3, r2
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	2206      	movs	r2, #6
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	4618      	mov	r0, r3
 800f900:	f00b f920 	bl	801ab44 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f908:	4920      	ldr	r1, [pc, #128]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f90a:	4613      	mov	r3, r2
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	4413      	add	r3, r2
 800f910:	00db      	lsls	r3, r3, #3
 800f912:	440b      	add	r3, r1
 800f914:	3312      	adds	r3, #18
 800f916:	2200      	movs	r2, #0
 800f918:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f91a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f91e:	491b      	ldr	r1, [pc, #108]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f920:	4613      	mov	r3, r2
 800f922:	005b      	lsls	r3, r3, #1
 800f924:	4413      	add	r3, r2
 800f926:	00db      	lsls	r3, r3, #3
 800f928:	440b      	add	r3, r1
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d021      	beq.n	800f974 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f930:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f934:	4915      	ldr	r1, [pc, #84]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f936:	4613      	mov	r3, r2
 800f938:	005b      	lsls	r3, r3, #1
 800f93a:	4413      	add	r3, r2
 800f93c:	00db      	lsls	r3, r3, #3
 800f93e:	440b      	add	r3, r1
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f948:	4910      	ldr	r1, [pc, #64]	; (800f98c <etharp_update_arp_entry+0x148>)
 800f94a:	4613      	mov	r3, r2
 800f94c:	005b      	lsls	r3, r3, #1
 800f94e:	4413      	add	r3, r2
 800f950:	00db      	lsls	r3, r3, #3
 800f952:	440b      	add	r3, r1
 800f954:	2200      	movs	r2, #0
 800f956:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800f95e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6939      	ldr	r1, [r7, #16]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f00a fe6d 	bl	801a648 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f96e:	6938      	ldr	r0, [r7, #16]
 800f970:	f003 fbd8 	bl	8013124 <pbuf_free>
  }
  return ERR_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3718      	adds	r7, #24
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	0801d7ac 	.word	0x0801d7ac
 800f984:	0801d928 	.word	0x0801d928
 800f988:	0801d8a8 	.word	0x0801d8a8
 800f98c:	20008490 	.word	0x20008490

0800f990 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f998:	2300      	movs	r3, #0
 800f99a:	60fb      	str	r3, [r7, #12]
 800f99c:	e01e      	b.n	800f9dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f99e:	4913      	ldr	r1, [pc, #76]	; (800f9ec <etharp_cleanup_netif+0x5c>)
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	005b      	lsls	r3, r3, #1
 800f9a6:	4413      	add	r3, r2
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	440b      	add	r3, r1
 800f9ac:	3314      	adds	r3, #20
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f9b2:	7afb      	ldrb	r3, [r7, #11]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00e      	beq.n	800f9d6 <etharp_cleanup_netif+0x46>
 800f9b8:	490c      	ldr	r1, [pc, #48]	; (800f9ec <etharp_cleanup_netif+0x5c>)
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	4413      	add	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	440b      	add	r3, r1
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d102      	bne.n	800f9d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff fce5 	bl	800f3a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b09      	cmp	r3, #9
 800f9e0:	dddd      	ble.n	800f99e <etharp_cleanup_netif+0xe>
    }
  }
}
 800f9e2:	bf00      	nop
 800f9e4:	bf00      	nop
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	20008490 	.word	0x20008490

0800f9f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f9f0:	b5b0      	push	{r4, r5, r7, lr}
 800f9f2:	b08a      	sub	sp, #40	; 0x28
 800f9f4:	af04      	add	r7, sp, #16
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d107      	bne.n	800fa10 <etharp_input+0x20>
 800fa00:	4b3f      	ldr	r3, [pc, #252]	; (800fb00 <etharp_input+0x110>)
 800fa02:	f240 228a 	movw	r2, #650	; 0x28a
 800fa06:	493f      	ldr	r1, [pc, #252]	; (800fb04 <etharp_input+0x114>)
 800fa08:	483f      	ldr	r0, [pc, #252]	; (800fb08 <etharp_input+0x118>)
 800fa0a:	f00b f8cb 	bl	801aba4 <iprintf>
 800fa0e:	e074      	b.n	800fafa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa20:	d10c      	bne.n	800fa3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fa26:	2b06      	cmp	r3, #6
 800fa28:	d108      	bne.n	800fa3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fa2e:	2b04      	cmp	r3, #4
 800fa30:	d104      	bne.n	800fa3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	885b      	ldrh	r3, [r3, #2]
 800fa36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fa38:	2b08      	cmp	r3, #8
 800fa3a:	d003      	beq.n	800fa44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f003 fb71 	bl	8013124 <pbuf_free>
    return;
 800fa42:	e05a      	b.n	800fafa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	330e      	adds	r3, #14
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	3318      	adds	r3, #24
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	3304      	adds	r3, #4
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d102      	bne.n	800fa64 <etharp_input+0x74>
    for_us = 0;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	75fb      	strb	r3, [r7, #23]
 800fa62:	e009      	b.n	800fa78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	bf0c      	ite	eq
 800fa70:	2301      	moveq	r3, #1
 800fa72:	2300      	movne	r3, #0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	f103 0208 	add.w	r2, r3, #8
 800fa7e:	7dfb      	ldrb	r3, [r7, #23]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <etharp_input+0x98>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e000      	b.n	800fa8a <etharp_input+0x9a>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	f107 010c 	add.w	r1, r7, #12
 800fa8e:	6838      	ldr	r0, [r7, #0]
 800fa90:	f7ff fed8 	bl	800f844 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	88db      	ldrh	r3, [r3, #6]
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa9e:	d003      	beq.n	800faa8 <etharp_input+0xb8>
 800faa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faa4:	d01e      	beq.n	800fae4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800faa6:	e025      	b.n	800faf4 <etharp_input+0x104>
      if (for_us) {
 800faa8:	7dfb      	ldrb	r3, [r7, #23]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d021      	beq.n	800faf2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fac4:	693a      	ldr	r2, [r7, #16]
 800fac6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fac8:	2102      	movs	r1, #2
 800faca:	9103      	str	r1, [sp, #12]
 800facc:	f107 010c 	add.w	r1, r7, #12
 800fad0:	9102      	str	r1, [sp, #8]
 800fad2:	9201      	str	r2, [sp, #4]
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	462b      	mov	r3, r5
 800fad8:	4622      	mov	r2, r4
 800fada:	4601      	mov	r1, r0
 800fadc:	6838      	ldr	r0, [r7, #0]
 800fade:	f000 faef 	bl	80100c0 <etharp_raw>
      break;
 800fae2:	e006      	b.n	800faf2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800fae4:	f107 030c 	add.w	r3, r7, #12
 800fae8:	4619      	mov	r1, r3
 800faea:	6838      	ldr	r0, [r7, #0]
 800faec:	f7fe f9fc 	bl	800dee8 <dhcp_arp_reply>
      break;
 800faf0:	e000      	b.n	800faf4 <etharp_input+0x104>
      break;
 800faf2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f003 fb15 	bl	8013124 <pbuf_free>
}
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bdb0      	pop	{r4, r5, r7, pc}
 800fb00:	0801d7ac 	.word	0x0801d7ac
 800fb04:	0801d980 	.word	0x0801d980
 800fb08:	0801d8a8 	.word	0x0801d8a8

0800fb0c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b086      	sub	sp, #24
 800fb10:	af02      	add	r7, sp, #8
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4613      	mov	r3, r2
 800fb18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fb1a:	79fa      	ldrb	r2, [r7, #7]
 800fb1c:	4944      	ldr	r1, [pc, #272]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fb1e:	4613      	mov	r3, r2
 800fb20:	005b      	lsls	r3, r3, #1
 800fb22:	4413      	add	r3, r2
 800fb24:	00db      	lsls	r3, r3, #3
 800fb26:	440b      	add	r3, r1
 800fb28:	3314      	adds	r3, #20
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d806      	bhi.n	800fb3e <etharp_output_to_arp_index+0x32>
 800fb30:	4b40      	ldr	r3, [pc, #256]	; (800fc34 <etharp_output_to_arp_index+0x128>)
 800fb32:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fb36:	4940      	ldr	r1, [pc, #256]	; (800fc38 <etharp_output_to_arp_index+0x12c>)
 800fb38:	4840      	ldr	r0, [pc, #256]	; (800fc3c <etharp_output_to_arp_index+0x130>)
 800fb3a:	f00b f833 	bl	801aba4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fb3e:	79fa      	ldrb	r2, [r7, #7]
 800fb40:	493b      	ldr	r1, [pc, #236]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fb42:	4613      	mov	r3, r2
 800fb44:	005b      	lsls	r3, r3, #1
 800fb46:	4413      	add	r3, r2
 800fb48:	00db      	lsls	r3, r3, #3
 800fb4a:	440b      	add	r3, r1
 800fb4c:	3314      	adds	r3, #20
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b02      	cmp	r3, #2
 800fb52:	d153      	bne.n	800fbfc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fb54:	79fa      	ldrb	r2, [r7, #7]
 800fb56:	4936      	ldr	r1, [pc, #216]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fb58:	4613      	mov	r3, r2
 800fb5a:	005b      	lsls	r3, r3, #1
 800fb5c:	4413      	add	r3, r2
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	440b      	add	r3, r1
 800fb62:	3312      	adds	r3, #18
 800fb64:	881b      	ldrh	r3, [r3, #0]
 800fb66:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fb6a:	d919      	bls.n	800fba0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fb6c:	79fa      	ldrb	r2, [r7, #7]
 800fb6e:	4613      	mov	r3, r2
 800fb70:	005b      	lsls	r3, r3, #1
 800fb72:	4413      	add	r3, r2
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	4a2e      	ldr	r2, [pc, #184]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fb78:	4413      	add	r3, r2
 800fb7a:	3304      	adds	r3, #4
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f000 fb4c 	bl	801021c <etharp_request>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d138      	bne.n	800fbfc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fb8a:	79fa      	ldrb	r2, [r7, #7]
 800fb8c:	4928      	ldr	r1, [pc, #160]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fb8e:	4613      	mov	r3, r2
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	4413      	add	r3, r2
 800fb94:	00db      	lsls	r3, r3, #3
 800fb96:	440b      	add	r3, r1
 800fb98:	3314      	adds	r3, #20
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	701a      	strb	r2, [r3, #0]
 800fb9e:	e02d      	b.n	800fbfc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fba0:	79fa      	ldrb	r2, [r7, #7]
 800fba2:	4923      	ldr	r1, [pc, #140]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fba4:	4613      	mov	r3, r2
 800fba6:	005b      	lsls	r3, r3, #1
 800fba8:	4413      	add	r3, r2
 800fbaa:	00db      	lsls	r3, r3, #3
 800fbac:	440b      	add	r3, r1
 800fbae:	3312      	adds	r3, #18
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fbb6:	d321      	bcc.n	800fbfc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fbb8:	79fa      	ldrb	r2, [r7, #7]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	4413      	add	r3, r2
 800fbc0:	00db      	lsls	r3, r3, #3
 800fbc2:	4a1b      	ldr	r2, [pc, #108]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fbc4:	4413      	add	r3, r2
 800fbc6:	1d19      	adds	r1, r3, #4
 800fbc8:	79fa      	ldrb	r2, [r7, #7]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	4413      	add	r3, r2
 800fbd0:	00db      	lsls	r3, r3, #3
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	4a16      	ldr	r2, [pc, #88]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fbd6:	4413      	add	r3, r2
 800fbd8:	3304      	adds	r3, #4
 800fbda:	461a      	mov	r2, r3
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f000 fafb 	bl	80101d8 <etharp_request_dst>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d109      	bne.n	800fbfc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fbe8:	79fa      	ldrb	r2, [r7, #7]
 800fbea:	4911      	ldr	r1, [pc, #68]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fbec:	4613      	mov	r3, r2
 800fbee:	005b      	lsls	r3, r3, #1
 800fbf0:	4413      	add	r3, r2
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	440b      	add	r3, r1
 800fbf6:	3314      	adds	r3, #20
 800fbf8:	2203      	movs	r2, #3
 800fbfa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800fc02:	79fa      	ldrb	r2, [r7, #7]
 800fc04:	4613      	mov	r3, r2
 800fc06:	005b      	lsls	r3, r3, #1
 800fc08:	4413      	add	r3, r2
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	4a08      	ldr	r2, [pc, #32]	; (800fc30 <etharp_output_to_arp_index+0x124>)
 800fc10:	4413      	add	r3, r2
 800fc12:	3304      	adds	r3, #4
 800fc14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc18:	9200      	str	r2, [sp, #0]
 800fc1a:	460a      	mov	r2, r1
 800fc1c:	68b9      	ldr	r1, [r7, #8]
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f00a fd12 	bl	801a648 <ethernet_output>
 800fc24:	4603      	mov	r3, r0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	20008490 	.word	0x20008490
 800fc34:	0801d7ac 	.word	0x0801d7ac
 800fc38:	0801d9a0 	.word	0x0801d9a0
 800fc3c:	0801d8a8 	.word	0x0801d8a8

0800fc40 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b08a      	sub	sp, #40	; 0x28
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <etharp_output+0x24>
 800fc56:	4b73      	ldr	r3, [pc, #460]	; (800fe24 <etharp_output+0x1e4>)
 800fc58:	f240 321e 	movw	r2, #798	; 0x31e
 800fc5c:	4972      	ldr	r1, [pc, #456]	; (800fe28 <etharp_output+0x1e8>)
 800fc5e:	4873      	ldr	r0, [pc, #460]	; (800fe2c <etharp_output+0x1ec>)
 800fc60:	f00a ffa0 	bl	801aba4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d106      	bne.n	800fc78 <etharp_output+0x38>
 800fc6a:	4b6e      	ldr	r3, [pc, #440]	; (800fe24 <etharp_output+0x1e4>)
 800fc6c:	f240 321f 	movw	r2, #799	; 0x31f
 800fc70:	496f      	ldr	r1, [pc, #444]	; (800fe30 <etharp_output+0x1f0>)
 800fc72:	486e      	ldr	r0, [pc, #440]	; (800fe2c <etharp_output+0x1ec>)
 800fc74:	f00a ff96 	bl	801aba4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d106      	bne.n	800fc8c <etharp_output+0x4c>
 800fc7e:	4b69      	ldr	r3, [pc, #420]	; (800fe24 <etharp_output+0x1e4>)
 800fc80:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fc84:	496b      	ldr	r1, [pc, #428]	; (800fe34 <etharp_output+0x1f4>)
 800fc86:	4869      	ldr	r0, [pc, #420]	; (800fe2c <etharp_output+0x1ec>)
 800fc88:	f00a ff8c 	bl	801aba4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68f9      	ldr	r1, [r7, #12]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f000 ff32 	bl	8010afc <ip4_addr_isbroadcast_u32>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d002      	beq.n	800fca4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fc9e:	4b66      	ldr	r3, [pc, #408]	; (800fe38 <etharp_output+0x1f8>)
 800fca0:	61fb      	str	r3, [r7, #28]
 800fca2:	e0af      	b.n	800fe04 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcac:	2be0      	cmp	r3, #224	; 0xe0
 800fcae:	d118      	bne.n	800fce2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fcb8:	235e      	movs	r3, #94	; 0x5e
 800fcba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	3302      	adds	r3, #2
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	3303      	adds	r3, #3
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fcda:	f107 0310 	add.w	r3, r7, #16
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	e090      	b.n	800fe04 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	3304      	adds	r3, #4
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	405a      	eors	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4013      	ands	r3, r2
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d012      	beq.n	800fd20 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fd00:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d00b      	beq.n	800fd20 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	330c      	adds	r3, #12
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	330c      	adds	r3, #12
 800fd16:	61bb      	str	r3, [r7, #24]
 800fd18:	e002      	b.n	800fd20 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fd1a:	f06f 0303 	mvn.w	r3, #3
 800fd1e:	e07d      	b.n	800fe1c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fd20:	4b46      	ldr	r3, [pc, #280]	; (800fe3c <etharp_output+0x1fc>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	4619      	mov	r1, r3
 800fd26:	4a46      	ldr	r2, [pc, #280]	; (800fe40 <etharp_output+0x200>)
 800fd28:	460b      	mov	r3, r1
 800fd2a:	005b      	lsls	r3, r3, #1
 800fd2c:	440b      	add	r3, r1
 800fd2e:	00db      	lsls	r3, r3, #3
 800fd30:	4413      	add	r3, r2
 800fd32:	3314      	adds	r3, #20
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d925      	bls.n	800fd86 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fd3a:	4b40      	ldr	r3, [pc, #256]	; (800fe3c <etharp_output+0x1fc>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	4a3f      	ldr	r2, [pc, #252]	; (800fe40 <etharp_output+0x200>)
 800fd42:	460b      	mov	r3, r1
 800fd44:	005b      	lsls	r3, r3, #1
 800fd46:	440b      	add	r3, r1
 800fd48:	00db      	lsls	r3, r3, #3
 800fd4a:	4413      	add	r3, r2
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d117      	bne.n	800fd86 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	4b38      	ldr	r3, [pc, #224]	; (800fe3c <etharp_output+0x1fc>)
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	4937      	ldr	r1, [pc, #220]	; (800fe40 <etharp_output+0x200>)
 800fd62:	4603      	mov	r3, r0
 800fd64:	005b      	lsls	r3, r3, #1
 800fd66:	4403      	add	r3, r0
 800fd68:	00db      	lsls	r3, r3, #3
 800fd6a:	440b      	add	r3, r1
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d108      	bne.n	800fd86 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fd74:	4b31      	ldr	r3, [pc, #196]	; (800fe3c <etharp_output+0x1fc>)
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	68b9      	ldr	r1, [r7, #8]
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f7ff fec5 	bl	800fb0c <etharp_output_to_arp_index>
 800fd82:	4603      	mov	r3, r0
 800fd84:	e04a      	b.n	800fe1c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd86:	2300      	movs	r3, #0
 800fd88:	75fb      	strb	r3, [r7, #23]
 800fd8a:	e031      	b.n	800fdf0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd8c:	7dfa      	ldrb	r2, [r7, #23]
 800fd8e:	492c      	ldr	r1, [pc, #176]	; (800fe40 <etharp_output+0x200>)
 800fd90:	4613      	mov	r3, r2
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	440b      	add	r3, r1
 800fd9a:	3314      	adds	r3, #20
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d923      	bls.n	800fdea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fda2:	7dfa      	ldrb	r2, [r7, #23]
 800fda4:	4926      	ldr	r1, [pc, #152]	; (800fe40 <etharp_output+0x200>)
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	00db      	lsls	r3, r3, #3
 800fdae:	440b      	add	r3, r1
 800fdb0:	3308      	adds	r3, #8
 800fdb2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d117      	bne.n	800fdea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	6819      	ldr	r1, [r3, #0]
 800fdbe:	7dfa      	ldrb	r2, [r7, #23]
 800fdc0:	481f      	ldr	r0, [pc, #124]	; (800fe40 <etharp_output+0x200>)
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	005b      	lsls	r3, r3, #1
 800fdc6:	4413      	add	r3, r2
 800fdc8:	00db      	lsls	r3, r3, #3
 800fdca:	4403      	add	r3, r0
 800fdcc:	3304      	adds	r3, #4
 800fdce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fdd0:	4299      	cmp	r1, r3
 800fdd2:	d10a      	bne.n	800fdea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fdd4:	4a19      	ldr	r2, [pc, #100]	; (800fe3c <etharp_output+0x1fc>)
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fdda:	7dfb      	ldrb	r3, [r7, #23]
 800fddc:	461a      	mov	r2, r3
 800fdde:	68b9      	ldr	r1, [r7, #8]
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f7ff fe93 	bl	800fb0c <etharp_output_to_arp_index>
 800fde6:	4603      	mov	r3, r0
 800fde8:	e018      	b.n	800fe1c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
 800fdec:	3301      	adds	r3, #1
 800fdee:	75fb      	strb	r3, [r7, #23]
 800fdf0:	7dfb      	ldrb	r3, [r7, #23]
 800fdf2:	2b09      	cmp	r3, #9
 800fdf4:	d9ca      	bls.n	800fd8c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	69b9      	ldr	r1, [r7, #24]
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f000 f822 	bl	800fe44 <etharp_query>
 800fe00:	4603      	mov	r3, r0
 800fe02:	e00b      	b.n	800fe1c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800fe0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	68b9      	ldr	r1, [r7, #8]
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f00a fc17 	bl	801a648 <ethernet_output>
 800fe1a:	4603      	mov	r3, r0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3720      	adds	r7, #32
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	0801d7ac 	.word	0x0801d7ac
 800fe28:	0801d980 	.word	0x0801d980
 800fe2c:	0801d8a8 	.word	0x0801d8a8
 800fe30:	0801d9d0 	.word	0x0801d9d0
 800fe34:	0801d970 	.word	0x0801d970
 800fe38:	08021058 	.word	0x08021058
 800fe3c:	20008580 	.word	0x20008580
 800fe40:	20008490 	.word	0x20008490

0800fe44 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08c      	sub	sp, #48	; 0x30
 800fe48:	af02      	add	r7, sp, #8
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	332a      	adds	r3, #42	; 0x2a
 800fe54:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fe56:	23ff      	movs	r3, #255	; 0xff
 800fe58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	68f9      	ldr	r1, [r7, #12]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 fe48 	bl	8010afc <ip4_addr_isbroadcast_u32>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d10c      	bne.n	800fe8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe7a:	2be0      	cmp	r3, #224	; 0xe0
 800fe7c:	d006      	beq.n	800fe8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d003      	beq.n	800fe8c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d102      	bne.n	800fe92 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fe8c:	f06f 030f 	mvn.w	r3, #15
 800fe90:	e101      	b.n	8010096 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	2101      	movs	r1, #1
 800fe96:	68b8      	ldr	r0, [r7, #8]
 800fe98:	f7ff fb5c 	bl	800f554 <etharp_find_entry>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	da02      	bge.n	800feae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fea8:	8a7b      	ldrh	r3, [r7, #18]
 800feaa:	b25b      	sxtb	r3, r3
 800feac:	e0f3      	b.n	8010096 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800feae:	8a7b      	ldrh	r3, [r7, #18]
 800feb0:	2b7e      	cmp	r3, #126	; 0x7e
 800feb2:	d906      	bls.n	800fec2 <etharp_query+0x7e>
 800feb4:	4b7a      	ldr	r3, [pc, #488]	; (80100a0 <etharp_query+0x25c>)
 800feb6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800feba:	497a      	ldr	r1, [pc, #488]	; (80100a4 <etharp_query+0x260>)
 800febc:	487a      	ldr	r0, [pc, #488]	; (80100a8 <etharp_query+0x264>)
 800febe:	f00a fe71 	bl	801aba4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fec2:	8a7b      	ldrh	r3, [r7, #18]
 800fec4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fec6:	7c7a      	ldrb	r2, [r7, #17]
 800fec8:	4978      	ldr	r1, [pc, #480]	; (80100ac <etharp_query+0x268>)
 800feca:	4613      	mov	r3, r2
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	4413      	add	r3, r2
 800fed0:	00db      	lsls	r3, r3, #3
 800fed2:	440b      	add	r3, r1
 800fed4:	3314      	adds	r3, #20
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d115      	bne.n	800ff08 <etharp_query+0xc4>
    is_new_entry = 1;
 800fedc:	2301      	movs	r3, #1
 800fede:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fee0:	7c7a      	ldrb	r2, [r7, #17]
 800fee2:	4972      	ldr	r1, [pc, #456]	; (80100ac <etharp_query+0x268>)
 800fee4:	4613      	mov	r3, r2
 800fee6:	005b      	lsls	r3, r3, #1
 800fee8:	4413      	add	r3, r2
 800feea:	00db      	lsls	r3, r3, #3
 800feec:	440b      	add	r3, r1
 800feee:	3314      	adds	r3, #20
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fef4:	7c7a      	ldrb	r2, [r7, #17]
 800fef6:	496d      	ldr	r1, [pc, #436]	; (80100ac <etharp_query+0x268>)
 800fef8:	4613      	mov	r3, r2
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	4413      	add	r3, r2
 800fefe:	00db      	lsls	r3, r3, #3
 800ff00:	440b      	add	r3, r1
 800ff02:	3308      	adds	r3, #8
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ff08:	7c7a      	ldrb	r2, [r7, #17]
 800ff0a:	4968      	ldr	r1, [pc, #416]	; (80100ac <etharp_query+0x268>)
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	005b      	lsls	r3, r3, #1
 800ff10:	4413      	add	r3, r2
 800ff12:	00db      	lsls	r3, r3, #3
 800ff14:	440b      	add	r3, r1
 800ff16:	3314      	adds	r3, #20
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d011      	beq.n	800ff42 <etharp_query+0xfe>
 800ff1e:	7c7a      	ldrb	r2, [r7, #17]
 800ff20:	4962      	ldr	r1, [pc, #392]	; (80100ac <etharp_query+0x268>)
 800ff22:	4613      	mov	r3, r2
 800ff24:	005b      	lsls	r3, r3, #1
 800ff26:	4413      	add	r3, r2
 800ff28:	00db      	lsls	r3, r3, #3
 800ff2a:	440b      	add	r3, r1
 800ff2c:	3314      	adds	r3, #20
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d806      	bhi.n	800ff42 <etharp_query+0xfe>
 800ff34:	4b5a      	ldr	r3, [pc, #360]	; (80100a0 <etharp_query+0x25c>)
 800ff36:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ff3a:	495d      	ldr	r1, [pc, #372]	; (80100b0 <etharp_query+0x26c>)
 800ff3c:	485a      	ldr	r0, [pc, #360]	; (80100a8 <etharp_query+0x264>)
 800ff3e:	f00a fe31 	bl	801aba4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d102      	bne.n	800ff4e <etharp_query+0x10a>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10c      	bne.n	800ff68 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ff4e:	68b9      	ldr	r1, [r7, #8]
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f000 f963 	bl	801021c <etharp_request>
 800ff56:	4603      	mov	r3, r0
 800ff58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d102      	bne.n	800ff68 <etharp_query+0x124>
      return result;
 800ff62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ff66:	e096      	b.n	8010096 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <etharp_query+0x138>
 800ff6e:	4b4c      	ldr	r3, [pc, #304]	; (80100a0 <etharp_query+0x25c>)
 800ff70:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ff74:	494f      	ldr	r1, [pc, #316]	; (80100b4 <etharp_query+0x270>)
 800ff76:	484c      	ldr	r0, [pc, #304]	; (80100a8 <etharp_query+0x264>)
 800ff78:	f00a fe14 	bl	801aba4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ff7c:	7c7a      	ldrb	r2, [r7, #17]
 800ff7e:	494b      	ldr	r1, [pc, #300]	; (80100ac <etharp_query+0x268>)
 800ff80:	4613      	mov	r3, r2
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	4413      	add	r3, r2
 800ff86:	00db      	lsls	r3, r3, #3
 800ff88:	440b      	add	r3, r1
 800ff8a:	3314      	adds	r3, #20
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d917      	bls.n	800ffc2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ff92:	4a49      	ldr	r2, [pc, #292]	; (80100b8 <etharp_query+0x274>)
 800ff94:	7c7b      	ldrb	r3, [r7, #17]
 800ff96:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ff98:	7c7a      	ldrb	r2, [r7, #17]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	005b      	lsls	r3, r3, #1
 800ff9e:	4413      	add	r3, r2
 800ffa0:	00db      	lsls	r3, r3, #3
 800ffa2:	3308      	adds	r3, #8
 800ffa4:	4a41      	ldr	r2, [pc, #260]	; (80100ac <etharp_query+0x268>)
 800ffa6:	4413      	add	r3, r2
 800ffa8:	3304      	adds	r3, #4
 800ffaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ffae:	9200      	str	r2, [sp, #0]
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	6879      	ldr	r1, [r7, #4]
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f00a fb47 	bl	801a648 <ethernet_output>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffc0:	e067      	b.n	8010092 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ffc2:	7c7a      	ldrb	r2, [r7, #17]
 800ffc4:	4939      	ldr	r1, [pc, #228]	; (80100ac <etharp_query+0x268>)
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	4413      	add	r3, r2
 800ffcc:	00db      	lsls	r3, r3, #3
 800ffce:	440b      	add	r3, r1
 800ffd0:	3314      	adds	r3, #20
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d15c      	bne.n	8010092 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ffe0:	e01c      	b.n	801001c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	895a      	ldrh	r2, [r3, #10]
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	891b      	ldrh	r3, [r3, #8]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d10a      	bne.n	8010004 <etharp_query+0x1c0>
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d006      	beq.n	8010004 <etharp_query+0x1c0>
 800fff6:	4b2a      	ldr	r3, [pc, #168]	; (80100a0 <etharp_query+0x25c>)
 800fff8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fffc:	492f      	ldr	r1, [pc, #188]	; (80100bc <etharp_query+0x278>)
 800fffe:	482a      	ldr	r0, [pc, #168]	; (80100a8 <etharp_query+0x264>)
 8010000:	f00a fdd0 	bl	801aba4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	7b1b      	ldrb	r3, [r3, #12]
 8010008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <etharp_query+0x1d2>
        copy_needed = 1;
 8010010:	2301      	movs	r3, #1
 8010012:	61bb      	str	r3, [r7, #24]
        break;
 8010014:	e005      	b.n	8010022 <etharp_query+0x1de>
      }
      p = p->next;
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1df      	bne.n	800ffe2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d007      	beq.n	8010038 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801002e:	200e      	movs	r0, #14
 8010030:	f003 faf0 	bl	8013614 <pbuf_clone>
 8010034:	61f8      	str	r0, [r7, #28]
 8010036:	e004      	b.n	8010042 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801003c:	69f8      	ldr	r0, [r7, #28]
 801003e:	f003 f917 	bl	8013270 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d021      	beq.n	801008c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010048:	7c7a      	ldrb	r2, [r7, #17]
 801004a:	4918      	ldr	r1, [pc, #96]	; (80100ac <etharp_query+0x268>)
 801004c:	4613      	mov	r3, r2
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	4413      	add	r3, r2
 8010052:	00db      	lsls	r3, r3, #3
 8010054:	440b      	add	r3, r1
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d00a      	beq.n	8010072 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801005c:	7c7a      	ldrb	r2, [r7, #17]
 801005e:	4913      	ldr	r1, [pc, #76]	; (80100ac <etharp_query+0x268>)
 8010060:	4613      	mov	r3, r2
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	4413      	add	r3, r2
 8010066:	00db      	lsls	r3, r3, #3
 8010068:	440b      	add	r3, r1
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4618      	mov	r0, r3
 801006e:	f003 f859 	bl	8013124 <pbuf_free>
      }
      arp_table[i].q = p;
 8010072:	7c7a      	ldrb	r2, [r7, #17]
 8010074:	490d      	ldr	r1, [pc, #52]	; (80100ac <etharp_query+0x268>)
 8010076:	4613      	mov	r3, r2
 8010078:	005b      	lsls	r3, r3, #1
 801007a:	4413      	add	r3, r2
 801007c:	00db      	lsls	r3, r3, #3
 801007e:	440b      	add	r3, r1
 8010080:	69fa      	ldr	r2, [r7, #28]
 8010082:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010084:	2300      	movs	r3, #0
 8010086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801008a:	e002      	b.n	8010092 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801008c:	23ff      	movs	r3, #255	; 0xff
 801008e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010092:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010096:	4618      	mov	r0, r3
 8010098:	3728      	adds	r7, #40	; 0x28
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	0801d7ac 	.word	0x0801d7ac
 80100a4:	0801d9dc 	.word	0x0801d9dc
 80100a8:	0801d8a8 	.word	0x0801d8a8
 80100ac:	20008490 	.word	0x20008490
 80100b0:	0801d9ec 	.word	0x0801d9ec
 80100b4:	0801d9d0 	.word	0x0801d9d0
 80100b8:	20008580 	.word	0x20008580
 80100bc:	0801da14 	.word	0x0801da14

080100c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08a      	sub	sp, #40	; 0x28
 80100c4:	af02      	add	r7, sp, #8
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
 80100cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d106      	bne.n	80100e6 <etharp_raw+0x26>
 80100d8:	4b3a      	ldr	r3, [pc, #232]	; (80101c4 <etharp_raw+0x104>)
 80100da:	f240 4257 	movw	r2, #1111	; 0x457
 80100de:	493a      	ldr	r1, [pc, #232]	; (80101c8 <etharp_raw+0x108>)
 80100e0:	483a      	ldr	r0, [pc, #232]	; (80101cc <etharp_raw+0x10c>)
 80100e2:	f00a fd5f 	bl	801aba4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80100e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100ea:	211c      	movs	r1, #28
 80100ec:	200e      	movs	r0, #14
 80100ee:	f002 fd03 	bl	8012af8 <pbuf_alloc>
 80100f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d102      	bne.n	8010100 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80100fa:	f04f 33ff 	mov.w	r3, #4294967295
 80100fe:	e05d      	b.n	80101bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	895b      	ldrh	r3, [r3, #10]
 8010104:	2b1b      	cmp	r3, #27
 8010106:	d806      	bhi.n	8010116 <etharp_raw+0x56>
 8010108:	4b2e      	ldr	r3, [pc, #184]	; (80101c4 <etharp_raw+0x104>)
 801010a:	f240 4262 	movw	r2, #1122	; 0x462
 801010e:	4930      	ldr	r1, [pc, #192]	; (80101d0 <etharp_raw+0x110>)
 8010110:	482e      	ldr	r0, [pc, #184]	; (80101cc <etharp_raw+0x10c>)
 8010112:	f00a fd47 	bl	801aba4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801011c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801011e:	4618      	mov	r0, r3
 8010120:	f001 fb66 	bl	80117f0 <lwip_htons>
 8010124:	4603      	mov	r3, r0
 8010126:	461a      	mov	r2, r3
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010132:	2b06      	cmp	r3, #6
 8010134:	d006      	beq.n	8010144 <etharp_raw+0x84>
 8010136:	4b23      	ldr	r3, [pc, #140]	; (80101c4 <etharp_raw+0x104>)
 8010138:	f240 4269 	movw	r2, #1129	; 0x469
 801013c:	4925      	ldr	r1, [pc, #148]	; (80101d4 <etharp_raw+0x114>)
 801013e:	4823      	ldr	r0, [pc, #140]	; (80101cc <etharp_raw+0x10c>)
 8010140:	f00a fd30 	bl	801aba4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	3308      	adds	r3, #8
 8010148:	2206      	movs	r2, #6
 801014a:	6839      	ldr	r1, [r7, #0]
 801014c:	4618      	mov	r0, r3
 801014e:	f00a fcf9 	bl	801ab44 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	3312      	adds	r3, #18
 8010156:	2206      	movs	r2, #6
 8010158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801015a:	4618      	mov	r0, r3
 801015c:	f00a fcf2 	bl	801ab44 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	330e      	adds	r3, #14
 8010164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010166:	6812      	ldr	r2, [r2, #0]
 8010168:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	3318      	adds	r3, #24
 801016e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010170:	6812      	ldr	r2, [r2, #0]
 8010172:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	2200      	movs	r2, #0
 8010178:	701a      	strb	r2, [r3, #0]
 801017a:	2200      	movs	r2, #0
 801017c:	f042 0201 	orr.w	r2, r2, #1
 8010180:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	2200      	movs	r2, #0
 8010186:	f042 0208 	orr.w	r2, r2, #8
 801018a:	709a      	strb	r2, [r3, #2]
 801018c:	2200      	movs	r2, #0
 801018e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	2206      	movs	r2, #6
 8010194:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2204      	movs	r2, #4
 801019a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801019c:	f640 0306 	movw	r3, #2054	; 0x806
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	69b9      	ldr	r1, [r7, #24]
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f00a fa4d 	bl	801a648 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80101ae:	69b8      	ldr	r0, [r7, #24]
 80101b0:	f002 ffb8 	bl	8013124 <pbuf_free>
  p = NULL;
 80101b4:	2300      	movs	r3, #0
 80101b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80101b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3720      	adds	r7, #32
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	0801d7ac 	.word	0x0801d7ac
 80101c8:	0801d980 	.word	0x0801d980
 80101cc:	0801d8a8 	.word	0x0801d8a8
 80101d0:	0801da30 	.word	0x0801da30
 80101d4:	0801da64 	.word	0x0801da64

080101d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b088      	sub	sp, #32
 80101dc:	af04      	add	r7, sp, #16
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80101f4:	2201      	movs	r2, #1
 80101f6:	9203      	str	r2, [sp, #12]
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	9202      	str	r2, [sp, #8]
 80101fc:	4a06      	ldr	r2, [pc, #24]	; (8010218 <etharp_request_dst+0x40>)
 80101fe:	9201      	str	r2, [sp, #4]
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	4603      	mov	r3, r0
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f7ff ff5a 	bl	80100c0 <etharp_raw>
 801020c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	08021060 	.word	0x08021060

0801021c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010226:	4a05      	ldr	r2, [pc, #20]	; (801023c <etharp_request+0x20>)
 8010228:	6839      	ldr	r1, [r7, #0]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7ff ffd4 	bl	80101d8 <etharp_request_dst>
 8010230:	4603      	mov	r3, r0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	08021058 	.word	0x08021058

08010240 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b08e      	sub	sp, #56	; 0x38
 8010244:	af04      	add	r7, sp, #16
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801024a:	4b82      	ldr	r3, [pc, #520]	; (8010454 <icmp_input+0x214>)
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	f003 030f 	and.w	r3, r3, #15
 8010258:	b2db      	uxtb	r3, r3
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	b2db      	uxtb	r3, r3
 801025e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010262:	2b13      	cmp	r3, #19
 8010264:	f240 80de 	bls.w	8010424 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	895b      	ldrh	r3, [r3, #10]
 801026c:	2b03      	cmp	r3, #3
 801026e:	f240 80db 	bls.w	8010428 <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801027c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 80c8 	beq.w	8010416 <icmp_input+0x1d6>
 8010286:	2b08      	cmp	r3, #8
 8010288:	f040 80c8 	bne.w	801041c <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801028c:	4b72      	ldr	r3, [pc, #456]	; (8010458 <icmp_input+0x218>)
 801028e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010290:	4b70      	ldr	r3, [pc, #448]	; (8010454 <icmp_input+0x214>)
 8010292:	695b      	ldr	r3, [r3, #20]
 8010294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010298:	2be0      	cmp	r3, #224	; 0xe0
 801029a:	f000 80cc 	beq.w	8010436 <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801029e:	4b6d      	ldr	r3, [pc, #436]	; (8010454 <icmp_input+0x214>)
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	4a6c      	ldr	r2, [pc, #432]	; (8010454 <icmp_input+0x214>)
 80102a4:	6812      	ldr	r2, [r2, #0]
 80102a6:	4611      	mov	r1, r2
 80102a8:	4618      	mov	r0, r3
 80102aa:	f000 fc27 	bl	8010afc <ip4_addr_isbroadcast_u32>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f040 80c2 	bne.w	801043a <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	891b      	ldrh	r3, [r3, #8]
 80102ba:	2b07      	cmp	r3, #7
 80102bc:	f240 80b6 	bls.w	801042c <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80102c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102c2:	330e      	adds	r3, #14
 80102c4:	4619      	mov	r1, r3
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f002 fe64 	bl	8012f94 <pbuf_add_header>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d04b      	beq.n	801036a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	891a      	ldrh	r2, [r3, #8]
 80102d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102d8:	4413      	add	r3, r2
 80102da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	891b      	ldrh	r3, [r3, #8]
 80102e0:	8b7a      	ldrh	r2, [r7, #26]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	f0c0 80ab 	bcc.w	801043e <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80102e8:	8b7b      	ldrh	r3, [r7, #26]
 80102ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102ee:	4619      	mov	r1, r3
 80102f0:	200e      	movs	r0, #14
 80102f2:	f002 fc01 	bl	8012af8 <pbuf_alloc>
 80102f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f000 80a1 	beq.w	8010442 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	895b      	ldrh	r3, [r3, #10]
 8010304:	461a      	mov	r2, r3
 8010306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010308:	3308      	adds	r3, #8
 801030a:	429a      	cmp	r2, r3
 801030c:	d203      	bcs.n	8010316 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801030e:	6978      	ldr	r0, [r7, #20]
 8010310:	f002 ff08 	bl	8013124 <pbuf_free>
          goto icmperr;
 8010314:	e096      	b.n	8010444 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801031c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801031e:	4618      	mov	r0, r3
 8010320:	f00a fc10 	bl	801ab44 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010326:	4619      	mov	r1, r3
 8010328:	6978      	ldr	r0, [r7, #20]
 801032a:	f002 fe43 	bl	8012fb4 <pbuf_remove_header>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d009      	beq.n	8010348 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010334:	4b49      	ldr	r3, [pc, #292]	; (801045c <icmp_input+0x21c>)
 8010336:	22b6      	movs	r2, #182	; 0xb6
 8010338:	4949      	ldr	r1, [pc, #292]	; (8010460 <icmp_input+0x220>)
 801033a:	484a      	ldr	r0, [pc, #296]	; (8010464 <icmp_input+0x224>)
 801033c:	f00a fc32 	bl	801aba4 <iprintf>
          pbuf_free(r);
 8010340:	6978      	ldr	r0, [r7, #20]
 8010342:	f002 feef 	bl	8013124 <pbuf_free>
          goto icmperr;
 8010346:	e07d      	b.n	8010444 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010348:	6879      	ldr	r1, [r7, #4]
 801034a:	6978      	ldr	r0, [r7, #20]
 801034c:	f003 f81e 	bl	801338c <pbuf_copy>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d003      	beq.n	801035e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010356:	6978      	ldr	r0, [r7, #20]
 8010358:	f002 fee4 	bl	8013124 <pbuf_free>
          goto icmperr;
 801035c:	e072      	b.n	8010444 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f002 fee0 	bl	8013124 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	607b      	str	r3, [r7, #4]
 8010368:	e00f      	b.n	801038a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801036a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801036c:	330e      	adds	r3, #14
 801036e:	4619      	mov	r1, r3
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f002 fe1f 	bl	8012fb4 <pbuf_remove_header>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d006      	beq.n	801038a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801037c:	4b37      	ldr	r3, [pc, #220]	; (801045c <icmp_input+0x21c>)
 801037e:	22c7      	movs	r2, #199	; 0xc7
 8010380:	4939      	ldr	r1, [pc, #228]	; (8010468 <icmp_input+0x228>)
 8010382:	4838      	ldr	r0, [pc, #224]	; (8010464 <icmp_input+0x224>)
 8010384:	f00a fc0e 	bl	801aba4 <iprintf>
          goto icmperr;
 8010388:	e05c      	b.n	8010444 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010392:	4619      	mov	r1, r3
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f002 fdfd 	bl	8012f94 <pbuf_add_header>
 801039a:	4603      	mov	r3, r0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d13c      	bne.n	801041a <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80103ae:	4b29      	ldr	r3, [pc, #164]	; (8010454 <icmp_input+0x214>)
 80103b0:	691a      	ldr	r2, [r3, #16]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	2200      	movs	r2, #0
 80103ba:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	885b      	ldrh	r3, [r3, #2]
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d907      	bls.n	80103da <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	885b      	ldrh	r3, [r3, #2]
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	3309      	adds	r3, #9
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	805a      	strh	r2, [r3, #2]
 80103d8:	e006      	b.n	80103e8 <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	885b      	ldrh	r3, [r3, #2]
 80103de:	b29b      	uxth	r3, r3
 80103e0:	3308      	adds	r3, #8
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	22ff      	movs	r2, #255	; 0xff
 80103ec:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	729a      	strb	r2, [r3, #10]
 80103f4:	2200      	movs	r2, #0
 80103f6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	9302      	str	r3, [sp, #8]
 80103fc:	2301      	movs	r3, #1
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	2300      	movs	r3, #0
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	23ff      	movs	r3, #255	; 0xff
 8010406:	2200      	movs	r2, #0
 8010408:	69f9      	ldr	r1, [r7, #28]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f000 fa9e 	bl	801094c <ip4_output_if>
 8010410:	4603      	mov	r3, r0
 8010412:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010414:	e001      	b.n	801041a <icmp_input+0x1da>
      break;
 8010416:	bf00      	nop
 8010418:	e000      	b.n	801041c <icmp_input+0x1dc>
      break;
 801041a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f002 fe81 	bl	8013124 <pbuf_free>
  return;
 8010422:	e013      	b.n	801044c <icmp_input+0x20c>
    goto lenerr;
 8010424:	bf00      	nop
 8010426:	e002      	b.n	801042e <icmp_input+0x1ee>
    goto lenerr;
 8010428:	bf00      	nop
 801042a:	e000      	b.n	801042e <icmp_input+0x1ee>
        goto lenerr;
 801042c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f002 fe78 	bl	8013124 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010434:	e00a      	b.n	801044c <icmp_input+0x20c>
        goto icmperr;
 8010436:	bf00      	nop
 8010438:	e004      	b.n	8010444 <icmp_input+0x204>
        goto icmperr;
 801043a:	bf00      	nop
 801043c:	e002      	b.n	8010444 <icmp_input+0x204>
          goto icmperr;
 801043e:	bf00      	nop
 8010440:	e000      	b.n	8010444 <icmp_input+0x204>
          goto icmperr;
 8010442:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f002 fe6d 	bl	8013124 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801044a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801044c:	3728      	adds	r7, #40	; 0x28
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	2000889c 	.word	0x2000889c
 8010458:	200088b0 	.word	0x200088b0
 801045c:	0801daa8 	.word	0x0801daa8
 8010460:	0801db60 	.word	0x0801db60
 8010464:	0801db98 	.word	0x0801db98
 8010468:	0801dbc0 	.word	0x0801dbc0

0801046c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	460b      	mov	r3, r1
 8010476:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010478:	78fb      	ldrb	r3, [r7, #3]
 801047a:	461a      	mov	r2, r3
 801047c:	2103      	movs	r1, #3
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 f814 	bl	80104ac <icmp_send_response>
}
 8010484:	bf00      	nop
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	461a      	mov	r2, r3
 801049c:	210b      	movs	r1, #11
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f804 	bl	80104ac <icmp_send_response>
}
 80104a4:	bf00      	nop
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b08c      	sub	sp, #48	; 0x30
 80104b0:	af04      	add	r7, sp, #16
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	460b      	mov	r3, r1
 80104b6:	70fb      	strb	r3, [r7, #3]
 80104b8:	4613      	mov	r3, r2
 80104ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80104bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104c0:	2124      	movs	r1, #36	; 0x24
 80104c2:	2022      	movs	r0, #34	; 0x22
 80104c4:	f002 fb18 	bl	8012af8 <pbuf_alloc>
 80104c8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d056      	beq.n	801057e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	895b      	ldrh	r3, [r3, #10]
 80104d4:	2b23      	cmp	r3, #35	; 0x23
 80104d6:	d806      	bhi.n	80104e6 <icmp_send_response+0x3a>
 80104d8:	4b2b      	ldr	r3, [pc, #172]	; (8010588 <icmp_send_response+0xdc>)
 80104da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80104de:	492b      	ldr	r1, [pc, #172]	; (801058c <icmp_send_response+0xe0>)
 80104e0:	482b      	ldr	r0, [pc, #172]	; (8010590 <icmp_send_response+0xe4>)
 80104e2:	f00a fb5f 	bl	801aba4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	78fa      	ldrb	r2, [r7, #3]
 80104f6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	78ba      	ldrb	r2, [r7, #2]
 80104fc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2200      	movs	r2, #0
 8010502:	711a      	strb	r2, [r3, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	2200      	movs	r2, #0
 801050c:	719a      	strb	r2, [r3, #6]
 801050e:	2200      	movs	r2, #0
 8010510:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	f103 0008 	add.w	r0, r3, #8
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	221c      	movs	r2, #28
 8010520:	4619      	mov	r1, r3
 8010522:	f00a fb0f 	bl	801ab44 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801052c:	f107 030c 	add.w	r3, r7, #12
 8010530:	4618      	mov	r0, r3
 8010532:	f000 f82f 	bl	8010594 <ip4_route>
 8010536:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d01b      	beq.n	8010576 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	2200      	movs	r2, #0
 8010542:	709a      	strb	r2, [r3, #2]
 8010544:	2200      	movs	r2, #0
 8010546:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	895b      	ldrh	r3, [r3, #10]
 801054c:	4619      	mov	r1, r3
 801054e:	6978      	ldr	r0, [r7, #20]
 8010550:	f001 f9d9 	bl	8011906 <inet_chksum>
 8010554:	4603      	mov	r3, r0
 8010556:	461a      	mov	r2, r3
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801055c:	f107 020c 	add.w	r2, r7, #12
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	9302      	str	r3, [sp, #8]
 8010564:	2301      	movs	r3, #1
 8010566:	9301      	str	r3, [sp, #4]
 8010568:	2300      	movs	r3, #0
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	23ff      	movs	r3, #255	; 0xff
 801056e:	2100      	movs	r1, #0
 8010570:	69f8      	ldr	r0, [r7, #28]
 8010572:	f000 f9eb 	bl	801094c <ip4_output_if>
  }
  pbuf_free(q);
 8010576:	69f8      	ldr	r0, [r7, #28]
 8010578:	f002 fdd4 	bl	8013124 <pbuf_free>
 801057c:	e000      	b.n	8010580 <icmp_send_response+0xd4>
    return;
 801057e:	bf00      	nop
}
 8010580:	3720      	adds	r7, #32
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	0801daa8 	.word	0x0801daa8
 801058c:	0801dbf4 	.word	0x0801dbf4
 8010590:	0801db98 	.word	0x0801db98

08010594 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801059c:	4b33      	ldr	r3, [pc, #204]	; (801066c <ip4_route+0xd8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	60fb      	str	r3, [r7, #12]
 80105a2:	e036      	b.n	8010612 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105aa:	f003 0301 	and.w	r3, r3, #1
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d02b      	beq.n	801060c <ip4_route+0x78>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105ba:	089b      	lsrs	r3, r3, #2
 80105bc:	f003 0301 	and.w	r3, r3, #1
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d022      	beq.n	801060c <ip4_route+0x78>
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	3304      	adds	r3, #4
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d01d      	beq.n	801060c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	3304      	adds	r3, #4
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	405a      	eors	r2, r3
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	3308      	adds	r3, #8
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	4013      	ands	r3, r2
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d101      	bne.n	80105ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	e038      	b.n	801065e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105f2:	f003 0302 	and.w	r3, r3, #2
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d108      	bne.n	801060c <ip4_route+0x78>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	330c      	adds	r3, #12
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	429a      	cmp	r2, r3
 8010606:	d101      	bne.n	801060c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	e028      	b.n	801065e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d1c5      	bne.n	80105a4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010618:	4b15      	ldr	r3, [pc, #84]	; (8010670 <ip4_route+0xdc>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d01a      	beq.n	8010656 <ip4_route+0xc2>
 8010620:	4b13      	ldr	r3, [pc, #76]	; (8010670 <ip4_route+0xdc>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010628:	f003 0301 	and.w	r3, r3, #1
 801062c:	2b00      	cmp	r3, #0
 801062e:	d012      	beq.n	8010656 <ip4_route+0xc2>
 8010630:	4b0f      	ldr	r3, [pc, #60]	; (8010670 <ip4_route+0xdc>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010638:	f003 0304 	and.w	r3, r3, #4
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00a      	beq.n	8010656 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010640:	4b0b      	ldr	r3, [pc, #44]	; (8010670 <ip4_route+0xdc>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	3304      	adds	r3, #4
 8010646:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010648:	2b00      	cmp	r3, #0
 801064a:	d004      	beq.n	8010656 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	b2db      	uxtb	r3, r3
 8010652:	2b7f      	cmp	r3, #127	; 0x7f
 8010654:	d101      	bne.n	801065a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010656:	2300      	movs	r3, #0
 8010658:	e001      	b.n	801065e <ip4_route+0xca>
  }

  return netif_default;
 801065a:	4b05      	ldr	r3, [pc, #20]	; (8010670 <ip4_route+0xdc>)
 801065c:	681b      	ldr	r3, [r3, #0]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3714      	adds	r7, #20
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr
 801066a:	bf00      	nop
 801066c:	2000c654 	.word	0x2000c654
 8010670:	2000c658 	.word	0x2000c658

08010674 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010682:	f003 0301 	and.w	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d016      	beq.n	80106ba <ip4_input_accept+0x46>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	3304      	adds	r3, #4
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d011      	beq.n	80106ba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010696:	4b0b      	ldr	r3, [pc, #44]	; (80106c4 <ip4_input_accept+0x50>)
 8010698:	695a      	ldr	r2, [r3, #20]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	3304      	adds	r3, #4
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d008      	beq.n	80106b6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80106a4:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <ip4_input_accept+0x50>)
 80106a6:	695b      	ldr	r3, [r3, #20]
 80106a8:	6879      	ldr	r1, [r7, #4]
 80106aa:	4618      	mov	r0, r3
 80106ac:	f000 fa26 	bl	8010afc <ip4_addr_isbroadcast_u32>
 80106b0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80106b6:	2301      	movs	r3, #1
 80106b8:	e000      	b.n	80106bc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80106ba:	2300      	movs	r3, #0
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	2000889c 	.word	0x2000889c

080106c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b088      	sub	sp, #32
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80106d2:	2301      	movs	r3, #1
 80106d4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	091b      	lsrs	r3, r3, #4
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d004      	beq.n	80106f2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f002 fd1b 	bl	8013124 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e123      	b.n	801093a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	f003 030f 	and.w	r3, r3, #15
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	885b      	ldrh	r3, [r3, #2]
 8010706:	b29b      	uxth	r3, r3
 8010708:	4618      	mov	r0, r3
 801070a:	f001 f871 	bl	80117f0 <lwip_htons>
 801070e:	4603      	mov	r3, r0
 8010710:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	891b      	ldrh	r3, [r3, #8]
 8010716:	8a3a      	ldrh	r2, [r7, #16]
 8010718:	429a      	cmp	r2, r3
 801071a:	d204      	bcs.n	8010726 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801071c:	8a3b      	ldrh	r3, [r7, #16]
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f002 fb47 	bl	8012db4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	895b      	ldrh	r3, [r3, #10]
 801072a:	8a7a      	ldrh	r2, [r7, #18]
 801072c:	429a      	cmp	r2, r3
 801072e:	d807      	bhi.n	8010740 <ip4_input+0x78>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	891b      	ldrh	r3, [r3, #8]
 8010734:	8a3a      	ldrh	r2, [r7, #16]
 8010736:	429a      	cmp	r2, r3
 8010738:	d802      	bhi.n	8010740 <ip4_input+0x78>
 801073a:	8a7b      	ldrh	r3, [r7, #18]
 801073c:	2b13      	cmp	r3, #19
 801073e:	d804      	bhi.n	801074a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f002 fcef 	bl	8013124 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	e0f7      	b.n	801093a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	4a7d      	ldr	r2, [pc, #500]	; (8010944 <ip4_input+0x27c>)
 8010750:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	4a7b      	ldr	r2, [pc, #492]	; (8010944 <ip4_input+0x27c>)
 8010758:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801075a:	4b7a      	ldr	r3, [pc, #488]	; (8010944 <ip4_input+0x27c>)
 801075c:	695b      	ldr	r3, [r3, #20]
 801075e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010762:	2be0      	cmp	r3, #224	; 0xe0
 8010764:	d112      	bne.n	801078c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801076c:	f003 0301 	and.w	r3, r3, #1
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b00      	cmp	r3, #0
 8010774:	d007      	beq.n	8010786 <ip4_input+0xbe>
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	3304      	adds	r3, #4
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d002      	beq.n	8010786 <ip4_input+0xbe>
      netif = inp;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	61bb      	str	r3, [r7, #24]
 8010784:	e02a      	b.n	80107dc <ip4_input+0x114>
    } else {
      netif = NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	61bb      	str	r3, [r7, #24]
 801078a:	e027      	b.n	80107dc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801078c:	6838      	ldr	r0, [r7, #0]
 801078e:	f7ff ff71 	bl	8010674 <ip4_input_accept>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <ip4_input+0xd6>
      netif = inp;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	61bb      	str	r3, [r7, #24]
 801079c:	e01e      	b.n	80107dc <ip4_input+0x114>
    } else {
      netif = NULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80107a2:	4b68      	ldr	r3, [pc, #416]	; (8010944 <ip4_input+0x27c>)
 80107a4:	695b      	ldr	r3, [r3, #20]
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b7f      	cmp	r3, #127	; 0x7f
 80107aa:	d017      	beq.n	80107dc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80107ac:	4b66      	ldr	r3, [pc, #408]	; (8010948 <ip4_input+0x280>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	61bb      	str	r3, [r7, #24]
 80107b2:	e00e      	b.n	80107d2 <ip4_input+0x10a>
          if (netif == inp) {
 80107b4:	69ba      	ldr	r2, [r7, #24]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d006      	beq.n	80107ca <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80107bc:	69b8      	ldr	r0, [r7, #24]
 80107be:	f7ff ff59 	bl	8010674 <ip4_input_accept>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d108      	bne.n	80107da <ip4_input+0x112>
 80107c8:	e000      	b.n	80107cc <ip4_input+0x104>
            continue;
 80107ca:	bf00      	nop
        NETIF_FOREACH(netif) {
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	61bb      	str	r3, [r7, #24]
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1ed      	bne.n	80107b4 <ip4_input+0xec>
 80107d8:	e000      	b.n	80107dc <ip4_input+0x114>
            break;
 80107da:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80107dc:	69bb      	ldr	r3, [r7, #24]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d111      	bne.n	8010806 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	7a5b      	ldrb	r3, [r3, #9]
 80107e6:	2b11      	cmp	r3, #17
 80107e8:	d10d      	bne.n	8010806 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80107ea:	8a7b      	ldrh	r3, [r7, #18]
 80107ec:	69fa      	ldr	r2, [r7, #28]
 80107ee:	4413      	add	r3, r2
 80107f0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	885b      	ldrh	r3, [r3, #2]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80107fc:	d103      	bne.n	8010806 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d017      	beq.n	801083c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801080c:	4b4d      	ldr	r3, [pc, #308]	; (8010944 <ip4_input+0x27c>)
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d013      	beq.n	801083c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010814:	4b4b      	ldr	r3, [pc, #300]	; (8010944 <ip4_input+0x27c>)
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	6839      	ldr	r1, [r7, #0]
 801081a:	4618      	mov	r0, r3
 801081c:	f000 f96e 	bl	8010afc <ip4_addr_isbroadcast_u32>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d105      	bne.n	8010832 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010826:	4b47      	ldr	r3, [pc, #284]	; (8010944 <ip4_input+0x27c>)
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801082e:	2be0      	cmp	r3, #224	; 0xe0
 8010830:	d104      	bne.n	801083c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f002 fc76 	bl	8013124 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	e07e      	b.n	801093a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d104      	bne.n	801084c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f002 fc6e 	bl	8013124 <pbuf_free>
    return ERR_OK;
 8010848:	2300      	movs	r3, #0
 801084a:	e076      	b.n	801093a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	88db      	ldrh	r3, [r3, #6]
 8010850:	b29b      	uxth	r3, r3
 8010852:	461a      	mov	r2, r3
 8010854:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010858:	4013      	ands	r3, r2
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00b      	beq.n	8010876 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 fc92 	bl	8011188 <ip4_reass>
 8010864:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d101      	bne.n	8010870 <ip4_input+0x1a8>
      return ERR_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	e064      	b.n	801093a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010876:	4a33      	ldr	r2, [pc, #204]	; (8010944 <ip4_input+0x27c>)
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801087c:	4a31      	ldr	r2, [pc, #196]	; (8010944 <ip4_input+0x27c>)
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010882:	4a30      	ldr	r2, [pc, #192]	; (8010944 <ip4_input+0x27c>)
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	f003 030f 	and.w	r3, r3, #15
 8010890:	b2db      	uxtb	r3, r3
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	b2db      	uxtb	r3, r3
 8010896:	b29a      	uxth	r2, r3
 8010898:	4b2a      	ldr	r3, [pc, #168]	; (8010944 <ip4_input+0x27c>)
 801089a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801089c:	8a7b      	ldrh	r3, [r7, #18]
 801089e:	4619      	mov	r1, r3
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f002 fb87 	bl	8012fb4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	7a5b      	ldrb	r3, [r3, #9]
 80108aa:	2b11      	cmp	r3, #17
 80108ac:	d006      	beq.n	80108bc <ip4_input+0x1f4>
 80108ae:	2b11      	cmp	r3, #17
 80108b0:	dc13      	bgt.n	80108da <ip4_input+0x212>
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d00c      	beq.n	80108d0 <ip4_input+0x208>
 80108b6:	2b06      	cmp	r3, #6
 80108b8:	d005      	beq.n	80108c6 <ip4_input+0x1fe>
 80108ba:	e00e      	b.n	80108da <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80108bc:	6839      	ldr	r1, [r7, #0]
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f009 f98a 	bl	8019bd8 <udp_input>
        break;
 80108c4:	e026      	b.n	8010914 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80108c6:	6839      	ldr	r1, [r7, #0]
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f004 fd45 	bl	8015358 <tcp_input>
        break;
 80108ce:	e021      	b.n	8010914 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fcb4 	bl	8010240 <icmp_input>
        break;
 80108d8:	e01c      	b.n	8010914 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80108da:	4b1a      	ldr	r3, [pc, #104]	; (8010944 <ip4_input+0x27c>)
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	69b9      	ldr	r1, [r7, #24]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f000 f90b 	bl	8010afc <ip4_addr_isbroadcast_u32>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10f      	bne.n	801090c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80108ec:	4b15      	ldr	r3, [pc, #84]	; (8010944 <ip4_input+0x27c>)
 80108ee:	695b      	ldr	r3, [r3, #20]
 80108f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80108f4:	2be0      	cmp	r3, #224	; 0xe0
 80108f6:	d009      	beq.n	801090c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80108f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108fc:	4619      	mov	r1, r3
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f002 fbcb 	bl	801309a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010904:	2102      	movs	r1, #2
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff fdb0 	bl	801046c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f002 fc09 	bl	8013124 <pbuf_free>
        break;
 8010912:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010914:	4b0b      	ldr	r3, [pc, #44]	; (8010944 <ip4_input+0x27c>)
 8010916:	2200      	movs	r2, #0
 8010918:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <ip4_input+0x27c>)
 801091c:	2200      	movs	r2, #0
 801091e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010920:	4b08      	ldr	r3, [pc, #32]	; (8010944 <ip4_input+0x27c>)
 8010922:	2200      	movs	r2, #0
 8010924:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010926:	4b07      	ldr	r3, [pc, #28]	; (8010944 <ip4_input+0x27c>)
 8010928:	2200      	movs	r2, #0
 801092a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801092c:	4b05      	ldr	r3, [pc, #20]	; (8010944 <ip4_input+0x27c>)
 801092e:	2200      	movs	r2, #0
 8010930:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010932:	4b04      	ldr	r3, [pc, #16]	; (8010944 <ip4_input+0x27c>)
 8010934:	2200      	movs	r2, #0
 8010936:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3720      	adds	r7, #32
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	2000889c 	.word	0x2000889c
 8010948:	2000c654 	.word	0x2000c654

0801094c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b08a      	sub	sp, #40	; 0x28
 8010950:	af04      	add	r7, sp, #16
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d009      	beq.n	8010978 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <ip4_output_if+0x26>
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d102      	bne.n	8010978 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010974:	3304      	adds	r3, #4
 8010976:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010978:	78fa      	ldrb	r2, [r7, #3]
 801097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097c:	9302      	str	r3, [sp, #8]
 801097e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010982:	9301      	str	r3, [sp, #4]
 8010984:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	4613      	mov	r3, r2
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	6979      	ldr	r1, [r7, #20]
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 f805 	bl	80109a0 <ip4_output_if_src>
 8010996:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010998:	4618      	mov	r0, r3
 801099a:	3718      	adds	r7, #24
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	7b9b      	ldrb	r3, [r3, #14]
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d006      	beq.n	80109c4 <ip4_output_if_src+0x24>
 80109b6:	4b4b      	ldr	r3, [pc, #300]	; (8010ae4 <ip4_output_if_src+0x144>)
 80109b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80109bc:	494a      	ldr	r1, [pc, #296]	; (8010ae8 <ip4_output_if_src+0x148>)
 80109be:	484b      	ldr	r0, [pc, #300]	; (8010aec <ip4_output_if_src+0x14c>)
 80109c0:	f00a f8f0 	bl	801aba4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d060      	beq.n	8010a8c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80109ca:	2314      	movs	r3, #20
 80109cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80109ce:	2114      	movs	r1, #20
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f002 fadf 	bl	8012f94 <pbuf_add_header>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80109dc:	f06f 0301 	mvn.w	r3, #1
 80109e0:	e07c      	b.n	8010adc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	895b      	ldrh	r3, [r3, #10]
 80109ec:	2b13      	cmp	r3, #19
 80109ee:	d806      	bhi.n	80109fe <ip4_output_if_src+0x5e>
 80109f0:	4b3c      	ldr	r3, [pc, #240]	; (8010ae4 <ip4_output_if_src+0x144>)
 80109f2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80109f6:	493e      	ldr	r1, [pc, #248]	; (8010af0 <ip4_output_if_src+0x150>)
 80109f8:	483c      	ldr	r0, [pc, #240]	; (8010aec <ip4_output_if_src+0x14c>)
 80109fa:	f00a f8d3 	bl	801aba4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	78fa      	ldrb	r2, [r7, #3]
 8010a02:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010a0a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010a14:	8b7b      	ldrh	r3, [r7, #26]
 8010a16:	089b      	lsrs	r3, r3, #2
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a2c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	891b      	ldrh	r3, [r3, #8]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f000 fedc 	bl	80117f0 <lwip_htons>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2200      	movs	r2, #0
 8010a44:	719a      	strb	r2, [r3, #6]
 8010a46:	2200      	movs	r2, #0
 8010a48:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010a4a:	4b2a      	ldr	r3, [pc, #168]	; (8010af4 <ip4_output_if_src+0x154>)
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f000 fece 	bl	80117f0 <lwip_htons>
 8010a54:	4603      	mov	r3, r0
 8010a56:	461a      	mov	r2, r3
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010a5c:	4b25      	ldr	r3, [pc, #148]	; (8010af4 <ip4_output_if_src+0x154>)
 8010a5e:	881b      	ldrh	r3, [r3, #0]
 8010a60:	3301      	adds	r3, #1
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	4b23      	ldr	r3, [pc, #140]	; (8010af4 <ip4_output_if_src+0x154>)
 8010a66:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d104      	bne.n	8010a78 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010a6e:	4b22      	ldr	r3, [pc, #136]	; (8010af8 <ip4_output_if_src+0x158>)
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	60da      	str	r2, [r3, #12]
 8010a76:	e003      	b.n	8010a80 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	2200      	movs	r2, #0
 8010a84:	729a      	strb	r2, [r3, #10]
 8010a86:	2200      	movs	r2, #0
 8010a88:	72da      	strb	r2, [r3, #11]
 8010a8a:	e00f      	b.n	8010aac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	895b      	ldrh	r3, [r3, #10]
 8010a90:	2b13      	cmp	r3, #19
 8010a92:	d802      	bhi.n	8010a9a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010a94:	f06f 0301 	mvn.w	r3, #1
 8010a98:	e020      	b.n	8010adc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	691b      	ldr	r3, [r3, #16]
 8010aa4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010aa6:	f107 0314 	add.w	r3, r7, #20
 8010aaa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00c      	beq.n	8010ace <ip4_output_if_src+0x12e>
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	891a      	ldrh	r2, [r3, #8]
 8010ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d906      	bls.n	8010ace <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f000 fd4d 	bl	8011564 <ip4_frag>
 8010aca:	4603      	mov	r3, r0
 8010acc:	e006      	b.n	8010adc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	695b      	ldr	r3, [r3, #20]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	68f9      	ldr	r1, [r7, #12]
 8010ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ad8:	4798      	blx	r3
 8010ada:	4603      	mov	r3, r0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	0801dc20 	.word	0x0801dc20
 8010ae8:	0801dcd8 	.word	0x0801dcd8
 8010aec:	0801dce4 	.word	0x0801dce4
 8010af0:	0801dd0c 	.word	0x0801dd0c
 8010af4:	20008582 	.word	0x20008582
 8010af8:	08020f30 	.word	0x08020f30

08010afc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b10:	d002      	beq.n	8010b18 <ip4_addr_isbroadcast_u32+0x1c>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d101      	bne.n	8010b1c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e02a      	b.n	8010b72 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b22:	f003 0302 	and.w	r3, r3, #2
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d101      	bne.n	8010b2e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	e021      	b.n	8010b72 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	3304      	adds	r3, #4
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d101      	bne.n	8010b3e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	e019      	b.n	8010b72 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	3304      	adds	r3, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	405a      	eors	r2, r3
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	3308      	adds	r3, #8
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4013      	ands	r3, r2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d10d      	bne.n	8010b70 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	3308      	adds	r3, #8
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	43da      	mvns	r2, r3
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	3308      	adds	r3, #8
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d101      	bne.n	8010b70 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e000      	b.n	8010b72 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010b70:	2300      	movs	r3, #0
  }
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr
	...

08010b80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010b86:	2300      	movs	r3, #0
 8010b88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010b8a:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <ip_reass_tmr+0x54>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010b90:	e018      	b.n	8010bc4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	7fdb      	ldrb	r3, [r3, #31]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00b      	beq.n	8010bb2 <ip_reass_tmr+0x32>
      r->timer--;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	7fdb      	ldrb	r3, [r3, #31]
 8010b9e:	3b01      	subs	r3, #1
 8010ba0:	b2da      	uxtb	r2, r3
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	e008      	b.n	8010bc4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010bbc:	68b9      	ldr	r1, [r7, #8]
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f80a 	bl	8010bd8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1e3      	bne.n	8010b92 <ip_reass_tmr+0x12>
    }
  }
}
 8010bca:	bf00      	nop
 8010bcc:	bf00      	nop
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	20008584 	.word	0x20008584

08010bd8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b088      	sub	sp, #32
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010be2:	2300      	movs	r3, #0
 8010be4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010be6:	683a      	ldr	r2, [r7, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d105      	bne.n	8010bfa <ip_reass_free_complete_datagram+0x22>
 8010bee:	4b45      	ldr	r3, [pc, #276]	; (8010d04 <ip_reass_free_complete_datagram+0x12c>)
 8010bf0:	22ab      	movs	r2, #171	; 0xab
 8010bf2:	4945      	ldr	r1, [pc, #276]	; (8010d08 <ip_reass_free_complete_datagram+0x130>)
 8010bf4:	4845      	ldr	r0, [pc, #276]	; (8010d0c <ip_reass_free_complete_datagram+0x134>)
 8010bf6:	f009 ffd5 	bl	801aba4 <iprintf>
  if (prev != NULL) {
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00a      	beq.n	8010c16 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d005      	beq.n	8010c16 <ip_reass_free_complete_datagram+0x3e>
 8010c0a:	4b3e      	ldr	r3, [pc, #248]	; (8010d04 <ip_reass_free_complete_datagram+0x12c>)
 8010c0c:	22ad      	movs	r2, #173	; 0xad
 8010c0e:	4940      	ldr	r1, [pc, #256]	; (8010d10 <ip_reass_free_complete_datagram+0x138>)
 8010c10:	483e      	ldr	r0, [pc, #248]	; (8010d0c <ip_reass_free_complete_datagram+0x134>)
 8010c12:	f009 ffc7 	bl	801aba4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	889b      	ldrh	r3, [r3, #4]
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d12a      	bne.n	8010c7e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	6858      	ldr	r0, [r3, #4]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3308      	adds	r3, #8
 8010c3e:	2214      	movs	r2, #20
 8010c40:	4619      	mov	r1, r3
 8010c42:	f009 ff7f 	bl	801ab44 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010c46:	2101      	movs	r1, #1
 8010c48:	69b8      	ldr	r0, [r7, #24]
 8010c4a:	f7ff fc1f 	bl	801048c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010c4e:	69b8      	ldr	r0, [r7, #24]
 8010c50:	f002 faf6 	bl	8013240 <pbuf_clen>
 8010c54:	4603      	mov	r3, r0
 8010c56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010c58:	8bfa      	ldrh	r2, [r7, #30]
 8010c5a:	8a7b      	ldrh	r3, [r7, #18]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c62:	db05      	blt.n	8010c70 <ip_reass_free_complete_datagram+0x98>
 8010c64:	4b27      	ldr	r3, [pc, #156]	; (8010d04 <ip_reass_free_complete_datagram+0x12c>)
 8010c66:	22bc      	movs	r2, #188	; 0xbc
 8010c68:	492a      	ldr	r1, [pc, #168]	; (8010d14 <ip_reass_free_complete_datagram+0x13c>)
 8010c6a:	4828      	ldr	r0, [pc, #160]	; (8010d0c <ip_reass_free_complete_datagram+0x134>)
 8010c6c:	f009 ff9a 	bl	801aba4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010c70:	8bfa      	ldrh	r2, [r7, #30]
 8010c72:	8a7b      	ldrh	r3, [r7, #18]
 8010c74:	4413      	add	r3, r2
 8010c76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010c78:	69b8      	ldr	r0, [r7, #24]
 8010c7a:	f002 fa53 	bl	8013124 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010c84:	e01f      	b.n	8010cc6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010c8c:	69bb      	ldr	r3, [r7, #24]
 8010c8e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f002 fad2 	bl	8013240 <pbuf_clen>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010ca0:	8bfa      	ldrh	r2, [r7, #30]
 8010ca2:	8a7b      	ldrh	r3, [r7, #18]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010caa:	db05      	blt.n	8010cb8 <ip_reass_free_complete_datagram+0xe0>
 8010cac:	4b15      	ldr	r3, [pc, #84]	; (8010d04 <ip_reass_free_complete_datagram+0x12c>)
 8010cae:	22cc      	movs	r2, #204	; 0xcc
 8010cb0:	4918      	ldr	r1, [pc, #96]	; (8010d14 <ip_reass_free_complete_datagram+0x13c>)
 8010cb2:	4816      	ldr	r0, [pc, #88]	; (8010d0c <ip_reass_free_complete_datagram+0x134>)
 8010cb4:	f009 ff76 	bl	801aba4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010cb8:	8bfa      	ldrh	r2, [r7, #30]
 8010cba:	8a7b      	ldrh	r3, [r7, #18]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f002 fa2f 	bl	8013124 <pbuf_free>
  while (p != NULL) {
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d1dc      	bne.n	8010c86 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010ccc:	6839      	ldr	r1, [r7, #0]
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 f8c2 	bl	8010e58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010cd4:	4b10      	ldr	r3, [pc, #64]	; (8010d18 <ip_reass_free_complete_datagram+0x140>)
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	8bfa      	ldrh	r2, [r7, #30]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d905      	bls.n	8010cea <ip_reass_free_complete_datagram+0x112>
 8010cde:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <ip_reass_free_complete_datagram+0x12c>)
 8010ce0:	22d2      	movs	r2, #210	; 0xd2
 8010ce2:	490e      	ldr	r1, [pc, #56]	; (8010d1c <ip_reass_free_complete_datagram+0x144>)
 8010ce4:	4809      	ldr	r0, [pc, #36]	; (8010d0c <ip_reass_free_complete_datagram+0x134>)
 8010ce6:	f009 ff5d 	bl	801aba4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010cea:	4b0b      	ldr	r3, [pc, #44]	; (8010d18 <ip_reass_free_complete_datagram+0x140>)
 8010cec:	881a      	ldrh	r2, [r3, #0]
 8010cee:	8bfb      	ldrh	r3, [r7, #30]
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	4b08      	ldr	r3, [pc, #32]	; (8010d18 <ip_reass_free_complete_datagram+0x140>)
 8010cf6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010cf8:	8bfb      	ldrh	r3, [r7, #30]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3720      	adds	r7, #32
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	0801dd3c 	.word	0x0801dd3c
 8010d08:	0801ddf8 	.word	0x0801ddf8
 8010d0c:	0801de04 	.word	0x0801de04
 8010d10:	0801de2c 	.word	0x0801de2c
 8010d14:	0801de40 	.word	0x0801de40
 8010d18:	20008588 	.word	0x20008588
 8010d1c:	0801de60 	.word	0x0801de60

08010d20 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b08a      	sub	sp, #40	; 0x28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010d32:	2300      	movs	r3, #0
 8010d34:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010d3e:	4b28      	ldr	r3, [pc, #160]	; (8010de0 <ip_reass_remove_oldest_datagram+0xc0>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010d44:	e030      	b.n	8010da8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d48:	695a      	ldr	r2, [r3, #20]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d10c      	bne.n	8010d6c <ip_reass_remove_oldest_datagram+0x4c>
 8010d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d54:	699a      	ldr	r2, [r3, #24]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d106      	bne.n	8010d6c <ip_reass_remove_oldest_datagram+0x4c>
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d60:	899a      	ldrh	r2, [r3, #12]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	889b      	ldrh	r3, [r3, #4]
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d014      	beq.n	8010d96 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d104      	bne.n	8010d82 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	61bb      	str	r3, [r7, #24]
 8010d80:	e009      	b.n	8010d96 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d84:	7fda      	ldrb	r2, [r3, #31]
 8010d86:	6a3b      	ldr	r3, [r7, #32]
 8010d88:	7fdb      	ldrb	r3, [r3, #31]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d803      	bhi.n	8010d96 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d90:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1cb      	bne.n	8010d46 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010dae:	6a3b      	ldr	r3, [r7, #32]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d008      	beq.n	8010dc6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010db4:	69b9      	ldr	r1, [r7, #24]
 8010db6:	6a38      	ldr	r0, [r7, #32]
 8010db8:	f7ff ff0e 	bl	8010bd8 <ip_reass_free_complete_datagram>
 8010dbc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	da02      	bge.n	8010dd4 <ip_reass_remove_oldest_datagram+0xb4>
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	dcac      	bgt.n	8010d2e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010dd4:	697b      	ldr	r3, [r7, #20]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3728      	adds	r7, #40	; 0x28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	20008584 	.word	0x20008584

08010de4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010dee:	2004      	movs	r0, #4
 8010df0:	f001 fa40 	bl	8012274 <memp_malloc>
 8010df4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d110      	bne.n	8010e1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010dfc:	6839      	ldr	r1, [r7, #0]
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7ff ff8e 	bl	8010d20 <ip_reass_remove_oldest_datagram>
 8010e04:	4602      	mov	r2, r0
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	dc03      	bgt.n	8010e14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010e0c:	2004      	movs	r0, #4
 8010e0e:	f001 fa31 	bl	8012274 <memp_malloc>
 8010e12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d101      	bne.n	8010e1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e016      	b.n	8010e4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010e1e:	2220      	movs	r2, #32
 8010e20:	2100      	movs	r1, #0
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	f009 feb6 	bl	801ab94 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	220f      	movs	r2, #15
 8010e2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010e2e:	4b09      	ldr	r3, [pc, #36]	; (8010e54 <ip_reass_enqueue_new_datagram+0x70>)
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010e36:	4a07      	ldr	r2, [pc, #28]	; (8010e54 <ip_reass_enqueue_new_datagram+0x70>)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	3308      	adds	r3, #8
 8010e40:	2214      	movs	r2, #20
 8010e42:	6879      	ldr	r1, [r7, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f009 fe7d 	bl	801ab44 <memcpy>
  return ipr;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	20008584 	.word	0x20008584

08010e58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010e62:	4b10      	ldr	r3, [pc, #64]	; (8010ea4 <ip_reass_dequeue_datagram+0x4c>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d104      	bne.n	8010e76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a0c      	ldr	r2, [pc, #48]	; (8010ea4 <ip_reass_dequeue_datagram+0x4c>)
 8010e72:	6013      	str	r3, [r2, #0]
 8010e74:	e00d      	b.n	8010e92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d106      	bne.n	8010e8a <ip_reass_dequeue_datagram+0x32>
 8010e7c:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <ip_reass_dequeue_datagram+0x50>)
 8010e7e:	f240 1245 	movw	r2, #325	; 0x145
 8010e82:	490a      	ldr	r1, [pc, #40]	; (8010eac <ip_reass_dequeue_datagram+0x54>)
 8010e84:	480a      	ldr	r0, [pc, #40]	; (8010eb0 <ip_reass_dequeue_datagram+0x58>)
 8010e86:	f009 fe8d 	bl	801aba4 <iprintf>
    prev->next = ipr->next;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010e92:	6879      	ldr	r1, [r7, #4]
 8010e94:	2004      	movs	r0, #4
 8010e96:	f001 fa63 	bl	8012360 <memp_free>
}
 8010e9a:	bf00      	nop
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	20008584 	.word	0x20008584
 8010ea8:	0801dd3c 	.word	0x0801dd3c
 8010eac:	0801de84 	.word	0x0801de84
 8010eb0:	0801de04 	.word	0x0801de04

08010eb4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b08c      	sub	sp, #48	; 0x30
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	885b      	ldrh	r3, [r3, #2]
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f000 fc8b 	bl	80117f0 <lwip_htons>
 8010eda:	4603      	mov	r3, r0
 8010edc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	f003 030f 	and.w	r3, r3, #15
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010eec:	7e7b      	ldrb	r3, [r7, #25]
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	8b7a      	ldrh	r2, [r7, #26]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d202      	bcs.n	8010efc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8010efa:	e135      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010efc:	7e7b      	ldrb	r3, [r7, #25]
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	8b7a      	ldrh	r2, [r7, #26]
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	88db      	ldrh	r3, [r3, #6]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 fc6f 	bl	80117f0 <lwip_htons>
 8010f12:	4603      	mov	r3, r0
 8010f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	00db      	lsls	r3, r3, #3
 8010f1c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f26:	2200      	movs	r2, #0
 8010f28:	701a      	strb	r2, [r3, #0]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	705a      	strb	r2, [r3, #1]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	709a      	strb	r2, [r3, #2]
 8010f32:	2200      	movs	r2, #0
 8010f34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	8afa      	ldrh	r2, [r7, #22]
 8010f3a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010f3c:	8afa      	ldrh	r2, [r7, #22]
 8010f3e:	8b7b      	ldrh	r3, [r7, #26]
 8010f40:	4413      	add	r3, r2
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4a:	88db      	ldrh	r3, [r3, #6]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	8afa      	ldrh	r2, [r7, #22]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d902      	bls.n	8010f5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f54:	f04f 33ff 	mov.w	r3, #4294967295
 8010f58:	e106      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f60:	e068      	b.n	8011034 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	889b      	ldrh	r3, [r3, #4]
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	889b      	ldrh	r3, [r3, #4]
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d235      	bcs.n	8010fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d020      	beq.n	8010fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f86:	889b      	ldrh	r3, [r3, #4]
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8c:	88db      	ldrh	r3, [r3, #6]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d307      	bcc.n	8010fa4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f96:	88db      	ldrh	r3, [r3, #6]
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	889b      	ldrh	r3, [r3, #4]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d902      	bls.n	8010faa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa8:	e0de      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb2:	88db      	ldrh	r3, [r3, #6]
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb8:	889b      	ldrh	r3, [r3, #4]
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d03d      	beq.n	801103c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010fc4:	e03a      	b.n	801103c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc8:	88db      	ldrh	r3, [r3, #6]
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	889b      	ldrh	r3, [r3, #4]
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d902      	bls.n	8010fdc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010fda:	e0c5      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	68ba      	ldr	r2, [r7, #8]
 8010fe0:	605a      	str	r2, [r3, #4]
      break;
 8010fe2:	e02b      	b.n	801103c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	889b      	ldrh	r3, [r3, #4]
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	889b      	ldrh	r3, [r3, #4]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d102      	bne.n	8010ffa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff8:	e0b6      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	889b      	ldrh	r3, [r3, #4]
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	88db      	ldrh	r3, [r3, #6]
 8011004:	b29b      	uxth	r3, r3
 8011006:	429a      	cmp	r2, r3
 8011008:	d202      	bcs.n	8011010 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801100a:	f04f 33ff 	mov.w	r3, #4294967295
 801100e:	e0ab      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	2b00      	cmp	r3, #0
 8011014:	d009      	beq.n	801102a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011018:	88db      	ldrh	r3, [r3, #6]
 801101a:	b29a      	uxth	r2, r3
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	889b      	ldrh	r3, [r3, #4]
 8011020:	b29b      	uxth	r3, r3
 8011022:	429a      	cmp	r2, r3
 8011024:	d001      	beq.n	801102a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011026:	2300      	movs	r3, #0
 8011028:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	2b00      	cmp	r3, #0
 8011038:	d193      	bne.n	8010f62 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801103a:	e000      	b.n	801103e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801103c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	2b00      	cmp	r3, #0
 8011042:	d12d      	bne.n	80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01c      	beq.n	8011084 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104c:	88db      	ldrh	r3, [r3, #6]
 801104e:	b29a      	uxth	r2, r3
 8011050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011052:	889b      	ldrh	r3, [r3, #4]
 8011054:	b29b      	uxth	r3, r3
 8011056:	429a      	cmp	r2, r3
 8011058:	d906      	bls.n	8011068 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801105a:	4b45      	ldr	r3, [pc, #276]	; (8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801105c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011060:	4944      	ldr	r1, [pc, #272]	; (8011174 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011062:	4845      	ldr	r0, [pc, #276]	; (8011178 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011064:	f009 fd9e 	bl	801aba4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011070:	88db      	ldrh	r3, [r3, #6]
 8011072:	b29a      	uxth	r2, r3
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	889b      	ldrh	r3, [r3, #4]
 8011078:	b29b      	uxth	r3, r3
 801107a:	429a      	cmp	r2, r3
 801107c:	d010      	beq.n	80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801107e:	2300      	movs	r3, #0
 8011080:	623b      	str	r3, [r7, #32]
 8011082:	e00d      	b.n	80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d006      	beq.n	801109a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801108c:	4b38      	ldr	r3, [pc, #224]	; (8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801108e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011092:	493a      	ldr	r1, [pc, #232]	; (801117c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011094:	4838      	ldr	r0, [pc, #224]	; (8011178 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011096:	f009 fd85 	bl	801aba4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	68ba      	ldr	r2, [r7, #8]
 801109e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d105      	bne.n	80110b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	7f9b      	ldrb	r3, [r3, #30]
 80110aa:	f003 0301 	and.w	r3, r3, #1
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d059      	beq.n	8011166 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d04f      	beq.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d006      	beq.n	80110ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	889b      	ldrh	r3, [r3, #4]
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d002      	beq.n	80110d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	623b      	str	r3, [r7, #32]
 80110d2:	e041      	b.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80110de:	e012      	b.n	8011106 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80110e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80110e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e8:	88db      	ldrh	r3, [r3, #6]
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	889b      	ldrh	r3, [r3, #4]
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d002      	beq.n	80110fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	623b      	str	r3, [r7, #32]
            break;
 80110fa:	e007      	b.n	801110c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80110fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011108:	2b00      	cmp	r3, #0
 801110a:	d1e9      	bne.n	80110e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801110c:	6a3b      	ldr	r3, [r7, #32]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d022      	beq.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d106      	bne.n	8011128 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801111a:	4b15      	ldr	r3, [pc, #84]	; (8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801111c:	f240 12df 	movw	r2, #479	; 0x1df
 8011120:	4917      	ldr	r1, [pc, #92]	; (8011180 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011122:	4815      	ldr	r0, [pc, #84]	; (8011178 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011124:	f009 fd3e 	bl	801aba4 <iprintf>
          LWIP_ASSERT("sanity check",
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011130:	429a      	cmp	r2, r3
 8011132:	d106      	bne.n	8011142 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011134:	4b0e      	ldr	r3, [pc, #56]	; (8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011136:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801113a:	4911      	ldr	r1, [pc, #68]	; (8011180 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801113c:	480e      	ldr	r0, [pc, #56]	; (8011178 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801113e:	f009 fd31 	bl	801aba4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d006      	beq.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801114a:	4b09      	ldr	r3, [pc, #36]	; (8011170 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801114c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011150:	490c      	ldr	r1, [pc, #48]	; (8011184 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011152:	4809      	ldr	r0, [pc, #36]	; (8011178 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011154:	f009 fd26 	bl	801aba4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011158:	6a3b      	ldr	r3, [r7, #32]
 801115a:	2b00      	cmp	r3, #0
 801115c:	bf14      	ite	ne
 801115e:	2301      	movne	r3, #1
 8011160:	2300      	moveq	r3, #0
 8011162:	b2db      	uxtb	r3, r3
 8011164:	e000      	b.n	8011168 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011166:	2300      	movs	r3, #0
}
 8011168:	4618      	mov	r0, r3
 801116a:	3730      	adds	r7, #48	; 0x30
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	0801dd3c 	.word	0x0801dd3c
 8011174:	0801dea0 	.word	0x0801dea0
 8011178:	0801de04 	.word	0x0801de04
 801117c:	0801dec0 	.word	0x0801dec0
 8011180:	0801def8 	.word	0x0801def8
 8011184:	0801df08 	.word	0x0801df08

08011188 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b08e      	sub	sp, #56	; 0x38
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	f003 030f 	and.w	r3, r3, #15
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	009b      	lsls	r3, r3, #2
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	2b14      	cmp	r3, #20
 80111a6:	f040 8167 	bne.w	8011478 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80111aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ac:	88db      	ldrh	r3, [r3, #6]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4618      	mov	r0, r3
 80111b2:	f000 fb1d 	bl	80117f0 <lwip_htons>
 80111b6:	4603      	mov	r3, r0
 80111b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111bc:	b29b      	uxth	r3, r3
 80111be:	00db      	lsls	r3, r3, #3
 80111c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80111c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c4:	885b      	ldrh	r3, [r3, #2]
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	4618      	mov	r0, r3
 80111ca:	f000 fb11 	bl	80117f0 <lwip_htons>
 80111ce:	4603      	mov	r3, r0
 80111d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80111d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	f003 030f 	and.w	r3, r3, #15
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80111e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111ea:	429a      	cmp	r2, r3
 80111ec:	f0c0 8146 	bcc.w	801147c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80111f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f002 f81f 	bl	8013240 <pbuf_clen>
 8011202:	4603      	mov	r3, r0
 8011204:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011206:	4b9f      	ldr	r3, [pc, #636]	; (8011484 <ip4_reass+0x2fc>)
 8011208:	881b      	ldrh	r3, [r3, #0]
 801120a:	461a      	mov	r2, r3
 801120c:	8c3b      	ldrh	r3, [r7, #32]
 801120e:	4413      	add	r3, r2
 8011210:	2b0a      	cmp	r3, #10
 8011212:	dd10      	ble.n	8011236 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011214:	8c3b      	ldrh	r3, [r7, #32]
 8011216:	4619      	mov	r1, r3
 8011218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801121a:	f7ff fd81 	bl	8010d20 <ip_reass_remove_oldest_datagram>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 812d 	beq.w	8011480 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011226:	4b97      	ldr	r3, [pc, #604]	; (8011484 <ip4_reass+0x2fc>)
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	461a      	mov	r2, r3
 801122c:	8c3b      	ldrh	r3, [r7, #32]
 801122e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011230:	2b0a      	cmp	r3, #10
 8011232:	f300 8125 	bgt.w	8011480 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011236:	4b94      	ldr	r3, [pc, #592]	; (8011488 <ip4_reass+0x300>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	633b      	str	r3, [r7, #48]	; 0x30
 801123c:	e015      	b.n	801126a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011240:	695a      	ldr	r2, [r3, #20]
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	429a      	cmp	r2, r3
 8011248:	d10c      	bne.n	8011264 <ip4_reass+0xdc>
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	699a      	ldr	r2, [r3, #24]
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	691b      	ldr	r3, [r3, #16]
 8011252:	429a      	cmp	r2, r3
 8011254:	d106      	bne.n	8011264 <ip4_reass+0xdc>
 8011256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011258:	899a      	ldrh	r2, [r3, #12]
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	889b      	ldrh	r3, [r3, #4]
 801125e:	b29b      	uxth	r3, r3
 8011260:	429a      	cmp	r2, r3
 8011262:	d006      	beq.n	8011272 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	633b      	str	r3, [r7, #48]	; 0x30
 801126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126c:	2b00      	cmp	r3, #0
 801126e:	d1e6      	bne.n	801123e <ip4_reass+0xb6>
 8011270:	e000      	b.n	8011274 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011272:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	2b00      	cmp	r3, #0
 8011278:	d109      	bne.n	801128e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801127a:	8c3b      	ldrh	r3, [r7, #32]
 801127c:	4619      	mov	r1, r3
 801127e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011280:	f7ff fdb0 	bl	8010de4 <ip_reass_enqueue_new_datagram>
 8011284:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011288:	2b00      	cmp	r3, #0
 801128a:	d11c      	bne.n	80112c6 <ip4_reass+0x13e>
      goto nullreturn;
 801128c:	e109      	b.n	80114a2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011290:	88db      	ldrh	r3, [r3, #6]
 8011292:	b29b      	uxth	r3, r3
 8011294:	4618      	mov	r0, r3
 8011296:	f000 faab 	bl	80117f0 <lwip_htons>
 801129a:	4603      	mov	r3, r0
 801129c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d110      	bne.n	80112c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80112a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a6:	89db      	ldrh	r3, [r3, #14]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f000 faa1 	bl	80117f0 <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d006      	beq.n	80112c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80112b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ba:	3308      	adds	r3, #8
 80112bc:	2214      	movs	r2, #20
 80112be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112c0:	4618      	mov	r0, r3
 80112c2:	f009 fc3f 	bl	801ab44 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	88db      	ldrh	r3, [r3, #6]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	f003 0320 	and.w	r3, r3, #32
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	bf0c      	ite	eq
 80112d4:	2301      	moveq	r3, #1
 80112d6:	2300      	movne	r3, #0
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00e      	beq.n	8011300 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80112e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80112e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80112e6:	4413      	add	r3, r2
 80112e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80112ea:	8b7a      	ldrh	r2, [r7, #26]
 80112ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80112ee:	429a      	cmp	r2, r3
 80112f0:	f0c0 80a0 	bcc.w	8011434 <ip4_reass+0x2ac>
 80112f4:	8b7b      	ldrh	r3, [r7, #26]
 80112f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80112fa:	4293      	cmp	r3, r2
 80112fc:	f200 809a 	bhi.w	8011434 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011300:	69fa      	ldr	r2, [r7, #28]
 8011302:	6879      	ldr	r1, [r7, #4]
 8011304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011306:	f7ff fdd5 	bl	8010eb4 <ip_reass_chain_frag_into_datagram_and_validate>
 801130a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011312:	f000 8091 	beq.w	8011438 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011316:	4b5b      	ldr	r3, [pc, #364]	; (8011484 <ip4_reass+0x2fc>)
 8011318:	881a      	ldrh	r2, [r3, #0]
 801131a:	8c3b      	ldrh	r3, [r7, #32]
 801131c:	4413      	add	r3, r2
 801131e:	b29a      	uxth	r2, r3
 8011320:	4b58      	ldr	r3, [pc, #352]	; (8011484 <ip4_reass+0x2fc>)
 8011322:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00d      	beq.n	8011346 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801132a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801132c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801132e:	4413      	add	r3, r2
 8011330:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	8a7a      	ldrh	r2, [r7, #18]
 8011336:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133a:	7f9b      	ldrb	r3, [r3, #30]
 801133c:	f043 0301 	orr.w	r3, r3, #1
 8011340:	b2da      	uxtb	r2, r3
 8011342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011344:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d171      	bne.n	8011430 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134e:	8b9b      	ldrh	r3, [r3, #28]
 8011350:	3314      	adds	r3, #20
 8011352:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	3308      	adds	r3, #8
 801136a:	2214      	movs	r2, #20
 801136c:	4619      	mov	r1, r3
 801136e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011370:	f009 fbe8 	bl	801ab44 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011374:	8a3b      	ldrh	r3, [r7, #16]
 8011376:	4618      	mov	r0, r3
 8011378:	f000 fa3a 	bl	80117f0 <lwip_htons>
 801137c:	4603      	mov	r3, r0
 801137e:	461a      	mov	r2, r3
 8011380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011382:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	2200      	movs	r2, #0
 8011388:	719a      	strb	r2, [r3, #6]
 801138a:	2200      	movs	r2, #0
 801138c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011390:	2200      	movs	r2, #0
 8011392:	729a      	strb	r2, [r3, #10]
 8011394:	2200      	movs	r2, #0
 8011396:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801139e:	e00d      	b.n	80113bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80113a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80113a6:	2114      	movs	r1, #20
 80113a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80113aa:	f001 fe03 	bl	8012fb4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80113ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f001 ff85 	bl	80132c0 <pbuf_cat>
      r = iprh->next_pbuf;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80113bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d1ee      	bne.n	80113a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80113c2:	4b31      	ldr	r3, [pc, #196]	; (8011488 <ip4_reass+0x300>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d102      	bne.n	80113d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113d0:	e010      	b.n	80113f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80113d2:	4b2d      	ldr	r3, [pc, #180]	; (8011488 <ip4_reass+0x300>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113d8:	e007      	b.n	80113ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80113da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d006      	beq.n	80113f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80113e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1f4      	bne.n	80113da <ip4_reass+0x252>
 80113f0:	e000      	b.n	80113f4 <ip4_reass+0x26c>
          break;
 80113f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80113f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113f8:	f7ff fd2e 	bl	8010e58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f001 ff1f 	bl	8013240 <pbuf_clen>
 8011402:	4603      	mov	r3, r0
 8011404:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011406:	4b1f      	ldr	r3, [pc, #124]	; (8011484 <ip4_reass+0x2fc>)
 8011408:	881b      	ldrh	r3, [r3, #0]
 801140a:	8c3a      	ldrh	r2, [r7, #32]
 801140c:	429a      	cmp	r2, r3
 801140e:	d906      	bls.n	801141e <ip4_reass+0x296>
 8011410:	4b1e      	ldr	r3, [pc, #120]	; (801148c <ip4_reass+0x304>)
 8011412:	f240 229b 	movw	r2, #667	; 0x29b
 8011416:	491e      	ldr	r1, [pc, #120]	; (8011490 <ip4_reass+0x308>)
 8011418:	481e      	ldr	r0, [pc, #120]	; (8011494 <ip4_reass+0x30c>)
 801141a:	f009 fbc3 	bl	801aba4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801141e:	4b19      	ldr	r3, [pc, #100]	; (8011484 <ip4_reass+0x2fc>)
 8011420:	881a      	ldrh	r2, [r3, #0]
 8011422:	8c3b      	ldrh	r3, [r7, #32]
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	b29a      	uxth	r2, r3
 8011428:	4b16      	ldr	r3, [pc, #88]	; (8011484 <ip4_reass+0x2fc>)
 801142a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	e03c      	b.n	80114aa <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011430:	2300      	movs	r3, #0
 8011432:	e03a      	b.n	80114aa <ip4_reass+0x322>
      goto nullreturn_ipr;
 8011434:	bf00      	nop
 8011436:	e000      	b.n	801143a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011438:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	2b00      	cmp	r3, #0
 801143e:	d106      	bne.n	801144e <ip4_reass+0x2c6>
 8011440:	4b12      	ldr	r3, [pc, #72]	; (801148c <ip4_reass+0x304>)
 8011442:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011446:	4914      	ldr	r1, [pc, #80]	; (8011498 <ip4_reass+0x310>)
 8011448:	4812      	ldr	r0, [pc, #72]	; (8011494 <ip4_reass+0x30c>)
 801144a:	f009 fbab 	bl	801aba4 <iprintf>
  if (ipr->p == NULL) {
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d124      	bne.n	80114a0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011456:	4b0c      	ldr	r3, [pc, #48]	; (8011488 <ip4_reass+0x300>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801145c:	429a      	cmp	r2, r3
 801145e:	d006      	beq.n	801146e <ip4_reass+0x2e6>
 8011460:	4b0a      	ldr	r3, [pc, #40]	; (801148c <ip4_reass+0x304>)
 8011462:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011466:	490d      	ldr	r1, [pc, #52]	; (801149c <ip4_reass+0x314>)
 8011468:	480a      	ldr	r0, [pc, #40]	; (8011494 <ip4_reass+0x30c>)
 801146a:	f009 fb9b 	bl	801aba4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801146e:	2100      	movs	r1, #0
 8011470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011472:	f7ff fcf1 	bl	8010e58 <ip_reass_dequeue_datagram>
 8011476:	e014      	b.n	80114a2 <ip4_reass+0x31a>
    goto nullreturn;
 8011478:	bf00      	nop
 801147a:	e012      	b.n	80114a2 <ip4_reass+0x31a>
    goto nullreturn;
 801147c:	bf00      	nop
 801147e:	e010      	b.n	80114a2 <ip4_reass+0x31a>
      goto nullreturn;
 8011480:	bf00      	nop
 8011482:	e00e      	b.n	80114a2 <ip4_reass+0x31a>
 8011484:	20008588 	.word	0x20008588
 8011488:	20008584 	.word	0x20008584
 801148c:	0801dd3c 	.word	0x0801dd3c
 8011490:	0801df2c 	.word	0x0801df2c
 8011494:	0801de04 	.word	0x0801de04
 8011498:	0801df48 	.word	0x0801df48
 801149c:	0801df54 	.word	0x0801df54
  }

nullreturn:
 80114a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f001 fe3e 	bl	8013124 <pbuf_free>
  return NULL;
 80114a8:	2300      	movs	r3, #0
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3738      	adds	r7, #56	; 0x38
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop

080114b4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80114b8:	2005      	movs	r0, #5
 80114ba:	f000 fedb 	bl	8012274 <memp_malloc>
 80114be:	4603      	mov	r3, r0
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d106      	bne.n	80114e0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80114d2:	4b07      	ldr	r3, [pc, #28]	; (80114f0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80114d4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80114d8:	4906      	ldr	r1, [pc, #24]	; (80114f4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80114da:	4807      	ldr	r0, [pc, #28]	; (80114f8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80114dc:	f009 fb62 	bl	801aba4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80114e0:	6879      	ldr	r1, [r7, #4]
 80114e2:	2005      	movs	r0, #5
 80114e4:	f000 ff3c 	bl	8012360 <memp_free>
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	0801dd3c 	.word	0x0801dd3c
 80114f4:	0801df74 	.word	0x0801df74
 80114f8:	0801de04 	.word	0x0801de04

080114fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d106      	bne.n	801151c <ipfrag_free_pbuf_custom+0x20>
 801150e:	4b11      	ldr	r3, [pc, #68]	; (8011554 <ipfrag_free_pbuf_custom+0x58>)
 8011510:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011514:	4910      	ldr	r1, [pc, #64]	; (8011558 <ipfrag_free_pbuf_custom+0x5c>)
 8011516:	4811      	ldr	r0, [pc, #68]	; (801155c <ipfrag_free_pbuf_custom+0x60>)
 8011518:	f009 fb44 	bl	801aba4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801151c:	68fa      	ldr	r2, [r7, #12]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	429a      	cmp	r2, r3
 8011522:	d006      	beq.n	8011532 <ipfrag_free_pbuf_custom+0x36>
 8011524:	4b0b      	ldr	r3, [pc, #44]	; (8011554 <ipfrag_free_pbuf_custom+0x58>)
 8011526:	f240 22cf 	movw	r2, #719	; 0x2cf
 801152a:	490d      	ldr	r1, [pc, #52]	; (8011560 <ipfrag_free_pbuf_custom+0x64>)
 801152c:	480b      	ldr	r0, [pc, #44]	; (801155c <ipfrag_free_pbuf_custom+0x60>)
 801152e:	f009 fb39 	bl	801aba4 <iprintf>
  if (pcr->original != NULL) {
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	695b      	ldr	r3, [r3, #20]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d004      	beq.n	8011544 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	695b      	ldr	r3, [r3, #20]
 801153e:	4618      	mov	r0, r3
 8011540:	f001 fdf0 	bl	8013124 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	f7ff ffbd 	bl	80114c4 <ip_frag_free_pbuf_custom_ref>
}
 801154a:	bf00      	nop
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	0801dd3c 	.word	0x0801dd3c
 8011558:	0801df80 	.word	0x0801df80
 801155c:	0801de04 	.word	0x0801de04
 8011560:	0801df8c 	.word	0x0801df8c

08011564 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b094      	sub	sp, #80	; 0x50
 8011568:	af02      	add	r7, sp, #8
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011570:	2300      	movs	r3, #0
 8011572:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801157a:	3b14      	subs	r3, #20
 801157c:	2b00      	cmp	r3, #0
 801157e:	da00      	bge.n	8011582 <ip4_frag+0x1e>
 8011580:	3307      	adds	r3, #7
 8011582:	10db      	asrs	r3, r3, #3
 8011584:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011586:	2314      	movs	r3, #20
 8011588:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011592:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	f003 030f 	and.w	r3, r3, #15
 801159c:	b2db      	uxtb	r3, r3
 801159e:	009b      	lsls	r3, r3, #2
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	2b14      	cmp	r3, #20
 80115a4:	d002      	beq.n	80115ac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80115a6:	f06f 0305 	mvn.w	r3, #5
 80115aa:	e110      	b.n	80117ce <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	895b      	ldrh	r3, [r3, #10]
 80115b0:	2b13      	cmp	r3, #19
 80115b2:	d809      	bhi.n	80115c8 <ip4_frag+0x64>
 80115b4:	4b88      	ldr	r3, [pc, #544]	; (80117d8 <ip4_frag+0x274>)
 80115b6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80115ba:	4988      	ldr	r1, [pc, #544]	; (80117dc <ip4_frag+0x278>)
 80115bc:	4888      	ldr	r0, [pc, #544]	; (80117e0 <ip4_frag+0x27c>)
 80115be:	f009 faf1 	bl	801aba4 <iprintf>
 80115c2:	f06f 0305 	mvn.w	r3, #5
 80115c6:	e102      	b.n	80117ce <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80115c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ca:	88db      	ldrh	r3, [r3, #6]
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f90e 	bl	80117f0 <lwip_htons>
 80115d4:	4603      	mov	r3, r0
 80115d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80115d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80115e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	891b      	ldrh	r3, [r3, #8]
 80115ee:	3b14      	subs	r3, #20
 80115f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80115f4:	e0e1      	b.n	80117ba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80115f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80115f8:	00db      	lsls	r3, r3, #3
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011600:	4293      	cmp	r3, r2
 8011602:	bf28      	it	cs
 8011604:	4613      	movcs	r3, r2
 8011606:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011608:	f44f 7220 	mov.w	r2, #640	; 0x280
 801160c:	2114      	movs	r1, #20
 801160e:	200e      	movs	r0, #14
 8011610:	f001 fa72 	bl	8012af8 <pbuf_alloc>
 8011614:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011618:	2b00      	cmp	r3, #0
 801161a:	f000 80d5 	beq.w	80117c8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	895b      	ldrh	r3, [r3, #10]
 8011622:	2b13      	cmp	r3, #19
 8011624:	d806      	bhi.n	8011634 <ip4_frag+0xd0>
 8011626:	4b6c      	ldr	r3, [pc, #432]	; (80117d8 <ip4_frag+0x274>)
 8011628:	f44f 7249 	mov.w	r2, #804	; 0x324
 801162c:	496d      	ldr	r1, [pc, #436]	; (80117e4 <ip4_frag+0x280>)
 801162e:	486c      	ldr	r0, [pc, #432]	; (80117e0 <ip4_frag+0x27c>)
 8011630:	f009 fab8 	bl	801aba4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	2214      	movs	r2, #20
 801163a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801163c:	4618      	mov	r0, r3
 801163e:	f009 fa81 	bl	801ab44 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011648:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801164a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801164e:	e064      	b.n	801171a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	895a      	ldrh	r2, [r3, #10]
 8011654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	895b      	ldrh	r3, [r3, #10]
 801165e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011660:	429a      	cmp	r2, r3
 8011662:	d906      	bls.n	8011672 <ip4_frag+0x10e>
 8011664:	4b5c      	ldr	r3, [pc, #368]	; (80117d8 <ip4_frag+0x274>)
 8011666:	f240 322d 	movw	r2, #813	; 0x32d
 801166a:	495f      	ldr	r1, [pc, #380]	; (80117e8 <ip4_frag+0x284>)
 801166c:	485c      	ldr	r0, [pc, #368]	; (80117e0 <ip4_frag+0x27c>)
 801166e:	f009 fa99 	bl	801aba4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011672:	8bfa      	ldrh	r2, [r7, #30]
 8011674:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011678:	4293      	cmp	r3, r2
 801167a:	bf28      	it	cs
 801167c:	4613      	movcs	r3, r2
 801167e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011686:	2b00      	cmp	r3, #0
 8011688:	d105      	bne.n	8011696 <ip4_frag+0x132>
        poff = 0;
 801168a:	2300      	movs	r3, #0
 801168c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	60fb      	str	r3, [r7, #12]
        continue;
 8011694:	e041      	b.n	801171a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011696:	f7ff ff0d 	bl	80114b4 <ip_frag_alloc_pbuf_custom_ref>
 801169a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d103      	bne.n	80116aa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80116a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116a4:	f001 fd3e 	bl	8013124 <pbuf_free>
        goto memerr;
 80116a8:	e08f      	b.n	80117ca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80116aa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80116b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116b2:	4413      	add	r3, r2
 80116b4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80116b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80116bc:	9201      	str	r2, [sp, #4]
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	4603      	mov	r3, r0
 80116c2:	2241      	movs	r2, #65	; 0x41
 80116c4:	2000      	movs	r0, #0
 80116c6:	f001 fb41 	bl	8012d4c <pbuf_alloced_custom>
 80116ca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d106      	bne.n	80116e0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80116d2:	69b8      	ldr	r0, [r7, #24]
 80116d4:	f7ff fef6 	bl	80114c4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80116d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116da:	f001 fd23 	bl	8013124 <pbuf_free>
        goto memerr;
 80116de:	e074      	b.n	80117ca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f001 fdc5 	bl	8013270 <pbuf_ref>
      pcr->original = p;
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	4a3f      	ldr	r2, [pc, #252]	; (80117ec <ip4_frag+0x288>)
 80116f0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80116f2:	6979      	ldr	r1, [r7, #20]
 80116f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116f6:	f001 fde3 	bl	80132c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80116fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80116fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011708:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801170c:	2b00      	cmp	r3, #0
 801170e:	d004      	beq.n	801171a <ip4_frag+0x1b6>
        poff = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801171a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801171e:	2b00      	cmp	r3, #0
 8011720:	d196      	bne.n	8011650 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011722:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011724:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011728:	4413      	add	r3, r2
 801172a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011730:	f1a3 0213 	sub.w	r2, r3, #19
 8011734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011738:	429a      	cmp	r2, r3
 801173a:	bfcc      	ite	gt
 801173c:	2301      	movgt	r3, #1
 801173e:	2300      	movle	r3, #0
 8011740:	b2db      	uxtb	r3, r3
 8011742:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011744:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801174c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d002      	beq.n	801175a <ip4_frag+0x1f6>
 8011754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011756:	2b00      	cmp	r3, #0
 8011758:	d003      	beq.n	8011762 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801175a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801175c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011760:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011762:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011764:	4618      	mov	r0, r3
 8011766:	f000 f843 	bl	80117f0 <lwip_htons>
 801176a:	4603      	mov	r3, r0
 801176c:	461a      	mov	r2, r3
 801176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011770:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011772:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011774:	3314      	adds	r3, #20
 8011776:	b29b      	uxth	r3, r3
 8011778:	4618      	mov	r0, r3
 801177a:	f000 f839 	bl	80117f0 <lwip_htons>
 801177e:	4603      	mov	r3, r0
 8011780:	461a      	mov	r2, r3
 8011782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011784:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011788:	2200      	movs	r2, #0
 801178a:	729a      	strb	r2, [r3, #10]
 801178c:	2200      	movs	r2, #0
 801178e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	695b      	ldr	r3, [r3, #20]
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011798:	68b8      	ldr	r0, [r7, #8]
 801179a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801179c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801179e:	f001 fcc1 	bl	8013124 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80117a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80117a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117a8:	1ad3      	subs	r3, r2, r3
 80117aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80117ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80117b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80117b4:	4413      	add	r3, r2
 80117b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80117ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f47f af19 	bne.w	80115f6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80117c4:	2300      	movs	r3, #0
 80117c6:	e002      	b.n	80117ce <ip4_frag+0x26a>
      goto memerr;
 80117c8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80117ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3748      	adds	r7, #72	; 0x48
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	0801dd3c 	.word	0x0801dd3c
 80117dc:	0801df98 	.word	0x0801df98
 80117e0:	0801de04 	.word	0x0801de04
 80117e4:	0801dfb4 	.word	0x0801dfb4
 80117e8:	0801dfd4 	.word	0x0801dfd4
 80117ec:	080114fd 	.word	0x080114fd

080117f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80117fa:	88fb      	ldrh	r3, [r7, #6]
 80117fc:	021b      	lsls	r3, r3, #8
 80117fe:	b21a      	sxth	r2, r3
 8011800:	88fb      	ldrh	r3, [r7, #6]
 8011802:	0a1b      	lsrs	r3, r3, #8
 8011804:	b29b      	uxth	r3, r3
 8011806:	b21b      	sxth	r3, r3
 8011808:	4313      	orrs	r3, r2
 801180a:	b21b      	sxth	r3, r3
 801180c:	b29b      	uxth	r3, r3
}
 801180e:	4618      	mov	r0, r3
 8011810:	370c      	adds	r7, #12
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801181a:	b480      	push	{r7}
 801181c:	b083      	sub	sp, #12
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	061a      	lsls	r2, r3, #24
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	021b      	lsls	r3, r3, #8
 801182a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801182e:	431a      	orrs	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	0a1b      	lsrs	r3, r3, #8
 8011834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011838:	431a      	orrs	r2, r3
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	0e1b      	lsrs	r3, r3, #24
 801183e:	4313      	orrs	r3, r2
}
 8011840:	4618      	mov	r0, r3
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801184c:	b480      	push	{r7}
 801184e:	b089      	sub	sp, #36	; 0x24
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801185a:	2300      	movs	r3, #0
 801185c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8011862:	69fb      	ldr	r3, [r7, #28]
 8011864:	f003 0301 	and.w	r3, r3, #1
 8011868:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00d      	beq.n	801188c <lwip_standard_chksum+0x40>
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	dd0a      	ble.n	801188c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8011876:	69fa      	ldr	r2, [r7, #28]
 8011878:	1c53      	adds	r3, r2, #1
 801187a:	61fb      	str	r3, [r7, #28]
 801187c:	f107 030e 	add.w	r3, r7, #14
 8011880:	3301      	adds	r3, #1
 8011882:	7812      	ldrb	r2, [r2, #0]
 8011884:	701a      	strb	r2, [r3, #0]
    len--;
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	3b01      	subs	r3, #1
 801188a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011890:	e00a      	b.n	80118a8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	1c9a      	adds	r2, r3, #2
 8011896:	61ba      	str	r2, [r7, #24]
 8011898:	881b      	ldrh	r3, [r3, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	4413      	add	r3, r2
 80118a0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	3b02      	subs	r3, #2
 80118a6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	dcf1      	bgt.n	8011892 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	dd04      	ble.n	80118be <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80118b4:	f107 030e 	add.w	r3, r7, #14
 80118b8:	69ba      	ldr	r2, [r7, #24]
 80118ba:	7812      	ldrb	r2, [r2, #0]
 80118bc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80118be:	89fb      	ldrh	r3, [r7, #14]
 80118c0:	461a      	mov	r2, r3
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	4413      	add	r3, r2
 80118c6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	0c1a      	lsrs	r2, r3, #16
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	4413      	add	r3, r2
 80118d2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	0c1a      	lsrs	r2, r3, #16
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	b29b      	uxth	r3, r3
 80118dc:	4413      	add	r3, r2
 80118de:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d007      	beq.n	80118f6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	021b      	lsls	r3, r3, #8
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	0a1b      	lsrs	r3, r3, #8
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	4313      	orrs	r3, r2
 80118f4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	b29b      	uxth	r3, r3
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3724      	adds	r7, #36	; 0x24
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr

08011906 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b082      	sub	sp, #8
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
 801190e:	460b      	mov	r3, r1
 8011910:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011912:	887b      	ldrh	r3, [r7, #2]
 8011914:	4619      	mov	r1, r3
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7ff ff98 	bl	801184c <lwip_standard_chksum>
 801191c:	4603      	mov	r3, r0
 801191e:	43db      	mvns	r3, r3
 8011920:	b29b      	uxth	r3, r3
}
 8011922:	4618      	mov	r0, r3
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011930:	2300      	movs	r3, #0
 8011932:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011934:	f009 f80a 	bl	801a94c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011938:	f000 f8d4 	bl	8011ae4 <mem_init>
  memp_init();
 801193c:	f000 fc2c 	bl	8012198 <memp_init>
  pbuf_init();
  netif_init();
 8011940:	f000 fd38 	bl	80123b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011944:	f008 f89a 	bl	8019a7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011948:	f001 fe96 	bl	8013678 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801194c:	f007 ffdc 	bl	8019908 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011950:	bf00      	nop
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011962:	4b05      	ldr	r3, [pc, #20]	; (8011978 <ptr_to_mem+0x20>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	88fb      	ldrh	r3, [r7, #6]
 8011968:	4413      	add	r3, r2
}
 801196a:	4618      	mov	r0, r3
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	2000858c 	.word	0x2000858c

0801197c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011984:	4b05      	ldr	r3, [pc, #20]	; (801199c <mem_to_ptr+0x20>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	b29b      	uxth	r3, r3
}
 801198e:	4618      	mov	r0, r3
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	2000858c 	.word	0x2000858c

080119a0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80119a0:	b590      	push	{r4, r7, lr}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80119a8:	4b45      	ldr	r3, [pc, #276]	; (8011ac0 <plug_holes+0x120>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d206      	bcs.n	80119c0 <plug_holes+0x20>
 80119b2:	4b44      	ldr	r3, [pc, #272]	; (8011ac4 <plug_holes+0x124>)
 80119b4:	f240 12df 	movw	r2, #479	; 0x1df
 80119b8:	4943      	ldr	r1, [pc, #268]	; (8011ac8 <plug_holes+0x128>)
 80119ba:	4844      	ldr	r0, [pc, #272]	; (8011acc <plug_holes+0x12c>)
 80119bc:	f009 f8f2 	bl	801aba4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80119c0:	4b43      	ldr	r3, [pc, #268]	; (8011ad0 <plug_holes+0x130>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d306      	bcc.n	80119d8 <plug_holes+0x38>
 80119ca:	4b3e      	ldr	r3, [pc, #248]	; (8011ac4 <plug_holes+0x124>)
 80119cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80119d0:	4940      	ldr	r1, [pc, #256]	; (8011ad4 <plug_holes+0x134>)
 80119d2:	483e      	ldr	r0, [pc, #248]	; (8011acc <plug_holes+0x12c>)
 80119d4:	f009 f8e6 	bl	801aba4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	791b      	ldrb	r3, [r3, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d006      	beq.n	80119ee <plug_holes+0x4e>
 80119e0:	4b38      	ldr	r3, [pc, #224]	; (8011ac4 <plug_holes+0x124>)
 80119e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80119e6:	493c      	ldr	r1, [pc, #240]	; (8011ad8 <plug_holes+0x138>)
 80119e8:	4838      	ldr	r0, [pc, #224]	; (8011acc <plug_holes+0x12c>)
 80119ea:	f009 f8db 	bl	801aba4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80119f6:	d906      	bls.n	8011a06 <plug_holes+0x66>
 80119f8:	4b32      	ldr	r3, [pc, #200]	; (8011ac4 <plug_holes+0x124>)
 80119fa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80119fe:	4937      	ldr	r1, [pc, #220]	; (8011adc <plug_holes+0x13c>)
 8011a00:	4832      	ldr	r0, [pc, #200]	; (8011acc <plug_holes+0x12c>)
 8011a02:	f009 f8cf 	bl	801aba4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	881b      	ldrh	r3, [r3, #0]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff ffa4 	bl	8011958 <ptr_to_mem>
 8011a10:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d024      	beq.n	8011a64 <plug_holes+0xc4>
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	791b      	ldrb	r3, [r3, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d120      	bne.n	8011a64 <plug_holes+0xc4>
 8011a22:	4b2b      	ldr	r3, [pc, #172]	; (8011ad0 <plug_holes+0x130>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d01b      	beq.n	8011a64 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011a2c:	4b2c      	ldr	r3, [pc, #176]	; (8011ae0 <plug_holes+0x140>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d102      	bne.n	8011a3c <plug_holes+0x9c>
      lfree = mem;
 8011a36:	4a2a      	ldr	r2, [pc, #168]	; (8011ae0 <plug_holes+0x140>)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	881a      	ldrh	r2, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	881b      	ldrh	r3, [r3, #0]
 8011a48:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011a4c:	d00a      	beq.n	8011a64 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	881b      	ldrh	r3, [r3, #0]
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7ff ff80 	bl	8011958 <ptr_to_mem>
 8011a58:	4604      	mov	r4, r0
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f7ff ff8e 	bl	801197c <mem_to_ptr>
 8011a60:	4603      	mov	r3, r0
 8011a62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	885b      	ldrh	r3, [r3, #2]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff ff75 	bl	8011958 <ptr_to_mem>
 8011a6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d01f      	beq.n	8011ab8 <plug_holes+0x118>
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	791b      	ldrb	r3, [r3, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d11b      	bne.n	8011ab8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011a80:	4b17      	ldr	r3, [pc, #92]	; (8011ae0 <plug_holes+0x140>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d102      	bne.n	8011a90 <plug_holes+0xf0>
      lfree = pmem;
 8011a8a:	4a15      	ldr	r2, [pc, #84]	; (8011ae0 <plug_holes+0x140>)
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	881a      	ldrh	r2, [r3, #0]
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	881b      	ldrh	r3, [r3, #0]
 8011a9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011aa0:	d00a      	beq.n	8011ab8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7ff ff56 	bl	8011958 <ptr_to_mem>
 8011aac:	4604      	mov	r4, r0
 8011aae:	68b8      	ldr	r0, [r7, #8]
 8011ab0:	f7ff ff64 	bl	801197c <mem_to_ptr>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011ab8:	bf00      	nop
 8011aba:	3714      	adds	r7, #20
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd90      	pop	{r4, r7, pc}
 8011ac0:	2000858c 	.word	0x2000858c
 8011ac4:	0801dfe4 	.word	0x0801dfe4
 8011ac8:	0801e098 	.word	0x0801e098
 8011acc:	0801e0b0 	.word	0x0801e0b0
 8011ad0:	20008590 	.word	0x20008590
 8011ad4:	0801e0d8 	.word	0x0801e0d8
 8011ad8:	0801e0f4 	.word	0x0801e0f4
 8011adc:	0801e110 	.word	0x0801e110
 8011ae0:	20008598 	.word	0x20008598

08011ae4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011aea:	4b1d      	ldr	r3, [pc, #116]	; (8011b60 <mem_init+0x7c>)
 8011aec:	4a1d      	ldr	r2, [pc, #116]	; (8011b64 <mem_init+0x80>)
 8011aee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011af0:	4b1b      	ldr	r3, [pc, #108]	; (8011b60 <mem_init+0x7c>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8011afc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2200      	movs	r2, #0
 8011b02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2200      	movs	r2, #0
 8011b08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011b0a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8011b0e:	f7ff ff23 	bl	8011958 <ptr_to_mem>
 8011b12:	4603      	mov	r3, r0
 8011b14:	4a14      	ldr	r2, [pc, #80]	; (8011b68 <mem_init+0x84>)
 8011b16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011b18:	4b13      	ldr	r3, [pc, #76]	; (8011b68 <mem_init+0x84>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011b20:	4b11      	ldr	r3, [pc, #68]	; (8011b68 <mem_init+0x84>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8011b28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011b2a:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <mem_init+0x84>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8011b32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011b34:	4b0a      	ldr	r3, [pc, #40]	; (8011b60 <mem_init+0x7c>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a0c      	ldr	r2, [pc, #48]	; (8011b6c <mem_init+0x88>)
 8011b3a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011b3c:	480c      	ldr	r0, [pc, #48]	; (8011b70 <mem_init+0x8c>)
 8011b3e:	f008 ff11 	bl	801a964 <sys_mutex_new>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d006      	beq.n	8011b56 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011b48:	4b0a      	ldr	r3, [pc, #40]	; (8011b74 <mem_init+0x90>)
 8011b4a:	f240 221f 	movw	r2, #543	; 0x21f
 8011b4e:	490a      	ldr	r1, [pc, #40]	; (8011b78 <mem_init+0x94>)
 8011b50:	480a      	ldr	r0, [pc, #40]	; (8011b7c <mem_init+0x98>)
 8011b52:	f009 f827 	bl	801aba4 <iprintf>
  }
}
 8011b56:	bf00      	nop
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	2000858c 	.word	0x2000858c
 8011b64:	30004000 	.word	0x30004000
 8011b68:	20008590 	.word	0x20008590
 8011b6c:	20008598 	.word	0x20008598
 8011b70:	20008594 	.word	0x20008594
 8011b74:	0801dfe4 	.word	0x0801dfe4
 8011b78:	0801e13c 	.word	0x0801e13c
 8011b7c:	0801e0b0 	.word	0x0801e0b0

08011b80 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7ff fef7 	bl	801197c <mem_to_ptr>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff fede 	bl	8011958 <ptr_to_mem>
 8011b9c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	885b      	ldrh	r3, [r3, #2]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff fed8 	bl	8011958 <ptr_to_mem>
 8011ba8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011bb2:	d818      	bhi.n	8011be6 <mem_link_valid+0x66>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	885b      	ldrh	r3, [r3, #2]
 8011bb8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011bbc:	d813      	bhi.n	8011be6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011bc2:	8afa      	ldrh	r2, [r7, #22]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d004      	beq.n	8011bd2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	8afa      	ldrh	r2, [r7, #22]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d109      	bne.n	8011be6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011bd2:	4b08      	ldr	r3, [pc, #32]	; (8011bf4 <mem_link_valid+0x74>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011bd6:	693a      	ldr	r2, [r7, #16]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d006      	beq.n	8011bea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	885b      	ldrh	r3, [r3, #2]
 8011be0:	8afa      	ldrh	r2, [r7, #22]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d001      	beq.n	8011bea <mem_link_valid+0x6a>
    return 0;
 8011be6:	2300      	movs	r3, #0
 8011be8:	e000      	b.n	8011bec <mem_link_valid+0x6c>
  }
  return 1;
 8011bea:	2301      	movs	r3, #1
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3718      	adds	r7, #24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	20008590 	.word	0x20008590

08011bf8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d070      	beq.n	8011ce8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f003 0303 	and.w	r3, r3, #3
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00d      	beq.n	8011c2c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011c10:	4b37      	ldr	r3, [pc, #220]	; (8011cf0 <mem_free+0xf8>)
 8011c12:	f240 2273 	movw	r2, #627	; 0x273
 8011c16:	4937      	ldr	r1, [pc, #220]	; (8011cf4 <mem_free+0xfc>)
 8011c18:	4837      	ldr	r0, [pc, #220]	; (8011cf8 <mem_free+0x100>)
 8011c1a:	f008 ffc3 	bl	801aba4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c1e:	f008 fef3 	bl	801aa08 <sys_arch_protect>
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	f008 fefd 	bl	801aa24 <sys_arch_unprotect>
    return;
 8011c2a:	e05e      	b.n	8011cea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	3b08      	subs	r3, #8
 8011c30:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011c32:	4b32      	ldr	r3, [pc, #200]	; (8011cfc <mem_free+0x104>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	69fa      	ldr	r2, [r7, #28]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d306      	bcc.n	8011c4a <mem_free+0x52>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f103 020c 	add.w	r2, r3, #12
 8011c42:	4b2f      	ldr	r3, [pc, #188]	; (8011d00 <mem_free+0x108>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d90d      	bls.n	8011c66 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011c4a:	4b29      	ldr	r3, [pc, #164]	; (8011cf0 <mem_free+0xf8>)
 8011c4c:	f240 227f 	movw	r2, #639	; 0x27f
 8011c50:	492c      	ldr	r1, [pc, #176]	; (8011d04 <mem_free+0x10c>)
 8011c52:	4829      	ldr	r0, [pc, #164]	; (8011cf8 <mem_free+0x100>)
 8011c54:	f008 ffa6 	bl	801aba4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c58:	f008 fed6 	bl	801aa08 <sys_arch_protect>
 8011c5c:	6138      	str	r0, [r7, #16]
 8011c5e:	6938      	ldr	r0, [r7, #16]
 8011c60:	f008 fee0 	bl	801aa24 <sys_arch_unprotect>
    return;
 8011c64:	e041      	b.n	8011cea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011c66:	4828      	ldr	r0, [pc, #160]	; (8011d08 <mem_free+0x110>)
 8011c68:	f008 fe92 	bl	801a990 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	791b      	ldrb	r3, [r3, #4]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d110      	bne.n	8011c96 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011c74:	4b1e      	ldr	r3, [pc, #120]	; (8011cf0 <mem_free+0xf8>)
 8011c76:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011c7a:	4924      	ldr	r1, [pc, #144]	; (8011d0c <mem_free+0x114>)
 8011c7c:	481e      	ldr	r0, [pc, #120]	; (8011cf8 <mem_free+0x100>)
 8011c7e:	f008 ff91 	bl	801aba4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011c82:	4821      	ldr	r0, [pc, #132]	; (8011d08 <mem_free+0x110>)
 8011c84:	f008 fe93 	bl	801a9ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c88:	f008 febe 	bl	801aa08 <sys_arch_protect>
 8011c8c:	6178      	str	r0, [r7, #20]
 8011c8e:	6978      	ldr	r0, [r7, #20]
 8011c90:	f008 fec8 	bl	801aa24 <sys_arch_unprotect>
    return;
 8011c94:	e029      	b.n	8011cea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011c96:	69f8      	ldr	r0, [r7, #28]
 8011c98:	f7ff ff72 	bl	8011b80 <mem_link_valid>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d110      	bne.n	8011cc4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011ca2:	4b13      	ldr	r3, [pc, #76]	; (8011cf0 <mem_free+0xf8>)
 8011ca4:	f240 2295 	movw	r2, #661	; 0x295
 8011ca8:	4919      	ldr	r1, [pc, #100]	; (8011d10 <mem_free+0x118>)
 8011caa:	4813      	ldr	r0, [pc, #76]	; (8011cf8 <mem_free+0x100>)
 8011cac:	f008 ff7a 	bl	801aba4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011cb0:	4815      	ldr	r0, [pc, #84]	; (8011d08 <mem_free+0x110>)
 8011cb2:	f008 fe7c 	bl	801a9ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011cb6:	f008 fea7 	bl	801aa08 <sys_arch_protect>
 8011cba:	61b8      	str	r0, [r7, #24]
 8011cbc:	69b8      	ldr	r0, [r7, #24]
 8011cbe:	f008 feb1 	bl	801aa24 <sys_arch_unprotect>
    return;
 8011cc2:	e012      	b.n	8011cea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011cca:	4b12      	ldr	r3, [pc, #72]	; (8011d14 <mem_free+0x11c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	69fa      	ldr	r2, [r7, #28]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d202      	bcs.n	8011cda <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011cd4:	4a0f      	ldr	r2, [pc, #60]	; (8011d14 <mem_free+0x11c>)
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011cda:	69f8      	ldr	r0, [r7, #28]
 8011cdc:	f7ff fe60 	bl	80119a0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011ce0:	4809      	ldr	r0, [pc, #36]	; (8011d08 <mem_free+0x110>)
 8011ce2:	f008 fe64 	bl	801a9ae <sys_mutex_unlock>
 8011ce6:	e000      	b.n	8011cea <mem_free+0xf2>
    return;
 8011ce8:	bf00      	nop
}
 8011cea:	3720      	adds	r7, #32
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	0801dfe4 	.word	0x0801dfe4
 8011cf4:	0801e158 	.word	0x0801e158
 8011cf8:	0801e0b0 	.word	0x0801e0b0
 8011cfc:	2000858c 	.word	0x2000858c
 8011d00:	20008590 	.word	0x20008590
 8011d04:	0801e17c 	.word	0x0801e17c
 8011d08:	20008594 	.word	0x20008594
 8011d0c:	0801e198 	.word	0x0801e198
 8011d10:	0801e1c0 	.word	0x0801e1c0
 8011d14:	20008598 	.word	0x20008598

08011d18 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	460b      	mov	r3, r1
 8011d22:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011d24:	887b      	ldrh	r3, [r7, #2]
 8011d26:	3303      	adds	r3, #3
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	f023 0303 	bic.w	r3, r3, #3
 8011d2e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011d30:	8bfb      	ldrh	r3, [r7, #30]
 8011d32:	2b0b      	cmp	r3, #11
 8011d34:	d801      	bhi.n	8011d3a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011d36:	230c      	movs	r3, #12
 8011d38:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011d3a:	8bfb      	ldrh	r3, [r7, #30]
 8011d3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011d40:	d803      	bhi.n	8011d4a <mem_trim+0x32>
 8011d42:	8bfa      	ldrh	r2, [r7, #30]
 8011d44:	887b      	ldrh	r3, [r7, #2]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d201      	bcs.n	8011d4e <mem_trim+0x36>
    return NULL;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	e0d8      	b.n	8011f00 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011d4e:	4b6e      	ldr	r3, [pc, #440]	; (8011f08 <mem_trim+0x1f0>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d304      	bcc.n	8011d62 <mem_trim+0x4a>
 8011d58:	4b6c      	ldr	r3, [pc, #432]	; (8011f0c <mem_trim+0x1f4>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d306      	bcc.n	8011d70 <mem_trim+0x58>
 8011d62:	4b6b      	ldr	r3, [pc, #428]	; (8011f10 <mem_trim+0x1f8>)
 8011d64:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011d68:	496a      	ldr	r1, [pc, #424]	; (8011f14 <mem_trim+0x1fc>)
 8011d6a:	486b      	ldr	r0, [pc, #428]	; (8011f18 <mem_trim+0x200>)
 8011d6c:	f008 ff1a 	bl	801aba4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011d70:	4b65      	ldr	r3, [pc, #404]	; (8011f08 <mem_trim+0x1f0>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d304      	bcc.n	8011d84 <mem_trim+0x6c>
 8011d7a:	4b64      	ldr	r3, [pc, #400]	; (8011f0c <mem_trim+0x1f4>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d307      	bcc.n	8011d94 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011d84:	f008 fe40 	bl	801aa08 <sys_arch_protect>
 8011d88:	60b8      	str	r0, [r7, #8]
 8011d8a:	68b8      	ldr	r0, [r7, #8]
 8011d8c:	f008 fe4a 	bl	801aa24 <sys_arch_unprotect>
    return rmem;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	e0b5      	b.n	8011f00 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	3b08      	subs	r3, #8
 8011d98:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011d9a:	69b8      	ldr	r0, [r7, #24]
 8011d9c:	f7ff fdee 	bl	801197c <mem_to_ptr>
 8011da0:	4603      	mov	r3, r0
 8011da2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	881a      	ldrh	r2, [r3, #0]
 8011da8:	8afb      	ldrh	r3, [r7, #22]
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	3b08      	subs	r3, #8
 8011db0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011db2:	8bfa      	ldrh	r2, [r7, #30]
 8011db4:	8abb      	ldrh	r3, [r7, #20]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d906      	bls.n	8011dc8 <mem_trim+0xb0>
 8011dba:	4b55      	ldr	r3, [pc, #340]	; (8011f10 <mem_trim+0x1f8>)
 8011dbc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011dc0:	4956      	ldr	r1, [pc, #344]	; (8011f1c <mem_trim+0x204>)
 8011dc2:	4855      	ldr	r0, [pc, #340]	; (8011f18 <mem_trim+0x200>)
 8011dc4:	f008 feee 	bl	801aba4 <iprintf>
  if (newsize > size) {
 8011dc8:	8bfa      	ldrh	r2, [r7, #30]
 8011dca:	8abb      	ldrh	r3, [r7, #20]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d901      	bls.n	8011dd4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	e095      	b.n	8011f00 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011dd4:	8bfa      	ldrh	r2, [r7, #30]
 8011dd6:	8abb      	ldrh	r3, [r7, #20]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d101      	bne.n	8011de0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	e08f      	b.n	8011f00 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011de0:	484f      	ldr	r0, [pc, #316]	; (8011f20 <mem_trim+0x208>)
 8011de2:	f008 fdd5 	bl	801a990 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff fdb4 	bl	8011958 <ptr_to_mem>
 8011df0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	791b      	ldrb	r3, [r3, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d13f      	bne.n	8011e7a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011dfa:	69bb      	ldr	r3, [r7, #24]
 8011dfc:	881b      	ldrh	r3, [r3, #0]
 8011dfe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011e02:	d106      	bne.n	8011e12 <mem_trim+0xfa>
 8011e04:	4b42      	ldr	r3, [pc, #264]	; (8011f10 <mem_trim+0x1f8>)
 8011e06:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011e0a:	4946      	ldr	r1, [pc, #280]	; (8011f24 <mem_trim+0x20c>)
 8011e0c:	4842      	ldr	r0, [pc, #264]	; (8011f18 <mem_trim+0x200>)
 8011e0e:	f008 fec9 	bl	801aba4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011e18:	8afa      	ldrh	r2, [r7, #22]
 8011e1a:	8bfb      	ldrh	r3, [r7, #30]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	3308      	adds	r3, #8
 8011e22:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011e24:	4b40      	ldr	r3, [pc, #256]	; (8011f28 <mem_trim+0x210>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	693a      	ldr	r2, [r7, #16]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d106      	bne.n	8011e3c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011e2e:	89fb      	ldrh	r3, [r7, #14]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7ff fd91 	bl	8011958 <ptr_to_mem>
 8011e36:	4603      	mov	r3, r0
 8011e38:	4a3b      	ldr	r2, [pc, #236]	; (8011f28 <mem_trim+0x210>)
 8011e3a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011e3c:	89fb      	ldrh	r3, [r7, #14]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7ff fd8a 	bl	8011958 <ptr_to_mem>
 8011e44:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	89ba      	ldrh	r2, [r7, #12]
 8011e50:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	8afa      	ldrh	r2, [r7, #22]
 8011e56:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011e58:	69bb      	ldr	r3, [r7, #24]
 8011e5a:	89fa      	ldrh	r2, [r7, #14]
 8011e5c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	881b      	ldrh	r3, [r3, #0]
 8011e62:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011e66:	d047      	beq.n	8011ef8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ff fd73 	bl	8011958 <ptr_to_mem>
 8011e72:	4602      	mov	r2, r0
 8011e74:	89fb      	ldrh	r3, [r7, #14]
 8011e76:	8053      	strh	r3, [r2, #2]
 8011e78:	e03e      	b.n	8011ef8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011e7a:	8bfb      	ldrh	r3, [r7, #30]
 8011e7c:	f103 0214 	add.w	r2, r3, #20
 8011e80:	8abb      	ldrh	r3, [r7, #20]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d838      	bhi.n	8011ef8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011e86:	8afa      	ldrh	r2, [r7, #22]
 8011e88:	8bfb      	ldrh	r3, [r7, #30]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	3308      	adds	r3, #8
 8011e90:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011e9a:	d106      	bne.n	8011eaa <mem_trim+0x192>
 8011e9c:	4b1c      	ldr	r3, [pc, #112]	; (8011f10 <mem_trim+0x1f8>)
 8011e9e:	f240 3216 	movw	r2, #790	; 0x316
 8011ea2:	4920      	ldr	r1, [pc, #128]	; (8011f24 <mem_trim+0x20c>)
 8011ea4:	481c      	ldr	r0, [pc, #112]	; (8011f18 <mem_trim+0x200>)
 8011ea6:	f008 fe7d 	bl	801aba4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011eaa:	89fb      	ldrh	r3, [r7, #14]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7ff fd53 	bl	8011958 <ptr_to_mem>
 8011eb2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011eb4:	4b1c      	ldr	r3, [pc, #112]	; (8011f28 <mem_trim+0x210>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	693a      	ldr	r2, [r7, #16]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d202      	bcs.n	8011ec4 <mem_trim+0x1ac>
      lfree = mem2;
 8011ebe:	4a1a      	ldr	r2, [pc, #104]	; (8011f28 <mem_trim+0x210>)
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	881a      	ldrh	r2, [r3, #0]
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	8afa      	ldrh	r2, [r7, #22]
 8011ed6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	89fa      	ldrh	r2, [r7, #14]
 8011edc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011ee6:	d007      	beq.n	8011ef8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7ff fd33 	bl	8011958 <ptr_to_mem>
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	89fb      	ldrh	r3, [r7, #14]
 8011ef6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011ef8:	4809      	ldr	r0, [pc, #36]	; (8011f20 <mem_trim+0x208>)
 8011efa:	f008 fd58 	bl	801a9ae <sys_mutex_unlock>
  return rmem;
 8011efe:	687b      	ldr	r3, [r7, #4]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3720      	adds	r7, #32
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	2000858c 	.word	0x2000858c
 8011f0c:	20008590 	.word	0x20008590
 8011f10:	0801dfe4 	.word	0x0801dfe4
 8011f14:	0801e1f4 	.word	0x0801e1f4
 8011f18:	0801e0b0 	.word	0x0801e0b0
 8011f1c:	0801e20c 	.word	0x0801e20c
 8011f20:	20008594 	.word	0x20008594
 8011f24:	0801e22c 	.word	0x0801e22c
 8011f28:	20008598 	.word	0x20008598

08011f2c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b088      	sub	sp, #32
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	4603      	mov	r3, r0
 8011f34:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011f36:	88fb      	ldrh	r3, [r7, #6]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d101      	bne.n	8011f40 <mem_malloc+0x14>
    return NULL;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	e0e2      	b.n	8012106 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011f40:	88fb      	ldrh	r3, [r7, #6]
 8011f42:	3303      	adds	r3, #3
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	f023 0303 	bic.w	r3, r3, #3
 8011f4a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011f4c:	8bbb      	ldrh	r3, [r7, #28]
 8011f4e:	2b0b      	cmp	r3, #11
 8011f50:	d801      	bhi.n	8011f56 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011f52:	230c      	movs	r3, #12
 8011f54:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011f56:	8bbb      	ldrh	r3, [r7, #28]
 8011f58:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011f5c:	d803      	bhi.n	8011f66 <mem_malloc+0x3a>
 8011f5e:	8bba      	ldrh	r2, [r7, #28]
 8011f60:	88fb      	ldrh	r3, [r7, #6]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d201      	bcs.n	8011f6a <mem_malloc+0x3e>
    return NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e0cd      	b.n	8012106 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011f6a:	4869      	ldr	r0, [pc, #420]	; (8012110 <mem_malloc+0x1e4>)
 8011f6c:	f008 fd10 	bl	801a990 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011f70:	4b68      	ldr	r3, [pc, #416]	; (8012114 <mem_malloc+0x1e8>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff fd01 	bl	801197c <mem_to_ptr>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	83fb      	strh	r3, [r7, #30]
 8011f7e:	e0b7      	b.n	80120f0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011f80:	8bfb      	ldrh	r3, [r7, #30]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff fce8 	bl	8011958 <ptr_to_mem>
 8011f88:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	791b      	ldrb	r3, [r3, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f040 80a7 	bne.w	80120e2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	881b      	ldrh	r3, [r3, #0]
 8011f98:	461a      	mov	r2, r3
 8011f9a:	8bfb      	ldrh	r3, [r7, #30]
 8011f9c:	1ad3      	subs	r3, r2, r3
 8011f9e:	f1a3 0208 	sub.w	r2, r3, #8
 8011fa2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	f0c0 809c 	bcc.w	80120e2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	461a      	mov	r2, r3
 8011fb0:	8bfb      	ldrh	r3, [r7, #30]
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	f1a3 0208 	sub.w	r2, r3, #8
 8011fb8:	8bbb      	ldrh	r3, [r7, #28]
 8011fba:	3314      	adds	r3, #20
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d333      	bcc.n	8012028 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011fc0:	8bfa      	ldrh	r2, [r7, #30]
 8011fc2:	8bbb      	ldrh	r3, [r7, #28]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	3308      	adds	r3, #8
 8011fca:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011fcc:	8a7b      	ldrh	r3, [r7, #18]
 8011fce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011fd2:	d106      	bne.n	8011fe2 <mem_malloc+0xb6>
 8011fd4:	4b50      	ldr	r3, [pc, #320]	; (8012118 <mem_malloc+0x1ec>)
 8011fd6:	f240 3287 	movw	r2, #903	; 0x387
 8011fda:	4950      	ldr	r1, [pc, #320]	; (801211c <mem_malloc+0x1f0>)
 8011fdc:	4850      	ldr	r0, [pc, #320]	; (8012120 <mem_malloc+0x1f4>)
 8011fde:	f008 fde1 	bl	801aba4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011fe2:	8a7b      	ldrh	r3, [r7, #18]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7ff fcb7 	bl	8011958 <ptr_to_mem>
 8011fea:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	881a      	ldrh	r2, [r3, #0]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	8bfa      	ldrh	r2, [r7, #30]
 8011ffe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	8a7a      	ldrh	r2, [r7, #18]
 8012004:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	2201      	movs	r2, #1
 801200a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	881b      	ldrh	r3, [r3, #0]
 8012010:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012014:	d00b      	beq.n	801202e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	881b      	ldrh	r3, [r3, #0]
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff fc9c 	bl	8011958 <ptr_to_mem>
 8012020:	4602      	mov	r2, r0
 8012022:	8a7b      	ldrh	r3, [r7, #18]
 8012024:	8053      	strh	r3, [r2, #2]
 8012026:	e002      	b.n	801202e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	2201      	movs	r2, #1
 801202c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801202e:	4b39      	ldr	r3, [pc, #228]	; (8012114 <mem_malloc+0x1e8>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	697a      	ldr	r2, [r7, #20]
 8012034:	429a      	cmp	r2, r3
 8012036:	d127      	bne.n	8012088 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012038:	4b36      	ldr	r3, [pc, #216]	; (8012114 <mem_malloc+0x1e8>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801203e:	e005      	b.n	801204c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	881b      	ldrh	r3, [r3, #0]
 8012044:	4618      	mov	r0, r3
 8012046:	f7ff fc87 	bl	8011958 <ptr_to_mem>
 801204a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	791b      	ldrb	r3, [r3, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d004      	beq.n	801205e <mem_malloc+0x132>
 8012054:	4b33      	ldr	r3, [pc, #204]	; (8012124 <mem_malloc+0x1f8>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	69ba      	ldr	r2, [r7, #24]
 801205a:	429a      	cmp	r2, r3
 801205c:	d1f0      	bne.n	8012040 <mem_malloc+0x114>
          }
          lfree = cur;
 801205e:	4a2d      	ldr	r2, [pc, #180]	; (8012114 <mem_malloc+0x1e8>)
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012064:	4b2b      	ldr	r3, [pc, #172]	; (8012114 <mem_malloc+0x1e8>)
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	4b2e      	ldr	r3, [pc, #184]	; (8012124 <mem_malloc+0x1f8>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	429a      	cmp	r2, r3
 801206e:	d00b      	beq.n	8012088 <mem_malloc+0x15c>
 8012070:	4b28      	ldr	r3, [pc, #160]	; (8012114 <mem_malloc+0x1e8>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	791b      	ldrb	r3, [r3, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d006      	beq.n	8012088 <mem_malloc+0x15c>
 801207a:	4b27      	ldr	r3, [pc, #156]	; (8012118 <mem_malloc+0x1ec>)
 801207c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012080:	4929      	ldr	r1, [pc, #164]	; (8012128 <mem_malloc+0x1fc>)
 8012082:	4827      	ldr	r0, [pc, #156]	; (8012120 <mem_malloc+0x1f4>)
 8012084:	f008 fd8e 	bl	801aba4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012088:	4821      	ldr	r0, [pc, #132]	; (8012110 <mem_malloc+0x1e4>)
 801208a:	f008 fc90 	bl	801a9ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801208e:	8bba      	ldrh	r2, [r7, #28]
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	4413      	add	r3, r2
 8012094:	3308      	adds	r3, #8
 8012096:	4a23      	ldr	r2, [pc, #140]	; (8012124 <mem_malloc+0x1f8>)
 8012098:	6812      	ldr	r2, [r2, #0]
 801209a:	4293      	cmp	r3, r2
 801209c:	d906      	bls.n	80120ac <mem_malloc+0x180>
 801209e:	4b1e      	ldr	r3, [pc, #120]	; (8012118 <mem_malloc+0x1ec>)
 80120a0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80120a4:	4921      	ldr	r1, [pc, #132]	; (801212c <mem_malloc+0x200>)
 80120a6:	481e      	ldr	r0, [pc, #120]	; (8012120 <mem_malloc+0x1f4>)
 80120a8:	f008 fd7c 	bl	801aba4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	f003 0303 	and.w	r3, r3, #3
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d006      	beq.n	80120c4 <mem_malloc+0x198>
 80120b6:	4b18      	ldr	r3, [pc, #96]	; (8012118 <mem_malloc+0x1ec>)
 80120b8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80120bc:	491c      	ldr	r1, [pc, #112]	; (8012130 <mem_malloc+0x204>)
 80120be:	4818      	ldr	r0, [pc, #96]	; (8012120 <mem_malloc+0x1f4>)
 80120c0:	f008 fd70 	bl	801aba4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	f003 0303 	and.w	r3, r3, #3
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d006      	beq.n	80120dc <mem_malloc+0x1b0>
 80120ce:	4b12      	ldr	r3, [pc, #72]	; (8012118 <mem_malloc+0x1ec>)
 80120d0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80120d4:	4917      	ldr	r1, [pc, #92]	; (8012134 <mem_malloc+0x208>)
 80120d6:	4812      	ldr	r0, [pc, #72]	; (8012120 <mem_malloc+0x1f4>)
 80120d8:	f008 fd64 	bl	801aba4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	3308      	adds	r3, #8
 80120e0:	e011      	b.n	8012106 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80120e2:	8bfb      	ldrh	r3, [r7, #30]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7ff fc37 	bl	8011958 <ptr_to_mem>
 80120ea:	4603      	mov	r3, r0
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80120f0:	8bfa      	ldrh	r2, [r7, #30]
 80120f2:	8bbb      	ldrh	r3, [r7, #28]
 80120f4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80120f8:	429a      	cmp	r2, r3
 80120fa:	f4ff af41 	bcc.w	8011f80 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80120fe:	4804      	ldr	r0, [pc, #16]	; (8012110 <mem_malloc+0x1e4>)
 8012100:	f008 fc55 	bl	801a9ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3720      	adds	r7, #32
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	20008594 	.word	0x20008594
 8012114:	20008598 	.word	0x20008598
 8012118:	0801dfe4 	.word	0x0801dfe4
 801211c:	0801e22c 	.word	0x0801e22c
 8012120:	0801e0b0 	.word	0x0801e0b0
 8012124:	20008590 	.word	0x20008590
 8012128:	0801e240 	.word	0x0801e240
 801212c:	0801e25c 	.word	0x0801e25c
 8012130:	0801e28c 	.word	0x0801e28c
 8012134:	0801e2bc 	.word	0x0801e2bc

08012138 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012138:	b480      	push	{r7}
 801213a:	b085      	sub	sp, #20
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	3303      	adds	r3, #3
 801214e:	f023 0303 	bic.w	r3, r3, #3
 8012152:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012154:	2300      	movs	r3, #0
 8012156:	60fb      	str	r3, [r7, #12]
 8012158:	e011      	b.n	801217e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	689b      	ldr	r3, [r3, #8]
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	689b      	ldr	r3, [r3, #8]
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	881b      	ldrh	r3, [r3, #0]
 8012170:	461a      	mov	r2, r3
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	4413      	add	r3, r2
 8012176:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	3301      	adds	r3, #1
 801217c:	60fb      	str	r3, [r7, #12]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	885b      	ldrh	r3, [r3, #2]
 8012182:	461a      	mov	r2, r3
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	4293      	cmp	r3, r2
 8012188:	dbe7      	blt.n	801215a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801218a:	bf00      	nop
 801218c:	bf00      	nop
 801218e:	3714      	adds	r7, #20
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801219e:	2300      	movs	r3, #0
 80121a0:	80fb      	strh	r3, [r7, #6]
 80121a2:	e009      	b.n	80121b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80121a4:	88fb      	ldrh	r3, [r7, #6]
 80121a6:	4a08      	ldr	r2, [pc, #32]	; (80121c8 <memp_init+0x30>)
 80121a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7ff ffc3 	bl	8012138 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80121b2:	88fb      	ldrh	r3, [r7, #6]
 80121b4:	3301      	adds	r3, #1
 80121b6:	80fb      	strh	r3, [r7, #6]
 80121b8:	88fb      	ldrh	r3, [r7, #6]
 80121ba:	2b0c      	cmp	r3, #12
 80121bc:	d9f2      	bls.n	80121a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80121be:	bf00      	nop
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	08020fd4 	.word	0x08020fd4

080121cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80121d4:	f008 fc18 	bl	801aa08 <sys_arch_protect>
 80121d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	689b      	ldr	r3, [r3, #8]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d015      	beq.n	8012214 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	68ba      	ldr	r2, [r7, #8]
 80121ee:	6812      	ldr	r2, [r2, #0]
 80121f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	f003 0303 	and.w	r3, r3, #3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d006      	beq.n	801220a <do_memp_malloc_pool+0x3e>
 80121fc:	4b09      	ldr	r3, [pc, #36]	; (8012224 <do_memp_malloc_pool+0x58>)
 80121fe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012202:	4909      	ldr	r1, [pc, #36]	; (8012228 <do_memp_malloc_pool+0x5c>)
 8012204:	4809      	ldr	r0, [pc, #36]	; (801222c <do_memp_malloc_pool+0x60>)
 8012206:	f008 fccd 	bl	801aba4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f008 fc0a 	bl	801aa24 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	e003      	b.n	801221c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f008 fc05 	bl	801aa24 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801221a:	2300      	movs	r3, #0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	0801e2e0 	.word	0x0801e2e0
 8012228:	0801e394 	.word	0x0801e394
 801222c:	0801e3b8 	.word	0x0801e3b8

08012230 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d106      	bne.n	801224c <memp_malloc_pool+0x1c>
 801223e:	4b0a      	ldr	r3, [pc, #40]	; (8012268 <memp_malloc_pool+0x38>)
 8012240:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012244:	4909      	ldr	r1, [pc, #36]	; (801226c <memp_malloc_pool+0x3c>)
 8012246:	480a      	ldr	r0, [pc, #40]	; (8012270 <memp_malloc_pool+0x40>)
 8012248:	f008 fcac 	bl	801aba4 <iprintf>
  if (desc == NULL) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d101      	bne.n	8012256 <memp_malloc_pool+0x26>
    return NULL;
 8012252:	2300      	movs	r3, #0
 8012254:	e003      	b.n	801225e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7ff ffb8 	bl	80121cc <do_memp_malloc_pool>
 801225c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	0801e2e0 	.word	0x0801e2e0
 801226c:	0801e3e0 	.word	0x0801e3e0
 8012270:	0801e3b8 	.word	0x0801e3b8

08012274 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801227e:	79fb      	ldrb	r3, [r7, #7]
 8012280:	2b0c      	cmp	r3, #12
 8012282:	d908      	bls.n	8012296 <memp_malloc+0x22>
 8012284:	4b0a      	ldr	r3, [pc, #40]	; (80122b0 <memp_malloc+0x3c>)
 8012286:	f240 1257 	movw	r2, #343	; 0x157
 801228a:	490a      	ldr	r1, [pc, #40]	; (80122b4 <memp_malloc+0x40>)
 801228c:	480a      	ldr	r0, [pc, #40]	; (80122b8 <memp_malloc+0x44>)
 801228e:	f008 fc89 	bl	801aba4 <iprintf>
 8012292:	2300      	movs	r3, #0
 8012294:	e008      	b.n	80122a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012296:	79fb      	ldrb	r3, [r7, #7]
 8012298:	4a08      	ldr	r2, [pc, #32]	; (80122bc <memp_malloc+0x48>)
 801229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff ff94 	bl	80121cc <do_memp_malloc_pool>
 80122a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80122a6:	68fb      	ldr	r3, [r7, #12]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	0801e2e0 	.word	0x0801e2e0
 80122b4:	0801e3f4 	.word	0x0801e3f4
 80122b8:	0801e3b8 	.word	0x0801e3b8
 80122bc:	08020fd4 	.word	0x08020fd4

080122c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	f003 0303 	and.w	r3, r3, #3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d006      	beq.n	80122e2 <do_memp_free_pool+0x22>
 80122d4:	4b0d      	ldr	r3, [pc, #52]	; (801230c <do_memp_free_pool+0x4c>)
 80122d6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80122da:	490d      	ldr	r1, [pc, #52]	; (8012310 <do_memp_free_pool+0x50>)
 80122dc:	480d      	ldr	r0, [pc, #52]	; (8012314 <do_memp_free_pool+0x54>)
 80122de:	f008 fc61 	bl	801aba4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80122e6:	f008 fb8f 	bl	801aa08 <sys_arch_protect>
 80122ea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	689b      	ldr	r3, [r3, #8]
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80122fe:	68b8      	ldr	r0, [r7, #8]
 8012300:	f008 fb90 	bl	801aa24 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012304:	bf00      	nop
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	0801e2e0 	.word	0x0801e2e0
 8012310:	0801e414 	.word	0x0801e414
 8012314:	0801e3b8 	.word	0x0801e3b8

08012318 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d106      	bne.n	8012336 <memp_free_pool+0x1e>
 8012328:	4b0a      	ldr	r3, [pc, #40]	; (8012354 <memp_free_pool+0x3c>)
 801232a:	f240 1295 	movw	r2, #405	; 0x195
 801232e:	490a      	ldr	r1, [pc, #40]	; (8012358 <memp_free_pool+0x40>)
 8012330:	480a      	ldr	r0, [pc, #40]	; (801235c <memp_free_pool+0x44>)
 8012332:	f008 fc37 	bl	801aba4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d007      	beq.n	801234c <memp_free_pool+0x34>
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d004      	beq.n	801234c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012342:	6839      	ldr	r1, [r7, #0]
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff ffbb 	bl	80122c0 <do_memp_free_pool>
 801234a:	e000      	b.n	801234e <memp_free_pool+0x36>
    return;
 801234c:	bf00      	nop
}
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	0801e2e0 	.word	0x0801e2e0
 8012358:	0801e3e0 	.word	0x0801e3e0
 801235c:	0801e3b8 	.word	0x0801e3b8

08012360 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	4603      	mov	r3, r0
 8012368:	6039      	str	r1, [r7, #0]
 801236a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801236c:	79fb      	ldrb	r3, [r7, #7]
 801236e:	2b0c      	cmp	r3, #12
 8012370:	d907      	bls.n	8012382 <memp_free+0x22>
 8012372:	4b0c      	ldr	r3, [pc, #48]	; (80123a4 <memp_free+0x44>)
 8012374:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012378:	490b      	ldr	r1, [pc, #44]	; (80123a8 <memp_free+0x48>)
 801237a:	480c      	ldr	r0, [pc, #48]	; (80123ac <memp_free+0x4c>)
 801237c:	f008 fc12 	bl	801aba4 <iprintf>
 8012380:	e00c      	b.n	801239c <memp_free+0x3c>

  if (mem == NULL) {
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d008      	beq.n	801239a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012388:	79fb      	ldrb	r3, [r7, #7]
 801238a:	4a09      	ldr	r2, [pc, #36]	; (80123b0 <memp_free+0x50>)
 801238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012390:	6839      	ldr	r1, [r7, #0]
 8012392:	4618      	mov	r0, r3
 8012394:	f7ff ff94 	bl	80122c0 <do_memp_free_pool>
 8012398:	e000      	b.n	801239c <memp_free+0x3c>
    return;
 801239a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	0801e2e0 	.word	0x0801e2e0
 80123a8:	0801e434 	.word	0x0801e434
 80123ac:	0801e3b8 	.word	0x0801e3b8
 80123b0:	08020fd4 	.word	0x08020fd4

080123b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80123b4:	b480      	push	{r7}
 80123b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80123b8:	bf00      	nop
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr
	...

080123c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b086      	sub	sp, #24
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	607a      	str	r2, [r7, #4]
 80123d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d108      	bne.n	80123ea <netif_add+0x26>
 80123d8:	4b5b      	ldr	r3, [pc, #364]	; (8012548 <netif_add+0x184>)
 80123da:	f240 1227 	movw	r2, #295	; 0x127
 80123de:	495b      	ldr	r1, [pc, #364]	; (801254c <netif_add+0x188>)
 80123e0:	485b      	ldr	r0, [pc, #364]	; (8012550 <netif_add+0x18c>)
 80123e2:	f008 fbdf 	bl	801aba4 <iprintf>
 80123e6:	2300      	movs	r3, #0
 80123e8:	e0a9      	b.n	801253e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80123ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d108      	bne.n	8012402 <netif_add+0x3e>
 80123f0:	4b55      	ldr	r3, [pc, #340]	; (8012548 <netif_add+0x184>)
 80123f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80123f6:	4957      	ldr	r1, [pc, #348]	; (8012554 <netif_add+0x190>)
 80123f8:	4855      	ldr	r0, [pc, #340]	; (8012550 <netif_add+0x18c>)
 80123fa:	f008 fbd3 	bl	801aba4 <iprintf>
 80123fe:	2300      	movs	r3, #0
 8012400:	e09d      	b.n	801253e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d101      	bne.n	801240c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012408:	4b53      	ldr	r3, [pc, #332]	; (8012558 <netif_add+0x194>)
 801240a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012412:	4b51      	ldr	r3, [pc, #324]	; (8012558 <netif_add+0x194>)
 8012414:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d101      	bne.n	8012420 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801241c:	4b4e      	ldr	r3, [pc, #312]	; (8012558 <netif_add+0x194>)
 801241e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2200      	movs	r2, #0
 8012424:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2200      	movs	r2, #0
 8012430:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	4a49      	ldr	r2, [pc, #292]	; (801255c <netif_add+0x198>)
 8012436:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2200      	movs	r2, #0
 801243c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2200      	movs	r2, #0
 8012442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3324      	adds	r3, #36	; 0x24
 801244a:	2204      	movs	r2, #4
 801244c:	2100      	movs	r1, #0
 801244e:	4618      	mov	r0, r3
 8012450:	f008 fba0 	bl	801ab94 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2200      	movs	r2, #0
 8012458:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6a3a      	ldr	r2, [r7, #32]
 801245e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012460:	4b3f      	ldr	r3, [pc, #252]	; (8012560 <netif_add+0x19c>)
 8012462:	781a      	ldrb	r2, [r3, #0]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801246e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	68b9      	ldr	r1, [r7, #8]
 8012476:	68f8      	ldr	r0, [r7, #12]
 8012478:	f000 f914 	bl	80126a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	4798      	blx	r3
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d001      	beq.n	801248c <netif_add+0xc8>
    return NULL;
 8012488:	2300      	movs	r3, #0
 801248a:	e058      	b.n	801253e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012492:	2bff      	cmp	r3, #255	; 0xff
 8012494:	d103      	bne.n	801249e <netif_add+0xda>
        netif->num = 0;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2200      	movs	r2, #0
 801249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801249e:	2300      	movs	r3, #0
 80124a0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80124a2:	4b30      	ldr	r3, [pc, #192]	; (8012564 <netif_add+0x1a0>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	617b      	str	r3, [r7, #20]
 80124a8:	e02b      	b.n	8012502 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80124aa:	697a      	ldr	r2, [r7, #20]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d106      	bne.n	80124c0 <netif_add+0xfc>
 80124b2:	4b25      	ldr	r3, [pc, #148]	; (8012548 <netif_add+0x184>)
 80124b4:	f240 128b 	movw	r2, #395	; 0x18b
 80124b8:	492b      	ldr	r1, [pc, #172]	; (8012568 <netif_add+0x1a4>)
 80124ba:	4825      	ldr	r0, [pc, #148]	; (8012550 <netif_add+0x18c>)
 80124bc:	f008 fb72 	bl	801aba4 <iprintf>
        num_netifs++;
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	3301      	adds	r3, #1
 80124c4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	2bff      	cmp	r3, #255	; 0xff
 80124ca:	dd06      	ble.n	80124da <netif_add+0x116>
 80124cc:	4b1e      	ldr	r3, [pc, #120]	; (8012548 <netif_add+0x184>)
 80124ce:	f240 128d 	movw	r2, #397	; 0x18d
 80124d2:	4926      	ldr	r1, [pc, #152]	; (801256c <netif_add+0x1a8>)
 80124d4:	481e      	ldr	r0, [pc, #120]	; (8012550 <netif_add+0x18c>)
 80124d6:	f008 fb65 	bl	801aba4 <iprintf>
        if (netif2->num == netif->num) {
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d108      	bne.n	80124fc <netif_add+0x138>
          netif->num++;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124f0:	3301      	adds	r3, #1
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80124fa:	e005      	b.n	8012508 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	617b      	str	r3, [r7, #20]
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d1d0      	bne.n	80124aa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d1be      	bne.n	801248c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012514:	2bfe      	cmp	r3, #254	; 0xfe
 8012516:	d103      	bne.n	8012520 <netif_add+0x15c>
    netif_num = 0;
 8012518:	4b11      	ldr	r3, [pc, #68]	; (8012560 <netif_add+0x19c>)
 801251a:	2200      	movs	r2, #0
 801251c:	701a      	strb	r2, [r3, #0]
 801251e:	e006      	b.n	801252e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012526:	3301      	adds	r3, #1
 8012528:	b2da      	uxtb	r2, r3
 801252a:	4b0d      	ldr	r3, [pc, #52]	; (8012560 <netif_add+0x19c>)
 801252c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801252e:	4b0d      	ldr	r3, [pc, #52]	; (8012564 <netif_add+0x1a0>)
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012536:	4a0b      	ldr	r2, [pc, #44]	; (8012564 <netif_add+0x1a0>)
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801253c:	68fb      	ldr	r3, [r7, #12]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3718      	adds	r7, #24
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	0801e450 	.word	0x0801e450
 801254c:	0801e564 	.word	0x0801e564
 8012550:	0801e520 	.word	0x0801e520
 8012554:	0801e580 	.word	0x0801e580
 8012558:	08020f30 	.word	0x08020f30
 801255c:	08012987 	.word	0x08012987
 8012560:	200085d0 	.word	0x200085d0
 8012564:	2000c654 	.word	0x2000c654
 8012568:	0801e5a4 	.word	0x0801e5a4
 801256c:	0801e5b8 	.word	0x0801e5b8

08012570 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801257a:	6839      	ldr	r1, [r7, #0]
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f002 fe99 	bl	80152b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012582:	6839      	ldr	r1, [r7, #0]
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f007 ffa1 	bl	801a4cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801258a:	bf00      	nop
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
	...

08012594 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d106      	bne.n	80125b4 <netif_do_set_ipaddr+0x20>
 80125a6:	4b1d      	ldr	r3, [pc, #116]	; (801261c <netif_do_set_ipaddr+0x88>)
 80125a8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80125ac:	491c      	ldr	r1, [pc, #112]	; (8012620 <netif_do_set_ipaddr+0x8c>)
 80125ae:	481d      	ldr	r0, [pc, #116]	; (8012624 <netif_do_set_ipaddr+0x90>)
 80125b0:	f008 faf8 	bl	801aba4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <netif_do_set_ipaddr+0x34>
 80125ba:	4b18      	ldr	r3, [pc, #96]	; (801261c <netif_do_set_ipaddr+0x88>)
 80125bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80125c0:	4917      	ldr	r1, [pc, #92]	; (8012620 <netif_do_set_ipaddr+0x8c>)
 80125c2:	4818      	ldr	r0, [pc, #96]	; (8012624 <netif_do_set_ipaddr+0x90>)
 80125c4:	f008 faee 	bl	801aba4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	3304      	adds	r3, #4
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d01c      	beq.n	8012610 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	3304      	adds	r3, #4
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80125e6:	f107 0314 	add.w	r3, r7, #20
 80125ea:	4619      	mov	r1, r3
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f7ff ffbf 	bl	8012570 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <netif_do_set_ipaddr+0x6a>
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	e000      	b.n	8012600 <netif_do_set_ipaddr+0x6c>
 80125fe:	2300      	movs	r3, #0
 8012600:	68fa      	ldr	r2, [r7, #12]
 8012602:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012604:	2101      	movs	r1, #1
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f000 f8d2 	bl	80127b0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801260c:	2301      	movs	r3, #1
 801260e:	e000      	b.n	8012612 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012610:	2300      	movs	r3, #0
}
 8012612:	4618      	mov	r0, r3
 8012614:	3718      	adds	r7, #24
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	0801e450 	.word	0x0801e450
 8012620:	0801e5e8 	.word	0x0801e5e8
 8012624:	0801e520 	.word	0x0801e520

08012628 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012628:	b480      	push	{r7}
 801262a:	b085      	sub	sp, #20
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	3308      	adds	r3, #8
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	429a      	cmp	r2, r3
 8012640:	d00a      	beq.n	8012658 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d002      	beq.n	801264e <netif_do_set_netmask+0x26>
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	e000      	b.n	8012650 <netif_do_set_netmask+0x28>
 801264e:	2300      	movs	r3, #0
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012654:	2301      	movs	r3, #1
 8012656:	e000      	b.n	801265a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012658:	2300      	movs	r3, #0
}
 801265a:	4618      	mov	r0, r3
 801265c:	3714      	adds	r7, #20
 801265e:	46bd      	mov	sp, r7
 8012660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012664:	4770      	bx	lr

08012666 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012666:	b480      	push	{r7}
 8012668:	b085      	sub	sp, #20
 801266a:	af00      	add	r7, sp, #0
 801266c:	60f8      	str	r0, [r7, #12]
 801266e:	60b9      	str	r1, [r7, #8]
 8012670:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	681a      	ldr	r2, [r3, #0]
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	330c      	adds	r3, #12
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	429a      	cmp	r2, r3
 801267e:	d00a      	beq.n	8012696 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d002      	beq.n	801268c <netif_do_set_gw+0x26>
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	e000      	b.n	801268e <netif_do_set_gw+0x28>
 801268c:	2300      	movs	r3, #0
 801268e:	68fa      	ldr	r2, [r7, #12]
 8012690:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012692:	2301      	movs	r3, #1
 8012694:	e000      	b.n	8012698 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012696:	2300      	movs	r3, #0
}
 8012698:	4618      	mov	r0, r3
 801269a:	3714      	adds	r7, #20
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr

080126a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b088      	sub	sp, #32
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80126b2:	2300      	movs	r3, #0
 80126b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80126b6:	2300      	movs	r3, #0
 80126b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d101      	bne.n	80126c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80126c0:	4b1c      	ldr	r3, [pc, #112]	; (8012734 <netif_set_addr+0x90>)
 80126c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d101      	bne.n	80126ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80126ca:	4b1a      	ldr	r3, [pc, #104]	; (8012734 <netif_set_addr+0x90>)
 80126cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80126d4:	4b17      	ldr	r3, [pc, #92]	; (8012734 <netif_set_addr+0x90>)
 80126d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d003      	beq.n	80126e6 <netif_set_addr+0x42>
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d101      	bne.n	80126ea <netif_set_addr+0x46>
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <netif_set_addr+0x48>
 80126ea:	2300      	movs	r3, #0
 80126ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d006      	beq.n	8012702 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80126f4:	f107 0310 	add.w	r3, r7, #16
 80126f8:	461a      	mov	r2, r3
 80126fa:	68b9      	ldr	r1, [r7, #8]
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f7ff ff49 	bl	8012594 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012702:	69fa      	ldr	r2, [r7, #28]
 8012704:	6879      	ldr	r1, [r7, #4]
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f7ff ff8e 	bl	8012628 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801270c:	69ba      	ldr	r2, [r7, #24]
 801270e:	6839      	ldr	r1, [r7, #0]
 8012710:	68f8      	ldr	r0, [r7, #12]
 8012712:	f7ff ffa8 	bl	8012666 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d106      	bne.n	801272a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801271c:	f107 0310 	add.w	r3, r7, #16
 8012720:	461a      	mov	r2, r3
 8012722:	68b9      	ldr	r1, [r7, #8]
 8012724:	68f8      	ldr	r0, [r7, #12]
 8012726:	f7ff ff35 	bl	8012594 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801272a:	bf00      	nop
 801272c:	3720      	adds	r7, #32
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	08020f30 	.word	0x08020f30

08012738 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012740:	4a04      	ldr	r2, [pc, #16]	; (8012754 <netif_set_default+0x1c>)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012746:	bf00      	nop
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	2000c658 	.word	0x2000c658

08012758 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d107      	bne.n	8012776 <netif_set_up+0x1e>
 8012766:	4b0f      	ldr	r3, [pc, #60]	; (80127a4 <netif_set_up+0x4c>)
 8012768:	f44f 7254 	mov.w	r2, #848	; 0x350
 801276c:	490e      	ldr	r1, [pc, #56]	; (80127a8 <netif_set_up+0x50>)
 801276e:	480f      	ldr	r0, [pc, #60]	; (80127ac <netif_set_up+0x54>)
 8012770:	f008 fa18 	bl	801aba4 <iprintf>
 8012774:	e013      	b.n	801279e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801277c:	f003 0301 	and.w	r3, r3, #1
 8012780:	2b00      	cmp	r3, #0
 8012782:	d10c      	bne.n	801279e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801278a:	f043 0301 	orr.w	r3, r3, #1
 801278e:	b2da      	uxtb	r2, r3
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012796:	2103      	movs	r1, #3
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 f809 	bl	80127b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	0801e450 	.word	0x0801e450
 80127a8:	0801e658 	.word	0x0801e658
 80127ac:	0801e520 	.word	0x0801e520

080127b0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	460b      	mov	r3, r1
 80127ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <netif_issue_reports+0x20>
 80127c2:	4b18      	ldr	r3, [pc, #96]	; (8012824 <netif_issue_reports+0x74>)
 80127c4:	f240 326d 	movw	r2, #877	; 0x36d
 80127c8:	4917      	ldr	r1, [pc, #92]	; (8012828 <netif_issue_reports+0x78>)
 80127ca:	4818      	ldr	r0, [pc, #96]	; (801282c <netif_issue_reports+0x7c>)
 80127cc:	f008 f9ea 	bl	801aba4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127d6:	f003 0304 	and.w	r3, r3, #4
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d01e      	beq.n	801281c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127e4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d017      	beq.n	801281c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80127ec:	78fb      	ldrb	r3, [r7, #3]
 80127ee:	f003 0301 	and.w	r3, r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d013      	beq.n	801281e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	3304      	adds	r3, #4
 80127fa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00e      	beq.n	801281e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012806:	f003 0308 	and.w	r3, r3, #8
 801280a:	2b00      	cmp	r3, #0
 801280c:	d007      	beq.n	801281e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	3304      	adds	r3, #4
 8012812:	4619      	mov	r1, r3
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7fd fd01 	bl	801021c <etharp_request>
 801281a:	e000      	b.n	801281e <netif_issue_reports+0x6e>
    return;
 801281c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	0801e450 	.word	0x0801e450
 8012828:	0801e674 	.word	0x0801e674
 801282c:	0801e520 	.word	0x0801e520

08012830 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d107      	bne.n	801284e <netif_set_down+0x1e>
 801283e:	4b12      	ldr	r3, [pc, #72]	; (8012888 <netif_set_down+0x58>)
 8012840:	f240 329b 	movw	r2, #923	; 0x39b
 8012844:	4911      	ldr	r1, [pc, #68]	; (801288c <netif_set_down+0x5c>)
 8012846:	4812      	ldr	r0, [pc, #72]	; (8012890 <netif_set_down+0x60>)
 8012848:	f008 f9ac 	bl	801aba4 <iprintf>
 801284c:	e019      	b.n	8012882 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	2b00      	cmp	r3, #0
 801285a:	d012      	beq.n	8012882 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012862:	f023 0301 	bic.w	r3, r3, #1
 8012866:	b2da      	uxtb	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012874:	f003 0308 	and.w	r3, r3, #8
 8012878:	2b00      	cmp	r3, #0
 801287a:	d002      	beq.n	8012882 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7fd f887 	bl	800f990 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	0801e450 	.word	0x0801e450
 801288c:	0801e698 	.word	0x0801e698
 8012890:	0801e520 	.word	0x0801e520

08012894 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d107      	bne.n	80128b2 <netif_set_link_up+0x1e>
 80128a2:	4b15      	ldr	r3, [pc, #84]	; (80128f8 <netif_set_link_up+0x64>)
 80128a4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80128a8:	4914      	ldr	r1, [pc, #80]	; (80128fc <netif_set_link_up+0x68>)
 80128aa:	4815      	ldr	r0, [pc, #84]	; (8012900 <netif_set_link_up+0x6c>)
 80128ac:	f008 f97a 	bl	801aba4 <iprintf>
 80128b0:	e01e      	b.n	80128f0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128b8:	f003 0304 	and.w	r3, r3, #4
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d117      	bne.n	80128f0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128c6:	f043 0304 	orr.w	r3, r3, #4
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f7fb facc 	bl	800de70 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80128d8:	2103      	movs	r1, #3
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f7ff ff68 	bl	80127b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	69db      	ldr	r3, [r3, #28]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d003      	beq.n	80128f0 <netif_set_link_up+0x5c>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	69db      	ldr	r3, [r3, #28]
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80128f0:	3708      	adds	r7, #8
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	0801e450 	.word	0x0801e450
 80128fc:	0801e6b8 	.word	0x0801e6b8
 8012900:	0801e520 	.word	0x0801e520

08012904 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d107      	bne.n	8012922 <netif_set_link_down+0x1e>
 8012912:	4b11      	ldr	r3, [pc, #68]	; (8012958 <netif_set_link_down+0x54>)
 8012914:	f240 4206 	movw	r2, #1030	; 0x406
 8012918:	4910      	ldr	r1, [pc, #64]	; (801295c <netif_set_link_down+0x58>)
 801291a:	4811      	ldr	r0, [pc, #68]	; (8012960 <netif_set_link_down+0x5c>)
 801291c:	f008 f942 	bl	801aba4 <iprintf>
 8012920:	e017      	b.n	8012952 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012928:	f003 0304 	and.w	r3, r3, #4
 801292c:	2b00      	cmp	r3, #0
 801292e:	d010      	beq.n	8012952 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012936:	f023 0304 	bic.w	r3, r3, #4
 801293a:	b2da      	uxtb	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	69db      	ldr	r3, [r3, #28]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d003      	beq.n	8012952 <netif_set_link_down+0x4e>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	69db      	ldr	r3, [r3, #28]
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	0801e450 	.word	0x0801e450
 801295c:	0801e6dc 	.word	0x0801e6dc
 8012960:	0801e520 	.word	0x0801e520

08012964 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012964:	b480      	push	{r7}
 8012966:	b083      	sub	sp, #12
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d002      	beq.n	801297a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	683a      	ldr	r2, [r7, #0]
 8012978:	61da      	str	r2, [r3, #28]
  }
}
 801297a:	bf00      	nop
 801297c:	370c      	adds	r7, #12
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012986:	b480      	push	{r7}
 8012988:	b085      	sub	sp, #20
 801298a:	af00      	add	r7, sp, #0
 801298c:	60f8      	str	r0, [r7, #12]
 801298e:	60b9      	str	r1, [r7, #8]
 8012990:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012992:	f06f 030b 	mvn.w	r3, #11
}
 8012996:	4618      	mov	r0, r3
 8012998:	3714      	adds	r7, #20
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
	...

080129a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b085      	sub	sp, #20
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	4603      	mov	r3, r0
 80129ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80129ae:	79fb      	ldrb	r3, [r7, #7]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d013      	beq.n	80129dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80129b4:	4b0d      	ldr	r3, [pc, #52]	; (80129ec <netif_get_by_index+0x48>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	60fb      	str	r3, [r7, #12]
 80129ba:	e00c      	b.n	80129d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80129c2:	3301      	adds	r3, #1
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	79fa      	ldrb	r2, [r7, #7]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d101      	bne.n	80129d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	e006      	b.n	80129de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	60fb      	str	r3, [r7, #12]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1ef      	bne.n	80129bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80129dc:	2300      	movs	r3, #0
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3714      	adds	r7, #20
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	2000c654 	.word	0x2000c654

080129f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80129f6:	f008 f807 	bl	801aa08 <sys_arch_protect>
 80129fa:	6038      	str	r0, [r7, #0]
 80129fc:	4b0d      	ldr	r3, [pc, #52]	; (8012a34 <pbuf_free_ooseq+0x44>)
 80129fe:	2200      	movs	r2, #0
 8012a00:	701a      	strb	r2, [r3, #0]
 8012a02:	6838      	ldr	r0, [r7, #0]
 8012a04:	f008 f80e 	bl	801aa24 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012a08:	4b0b      	ldr	r3, [pc, #44]	; (8012a38 <pbuf_free_ooseq+0x48>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	607b      	str	r3, [r7, #4]
 8012a0e:	e00a      	b.n	8012a26 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d003      	beq.n	8012a20 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f002 fc89 	bl	8015330 <tcp_free_ooseq>
      return;
 8012a1e:	e005      	b.n	8012a2c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	607b      	str	r3, [r7, #4]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d1f1      	bne.n	8012a10 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	bf00      	nop
 8012a34:	2000c65c 	.word	0x2000c65c
 8012a38:	2000c664 	.word	0x2000c664

08012a3c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012a44:	f7ff ffd4 	bl	80129f0 <pbuf_free_ooseq>
}
 8012a48:	bf00      	nop
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012a56:	f007 ffd7 	bl	801aa08 <sys_arch_protect>
 8012a5a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012a5c:	4b0f      	ldr	r3, [pc, #60]	; (8012a9c <pbuf_pool_is_empty+0x4c>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012a62:	4b0e      	ldr	r3, [pc, #56]	; (8012a9c <pbuf_pool_is_empty+0x4c>)
 8012a64:	2201      	movs	r2, #1
 8012a66:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f007 ffdb 	bl	801aa24 <sys_arch_unprotect>

  if (!queued) {
 8012a6e:	78fb      	ldrb	r3, [r7, #3]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d10f      	bne.n	8012a94 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012a74:	2100      	movs	r1, #0
 8012a76:	480a      	ldr	r0, [pc, #40]	; (8012aa0 <pbuf_pool_is_empty+0x50>)
 8012a78:	f7fa fd5e 	bl	800d538 <tcpip_try_callback>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d008      	beq.n	8012a94 <pbuf_pool_is_empty+0x44>
 8012a82:	f007 ffc1 	bl	801aa08 <sys_arch_protect>
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	4b04      	ldr	r3, [pc, #16]	; (8012a9c <pbuf_pool_is_empty+0x4c>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	701a      	strb	r2, [r3, #0]
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f007 ffc8 	bl	801aa24 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012a94:	bf00      	nop
 8012a96:	3708      	adds	r7, #8
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	2000c65c 	.word	0x2000c65c
 8012aa0:	08012a3d 	.word	0x08012a3d

08012aa4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b085      	sub	sp, #20
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	60b9      	str	r1, [r7, #8]
 8012aae:	4611      	mov	r1, r2
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	80fb      	strh	r3, [r7, #6]
 8012ab6:	4613      	mov	r3, r2
 8012ab8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2200      	movs	r2, #0
 8012abe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	68ba      	ldr	r2, [r7, #8]
 8012ac4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	88fa      	ldrh	r2, [r7, #6]
 8012aca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	88ba      	ldrh	r2, [r7, #4]
 8012ad0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012ad2:	8b3b      	ldrh	r3, [r7, #24]
 8012ad4:	b2da      	uxtb	r2, r3
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	7f3a      	ldrb	r2, [r7, #28]
 8012ade:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	73da      	strb	r2, [r3, #15]
}
 8012aec:	bf00      	nop
 8012aee:	3714      	adds	r7, #20
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr

08012af8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b08c      	sub	sp, #48	; 0x30
 8012afc:	af02      	add	r7, sp, #8
 8012afe:	4603      	mov	r3, r0
 8012b00:	71fb      	strb	r3, [r7, #7]
 8012b02:	460b      	mov	r3, r1
 8012b04:	80bb      	strh	r3, [r7, #4]
 8012b06:	4613      	mov	r3, r2
 8012b08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012b0a:	79fb      	ldrb	r3, [r7, #7]
 8012b0c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012b0e:	887b      	ldrh	r3, [r7, #2]
 8012b10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012b14:	d07f      	beq.n	8012c16 <pbuf_alloc+0x11e>
 8012b16:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012b1a:	f300 80c8 	bgt.w	8012cae <pbuf_alloc+0x1b6>
 8012b1e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012b22:	d010      	beq.n	8012b46 <pbuf_alloc+0x4e>
 8012b24:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012b28:	f300 80c1 	bgt.w	8012cae <pbuf_alloc+0x1b6>
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d002      	beq.n	8012b36 <pbuf_alloc+0x3e>
 8012b30:	2b41      	cmp	r3, #65	; 0x41
 8012b32:	f040 80bc 	bne.w	8012cae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012b36:	887a      	ldrh	r2, [r7, #2]
 8012b38:	88bb      	ldrh	r3, [r7, #4]
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	2000      	movs	r0, #0
 8012b3e:	f000 f8d1 	bl	8012ce4 <pbuf_alloc_reference>
 8012b42:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012b44:	e0bd      	b.n	8012cc2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012b46:	2300      	movs	r3, #0
 8012b48:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012b4e:	88bb      	ldrh	r3, [r7, #4]
 8012b50:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012b52:	200c      	movs	r0, #12
 8012b54:	f7ff fb8e 	bl	8012274 <memp_malloc>
 8012b58:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012b60:	f7ff ff76 	bl	8012a50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d002      	beq.n	8012b70 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b6c:	f000 fada 	bl	8013124 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012b70:	2300      	movs	r3, #0
 8012b72:	e0a7      	b.n	8012cc4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012b74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b76:	3303      	adds	r3, #3
 8012b78:	b29b      	uxth	r3, r3
 8012b7a:	f023 0303 	bic.w	r3, r3, #3
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	8b7a      	ldrh	r2, [r7, #26]
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	bf28      	it	cs
 8012b8c:	4613      	movcs	r3, r2
 8012b8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b92:	3310      	adds	r3, #16
 8012b94:	693a      	ldr	r2, [r7, #16]
 8012b96:	4413      	add	r3, r2
 8012b98:	3303      	adds	r3, #3
 8012b9a:	f023 0303 	bic.w	r3, r3, #3
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	89f9      	ldrh	r1, [r7, #14]
 8012ba2:	8b7a      	ldrh	r2, [r7, #26]
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	887b      	ldrh	r3, [r7, #2]
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	460b      	mov	r3, r1
 8012bae:	4601      	mov	r1, r0
 8012bb0:	6938      	ldr	r0, [r7, #16]
 8012bb2:	f7ff ff77 	bl	8012aa4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	f003 0303 	and.w	r3, r3, #3
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d006      	beq.n	8012bd0 <pbuf_alloc+0xd8>
 8012bc2:	4b42      	ldr	r3, [pc, #264]	; (8012ccc <pbuf_alloc+0x1d4>)
 8012bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bc8:	4941      	ldr	r1, [pc, #260]	; (8012cd0 <pbuf_alloc+0x1d8>)
 8012bca:	4842      	ldr	r0, [pc, #264]	; (8012cd4 <pbuf_alloc+0x1dc>)
 8012bcc:	f007 ffea 	bl	801aba4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012bd2:	3303      	adds	r3, #3
 8012bd4:	f023 0303 	bic.w	r3, r3, #3
 8012bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012bdc:	d106      	bne.n	8012bec <pbuf_alloc+0xf4>
 8012bde:	4b3b      	ldr	r3, [pc, #236]	; (8012ccc <pbuf_alloc+0x1d4>)
 8012be0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012be4:	493c      	ldr	r1, [pc, #240]	; (8012cd8 <pbuf_alloc+0x1e0>)
 8012be6:	483b      	ldr	r0, [pc, #236]	; (8012cd4 <pbuf_alloc+0x1dc>)
 8012be8:	f007 ffdc 	bl	801aba4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d102      	bne.n	8012bf8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8012bf6:	e002      	b.n	8012bfe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	693a      	ldr	r2, [r7, #16]
 8012bfc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012c02:	8b7a      	ldrh	r2, [r7, #26]
 8012c04:	89fb      	ldrh	r3, [r7, #14]
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012c0e:	8b7b      	ldrh	r3, [r7, #26]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d19e      	bne.n	8012b52 <pbuf_alloc+0x5a>
      break;
 8012c14:	e055      	b.n	8012cc2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c18:	3303      	adds	r3, #3
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	f023 0303 	bic.w	r3, r3, #3
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	88bb      	ldrh	r3, [r7, #4]
 8012c24:	3303      	adds	r3, #3
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	f023 0303 	bic.w	r3, r3, #3
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	4413      	add	r3, r2
 8012c30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012c32:	8b3b      	ldrh	r3, [r7, #24]
 8012c34:	3310      	adds	r3, #16
 8012c36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012c38:	8b3a      	ldrh	r2, [r7, #24]
 8012c3a:	88bb      	ldrh	r3, [r7, #4]
 8012c3c:	3303      	adds	r3, #3
 8012c3e:	f023 0303 	bic.w	r3, r3, #3
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d306      	bcc.n	8012c54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012c46:	8afa      	ldrh	r2, [r7, #22]
 8012c48:	88bb      	ldrh	r3, [r7, #4]
 8012c4a:	3303      	adds	r3, #3
 8012c4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d201      	bcs.n	8012c58 <pbuf_alloc+0x160>
        return NULL;
 8012c54:	2300      	movs	r3, #0
 8012c56:	e035      	b.n	8012cc4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012c58:	8afb      	ldrh	r3, [r7, #22]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff f966 	bl	8011f2c <mem_malloc>
 8012c60:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d101      	bne.n	8012c6c <pbuf_alloc+0x174>
        return NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e02b      	b.n	8012cc4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c6e:	3310      	adds	r3, #16
 8012c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c72:	4413      	add	r3, r2
 8012c74:	3303      	adds	r3, #3
 8012c76:	f023 0303 	bic.w	r3, r3, #3
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	88b9      	ldrh	r1, [r7, #4]
 8012c7e:	88ba      	ldrh	r2, [r7, #4]
 8012c80:	2300      	movs	r3, #0
 8012c82:	9301      	str	r3, [sp, #4]
 8012c84:	887b      	ldrh	r3, [r7, #2]
 8012c86:	9300      	str	r3, [sp, #0]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	4601      	mov	r1, r0
 8012c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c8e:	f7ff ff09 	bl	8012aa4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	f003 0303 	and.w	r3, r3, #3
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d010      	beq.n	8012cc0 <pbuf_alloc+0x1c8>
 8012c9e:	4b0b      	ldr	r3, [pc, #44]	; (8012ccc <pbuf_alloc+0x1d4>)
 8012ca0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012ca4:	490d      	ldr	r1, [pc, #52]	; (8012cdc <pbuf_alloc+0x1e4>)
 8012ca6:	480b      	ldr	r0, [pc, #44]	; (8012cd4 <pbuf_alloc+0x1dc>)
 8012ca8:	f007 ff7c 	bl	801aba4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012cac:	e008      	b.n	8012cc0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012cae:	4b07      	ldr	r3, [pc, #28]	; (8012ccc <pbuf_alloc+0x1d4>)
 8012cb0:	f240 1227 	movw	r2, #295	; 0x127
 8012cb4:	490a      	ldr	r1, [pc, #40]	; (8012ce0 <pbuf_alloc+0x1e8>)
 8012cb6:	4807      	ldr	r0, [pc, #28]	; (8012cd4 <pbuf_alloc+0x1dc>)
 8012cb8:	f007 ff74 	bl	801aba4 <iprintf>
      return NULL;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	e001      	b.n	8012cc4 <pbuf_alloc+0x1cc>
      break;
 8012cc0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3728      	adds	r7, #40	; 0x28
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	0801e700 	.word	0x0801e700
 8012cd0:	0801e7b4 	.word	0x0801e7b4
 8012cd4:	0801e7e4 	.word	0x0801e7e4
 8012cd8:	0801e80c 	.word	0x0801e80c
 8012cdc:	0801e840 	.word	0x0801e840
 8012ce0:	0801e86c 	.word	0x0801e86c

08012ce4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b086      	sub	sp, #24
 8012ce8:	af02      	add	r7, sp, #8
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	460b      	mov	r3, r1
 8012cee:	807b      	strh	r3, [r7, #2]
 8012cf0:	4613      	mov	r3, r2
 8012cf2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012cf4:	883b      	ldrh	r3, [r7, #0]
 8012cf6:	2b41      	cmp	r3, #65	; 0x41
 8012cf8:	d009      	beq.n	8012d0e <pbuf_alloc_reference+0x2a>
 8012cfa:	883b      	ldrh	r3, [r7, #0]
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d006      	beq.n	8012d0e <pbuf_alloc_reference+0x2a>
 8012d00:	4b0f      	ldr	r3, [pc, #60]	; (8012d40 <pbuf_alloc_reference+0x5c>)
 8012d02:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012d06:	490f      	ldr	r1, [pc, #60]	; (8012d44 <pbuf_alloc_reference+0x60>)
 8012d08:	480f      	ldr	r0, [pc, #60]	; (8012d48 <pbuf_alloc_reference+0x64>)
 8012d0a:	f007 ff4b 	bl	801aba4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012d0e:	200b      	movs	r0, #11
 8012d10:	f7ff fab0 	bl	8012274 <memp_malloc>
 8012d14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d101      	bne.n	8012d20 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	e00b      	b.n	8012d38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012d20:	8879      	ldrh	r1, [r7, #2]
 8012d22:	887a      	ldrh	r2, [r7, #2]
 8012d24:	2300      	movs	r3, #0
 8012d26:	9301      	str	r3, [sp, #4]
 8012d28:	883b      	ldrh	r3, [r7, #0]
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	6879      	ldr	r1, [r7, #4]
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f7ff feb7 	bl	8012aa4 <pbuf_init_alloced_pbuf>
  return p;
 8012d36:	68fb      	ldr	r3, [r7, #12]
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3710      	adds	r7, #16
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}
 8012d40:	0801e700 	.word	0x0801e700
 8012d44:	0801e888 	.word	0x0801e888
 8012d48:	0801e7e4 	.word	0x0801e7e4

08012d4c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b088      	sub	sp, #32
 8012d50:	af02      	add	r7, sp, #8
 8012d52:	607b      	str	r3, [r7, #4]
 8012d54:	4603      	mov	r3, r0
 8012d56:	73fb      	strb	r3, [r7, #15]
 8012d58:	460b      	mov	r3, r1
 8012d5a:	81bb      	strh	r3, [r7, #12]
 8012d5c:	4613      	mov	r3, r2
 8012d5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012d64:	8a7b      	ldrh	r3, [r7, #18]
 8012d66:	3303      	adds	r3, #3
 8012d68:	f023 0203 	bic.w	r2, r3, #3
 8012d6c:	89bb      	ldrh	r3, [r7, #12]
 8012d6e:	441a      	add	r2, r3
 8012d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d901      	bls.n	8012d7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	e018      	b.n	8012dac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012d7a:	6a3b      	ldr	r3, [r7, #32]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d007      	beq.n	8012d90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012d80:	8a7b      	ldrh	r3, [r7, #18]
 8012d82:	3303      	adds	r3, #3
 8012d84:	f023 0303 	bic.w	r3, r3, #3
 8012d88:	6a3a      	ldr	r2, [r7, #32]
 8012d8a:	4413      	add	r3, r2
 8012d8c:	617b      	str	r3, [r7, #20]
 8012d8e:	e001      	b.n	8012d94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012d90:	2300      	movs	r3, #0
 8012d92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	89b9      	ldrh	r1, [r7, #12]
 8012d98:	89ba      	ldrh	r2, [r7, #12]
 8012d9a:	2302      	movs	r3, #2
 8012d9c:	9301      	str	r3, [sp, #4]
 8012d9e:	897b      	ldrh	r3, [r7, #10]
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	460b      	mov	r3, r1
 8012da4:	6979      	ldr	r1, [r7, #20]
 8012da6:	f7ff fe7d 	bl	8012aa4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012daa:	687b      	ldr	r3, [r7, #4]
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3718      	adds	r7, #24
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d106      	bne.n	8012dd4 <pbuf_realloc+0x20>
 8012dc6:	4b3a      	ldr	r3, [pc, #232]	; (8012eb0 <pbuf_realloc+0xfc>)
 8012dc8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012dcc:	4939      	ldr	r1, [pc, #228]	; (8012eb4 <pbuf_realloc+0x100>)
 8012dce:	483a      	ldr	r0, [pc, #232]	; (8012eb8 <pbuf_realloc+0x104>)
 8012dd0:	f007 fee8 	bl	801aba4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	891b      	ldrh	r3, [r3, #8]
 8012dd8:	887a      	ldrh	r2, [r7, #2]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d263      	bcs.n	8012ea6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	891a      	ldrh	r2, [r3, #8]
 8012de2:	887b      	ldrh	r3, [r7, #2]
 8012de4:	1ad3      	subs	r3, r2, r3
 8012de6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012de8:	887b      	ldrh	r3, [r7, #2]
 8012dea:	817b      	strh	r3, [r7, #10]
  q = p;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012df0:	e018      	b.n	8012e24 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	895b      	ldrh	r3, [r3, #10]
 8012df6:	897a      	ldrh	r2, [r7, #10]
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	891a      	ldrh	r2, [r3, #8]
 8012e00:	893b      	ldrh	r3, [r7, #8]
 8012e02:	1ad3      	subs	r3, r2, r3
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d106      	bne.n	8012e24 <pbuf_realloc+0x70>
 8012e16:	4b26      	ldr	r3, [pc, #152]	; (8012eb0 <pbuf_realloc+0xfc>)
 8012e18:	f240 12af 	movw	r2, #431	; 0x1af
 8012e1c:	4927      	ldr	r1, [pc, #156]	; (8012ebc <pbuf_realloc+0x108>)
 8012e1e:	4826      	ldr	r0, [pc, #152]	; (8012eb8 <pbuf_realloc+0x104>)
 8012e20:	f007 fec0 	bl	801aba4 <iprintf>
  while (rem_len > q->len) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	895b      	ldrh	r3, [r3, #10]
 8012e28:	897a      	ldrh	r2, [r7, #10]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d8e1      	bhi.n	8012df2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	7b1b      	ldrb	r3, [r3, #12]
 8012e32:	f003 030f 	and.w	r3, r3, #15
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d121      	bne.n	8012e7e <pbuf_realloc+0xca>
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	895b      	ldrh	r3, [r3, #10]
 8012e3e:	897a      	ldrh	r2, [r7, #10]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d01c      	beq.n	8012e7e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	7b5b      	ldrb	r3, [r3, #13]
 8012e48:	f003 0302 	and.w	r3, r3, #2
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d116      	bne.n	8012e7e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	685a      	ldr	r2, [r3, #4]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	b29a      	uxth	r2, r3
 8012e5a:	897b      	ldrh	r3, [r7, #10]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	4619      	mov	r1, r3
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f7fe ff58 	bl	8011d18 <mem_trim>
 8012e68:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d106      	bne.n	8012e7e <pbuf_realloc+0xca>
 8012e70:	4b0f      	ldr	r3, [pc, #60]	; (8012eb0 <pbuf_realloc+0xfc>)
 8012e72:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012e76:	4912      	ldr	r1, [pc, #72]	; (8012ec0 <pbuf_realloc+0x10c>)
 8012e78:	480f      	ldr	r0, [pc, #60]	; (8012eb8 <pbuf_realloc+0x104>)
 8012e7a:	f007 fe93 	bl	801aba4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	897a      	ldrh	r2, [r7, #10]
 8012e82:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	895a      	ldrh	r2, [r3, #10]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d004      	beq.n	8012e9e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 f943 	bl	8013124 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	601a      	str	r2, [r3, #0]
 8012ea4:	e000      	b.n	8012ea8 <pbuf_realloc+0xf4>
    return;
 8012ea6:	bf00      	nop

}
 8012ea8:	3710      	adds	r7, #16
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	0801e700 	.word	0x0801e700
 8012eb4:	0801e89c 	.word	0x0801e89c
 8012eb8:	0801e7e4 	.word	0x0801e7e4
 8012ebc:	0801e8b4 	.word	0x0801e8b4
 8012ec0:	0801e8cc 	.word	0x0801e8cc

08012ec4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b086      	sub	sp, #24
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60f8      	str	r0, [r7, #12]
 8012ecc:	60b9      	str	r1, [r7, #8]
 8012ece:	4613      	mov	r3, r2
 8012ed0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d106      	bne.n	8012ee6 <pbuf_add_header_impl+0x22>
 8012ed8:	4b2b      	ldr	r3, [pc, #172]	; (8012f88 <pbuf_add_header_impl+0xc4>)
 8012eda:	f240 12df 	movw	r2, #479	; 0x1df
 8012ede:	492b      	ldr	r1, [pc, #172]	; (8012f8c <pbuf_add_header_impl+0xc8>)
 8012ee0:	482b      	ldr	r0, [pc, #172]	; (8012f90 <pbuf_add_header_impl+0xcc>)
 8012ee2:	f007 fe5f 	bl	801aba4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d003      	beq.n	8012ef4 <pbuf_add_header_impl+0x30>
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ef2:	d301      	bcc.n	8012ef8 <pbuf_add_header_impl+0x34>
    return 1;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	e043      	b.n	8012f80 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d101      	bne.n	8012f02 <pbuf_add_header_impl+0x3e>
    return 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	e03e      	b.n	8012f80 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	891a      	ldrh	r2, [r3, #8]
 8012f0a:	8a7b      	ldrh	r3, [r7, #18]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	8a7a      	ldrh	r2, [r7, #18]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d901      	bls.n	8012f1a <pbuf_add_header_impl+0x56>
    return 1;
 8012f16:	2301      	movs	r3, #1
 8012f18:	e032      	b.n	8012f80 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	7b1b      	ldrb	r3, [r3, #12]
 8012f1e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012f20:	8a3b      	ldrh	r3, [r7, #16]
 8012f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00c      	beq.n	8012f44 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	685a      	ldr	r2, [r3, #4]
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	425b      	negs	r3, r3
 8012f32:	4413      	add	r3, r2
 8012f34:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	3310      	adds	r3, #16
 8012f3a:	697a      	ldr	r2, [r7, #20]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d20d      	bcs.n	8012f5c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012f40:	2301      	movs	r3, #1
 8012f42:	e01d      	b.n	8012f80 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012f44:	79fb      	ldrb	r3, [r7, #7]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d006      	beq.n	8012f58 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	685a      	ldr	r2, [r3, #4]
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	425b      	negs	r3, r3
 8012f52:	4413      	add	r3, r2
 8012f54:	617b      	str	r3, [r7, #20]
 8012f56:	e001      	b.n	8012f5c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e011      	b.n	8012f80 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	697a      	ldr	r2, [r7, #20]
 8012f60:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	895a      	ldrh	r2, [r3, #10]
 8012f66:	8a7b      	ldrh	r3, [r7, #18]
 8012f68:	4413      	add	r3, r2
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	891a      	ldrh	r2, [r3, #8]
 8012f74:	8a7b      	ldrh	r3, [r7, #18]
 8012f76:	4413      	add	r3, r2
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	811a      	strh	r2, [r3, #8]


  return 0;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3718      	adds	r7, #24
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	0801e700 	.word	0x0801e700
 8012f8c:	0801e8e8 	.word	0x0801e8e8
 8012f90:	0801e7e4 	.word	0x0801e7e4

08012f94 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7ff ff8e 	bl	8012ec4 <pbuf_add_header_impl>
 8012fa8:	4603      	mov	r3, r0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
	...

08012fb4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d106      	bne.n	8012fd2 <pbuf_remove_header+0x1e>
 8012fc4:	4b20      	ldr	r3, [pc, #128]	; (8013048 <pbuf_remove_header+0x94>)
 8012fc6:	f240 224b 	movw	r2, #587	; 0x24b
 8012fca:	4920      	ldr	r1, [pc, #128]	; (801304c <pbuf_remove_header+0x98>)
 8012fcc:	4820      	ldr	r0, [pc, #128]	; (8013050 <pbuf_remove_header+0x9c>)
 8012fce:	f007 fde9 	bl	801aba4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d003      	beq.n	8012fe0 <pbuf_remove_header+0x2c>
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fde:	d301      	bcc.n	8012fe4 <pbuf_remove_header+0x30>
    return 1;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e02c      	b.n	801303e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d101      	bne.n	8012fee <pbuf_remove_header+0x3a>
    return 0;
 8012fea:	2300      	movs	r3, #0
 8012fec:	e027      	b.n	801303e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	895b      	ldrh	r3, [r3, #10]
 8012ff6:	89fa      	ldrh	r2, [r7, #14]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d908      	bls.n	801300e <pbuf_remove_header+0x5a>
 8012ffc:	4b12      	ldr	r3, [pc, #72]	; (8013048 <pbuf_remove_header+0x94>)
 8012ffe:	f240 2255 	movw	r2, #597	; 0x255
 8013002:	4914      	ldr	r1, [pc, #80]	; (8013054 <pbuf_remove_header+0xa0>)
 8013004:	4812      	ldr	r0, [pc, #72]	; (8013050 <pbuf_remove_header+0x9c>)
 8013006:	f007 fdcd 	bl	801aba4 <iprintf>
 801300a:	2301      	movs	r3, #1
 801300c:	e017      	b.n	801303e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	685a      	ldr	r2, [r3, #4]
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	441a      	add	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	895a      	ldrh	r2, [r3, #10]
 8013024:	89fb      	ldrh	r3, [r7, #14]
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	b29a      	uxth	r2, r3
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	891a      	ldrh	r2, [r3, #8]
 8013032:	89fb      	ldrh	r3, [r7, #14]
 8013034:	1ad3      	subs	r3, r2, r3
 8013036:	b29a      	uxth	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	0801e700 	.word	0x0801e700
 801304c:	0801e8e8 	.word	0x0801e8e8
 8013050:	0801e7e4 	.word	0x0801e7e4
 8013054:	0801e8f4 	.word	0x0801e8f4

08013058 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	460b      	mov	r3, r1
 8013062:	807b      	strh	r3, [r7, #2]
 8013064:	4613      	mov	r3, r2
 8013066:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013068:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801306c:	2b00      	cmp	r3, #0
 801306e:	da08      	bge.n	8013082 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013070:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013074:	425b      	negs	r3, r3
 8013076:	4619      	mov	r1, r3
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f7ff ff9b 	bl	8012fb4 <pbuf_remove_header>
 801307e:	4603      	mov	r3, r0
 8013080:	e007      	b.n	8013092 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013086:	787a      	ldrb	r2, [r7, #1]
 8013088:	4619      	mov	r1, r3
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7ff ff1a 	bl	8012ec4 <pbuf_add_header_impl>
 8013090:	4603      	mov	r3, r0
  }
}
 8013092:	4618      	mov	r0, r3
 8013094:	3708      	adds	r7, #8
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b082      	sub	sp, #8
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	460b      	mov	r3, r1
 80130a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80130a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80130aa:	2201      	movs	r2, #1
 80130ac:	4619      	mov	r1, r3
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff ffd2 	bl	8013058 <pbuf_header_impl>
 80130b4:	4603      	mov	r3, r0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b086      	sub	sp, #24
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	460b      	mov	r3, r1
 80130c8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 80130ce:	887b      	ldrh	r3, [r7, #2]
 80130d0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80130d2:	e01c      	b.n	801310e <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	895b      	ldrh	r3, [r3, #10]
 80130d8:	8a7a      	ldrh	r2, [r7, #18]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d310      	bcc.n	8013100 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	895b      	ldrh	r3, [r3, #10]
 80130e6:	8a7a      	ldrh	r2, [r7, #18]
 80130e8:	1ad3      	subs	r3, r2, r3
 80130ea:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2200      	movs	r2, #0
 80130f6:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f000 f813 	bl	8013124 <pbuf_free>
 80130fe:	e006      	b.n	801310e <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8013100:	8a7b      	ldrh	r3, [r7, #18]
 8013102:	4619      	mov	r1, r3
 8013104:	6978      	ldr	r0, [r7, #20]
 8013106:	f7ff ff55 	bl	8012fb4 <pbuf_remove_header>
      free_left = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801310e:	8a7b      	ldrh	r3, [r7, #18]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d002      	beq.n	801311a <pbuf_free_header+0x5c>
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d1dc      	bne.n	80130d4 <pbuf_free_header+0x16>
    }
  }
  return p;
 801311a:	697b      	ldr	r3, [r7, #20]
}
 801311c:	4618      	mov	r0, r3
 801311e:	3718      	adds	r7, #24
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b088      	sub	sp, #32
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d10b      	bne.n	801314a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d106      	bne.n	8013146 <pbuf_free+0x22>
 8013138:	4b3b      	ldr	r3, [pc, #236]	; (8013228 <pbuf_free+0x104>)
 801313a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801313e:	493b      	ldr	r1, [pc, #236]	; (801322c <pbuf_free+0x108>)
 8013140:	483b      	ldr	r0, [pc, #236]	; (8013230 <pbuf_free+0x10c>)
 8013142:	f007 fd2f 	bl	801aba4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013146:	2300      	movs	r3, #0
 8013148:	e069      	b.n	801321e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801314e:	e062      	b.n	8013216 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013150:	f007 fc5a 	bl	801aa08 <sys_arch_protect>
 8013154:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	7b9b      	ldrb	r3, [r3, #14]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d106      	bne.n	801316c <pbuf_free+0x48>
 801315e:	4b32      	ldr	r3, [pc, #200]	; (8013228 <pbuf_free+0x104>)
 8013160:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013164:	4933      	ldr	r1, [pc, #204]	; (8013234 <pbuf_free+0x110>)
 8013166:	4832      	ldr	r0, [pc, #200]	; (8013230 <pbuf_free+0x10c>)
 8013168:	f007 fd1c 	bl	801aba4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	7b9b      	ldrb	r3, [r3, #14]
 8013170:	3b01      	subs	r3, #1
 8013172:	b2da      	uxtb	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	739a      	strb	r2, [r3, #14]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	7b9b      	ldrb	r3, [r3, #14]
 801317c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801317e:	69b8      	ldr	r0, [r7, #24]
 8013180:	f007 fc50 	bl	801aa24 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d143      	bne.n	8013212 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	7b1b      	ldrb	r3, [r3, #12]
 8013194:	f003 030f 	and.w	r3, r3, #15
 8013198:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	7b5b      	ldrb	r3, [r3, #13]
 801319e:	f003 0302 	and.w	r3, r3, #2
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d011      	beq.n	80131ca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	691b      	ldr	r3, [r3, #16]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <pbuf_free+0x9c>
 80131b2:	4b1d      	ldr	r3, [pc, #116]	; (8013228 <pbuf_free+0x104>)
 80131b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80131b8:	491f      	ldr	r1, [pc, #124]	; (8013238 <pbuf_free+0x114>)
 80131ba:	481d      	ldr	r0, [pc, #116]	; (8013230 <pbuf_free+0x10c>)
 80131bc:	f007 fcf2 	bl	801aba4 <iprintf>
        pc->custom_free_function(p);
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	4798      	blx	r3
 80131c8:	e01d      	b.n	8013206 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80131ca:	7bfb      	ldrb	r3, [r7, #15]
 80131cc:	2b02      	cmp	r3, #2
 80131ce:	d104      	bne.n	80131da <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80131d0:	6879      	ldr	r1, [r7, #4]
 80131d2:	200c      	movs	r0, #12
 80131d4:	f7ff f8c4 	bl	8012360 <memp_free>
 80131d8:	e015      	b.n	8013206 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d104      	bne.n	80131ea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80131e0:	6879      	ldr	r1, [r7, #4]
 80131e2:	200b      	movs	r0, #11
 80131e4:	f7ff f8bc 	bl	8012360 <memp_free>
 80131e8:	e00d      	b.n	8013206 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80131ea:	7bfb      	ldrb	r3, [r7, #15]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d103      	bne.n	80131f8 <pbuf_free+0xd4>
          mem_free(p);
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7fe fd01 	bl	8011bf8 <mem_free>
 80131f6:	e006      	b.n	8013206 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80131f8:	4b0b      	ldr	r3, [pc, #44]	; (8013228 <pbuf_free+0x104>)
 80131fa:	f240 320f 	movw	r2, #783	; 0x30f
 80131fe:	490f      	ldr	r1, [pc, #60]	; (801323c <pbuf_free+0x118>)
 8013200:	480b      	ldr	r0, [pc, #44]	; (8013230 <pbuf_free+0x10c>)
 8013202:	f007 fccf 	bl	801aba4 <iprintf>
        }
      }
      count++;
 8013206:	7ffb      	ldrb	r3, [r7, #31]
 8013208:	3301      	adds	r3, #1
 801320a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	607b      	str	r3, [r7, #4]
 8013210:	e001      	b.n	8013216 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013212:	2300      	movs	r3, #0
 8013214:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d199      	bne.n	8013150 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801321c:	7ffb      	ldrb	r3, [r7, #31]
}
 801321e:	4618      	mov	r0, r3
 8013220:	3720      	adds	r7, #32
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	0801e700 	.word	0x0801e700
 801322c:	0801e8e8 	.word	0x0801e8e8
 8013230:	0801e7e4 	.word	0x0801e7e4
 8013234:	0801e914 	.word	0x0801e914
 8013238:	0801e92c 	.word	0x0801e92c
 801323c:	0801e950 	.word	0x0801e950

08013240 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013240:	b480      	push	{r7}
 8013242:	b085      	sub	sp, #20
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801324c:	e005      	b.n	801325a <pbuf_clen+0x1a>
    ++len;
 801324e:	89fb      	ldrh	r3, [r7, #14]
 8013250:	3301      	adds	r3, #1
 8013252:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d1f6      	bne.n	801324e <pbuf_clen+0xe>
  }
  return len;
 8013260:	89fb      	ldrh	r3, [r7, #14]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3714      	adds	r7, #20
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr
	...

08013270 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d016      	beq.n	80132ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801327e:	f007 fbc3 	bl	801aa08 <sys_arch_protect>
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	7b9b      	ldrb	r3, [r3, #14]
 8013288:	3301      	adds	r3, #1
 801328a:	b2da      	uxtb	r2, r3
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	739a      	strb	r2, [r3, #14]
 8013290:	68f8      	ldr	r0, [r7, #12]
 8013292:	f007 fbc7 	bl	801aa24 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	7b9b      	ldrb	r3, [r3, #14]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <pbuf_ref+0x3c>
 801329e:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <pbuf_ref+0x44>)
 80132a0:	f240 3242 	movw	r2, #834	; 0x342
 80132a4:	4904      	ldr	r1, [pc, #16]	; (80132b8 <pbuf_ref+0x48>)
 80132a6:	4805      	ldr	r0, [pc, #20]	; (80132bc <pbuf_ref+0x4c>)
 80132a8:	f007 fc7c 	bl	801aba4 <iprintf>
  }
}
 80132ac:	bf00      	nop
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	0801e700 	.word	0x0801e700
 80132b8:	0801e964 	.word	0x0801e964
 80132bc:	0801e7e4 	.word	0x0801e7e4

080132c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <pbuf_cat+0x16>
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d107      	bne.n	80132e6 <pbuf_cat+0x26>
 80132d6:	4b20      	ldr	r3, [pc, #128]	; (8013358 <pbuf_cat+0x98>)
 80132d8:	f240 3259 	movw	r2, #857	; 0x359
 80132dc:	491f      	ldr	r1, [pc, #124]	; (801335c <pbuf_cat+0x9c>)
 80132de:	4820      	ldr	r0, [pc, #128]	; (8013360 <pbuf_cat+0xa0>)
 80132e0:	f007 fc60 	bl	801aba4 <iprintf>
 80132e4:	e034      	b.n	8013350 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	60fb      	str	r3, [r7, #12]
 80132ea:	e00a      	b.n	8013302 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	891a      	ldrh	r2, [r3, #8]
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	891b      	ldrh	r3, [r3, #8]
 80132f4:	4413      	add	r3, r2
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	60fb      	str	r3, [r7, #12]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d1f0      	bne.n	80132ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	891a      	ldrh	r2, [r3, #8]
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	895b      	ldrh	r3, [r3, #10]
 8013312:	429a      	cmp	r2, r3
 8013314:	d006      	beq.n	8013324 <pbuf_cat+0x64>
 8013316:	4b10      	ldr	r3, [pc, #64]	; (8013358 <pbuf_cat+0x98>)
 8013318:	f240 3262 	movw	r2, #866	; 0x362
 801331c:	4911      	ldr	r1, [pc, #68]	; (8013364 <pbuf_cat+0xa4>)
 801331e:	4810      	ldr	r0, [pc, #64]	; (8013360 <pbuf_cat+0xa0>)
 8013320:	f007 fc40 	bl	801aba4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d006      	beq.n	801333a <pbuf_cat+0x7a>
 801332c:	4b0a      	ldr	r3, [pc, #40]	; (8013358 <pbuf_cat+0x98>)
 801332e:	f240 3263 	movw	r2, #867	; 0x363
 8013332:	490d      	ldr	r1, [pc, #52]	; (8013368 <pbuf_cat+0xa8>)
 8013334:	480a      	ldr	r0, [pc, #40]	; (8013360 <pbuf_cat+0xa0>)
 8013336:	f007 fc35 	bl	801aba4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	891a      	ldrh	r2, [r3, #8]
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	891b      	ldrh	r3, [r3, #8]
 8013342:	4413      	add	r3, r2
 8013344:	b29a      	uxth	r2, r3
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	683a      	ldr	r2, [r7, #0]
 801334e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013350:	3710      	adds	r7, #16
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	0801e700 	.word	0x0801e700
 801335c:	0801e978 	.word	0x0801e978
 8013360:	0801e7e4 	.word	0x0801e7e4
 8013364:	0801e9b0 	.word	0x0801e9b0
 8013368:	0801e9e0 	.word	0x0801e9e0

0801336c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013376:	6839      	ldr	r1, [r7, #0]
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f7ff ffa1 	bl	80132c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801337e:	6838      	ldr	r0, [r7, #0]
 8013380:	f7ff ff76 	bl	8013270 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013396:	2300      	movs	r3, #0
 8013398:	617b      	str	r3, [r7, #20]
 801339a:	2300      	movs	r3, #0
 801339c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d008      	beq.n	80133b6 <pbuf_copy+0x2a>
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d005      	beq.n	80133b6 <pbuf_copy+0x2a>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	891a      	ldrh	r2, [r3, #8]
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	891b      	ldrh	r3, [r3, #8]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d209      	bcs.n	80133ca <pbuf_copy+0x3e>
 80133b6:	4b57      	ldr	r3, [pc, #348]	; (8013514 <pbuf_copy+0x188>)
 80133b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80133bc:	4956      	ldr	r1, [pc, #344]	; (8013518 <pbuf_copy+0x18c>)
 80133be:	4857      	ldr	r0, [pc, #348]	; (801351c <pbuf_copy+0x190>)
 80133c0:	f007 fbf0 	bl	801aba4 <iprintf>
 80133c4:	f06f 030f 	mvn.w	r3, #15
 80133c8:	e09f      	b.n	801350a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	895b      	ldrh	r3, [r3, #10]
 80133ce:	461a      	mov	r2, r3
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	1ad2      	subs	r2, r2, r3
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	895b      	ldrh	r3, [r3, #10]
 80133d8:	4619      	mov	r1, r3
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	1acb      	subs	r3, r1, r3
 80133de:	429a      	cmp	r2, r3
 80133e0:	d306      	bcc.n	80133f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	895b      	ldrh	r3, [r3, #10]
 80133e6:	461a      	mov	r2, r3
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	60fb      	str	r3, [r7, #12]
 80133ee:	e005      	b.n	80133fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	895b      	ldrh	r3, [r3, #10]
 80133f4:	461a      	mov	r2, r3
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	1ad3      	subs	r3, r2, r3
 80133fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	685a      	ldr	r2, [r3, #4]
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	18d0      	adds	r0, r2, r3
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	685a      	ldr	r2, [r3, #4]
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	4413      	add	r3, r2
 801340c:	68fa      	ldr	r2, [r7, #12]
 801340e:	4619      	mov	r1, r3
 8013410:	f007 fb98 	bl	801ab44 <memcpy>
    offset_to += len;
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	4413      	add	r3, r2
 801341a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801341c:	693a      	ldr	r2, [r7, #16]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	4413      	add	r3, r2
 8013422:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	895b      	ldrh	r3, [r3, #10]
 8013428:	461a      	mov	r2, r3
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	4293      	cmp	r3, r2
 801342e:	d906      	bls.n	801343e <pbuf_copy+0xb2>
 8013430:	4b38      	ldr	r3, [pc, #224]	; (8013514 <pbuf_copy+0x188>)
 8013432:	f240 32d9 	movw	r2, #985	; 0x3d9
 8013436:	493a      	ldr	r1, [pc, #232]	; (8013520 <pbuf_copy+0x194>)
 8013438:	4838      	ldr	r0, [pc, #224]	; (801351c <pbuf_copy+0x190>)
 801343a:	f007 fbb3 	bl	801aba4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	895b      	ldrh	r3, [r3, #10]
 8013442:	461a      	mov	r2, r3
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	4293      	cmp	r3, r2
 8013448:	d906      	bls.n	8013458 <pbuf_copy+0xcc>
 801344a:	4b32      	ldr	r3, [pc, #200]	; (8013514 <pbuf_copy+0x188>)
 801344c:	f240 32da 	movw	r2, #986	; 0x3da
 8013450:	4934      	ldr	r1, [pc, #208]	; (8013524 <pbuf_copy+0x198>)
 8013452:	4832      	ldr	r0, [pc, #200]	; (801351c <pbuf_copy+0x190>)
 8013454:	f007 fba6 	bl	801aba4 <iprintf>
    if (offset_from >= p_from->len) {
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	895b      	ldrh	r3, [r3, #10]
 801345c:	461a      	mov	r2, r3
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	4293      	cmp	r3, r2
 8013462:	d304      	bcc.n	801346e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013464:	2300      	movs	r3, #0
 8013466:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	895b      	ldrh	r3, [r3, #10]
 8013472:	461a      	mov	r2, r3
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	4293      	cmp	r3, r2
 8013478:	d114      	bne.n	80134a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d10c      	bne.n	80134a4 <pbuf_copy+0x118>
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d009      	beq.n	80134a4 <pbuf_copy+0x118>
 8013490:	4b20      	ldr	r3, [pc, #128]	; (8013514 <pbuf_copy+0x188>)
 8013492:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8013496:	4924      	ldr	r1, [pc, #144]	; (8013528 <pbuf_copy+0x19c>)
 8013498:	4820      	ldr	r0, [pc, #128]	; (801351c <pbuf_copy+0x190>)
 801349a:	f007 fb83 	bl	801aba4 <iprintf>
 801349e:	f06f 030f 	mvn.w	r3, #15
 80134a2:	e032      	b.n	801350a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d013      	beq.n	80134d2 <pbuf_copy+0x146>
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	895a      	ldrh	r2, [r3, #10]
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	891b      	ldrh	r3, [r3, #8]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d10d      	bne.n	80134d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d009      	beq.n	80134d2 <pbuf_copy+0x146>
 80134be:	4b15      	ldr	r3, [pc, #84]	; (8013514 <pbuf_copy+0x188>)
 80134c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80134c4:	4919      	ldr	r1, [pc, #100]	; (801352c <pbuf_copy+0x1a0>)
 80134c6:	4815      	ldr	r0, [pc, #84]	; (801351c <pbuf_copy+0x190>)
 80134c8:	f007 fb6c 	bl	801aba4 <iprintf>
 80134cc:	f06f 0305 	mvn.w	r3, #5
 80134d0:	e01b      	b.n	801350a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d013      	beq.n	8013500 <pbuf_copy+0x174>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	895a      	ldrh	r2, [r3, #10]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	891b      	ldrh	r3, [r3, #8]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d10d      	bne.n	8013500 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d009      	beq.n	8013500 <pbuf_copy+0x174>
 80134ec:	4b09      	ldr	r3, [pc, #36]	; (8013514 <pbuf_copy+0x188>)
 80134ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80134f2:	490e      	ldr	r1, [pc, #56]	; (801352c <pbuf_copy+0x1a0>)
 80134f4:	4809      	ldr	r0, [pc, #36]	; (801351c <pbuf_copy+0x190>)
 80134f6:	f007 fb55 	bl	801aba4 <iprintf>
 80134fa:	f06f 0305 	mvn.w	r3, #5
 80134fe:	e004      	b.n	801350a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	f47f af61 	bne.w	80133ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013508:	2300      	movs	r3, #0
}
 801350a:	4618      	mov	r0, r3
 801350c:	3718      	adds	r7, #24
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}
 8013512:	bf00      	nop
 8013514:	0801e700 	.word	0x0801e700
 8013518:	0801ea2c 	.word	0x0801ea2c
 801351c:	0801e7e4 	.word	0x0801e7e4
 8013520:	0801ea5c 	.word	0x0801ea5c
 8013524:	0801ea74 	.word	0x0801ea74
 8013528:	0801ea90 	.word	0x0801ea90
 801352c:	0801eaa0 	.word	0x0801eaa0

08013530 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b088      	sub	sp, #32
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	4611      	mov	r1, r2
 801353c:	461a      	mov	r2, r3
 801353e:	460b      	mov	r3, r1
 8013540:	80fb      	strh	r3, [r7, #6]
 8013542:	4613      	mov	r3, r2
 8013544:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8013546:	2300      	movs	r3, #0
 8013548:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d108      	bne.n	8013566 <pbuf_copy_partial+0x36>
 8013554:	4b2b      	ldr	r3, [pc, #172]	; (8013604 <pbuf_copy_partial+0xd4>)
 8013556:	f240 420a 	movw	r2, #1034	; 0x40a
 801355a:	492b      	ldr	r1, [pc, #172]	; (8013608 <pbuf_copy_partial+0xd8>)
 801355c:	482b      	ldr	r0, [pc, #172]	; (801360c <pbuf_copy_partial+0xdc>)
 801355e:	f007 fb21 	bl	801aba4 <iprintf>
 8013562:	2300      	movs	r3, #0
 8013564:	e04a      	b.n	80135fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d108      	bne.n	801357e <pbuf_copy_partial+0x4e>
 801356c:	4b25      	ldr	r3, [pc, #148]	; (8013604 <pbuf_copy_partial+0xd4>)
 801356e:	f240 420b 	movw	r2, #1035	; 0x40b
 8013572:	4927      	ldr	r1, [pc, #156]	; (8013610 <pbuf_copy_partial+0xe0>)
 8013574:	4825      	ldr	r0, [pc, #148]	; (801360c <pbuf_copy_partial+0xdc>)
 8013576:	f007 fb15 	bl	801aba4 <iprintf>
 801357a:	2300      	movs	r3, #0
 801357c:	e03e      	b.n	80135fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	61fb      	str	r3, [r7, #28]
 8013582:	e034      	b.n	80135ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013584:	88bb      	ldrh	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d00a      	beq.n	80135a0 <pbuf_copy_partial+0x70>
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	895b      	ldrh	r3, [r3, #10]
 801358e:	88ba      	ldrh	r2, [r7, #4]
 8013590:	429a      	cmp	r2, r3
 8013592:	d305      	bcc.n	80135a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	895b      	ldrh	r3, [r3, #10]
 8013598:	88ba      	ldrh	r2, [r7, #4]
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	80bb      	strh	r3, [r7, #4]
 801359e:	e023      	b.n	80135e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	895a      	ldrh	r2, [r3, #10]
 80135a4:	88bb      	ldrh	r3, [r7, #4]
 80135a6:	1ad3      	subs	r3, r2, r3
 80135a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80135aa:	8b3a      	ldrh	r2, [r7, #24]
 80135ac:	88fb      	ldrh	r3, [r7, #6]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d901      	bls.n	80135b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80135b2:	88fb      	ldrh	r3, [r7, #6]
 80135b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80135b6:	8b7b      	ldrh	r3, [r7, #26]
 80135b8:	68ba      	ldr	r2, [r7, #8]
 80135ba:	18d0      	adds	r0, r2, r3
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	685a      	ldr	r2, [r3, #4]
 80135c0:	88bb      	ldrh	r3, [r7, #4]
 80135c2:	4413      	add	r3, r2
 80135c4:	8b3a      	ldrh	r2, [r7, #24]
 80135c6:	4619      	mov	r1, r3
 80135c8:	f007 fabc 	bl	801ab44 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80135cc:	8afa      	ldrh	r2, [r7, #22]
 80135ce:	8b3b      	ldrh	r3, [r7, #24]
 80135d0:	4413      	add	r3, r2
 80135d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80135d4:	8b7a      	ldrh	r2, [r7, #26]
 80135d6:	8b3b      	ldrh	r3, [r7, #24]
 80135d8:	4413      	add	r3, r2
 80135da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80135dc:	88fa      	ldrh	r2, [r7, #6]
 80135de:	8b3b      	ldrh	r3, [r7, #24]
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80135e4:	2300      	movs	r3, #0
 80135e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	61fb      	str	r3, [r7, #28]
 80135ee:	88fb      	ldrh	r3, [r7, #6]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <pbuf_copy_partial+0xca>
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d1c4      	bne.n	8013584 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80135fa:	8afb      	ldrh	r3, [r7, #22]
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3720      	adds	r7, #32
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	0801e700 	.word	0x0801e700
 8013608:	0801eacc 	.word	0x0801eacc
 801360c:	0801e7e4 	.word	0x0801e7e4
 8013610:	0801eaec 	.word	0x0801eaec

08013614 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	4603      	mov	r3, r0
 801361c:	603a      	str	r2, [r7, #0]
 801361e:	71fb      	strb	r3, [r7, #7]
 8013620:	460b      	mov	r3, r1
 8013622:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	8919      	ldrh	r1, [r3, #8]
 8013628:	88ba      	ldrh	r2, [r7, #4]
 801362a:	79fb      	ldrb	r3, [r7, #7]
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff fa63 	bl	8012af8 <pbuf_alloc>
 8013632:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d101      	bne.n	801363e <pbuf_clone+0x2a>
    return NULL;
 801363a:	2300      	movs	r3, #0
 801363c:	e011      	b.n	8013662 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801363e:	6839      	ldr	r1, [r7, #0]
 8013640:	68f8      	ldr	r0, [r7, #12]
 8013642:	f7ff fea3 	bl	801338c <pbuf_copy>
 8013646:	4603      	mov	r3, r0
 8013648:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801364a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d006      	beq.n	8013660 <pbuf_clone+0x4c>
 8013652:	4b06      	ldr	r3, [pc, #24]	; (801366c <pbuf_clone+0x58>)
 8013654:	f240 5224 	movw	r2, #1316	; 0x524
 8013658:	4905      	ldr	r1, [pc, #20]	; (8013670 <pbuf_clone+0x5c>)
 801365a:	4806      	ldr	r0, [pc, #24]	; (8013674 <pbuf_clone+0x60>)
 801365c:	f007 faa2 	bl	801aba4 <iprintf>
  return q;
 8013660:	68fb      	ldr	r3, [r7, #12]
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	0801e700 	.word	0x0801e700
 8013670:	0801ebf8 	.word	0x0801ebf8
 8013674:	0801e7e4 	.word	0x0801e7e4

08013678 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801367c:	f007 faaa 	bl	801abd4 <rand>
 8013680:	4603      	mov	r3, r0
 8013682:	b29b      	uxth	r3, r3
 8013684:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013688:	b29b      	uxth	r3, r3
 801368a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801368e:	b29a      	uxth	r2, r3
 8013690:	4b01      	ldr	r3, [pc, #4]	; (8013698 <tcp_init+0x20>)
 8013692:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013694:	bf00      	nop
 8013696:	bd80      	pop	{r7, pc}
 8013698:	20000038 	.word	0x20000038

0801369c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	7d1b      	ldrb	r3, [r3, #20]
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d105      	bne.n	80136b8 <tcp_free+0x1c>
 80136ac:	4b06      	ldr	r3, [pc, #24]	; (80136c8 <tcp_free+0x2c>)
 80136ae:	22d4      	movs	r2, #212	; 0xd4
 80136b0:	4906      	ldr	r1, [pc, #24]	; (80136cc <tcp_free+0x30>)
 80136b2:	4807      	ldr	r0, [pc, #28]	; (80136d0 <tcp_free+0x34>)
 80136b4:	f007 fa76 	bl	801aba4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80136b8:	6879      	ldr	r1, [r7, #4]
 80136ba:	2001      	movs	r0, #1
 80136bc:	f7fe fe50 	bl	8012360 <memp_free>
}
 80136c0:	bf00      	nop
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	0801ec84 	.word	0x0801ec84
 80136cc:	0801ed38 	.word	0x0801ed38
 80136d0:	0801ed4c 	.word	0x0801ed4c

080136d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	7d1b      	ldrb	r3, [r3, #20]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d105      	bne.n	80136f0 <tcp_free_listen+0x1c>
 80136e4:	4b06      	ldr	r3, [pc, #24]	; (8013700 <tcp_free_listen+0x2c>)
 80136e6:	22df      	movs	r2, #223	; 0xdf
 80136e8:	4906      	ldr	r1, [pc, #24]	; (8013704 <tcp_free_listen+0x30>)
 80136ea:	4807      	ldr	r0, [pc, #28]	; (8013708 <tcp_free_listen+0x34>)
 80136ec:	f007 fa5a 	bl	801aba4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80136f0:	6879      	ldr	r1, [r7, #4]
 80136f2:	2002      	movs	r0, #2
 80136f4:	f7fe fe34 	bl	8012360 <memp_free>
}
 80136f8:	bf00      	nop
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	0801ec84 	.word	0x0801ec84
 8013704:	0801ed74 	.word	0x0801ed74
 8013708:	0801ed4c 	.word	0x0801ed4c

0801370c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013710:	f001 f8a8 	bl	8014864 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013714:	4b07      	ldr	r3, [pc, #28]	; (8013734 <tcp_tmr+0x28>)
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	3301      	adds	r3, #1
 801371a:	b2da      	uxtb	r2, r3
 801371c:	4b05      	ldr	r3, [pc, #20]	; (8013734 <tcp_tmr+0x28>)
 801371e:	701a      	strb	r2, [r3, #0]
 8013720:	4b04      	ldr	r3, [pc, #16]	; (8013734 <tcp_tmr+0x28>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	f003 0301 	and.w	r3, r3, #1
 8013728:	2b00      	cmp	r3, #0
 801372a:	d001      	beq.n	8013730 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801372c:	f000 fd5a 	bl	80141e4 <tcp_slowtmr>
  }
}
 8013730:	bf00      	nop
 8013732:	bd80      	pop	{r7, pc}
 8013734:	200085d1 	.word	0x200085d1

08013738 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d105      	bne.n	8013754 <tcp_remove_listener+0x1c>
 8013748:	4b0d      	ldr	r3, [pc, #52]	; (8013780 <tcp_remove_listener+0x48>)
 801374a:	22ff      	movs	r2, #255	; 0xff
 801374c:	490d      	ldr	r1, [pc, #52]	; (8013784 <tcp_remove_listener+0x4c>)
 801374e:	480e      	ldr	r0, [pc, #56]	; (8013788 <tcp_remove_listener+0x50>)
 8013750:	f007 fa28 	bl	801aba4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	60fb      	str	r3, [r7, #12]
 8013758:	e00a      	b.n	8013770 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801375e:	683a      	ldr	r2, [r7, #0]
 8013760:	429a      	cmp	r2, r3
 8013762:	d102      	bne.n	801376a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2200      	movs	r2, #0
 8013768:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	68db      	ldr	r3, [r3, #12]
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d1f1      	bne.n	801375a <tcp_remove_listener+0x22>
    }
  }
}
 8013776:	bf00      	nop
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	0801ec84 	.word	0x0801ec84
 8013784:	0801ed90 	.word	0x0801ed90
 8013788:	0801ed4c 	.word	0x0801ed4c

0801378c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b084      	sub	sp, #16
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d106      	bne.n	80137a8 <tcp_listen_closed+0x1c>
 801379a:	4b14      	ldr	r3, [pc, #80]	; (80137ec <tcp_listen_closed+0x60>)
 801379c:	f240 1211 	movw	r2, #273	; 0x111
 80137a0:	4913      	ldr	r1, [pc, #76]	; (80137f0 <tcp_listen_closed+0x64>)
 80137a2:	4814      	ldr	r0, [pc, #80]	; (80137f4 <tcp_listen_closed+0x68>)
 80137a4:	f007 f9fe 	bl	801aba4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	7d1b      	ldrb	r3, [r3, #20]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d006      	beq.n	80137be <tcp_listen_closed+0x32>
 80137b0:	4b0e      	ldr	r3, [pc, #56]	; (80137ec <tcp_listen_closed+0x60>)
 80137b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80137b6:	4910      	ldr	r1, [pc, #64]	; (80137f8 <tcp_listen_closed+0x6c>)
 80137b8:	480e      	ldr	r0, [pc, #56]	; (80137f4 <tcp_listen_closed+0x68>)
 80137ba:	f007 f9f3 	bl	801aba4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80137be:	2301      	movs	r3, #1
 80137c0:	60fb      	str	r3, [r7, #12]
 80137c2:	e00b      	b.n	80137dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80137c4:	4a0d      	ldr	r2, [pc, #52]	; (80137fc <tcp_listen_closed+0x70>)
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	6879      	ldr	r1, [r7, #4]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff ffb1 	bl	8013738 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	3301      	adds	r3, #1
 80137da:	60fb      	str	r3, [r7, #12]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	2b03      	cmp	r3, #3
 80137e0:	d9f0      	bls.n	80137c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80137e2:	bf00      	nop
 80137e4:	bf00      	nop
 80137e6:	3710      	adds	r7, #16
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}
 80137ec:	0801ec84 	.word	0x0801ec84
 80137f0:	0801edb8 	.word	0x0801edb8
 80137f4:	0801ed4c 	.word	0x0801ed4c
 80137f8:	0801edc4 	.word	0x0801edc4
 80137fc:	08021020 	.word	0x08021020

08013800 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013800:	b5b0      	push	{r4, r5, r7, lr}
 8013802:	b088      	sub	sp, #32
 8013804:	af04      	add	r7, sp, #16
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	460b      	mov	r3, r1
 801380a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_close_shutdown+0x20>
 8013812:	4b63      	ldr	r3, [pc, #396]	; (80139a0 <tcp_close_shutdown+0x1a0>)
 8013814:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013818:	4962      	ldr	r1, [pc, #392]	; (80139a4 <tcp_close_shutdown+0x1a4>)
 801381a:	4863      	ldr	r0, [pc, #396]	; (80139a8 <tcp_close_shutdown+0x1a8>)
 801381c:	f007 f9c2 	bl	801aba4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013820:	78fb      	ldrb	r3, [r7, #3]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d067      	beq.n	80138f6 <tcp_close_shutdown+0xf6>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	7d1b      	ldrb	r3, [r3, #20]
 801382a:	2b04      	cmp	r3, #4
 801382c:	d003      	beq.n	8013836 <tcp_close_shutdown+0x36>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	7d1b      	ldrb	r3, [r3, #20]
 8013832:	2b07      	cmp	r3, #7
 8013834:	d15f      	bne.n	80138f6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801383a:	2b00      	cmp	r3, #0
 801383c:	d105      	bne.n	801384a <tcp_close_shutdown+0x4a>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013842:	f640 3268 	movw	r2, #2920	; 0xb68
 8013846:	4293      	cmp	r3, r2
 8013848:	d055      	beq.n	80138f6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	8b5b      	ldrh	r3, [r3, #26]
 801384e:	f003 0310 	and.w	r3, r3, #16
 8013852:	2b00      	cmp	r3, #0
 8013854:	d106      	bne.n	8013864 <tcp_close_shutdown+0x64>
 8013856:	4b52      	ldr	r3, [pc, #328]	; (80139a0 <tcp_close_shutdown+0x1a0>)
 8013858:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801385c:	4953      	ldr	r1, [pc, #332]	; (80139ac <tcp_close_shutdown+0x1ac>)
 801385e:	4852      	ldr	r0, [pc, #328]	; (80139a8 <tcp_close_shutdown+0x1a8>)
 8013860:	f007 f9a0 	bl	801aba4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801386c:	687d      	ldr	r5, [r7, #4]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	3304      	adds	r3, #4
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	8ad2      	ldrh	r2, [r2, #22]
 8013876:	6879      	ldr	r1, [r7, #4]
 8013878:	8b09      	ldrh	r1, [r1, #24]
 801387a:	9102      	str	r1, [sp, #8]
 801387c:	9201      	str	r2, [sp, #4]
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	462b      	mov	r3, r5
 8013882:	4622      	mov	r2, r4
 8013884:	4601      	mov	r1, r0
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f005 fdbc 	bl	8019404 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f001 fb9b 	bl	8014fc8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013892:	4b47      	ldr	r3, [pc, #284]	; (80139b0 <tcp_close_shutdown+0x1b0>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	429a      	cmp	r2, r3
 801389a:	d105      	bne.n	80138a8 <tcp_close_shutdown+0xa8>
 801389c:	4b44      	ldr	r3, [pc, #272]	; (80139b0 <tcp_close_shutdown+0x1b0>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	4a43      	ldr	r2, [pc, #268]	; (80139b0 <tcp_close_shutdown+0x1b0>)
 80138a4:	6013      	str	r3, [r2, #0]
 80138a6:	e013      	b.n	80138d0 <tcp_close_shutdown+0xd0>
 80138a8:	4b41      	ldr	r3, [pc, #260]	; (80139b0 <tcp_close_shutdown+0x1b0>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	60fb      	str	r3, [r7, #12]
 80138ae:	e00c      	b.n	80138ca <tcp_close_shutdown+0xca>
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	68db      	ldr	r3, [r3, #12]
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d104      	bne.n	80138c4 <tcp_close_shutdown+0xc4>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	68da      	ldr	r2, [r3, #12]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	60da      	str	r2, [r3, #12]
 80138c2:	e005      	b.n	80138d0 <tcp_close_shutdown+0xd0>
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1ef      	bne.n	80138b0 <tcp_close_shutdown+0xb0>
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2200      	movs	r2, #0
 80138d4:	60da      	str	r2, [r3, #12]
 80138d6:	4b37      	ldr	r3, [pc, #220]	; (80139b4 <tcp_close_shutdown+0x1b4>)
 80138d8:	2201      	movs	r2, #1
 80138da:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80138dc:	4b36      	ldr	r3, [pc, #216]	; (80139b8 <tcp_close_shutdown+0x1b8>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	687a      	ldr	r2, [r7, #4]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d102      	bne.n	80138ec <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80138e6:	f004 f831 	bl	801794c <tcp_trigger_input_pcb_close>
 80138ea:	e002      	b.n	80138f2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7ff fed5 	bl	801369c <tcp_free>
      }
      return ERR_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	e050      	b.n	8013998 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	7d1b      	ldrb	r3, [r3, #20]
 80138fa:	2b02      	cmp	r3, #2
 80138fc:	d03b      	beq.n	8013976 <tcp_close_shutdown+0x176>
 80138fe:	2b02      	cmp	r3, #2
 8013900:	dc44      	bgt.n	801398c <tcp_close_shutdown+0x18c>
 8013902:	2b00      	cmp	r3, #0
 8013904:	d002      	beq.n	801390c <tcp_close_shutdown+0x10c>
 8013906:	2b01      	cmp	r3, #1
 8013908:	d02a      	beq.n	8013960 <tcp_close_shutdown+0x160>
 801390a:	e03f      	b.n	801398c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	8adb      	ldrh	r3, [r3, #22]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d021      	beq.n	8013958 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013914:	4b29      	ldr	r3, [pc, #164]	; (80139bc <tcp_close_shutdown+0x1bc>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	429a      	cmp	r2, r3
 801391c:	d105      	bne.n	801392a <tcp_close_shutdown+0x12a>
 801391e:	4b27      	ldr	r3, [pc, #156]	; (80139bc <tcp_close_shutdown+0x1bc>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	4a25      	ldr	r2, [pc, #148]	; (80139bc <tcp_close_shutdown+0x1bc>)
 8013926:	6013      	str	r3, [r2, #0]
 8013928:	e013      	b.n	8013952 <tcp_close_shutdown+0x152>
 801392a:	4b24      	ldr	r3, [pc, #144]	; (80139bc <tcp_close_shutdown+0x1bc>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	60bb      	str	r3, [r7, #8]
 8013930:	e00c      	b.n	801394c <tcp_close_shutdown+0x14c>
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	429a      	cmp	r2, r3
 801393a:	d104      	bne.n	8013946 <tcp_close_shutdown+0x146>
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	68da      	ldr	r2, [r3, #12]
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	60da      	str	r2, [r3, #12]
 8013944:	e005      	b.n	8013952 <tcp_close_shutdown+0x152>
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	60bb      	str	r3, [r7, #8]
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d1ef      	bne.n	8013932 <tcp_close_shutdown+0x132>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2200      	movs	r2, #0
 8013956:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f7ff fe9f 	bl	801369c <tcp_free>
      break;
 801395e:	e01a      	b.n	8013996 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7ff ff13 	bl	801378c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013966:	6879      	ldr	r1, [r7, #4]
 8013968:	4815      	ldr	r0, [pc, #84]	; (80139c0 <tcp_close_shutdown+0x1c0>)
 801396a:	f001 fb7d 	bl	8015068 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff feb0 	bl	80136d4 <tcp_free_listen>
      break;
 8013974:	e00f      	b.n	8013996 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013976:	6879      	ldr	r1, [r7, #4]
 8013978:	480d      	ldr	r0, [pc, #52]	; (80139b0 <tcp_close_shutdown+0x1b0>)
 801397a:	f001 fb75 	bl	8015068 <tcp_pcb_remove>
 801397e:	4b0d      	ldr	r3, [pc, #52]	; (80139b4 <tcp_close_shutdown+0x1b4>)
 8013980:	2201      	movs	r2, #1
 8013982:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f7ff fe89 	bl	801369c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801398a:	e004      	b.n	8013996 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 f819 	bl	80139c4 <tcp_close_shutdown_fin>
 8013992:	4603      	mov	r3, r0
 8013994:	e000      	b.n	8013998 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8013996:	2300      	movs	r3, #0
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bdb0      	pop	{r4, r5, r7, pc}
 80139a0:	0801ec84 	.word	0x0801ec84
 80139a4:	0801eddc 	.word	0x0801eddc
 80139a8:	0801ed4c 	.word	0x0801ed4c
 80139ac:	0801edfc 	.word	0x0801edfc
 80139b0:	2000c664 	.word	0x2000c664
 80139b4:	2000c660 	.word	0x2000c660
 80139b8:	2000c678 	.word	0x2000c678
 80139bc:	2000c670 	.word	0x2000c670
 80139c0:	2000c66c 	.word	0x2000c66c

080139c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <tcp_close_shutdown_fin+0x1c>
 80139d2:	4b2e      	ldr	r3, [pc, #184]	; (8013a8c <tcp_close_shutdown_fin+0xc8>)
 80139d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80139d8:	492d      	ldr	r1, [pc, #180]	; (8013a90 <tcp_close_shutdown_fin+0xcc>)
 80139da:	482e      	ldr	r0, [pc, #184]	; (8013a94 <tcp_close_shutdown_fin+0xd0>)
 80139dc:	f007 f8e2 	bl	801aba4 <iprintf>

  switch (pcb->state) {
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	7d1b      	ldrb	r3, [r3, #20]
 80139e4:	2b07      	cmp	r3, #7
 80139e6:	d020      	beq.n	8013a2a <tcp_close_shutdown_fin+0x66>
 80139e8:	2b07      	cmp	r3, #7
 80139ea:	dc2b      	bgt.n	8013a44 <tcp_close_shutdown_fin+0x80>
 80139ec:	2b03      	cmp	r3, #3
 80139ee:	d002      	beq.n	80139f6 <tcp_close_shutdown_fin+0x32>
 80139f0:	2b04      	cmp	r3, #4
 80139f2:	d00d      	beq.n	8013a10 <tcp_close_shutdown_fin+0x4c>
 80139f4:	e026      	b.n	8013a44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f004 fe12 	bl	8018620 <tcp_send_fin>
 80139fc:	4603      	mov	r3, r0
 80139fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d11f      	bne.n	8013a48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2205      	movs	r2, #5
 8013a0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a0e:	e01b      	b.n	8013a48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f004 fe05 	bl	8018620 <tcp_send_fin>
 8013a16:	4603      	mov	r3, r0
 8013a18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d114      	bne.n	8013a4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2205      	movs	r2, #5
 8013a26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a28:	e010      	b.n	8013a4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f004 fdf8 	bl	8018620 <tcp_send_fin>
 8013a30:	4603      	mov	r3, r0
 8013a32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d109      	bne.n	8013a50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2209      	movs	r2, #9
 8013a40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a42:	e005      	b.n	8013a50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013a44:	2300      	movs	r3, #0
 8013a46:	e01c      	b.n	8013a82 <tcp_close_shutdown_fin+0xbe>
      break;
 8013a48:	bf00      	nop
 8013a4a:	e002      	b.n	8013a52 <tcp_close_shutdown_fin+0x8e>
      break;
 8013a4c:	bf00      	nop
 8013a4e:	e000      	b.n	8013a52 <tcp_close_shutdown_fin+0x8e>
      break;
 8013a50:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d103      	bne.n	8013a62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f004 ff1e 	bl	801889c <tcp_output>
 8013a60:	e00d      	b.n	8013a7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a6a:	d108      	bne.n	8013a7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	8b5b      	ldrh	r3, [r3, #26]
 8013a70:	f043 0308 	orr.w	r3, r3, #8
 8013a74:	b29a      	uxth	r2, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	e001      	b.n	8013a82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	0801ec84 	.word	0x0801ec84
 8013a90:	0801edb8 	.word	0x0801edb8
 8013a94:	0801ed4c 	.word	0x0801ed4c

08013a98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d109      	bne.n	8013aba <tcp_close+0x22>
 8013aa6:	4b0f      	ldr	r3, [pc, #60]	; (8013ae4 <tcp_close+0x4c>)
 8013aa8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013aac:	490e      	ldr	r1, [pc, #56]	; (8013ae8 <tcp_close+0x50>)
 8013aae:	480f      	ldr	r0, [pc, #60]	; (8013aec <tcp_close+0x54>)
 8013ab0:	f007 f878 	bl	801aba4 <iprintf>
 8013ab4:	f06f 030f 	mvn.w	r3, #15
 8013ab8:	e00f      	b.n	8013ada <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	7d1b      	ldrb	r3, [r3, #20]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d006      	beq.n	8013ad0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	8b5b      	ldrh	r3, [r3, #26]
 8013ac6:	f043 0310 	orr.w	r3, r3, #16
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff fe94 	bl	8013800 <tcp_close_shutdown>
 8013ad8:	4603      	mov	r3, r0
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3708      	adds	r7, #8
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	0801ec84 	.word	0x0801ec84
 8013ae8:	0801ee18 	.word	0x0801ee18
 8013aec:	0801ed4c 	.word	0x0801ed4c

08013af0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	60b9      	str	r1, [r7, #8]
 8013afa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d109      	bne.n	8013b16 <tcp_shutdown+0x26>
 8013b02:	4b26      	ldr	r3, [pc, #152]	; (8013b9c <tcp_shutdown+0xac>)
 8013b04:	f240 2207 	movw	r2, #519	; 0x207
 8013b08:	4925      	ldr	r1, [pc, #148]	; (8013ba0 <tcp_shutdown+0xb0>)
 8013b0a:	4826      	ldr	r0, [pc, #152]	; (8013ba4 <tcp_shutdown+0xb4>)
 8013b0c:	f007 f84a 	bl	801aba4 <iprintf>
 8013b10:	f06f 030f 	mvn.w	r3, #15
 8013b14:	e03d      	b.n	8013b92 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	7d1b      	ldrb	r3, [r3, #20]
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d102      	bne.n	8013b24 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013b1e:	f06f 030a 	mvn.w	r3, #10
 8013b22:	e036      	b.n	8013b92 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d01b      	beq.n	8013b62 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	8b5b      	ldrh	r3, [r3, #26]
 8013b2e:	f043 0310 	orr.w	r3, r3, #16
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d005      	beq.n	8013b4a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013b3e:	2101      	movs	r1, #1
 8013b40:	68f8      	ldr	r0, [r7, #12]
 8013b42:	f7ff fe5d 	bl	8013800 <tcp_close_shutdown>
 8013b46:	4603      	mov	r3, r0
 8013b48:	e023      	b.n	8013b92 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d007      	beq.n	8013b62 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7ff fae4 	bl	8013124 <pbuf_free>
      pcb->refused_data = NULL;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d013      	beq.n	8013b90 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	7d1b      	ldrb	r3, [r3, #20]
 8013b6c:	2b04      	cmp	r3, #4
 8013b6e:	dc02      	bgt.n	8013b76 <tcp_shutdown+0x86>
 8013b70:	2b03      	cmp	r3, #3
 8013b72:	da02      	bge.n	8013b7a <tcp_shutdown+0x8a>
 8013b74:	e009      	b.n	8013b8a <tcp_shutdown+0x9a>
 8013b76:	2b07      	cmp	r3, #7
 8013b78:	d107      	bne.n	8013b8a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	b2db      	uxtb	r3, r3
 8013b7e:	4619      	mov	r1, r3
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f7ff fe3d 	bl	8013800 <tcp_close_shutdown>
 8013b86:	4603      	mov	r3, r0
 8013b88:	e003      	b.n	8013b92 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013b8a:	f06f 030a 	mvn.w	r3, #10
 8013b8e:	e000      	b.n	8013b92 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013b90:	2300      	movs	r3, #0
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	0801ec84 	.word	0x0801ec84
 8013ba0:	0801ee30 	.word	0x0801ee30
 8013ba4:	0801ed4c 	.word	0x0801ed4c

08013ba8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b08e      	sub	sp, #56	; 0x38
 8013bac:	af04      	add	r7, sp, #16
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d107      	bne.n	8013bc8 <tcp_abandon+0x20>
 8013bb8:	4b52      	ldr	r3, [pc, #328]	; (8013d04 <tcp_abandon+0x15c>)
 8013bba:	f240 223d 	movw	r2, #573	; 0x23d
 8013bbe:	4952      	ldr	r1, [pc, #328]	; (8013d08 <tcp_abandon+0x160>)
 8013bc0:	4852      	ldr	r0, [pc, #328]	; (8013d0c <tcp_abandon+0x164>)
 8013bc2:	f006 ffef 	bl	801aba4 <iprintf>
 8013bc6:	e099      	b.n	8013cfc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	7d1b      	ldrb	r3, [r3, #20]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d106      	bne.n	8013bde <tcp_abandon+0x36>
 8013bd0:	4b4c      	ldr	r3, [pc, #304]	; (8013d04 <tcp_abandon+0x15c>)
 8013bd2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013bd6:	494e      	ldr	r1, [pc, #312]	; (8013d10 <tcp_abandon+0x168>)
 8013bd8:	484c      	ldr	r0, [pc, #304]	; (8013d0c <tcp_abandon+0x164>)
 8013bda:	f006 ffe3 	bl	801aba4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	7d1b      	ldrb	r3, [r3, #20]
 8013be2:	2b0a      	cmp	r3, #10
 8013be4:	d107      	bne.n	8013bf6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013be6:	6879      	ldr	r1, [r7, #4]
 8013be8:	484a      	ldr	r0, [pc, #296]	; (8013d14 <tcp_abandon+0x16c>)
 8013bea:	f001 fa3d 	bl	8015068 <tcp_pcb_remove>
    tcp_free(pcb);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7ff fd54 	bl	801369c <tcp_free>
 8013bf4:	e082      	b.n	8013cfc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	691b      	ldr	r3, [r3, #16]
 8013c16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	7d1b      	ldrb	r3, [r3, #20]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d126      	bne.n	8013c6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	8adb      	ldrh	r3, [r3, #22]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d02e      	beq.n	8013c86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013c28:	4b3b      	ldr	r3, [pc, #236]	; (8013d18 <tcp_abandon+0x170>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	687a      	ldr	r2, [r7, #4]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d105      	bne.n	8013c3e <tcp_abandon+0x96>
 8013c32:	4b39      	ldr	r3, [pc, #228]	; (8013d18 <tcp_abandon+0x170>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	4a37      	ldr	r2, [pc, #220]	; (8013d18 <tcp_abandon+0x170>)
 8013c3a:	6013      	str	r3, [r2, #0]
 8013c3c:	e013      	b.n	8013c66 <tcp_abandon+0xbe>
 8013c3e:	4b36      	ldr	r3, [pc, #216]	; (8013d18 <tcp_abandon+0x170>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	61fb      	str	r3, [r7, #28]
 8013c44:	e00c      	b.n	8013c60 <tcp_abandon+0xb8>
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	68db      	ldr	r3, [r3, #12]
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d104      	bne.n	8013c5a <tcp_abandon+0xb2>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68da      	ldr	r2, [r3, #12]
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	60da      	str	r2, [r3, #12]
 8013c58:	e005      	b.n	8013c66 <tcp_abandon+0xbe>
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	68db      	ldr	r3, [r3, #12]
 8013c5e:	61fb      	str	r3, [r7, #28]
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1ef      	bne.n	8013c46 <tcp_abandon+0x9e>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	60da      	str	r2, [r3, #12]
 8013c6c:	e00b      	b.n	8013c86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	8adb      	ldrh	r3, [r3, #22]
 8013c76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013c78:	6879      	ldr	r1, [r7, #4]
 8013c7a:	4828      	ldr	r0, [pc, #160]	; (8013d1c <tcp_abandon+0x174>)
 8013c7c:	f001 f9f4 	bl	8015068 <tcp_pcb_remove>
 8013c80:	4b27      	ldr	r3, [pc, #156]	; (8013d20 <tcp_abandon+0x178>)
 8013c82:	2201      	movs	r2, #1
 8013c84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d004      	beq.n	8013c98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 fec8 	bl	8014a28 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d004      	beq.n	8013caa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 febf 	bl	8014a28 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d004      	beq.n	8013cbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f000 feb6 	bl	8014a28 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00e      	beq.n	8013ce0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013cc2:	6879      	ldr	r1, [r7, #4]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	8b12      	ldrh	r2, [r2, #24]
 8013ccc:	9202      	str	r2, [sp, #8]
 8013cce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013cd0:	9201      	str	r2, [sp, #4]
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	697a      	ldr	r2, [r7, #20]
 8013cd8:	69b9      	ldr	r1, [r7, #24]
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f005 fb92 	bl	8019404 <tcp_rst>
    }
    last_state = pcb->state;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	7d1b      	ldrb	r3, [r3, #20]
 8013ce4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f7ff fcd8 	bl	801369c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d004      	beq.n	8013cfc <tcp_abandon+0x154>
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	f06f 010c 	mvn.w	r1, #12
 8013cf8:	68f8      	ldr	r0, [r7, #12]
 8013cfa:	4798      	blx	r3
  }
}
 8013cfc:	3728      	adds	r7, #40	; 0x28
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	0801ec84 	.word	0x0801ec84
 8013d08:	0801ee4c 	.word	0x0801ee4c
 8013d0c:	0801ed4c 	.word	0x0801ed4c
 8013d10:	0801ee68 	.word	0x0801ee68
 8013d14:	2000c674 	.word	0x2000c674
 8013d18:	2000c670 	.word	0x2000c670
 8013d1c:	2000c664 	.word	0x2000c664
 8013d20:	2000c660 	.word	0x2000c660

08013d24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013d2c:	2101      	movs	r1, #1
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7ff ff3a 	bl	8013ba8 <tcp_abandon>
}
 8013d34:	bf00      	nop
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b088      	sub	sp, #32
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	60f8      	str	r0, [r7, #12]
 8013d44:	60b9      	str	r1, [r7, #8]
 8013d46:	4613      	mov	r3, r2
 8013d48:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013d4a:	2304      	movs	r3, #4
 8013d4c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013d54:	4b3e      	ldr	r3, [pc, #248]	; (8013e50 <tcp_bind+0x114>)
 8013d56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d109      	bne.n	8013d72 <tcp_bind+0x36>
 8013d5e:	4b3d      	ldr	r3, [pc, #244]	; (8013e54 <tcp_bind+0x118>)
 8013d60:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013d64:	493c      	ldr	r1, [pc, #240]	; (8013e58 <tcp_bind+0x11c>)
 8013d66:	483d      	ldr	r0, [pc, #244]	; (8013e5c <tcp_bind+0x120>)
 8013d68:	f006 ff1c 	bl	801aba4 <iprintf>
 8013d6c:	f06f 030f 	mvn.w	r3, #15
 8013d70:	e06a      	b.n	8013e48 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	7d1b      	ldrb	r3, [r3, #20]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d009      	beq.n	8013d8e <tcp_bind+0x52>
 8013d7a:	4b36      	ldr	r3, [pc, #216]	; (8013e54 <tcp_bind+0x118>)
 8013d7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013d80:	4937      	ldr	r1, [pc, #220]	; (8013e60 <tcp_bind+0x124>)
 8013d82:	4836      	ldr	r0, [pc, #216]	; (8013e5c <tcp_bind+0x120>)
 8013d84:	f006 ff0e 	bl	801aba4 <iprintf>
 8013d88:	f06f 0305 	mvn.w	r3, #5
 8013d8c:	e05c      	b.n	8013e48 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013d8e:	88fb      	ldrh	r3, [r7, #6]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d109      	bne.n	8013da8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013d94:	f000 f9e0 	bl	8014158 <tcp_new_port>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013d9c:	88fb      	ldrh	r3, [r7, #6]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d135      	bne.n	8013e0e <tcp_bind+0xd2>
      return ERR_BUF;
 8013da2:	f06f 0301 	mvn.w	r3, #1
 8013da6:	e04f      	b.n	8013e48 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013da8:	2300      	movs	r3, #0
 8013daa:	61fb      	str	r3, [r7, #28]
 8013dac:	e02b      	b.n	8013e06 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013dae:	4a2d      	ldr	r2, [pc, #180]	; (8013e64 <tcp_bind+0x128>)
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	61bb      	str	r3, [r7, #24]
 8013dba:	e01e      	b.n	8013dfa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	8adb      	ldrh	r3, [r3, #22]
 8013dc0:	88fa      	ldrh	r2, [r7, #6]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d116      	bne.n	8013df4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013dc6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d010      	beq.n	8013dee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d00c      	beq.n	8013dee <tcp_bind+0xb2>
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d009      	beq.n	8013dee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d005      	beq.n	8013dee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013de2:	69bb      	ldr	r3, [r7, #24]
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d102      	bne.n	8013df4 <tcp_bind+0xb8>
              return ERR_USE;
 8013dee:	f06f 0307 	mvn.w	r3, #7
 8013df2:	e029      	b.n	8013e48 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	61bb      	str	r3, [r7, #24]
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1dd      	bne.n	8013dbc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	3301      	adds	r3, #1
 8013e04:	61fb      	str	r3, [r7, #28]
 8013e06:	69fa      	ldr	r2, [r7, #28]
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	dbcf      	blt.n	8013dae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d00c      	beq.n	8013e2e <tcp_bind+0xf2>
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d008      	beq.n	8013e2e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d002      	beq.n	8013e28 <tcp_bind+0xec>
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	e000      	b.n	8013e2a <tcp_bind+0xee>
 8013e28:	2300      	movs	r3, #0
 8013e2a:	68fa      	ldr	r2, [r7, #12]
 8013e2c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	88fa      	ldrh	r2, [r7, #6]
 8013e32:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013e34:	4b0c      	ldr	r3, [pc, #48]	; (8013e68 <tcp_bind+0x12c>)
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	60da      	str	r2, [r3, #12]
 8013e3c:	4a0a      	ldr	r2, [pc, #40]	; (8013e68 <tcp_bind+0x12c>)
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	6013      	str	r3, [r2, #0]
 8013e42:	f005 fca1 	bl	8019788 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013e46:	2300      	movs	r3, #0
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3720      	adds	r7, #32
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	08020f30 	.word	0x08020f30
 8013e54:	0801ec84 	.word	0x0801ec84
 8013e58:	0801ee9c 	.word	0x0801ee9c
 8013e5c:	0801ed4c 	.word	0x0801ed4c
 8013e60:	0801eeb4 	.word	0x0801eeb4
 8013e64:	08021020 	.word	0x08021020
 8013e68:	2000c670 	.word	0x2000c670

08013e6c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	4613      	mov	r3, r2
 8013e78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d106      	bne.n	8013e8e <tcp_accept_null+0x22>
 8013e80:	4b07      	ldr	r3, [pc, #28]	; (8013ea0 <tcp_accept_null+0x34>)
 8013e82:	f240 320f 	movw	r2, #783	; 0x30f
 8013e86:	4907      	ldr	r1, [pc, #28]	; (8013ea4 <tcp_accept_null+0x38>)
 8013e88:	4807      	ldr	r0, [pc, #28]	; (8013ea8 <tcp_accept_null+0x3c>)
 8013e8a:	f006 fe8b 	bl	801aba4 <iprintf>

  tcp_abort(pcb);
 8013e8e:	68b8      	ldr	r0, [r7, #8]
 8013e90:	f7ff ff48 	bl	8013d24 <tcp_abort>

  return ERR_ABRT;
 8013e94:	f06f 030c 	mvn.w	r3, #12
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3710      	adds	r7, #16
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	0801ec84 	.word	0x0801ec84
 8013ea4:	0801eedc 	.word	0x0801eedc
 8013ea8:	0801ed4c 	.word	0x0801ed4c

08013eac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b088      	sub	sp, #32
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	607a      	str	r2, [r7, #4]
 8013eb8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d109      	bne.n	8013ed8 <tcp_listen_with_backlog_and_err+0x2c>
 8013ec4:	4b47      	ldr	r3, [pc, #284]	; (8013fe4 <tcp_listen_with_backlog_and_err+0x138>)
 8013ec6:	f240 3259 	movw	r2, #857	; 0x359
 8013eca:	4947      	ldr	r1, [pc, #284]	; (8013fe8 <tcp_listen_with_backlog_and_err+0x13c>)
 8013ecc:	4847      	ldr	r0, [pc, #284]	; (8013fec <tcp_listen_with_backlog_and_err+0x140>)
 8013ece:	f006 fe69 	bl	801aba4 <iprintf>
 8013ed2:	23f0      	movs	r3, #240	; 0xf0
 8013ed4:	76fb      	strb	r3, [r7, #27]
 8013ed6:	e079      	b.n	8013fcc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	7d1b      	ldrb	r3, [r3, #20]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d009      	beq.n	8013ef4 <tcp_listen_with_backlog_and_err+0x48>
 8013ee0:	4b40      	ldr	r3, [pc, #256]	; (8013fe4 <tcp_listen_with_backlog_and_err+0x138>)
 8013ee2:	f240 325a 	movw	r2, #858	; 0x35a
 8013ee6:	4942      	ldr	r1, [pc, #264]	; (8013ff0 <tcp_listen_with_backlog_and_err+0x144>)
 8013ee8:	4840      	ldr	r0, [pc, #256]	; (8013fec <tcp_listen_with_backlog_and_err+0x140>)
 8013eea:	f006 fe5b 	bl	801aba4 <iprintf>
 8013eee:	23f1      	movs	r3, #241	; 0xf1
 8013ef0:	76fb      	strb	r3, [r7, #27]
 8013ef2:	e06b      	b.n	8013fcc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	7d1b      	ldrb	r3, [r3, #20]
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d104      	bne.n	8013f06 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013f00:	23f7      	movs	r3, #247	; 0xf7
 8013f02:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013f04:	e062      	b.n	8013fcc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013f06:	2002      	movs	r0, #2
 8013f08:	f7fe f9b4 	bl	8012274 <memp_malloc>
 8013f0c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d102      	bne.n	8013f1a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013f14:	23ff      	movs	r3, #255	; 0xff
 8013f16:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013f18:	e058      	b.n	8013fcc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	691a      	ldr	r2, [r3, #16]
 8013f1e:	69fb      	ldr	r3, [r7, #28]
 8013f20:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	8ada      	ldrh	r2, [r3, #22]
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	7d5a      	ldrb	r2, [r3, #21]
 8013f34:	69fb      	ldr	r3, [r7, #28]
 8013f36:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	7a5a      	ldrb	r2, [r3, #9]
 8013f3c:	69fb      	ldr	r3, [r7, #28]
 8013f3e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	2200      	movs	r2, #0
 8013f44:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	7ada      	ldrb	r2, [r3, #11]
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	7a9a      	ldrb	r2, [r3, #10]
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	8adb      	ldrh	r3, [r3, #22]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d021      	beq.n	8013faa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013f66:	4b23      	ldr	r3, [pc, #140]	; (8013ff4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d105      	bne.n	8013f7c <tcp_listen_with_backlog_and_err+0xd0>
 8013f70:	4b20      	ldr	r3, [pc, #128]	; (8013ff4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	4a1f      	ldr	r2, [pc, #124]	; (8013ff4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f78:	6013      	str	r3, [r2, #0]
 8013f7a:	e013      	b.n	8013fa4 <tcp_listen_with_backlog_and_err+0xf8>
 8013f7c:	4b1d      	ldr	r3, [pc, #116]	; (8013ff4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	617b      	str	r3, [r7, #20]
 8013f82:	e00c      	b.n	8013f9e <tcp_listen_with_backlog_and_err+0xf2>
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	68fa      	ldr	r2, [r7, #12]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d104      	bne.n	8013f98 <tcp_listen_with_backlog_and_err+0xec>
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	68da      	ldr	r2, [r3, #12]
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	60da      	str	r2, [r3, #12]
 8013f96:	e005      	b.n	8013fa4 <tcp_listen_with_backlog_and_err+0xf8>
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	617b      	str	r3, [r7, #20]
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d1ef      	bne.n	8013f84 <tcp_listen_with_backlog_and_err+0xd8>
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013faa:	68f8      	ldr	r0, [r7, #12]
 8013fac:	f7ff fb76 	bl	801369c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	4a11      	ldr	r2, [pc, #68]	; (8013ff8 <tcp_listen_with_backlog_and_err+0x14c>)
 8013fb4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013fb6:	4b11      	ldr	r3, [pc, #68]	; (8013ffc <tcp_listen_with_backlog_and_err+0x150>)
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	60da      	str	r2, [r3, #12]
 8013fbe:	4a0f      	ldr	r2, [pc, #60]	; (8013ffc <tcp_listen_with_backlog_and_err+0x150>)
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	6013      	str	r3, [r2, #0]
 8013fc4:	f005 fbe0 	bl	8019788 <tcp_timer_needed>
  res = ERR_OK;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d002      	beq.n	8013fd8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	7efa      	ldrb	r2, [r7, #27]
 8013fd6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013fd8:	69fb      	ldr	r3, [r7, #28]
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3720      	adds	r7, #32
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	0801ec84 	.word	0x0801ec84
 8013fe8:	0801eefc 	.word	0x0801eefc
 8013fec:	0801ed4c 	.word	0x0801ed4c
 8013ff0:	0801ef2c 	.word	0x0801ef2c
 8013ff4:	2000c670 	.word	0x2000c670
 8013ff8:	08013e6d 	.word	0x08013e6d
 8013ffc:	2000c66c 	.word	0x2000c66c

08014000 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d106      	bne.n	801401c <tcp_update_rcv_ann_wnd+0x1c>
 801400e:	4b25      	ldr	r3, [pc, #148]	; (80140a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8014010:	f240 32a6 	movw	r2, #934	; 0x3a6
 8014014:	4924      	ldr	r1, [pc, #144]	; (80140a8 <tcp_update_rcv_ann_wnd+0xa8>)
 8014016:	4825      	ldr	r0, [pc, #148]	; (80140ac <tcp_update_rcv_ann_wnd+0xac>)
 8014018:	f006 fdc4 	bl	801aba4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8014024:	4413      	add	r3, r2
 8014026:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8014030:	f240 51b4 	movw	r1, #1460	; 0x5b4
 8014034:	428a      	cmp	r2, r1
 8014036:	bf28      	it	cs
 8014038:	460a      	movcs	r2, r1
 801403a:	b292      	uxth	r2, r2
 801403c:	4413      	add	r3, r2
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	1ad3      	subs	r3, r2, r3
 8014042:	2b00      	cmp	r3, #0
 8014044:	db08      	blt.n	8014058 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014052:	68fa      	ldr	r2, [r7, #12]
 8014054:	1ad3      	subs	r3, r2, r3
 8014056:	e020      	b.n	801409a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	2b00      	cmp	r3, #0
 8014064:	dd03      	ble.n	801406e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801406c:	e014      	b.n	8014098 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014076:	1ad3      	subs	r3, r2, r3
 8014078:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014080:	d306      	bcc.n	8014090 <tcp_update_rcv_ann_wnd+0x90>
 8014082:	4b08      	ldr	r3, [pc, #32]	; (80140a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8014084:	f240 32b6 	movw	r2, #950	; 0x3b6
 8014088:	4909      	ldr	r1, [pc, #36]	; (80140b0 <tcp_update_rcv_ann_wnd+0xb0>)
 801408a:	4808      	ldr	r0, [pc, #32]	; (80140ac <tcp_update_rcv_ann_wnd+0xac>)
 801408c:	f006 fd8a 	bl	801aba4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8014098:	2300      	movs	r3, #0
  }
}
 801409a:	4618      	mov	r0, r3
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	0801ec84 	.word	0x0801ec84
 80140a8:	0801ef64 	.word	0x0801ef64
 80140ac:	0801ed4c 	.word	0x0801ed4c
 80140b0:	0801ef88 	.word	0x0801ef88

080140b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	460b      	mov	r3, r1
 80140be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d107      	bne.n	80140d6 <tcp_recved+0x22>
 80140c6:	4b20      	ldr	r3, [pc, #128]	; (8014148 <tcp_recved+0x94>)
 80140c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80140cc:	491f      	ldr	r1, [pc, #124]	; (801414c <tcp_recved+0x98>)
 80140ce:	4820      	ldr	r0, [pc, #128]	; (8014150 <tcp_recved+0x9c>)
 80140d0:	f006 fd68 	bl	801aba4 <iprintf>
 80140d4:	e034      	b.n	8014140 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	7d1b      	ldrb	r3, [r3, #20]
 80140da:	2b01      	cmp	r3, #1
 80140dc:	d106      	bne.n	80140ec <tcp_recved+0x38>
 80140de:	4b1a      	ldr	r3, [pc, #104]	; (8014148 <tcp_recved+0x94>)
 80140e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80140e4:	491b      	ldr	r1, [pc, #108]	; (8014154 <tcp_recved+0xa0>)
 80140e6:	481a      	ldr	r0, [pc, #104]	; (8014150 <tcp_recved+0x9c>)
 80140e8:	f006 fd5c 	bl	801aba4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140f0:	887b      	ldrh	r3, [r7, #2]
 80140f2:	4413      	add	r3, r2
 80140f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80140f6:	89fb      	ldrh	r3, [r7, #14]
 80140f8:	f640 3268 	movw	r2, #2920	; 0xb68
 80140fc:	4293      	cmp	r3, r2
 80140fe:	d804      	bhi.n	801410a <tcp_recved+0x56>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014104:	89fa      	ldrh	r2, [r7, #14]
 8014106:	429a      	cmp	r2, r3
 8014108:	d204      	bcs.n	8014114 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f640 3268 	movw	r2, #2920	; 0xb68
 8014110:	851a      	strh	r2, [r3, #40]	; 0x28
 8014112:	e002      	b.n	801411a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	89fa      	ldrh	r2, [r7, #14]
 8014118:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f7ff ff70 	bl	8014000 <tcp_update_rcv_ann_wnd>
 8014120:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	f240 22d9 	movw	r2, #729	; 0x2d9
 8014128:	4293      	cmp	r3, r2
 801412a:	d909      	bls.n	8014140 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	8b5b      	ldrh	r3, [r3, #26]
 8014130:	f043 0302 	orr.w	r3, r3, #2
 8014134:	b29a      	uxth	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f004 fbae 	bl	801889c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014140:	3710      	adds	r7, #16
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop
 8014148:	0801ec84 	.word	0x0801ec84
 801414c:	0801efa4 	.word	0x0801efa4
 8014150:	0801ed4c 	.word	0x0801ed4c
 8014154:	0801efbc 	.word	0x0801efbc

08014158 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801415e:	2300      	movs	r3, #0
 8014160:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014162:	4b1e      	ldr	r3, [pc, #120]	; (80141dc <tcp_new_port+0x84>)
 8014164:	881b      	ldrh	r3, [r3, #0]
 8014166:	3301      	adds	r3, #1
 8014168:	b29a      	uxth	r2, r3
 801416a:	4b1c      	ldr	r3, [pc, #112]	; (80141dc <tcp_new_port+0x84>)
 801416c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801416e:	4b1b      	ldr	r3, [pc, #108]	; (80141dc <tcp_new_port+0x84>)
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014176:	4293      	cmp	r3, r2
 8014178:	d103      	bne.n	8014182 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801417a:	4b18      	ldr	r3, [pc, #96]	; (80141dc <tcp_new_port+0x84>)
 801417c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014180:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014182:	2300      	movs	r3, #0
 8014184:	71fb      	strb	r3, [r7, #7]
 8014186:	e01e      	b.n	80141c6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014188:	79fb      	ldrb	r3, [r7, #7]
 801418a:	4a15      	ldr	r2, [pc, #84]	; (80141e0 <tcp_new_port+0x88>)
 801418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	603b      	str	r3, [r7, #0]
 8014194:	e011      	b.n	80141ba <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	8ada      	ldrh	r2, [r3, #22]
 801419a:	4b10      	ldr	r3, [pc, #64]	; (80141dc <tcp_new_port+0x84>)
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d108      	bne.n	80141b4 <tcp_new_port+0x5c>
        n++;
 80141a2:	88bb      	ldrh	r3, [r7, #4]
 80141a4:	3301      	adds	r3, #1
 80141a6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80141a8:	88bb      	ldrh	r3, [r7, #4]
 80141aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80141ae:	d3d8      	bcc.n	8014162 <tcp_new_port+0xa>
          return 0;
 80141b0:	2300      	movs	r3, #0
 80141b2:	e00d      	b.n	80141d0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	603b      	str	r3, [r7, #0]
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d1ea      	bne.n	8014196 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80141c0:	79fb      	ldrb	r3, [r7, #7]
 80141c2:	3301      	adds	r3, #1
 80141c4:	71fb      	strb	r3, [r7, #7]
 80141c6:	79fb      	ldrb	r3, [r7, #7]
 80141c8:	2b03      	cmp	r3, #3
 80141ca:	d9dd      	bls.n	8014188 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80141cc:	4b03      	ldr	r3, [pc, #12]	; (80141dc <tcp_new_port+0x84>)
 80141ce:	881b      	ldrh	r3, [r3, #0]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	370c      	adds	r7, #12
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr
 80141dc:	20000038 	.word	0x20000038
 80141e0:	08021020 	.word	0x08021020

080141e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80141e4:	b5b0      	push	{r4, r5, r7, lr}
 80141e6:	b090      	sub	sp, #64	; 0x40
 80141e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80141ea:	2300      	movs	r3, #0
 80141ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80141f0:	4b94      	ldr	r3, [pc, #592]	; (8014444 <tcp_slowtmr+0x260>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	3301      	adds	r3, #1
 80141f6:	4a93      	ldr	r2, [pc, #588]	; (8014444 <tcp_slowtmr+0x260>)
 80141f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80141fa:	4b93      	ldr	r3, [pc, #588]	; (8014448 <tcp_slowtmr+0x264>)
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	3301      	adds	r3, #1
 8014200:	b2da      	uxtb	r2, r3
 8014202:	4b91      	ldr	r3, [pc, #580]	; (8014448 <tcp_slowtmr+0x264>)
 8014204:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8014206:	2300      	movs	r3, #0
 8014208:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801420a:	4b90      	ldr	r3, [pc, #576]	; (801444c <tcp_slowtmr+0x268>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8014210:	e29d      	b.n	801474e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014214:	7d1b      	ldrb	r3, [r3, #20]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d106      	bne.n	8014228 <tcp_slowtmr+0x44>
 801421a:	4b8d      	ldr	r3, [pc, #564]	; (8014450 <tcp_slowtmr+0x26c>)
 801421c:	f240 42be 	movw	r2, #1214	; 0x4be
 8014220:	498c      	ldr	r1, [pc, #560]	; (8014454 <tcp_slowtmr+0x270>)
 8014222:	488d      	ldr	r0, [pc, #564]	; (8014458 <tcp_slowtmr+0x274>)
 8014224:	f006 fcbe 	bl	801aba4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422a:	7d1b      	ldrb	r3, [r3, #20]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d106      	bne.n	801423e <tcp_slowtmr+0x5a>
 8014230:	4b87      	ldr	r3, [pc, #540]	; (8014450 <tcp_slowtmr+0x26c>)
 8014232:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8014236:	4989      	ldr	r1, [pc, #548]	; (801445c <tcp_slowtmr+0x278>)
 8014238:	4887      	ldr	r0, [pc, #540]	; (8014458 <tcp_slowtmr+0x274>)
 801423a:	f006 fcb3 	bl	801aba4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014240:	7d1b      	ldrb	r3, [r3, #20]
 8014242:	2b0a      	cmp	r3, #10
 8014244:	d106      	bne.n	8014254 <tcp_slowtmr+0x70>
 8014246:	4b82      	ldr	r3, [pc, #520]	; (8014450 <tcp_slowtmr+0x26c>)
 8014248:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801424c:	4984      	ldr	r1, [pc, #528]	; (8014460 <tcp_slowtmr+0x27c>)
 801424e:	4882      	ldr	r0, [pc, #520]	; (8014458 <tcp_slowtmr+0x274>)
 8014250:	f006 fca8 	bl	801aba4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014256:	7f9a      	ldrb	r2, [r3, #30]
 8014258:	4b7b      	ldr	r3, [pc, #492]	; (8014448 <tcp_slowtmr+0x264>)
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	429a      	cmp	r2, r3
 801425e:	d105      	bne.n	801426c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014262:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801426a:	e270      	b.n	801474e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801426c:	4b76      	ldr	r3, [pc, #472]	; (8014448 <tcp_slowtmr+0x264>)
 801426e:	781a      	ldrb	r2, [r3, #0]
 8014270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014272:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014274:	2300      	movs	r3, #0
 8014276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801427a:	2300      	movs	r3, #0
 801427c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014282:	7d1b      	ldrb	r3, [r3, #20]
 8014284:	2b02      	cmp	r3, #2
 8014286:	d10a      	bne.n	801429e <tcp_slowtmr+0xba>
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801428e:	2b05      	cmp	r3, #5
 8014290:	d905      	bls.n	801429e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014296:	3301      	adds	r3, #1
 8014298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801429c:	e11e      	b.n	80144dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80142a4:	2b0b      	cmp	r3, #11
 80142a6:	d905      	bls.n	80142b4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80142a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142ac:	3301      	adds	r3, #1
 80142ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142b2:	e113      	b.n	80144dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80142b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d075      	beq.n	80143aa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80142be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d006      	beq.n	80142d4 <tcp_slowtmr+0xf0>
 80142c6:	4b62      	ldr	r3, [pc, #392]	; (8014450 <tcp_slowtmr+0x26c>)
 80142c8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80142cc:	4965      	ldr	r1, [pc, #404]	; (8014464 <tcp_slowtmr+0x280>)
 80142ce:	4862      	ldr	r0, [pc, #392]	; (8014458 <tcp_slowtmr+0x274>)
 80142d0:	f006 fc68 	bl	801aba4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80142d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d106      	bne.n	80142ea <tcp_slowtmr+0x106>
 80142dc:	4b5c      	ldr	r3, [pc, #368]	; (8014450 <tcp_slowtmr+0x26c>)
 80142de:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80142e2:	4961      	ldr	r1, [pc, #388]	; (8014468 <tcp_slowtmr+0x284>)
 80142e4:	485c      	ldr	r0, [pc, #368]	; (8014458 <tcp_slowtmr+0x274>)
 80142e6:	f006 fc5d 	bl	801aba4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80142ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142f0:	2b0b      	cmp	r3, #11
 80142f2:	d905      	bls.n	8014300 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80142f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142f8:	3301      	adds	r3, #1
 80142fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142fe:	e0ed      	b.n	80144dc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014302:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014306:	3b01      	subs	r3, #1
 8014308:	4a58      	ldr	r2, [pc, #352]	; (801446c <tcp_slowtmr+0x288>)
 801430a:	5cd3      	ldrb	r3, [r2, r3]
 801430c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014310:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014314:	7c7a      	ldrb	r2, [r7, #17]
 8014316:	429a      	cmp	r2, r3
 8014318:	d907      	bls.n	801432a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014320:	3301      	adds	r3, #1
 8014322:	b2da      	uxtb	r2, r3
 8014324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014326:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014330:	7c7a      	ldrb	r2, [r7, #17]
 8014332:	429a      	cmp	r2, r3
 8014334:	f200 80d2 	bhi.w	80144dc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8014338:	2301      	movs	r3, #1
 801433a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014342:	2b00      	cmp	r3, #0
 8014344:	d108      	bne.n	8014358 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014348:	f005 f950 	bl	80195ec <tcp_zero_window_probe>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d014      	beq.n	801437c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8014352:	2300      	movs	r3, #0
 8014354:	623b      	str	r3, [r7, #32]
 8014356:	e011      	b.n	801437c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801435e:	4619      	mov	r1, r3
 8014360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014362:	f004 f815 	bl	8018390 <tcp_split_unsent_seg>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d107      	bne.n	801437c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801436c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801436e:	f004 fa95 	bl	801889c <tcp_output>
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d101      	bne.n	801437c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014378:	2300      	movs	r3, #0
 801437a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801437c:	6a3b      	ldr	r3, [r7, #32]
 801437e:	2b00      	cmp	r3, #0
 8014380:	f000 80ac 	beq.w	80144dc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	2200      	movs	r2, #0
 8014388:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014392:	2b06      	cmp	r3, #6
 8014394:	f200 80a2 	bhi.w	80144dc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801439e:	3301      	adds	r3, #1
 80143a0:	b2da      	uxtb	r2, r3
 80143a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80143a8:	e098      	b.n	80144dc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80143aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	db0f      	blt.n	80143d4 <tcp_slowtmr+0x1f0>
 80143b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80143be:	4293      	cmp	r3, r2
 80143c0:	d008      	beq.n	80143d4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80143c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	3301      	adds	r3, #1
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	b21a      	sxth	r2, r3
 80143d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80143d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80143da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80143e0:	429a      	cmp	r2, r3
 80143e2:	db7b      	blt.n	80144dc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80143e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80143e6:	f004 fd4b 	bl	8018e80 <tcp_rexmit_rto_prepare>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d007      	beq.n	8014400 <tcp_slowtmr+0x21c>
 80143f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d171      	bne.n	80144dc <tcp_slowtmr+0x2f8>
 80143f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d06d      	beq.n	80144dc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8014400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014402:	7d1b      	ldrb	r3, [r3, #20]
 8014404:	2b02      	cmp	r3, #2
 8014406:	d03a      	beq.n	801447e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801440e:	2b0c      	cmp	r3, #12
 8014410:	bf28      	it	cs
 8014412:	230c      	movcs	r3, #12
 8014414:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014418:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801441c:	10db      	asrs	r3, r3, #3
 801441e:	b21b      	sxth	r3, r3
 8014420:	461a      	mov	r2, r3
 8014422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014424:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014428:	4413      	add	r3, r2
 801442a:	7efa      	ldrb	r2, [r7, #27]
 801442c:	4910      	ldr	r1, [pc, #64]	; (8014470 <tcp_slowtmr+0x28c>)
 801442e:	5c8a      	ldrb	r2, [r1, r2]
 8014430:	4093      	lsls	r3, r2
 8014432:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801443a:	4293      	cmp	r3, r2
 801443c:	dc1a      	bgt.n	8014474 <tcp_slowtmr+0x290>
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	b21a      	sxth	r2, r3
 8014442:	e019      	b.n	8014478 <tcp_slowtmr+0x294>
 8014444:	2000c668 	.word	0x2000c668
 8014448:	200085d2 	.word	0x200085d2
 801444c:	2000c664 	.word	0x2000c664
 8014450:	0801ec84 	.word	0x0801ec84
 8014454:	0801f04c 	.word	0x0801f04c
 8014458:	0801ed4c 	.word	0x0801ed4c
 801445c:	0801f078 	.word	0x0801f078
 8014460:	0801f0a4 	.word	0x0801f0a4
 8014464:	0801f0d4 	.word	0x0801f0d4
 8014468:	0801f108 	.word	0x0801f108
 801446c:	08021018 	.word	0x08021018
 8014470:	08021008 	.word	0x08021008
 8014474:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014480:	2200      	movs	r2, #0
 8014482:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014490:	4293      	cmp	r3, r2
 8014492:	bf28      	it	cs
 8014494:	4613      	movcs	r3, r2
 8014496:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014498:	8a7b      	ldrh	r3, [r7, #18]
 801449a:	085b      	lsrs	r3, r3, #1
 801449c:	b29a      	uxth	r2, r3
 801449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80144a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80144aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d206      	bcs.n	80144c4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80144b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144ba:	005b      	lsls	r3, r3, #1
 80144bc:	b29a      	uxth	r2, r3
 80144be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80144c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80144c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80144ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d0:	2200      	movs	r2, #0
 80144d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80144d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144d8:	f004 fd42 	bl	8018f60 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80144dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144de:	7d1b      	ldrb	r3, [r3, #20]
 80144e0:	2b06      	cmp	r3, #6
 80144e2:	d111      	bne.n	8014508 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80144e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e6:	8b5b      	ldrh	r3, [r3, #26]
 80144e8:	f003 0310 	and.w	r3, r3, #16
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d00b      	beq.n	8014508 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144f0:	4b9c      	ldr	r3, [pc, #624]	; (8014764 <tcp_slowtmr+0x580>)
 80144f2:	681a      	ldr	r2, [r3, #0]
 80144f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f6:	6a1b      	ldr	r3, [r3, #32]
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	2b28      	cmp	r3, #40	; 0x28
 80144fc:	d904      	bls.n	8014508 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80144fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014502:	3301      	adds	r3, #1
 8014504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801450a:	7a5b      	ldrb	r3, [r3, #9]
 801450c:	f003 0308 	and.w	r3, r3, #8
 8014510:	2b00      	cmp	r3, #0
 8014512:	d04a      	beq.n	80145aa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8014514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014516:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014518:	2b04      	cmp	r3, #4
 801451a:	d003      	beq.n	8014524 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014520:	2b07      	cmp	r3, #7
 8014522:	d142      	bne.n	80145aa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014524:	4b8f      	ldr	r3, [pc, #572]	; (8014764 <tcp_slowtmr+0x580>)
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452a:	6a1b      	ldr	r3, [r3, #32]
 801452c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014530:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014534:	4b8c      	ldr	r3, [pc, #560]	; (8014768 <tcp_slowtmr+0x584>)
 8014536:	440b      	add	r3, r1
 8014538:	498c      	ldr	r1, [pc, #560]	; (801476c <tcp_slowtmr+0x588>)
 801453a:	fba1 1303 	umull	r1, r3, r1, r3
 801453e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014540:	429a      	cmp	r2, r3
 8014542:	d90a      	bls.n	801455a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014548:	3301      	adds	r3, #1
 801454a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801454e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014552:	3301      	adds	r3, #1
 8014554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014558:	e027      	b.n	80145aa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801455a:	4b82      	ldr	r3, [pc, #520]	; (8014764 <tcp_slowtmr+0x580>)
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014560:	6a1b      	ldr	r3, [r3, #32]
 8014562:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014566:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014570:	4618      	mov	r0, r3
 8014572:	4b7f      	ldr	r3, [pc, #508]	; (8014770 <tcp_slowtmr+0x58c>)
 8014574:	fb03 f300 	mul.w	r3, r3, r0
 8014578:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801457a:	497c      	ldr	r1, [pc, #496]	; (801476c <tcp_slowtmr+0x588>)
 801457c:	fba1 1303 	umull	r1, r3, r1, r3
 8014580:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014582:	429a      	cmp	r2, r3
 8014584:	d911      	bls.n	80145aa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8014586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014588:	f004 fff0 	bl	801956c <tcp_keepalive>
 801458c:	4603      	mov	r3, r0
 801458e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014592:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014596:	2b00      	cmp	r3, #0
 8014598:	d107      	bne.n	80145aa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801459c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80145a0:	3301      	adds	r3, #1
 80145a2:	b2da      	uxtb	r2, r3
 80145a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80145aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d011      	beq.n	80145d6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80145b2:	4b6c      	ldr	r3, [pc, #432]	; (8014764 <tcp_slowtmr+0x580>)
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	6a1b      	ldr	r3, [r3, #32]
 80145ba:	1ad2      	subs	r2, r2, r3
 80145bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80145c2:	4619      	mov	r1, r3
 80145c4:	460b      	mov	r3, r1
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	440b      	add	r3, r1
 80145ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d302      	bcc.n	80145d6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80145d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145d2:	f000 fead 	bl	8015330 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80145d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d8:	7d1b      	ldrb	r3, [r3, #20]
 80145da:	2b03      	cmp	r3, #3
 80145dc:	d10b      	bne.n	80145f6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80145de:	4b61      	ldr	r3, [pc, #388]	; (8014764 <tcp_slowtmr+0x580>)
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e4:	6a1b      	ldr	r3, [r3, #32]
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	2b28      	cmp	r3, #40	; 0x28
 80145ea:	d904      	bls.n	80145f6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80145ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145f0:	3301      	adds	r3, #1
 80145f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80145f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f8:	7d1b      	ldrb	r3, [r3, #20]
 80145fa:	2b09      	cmp	r3, #9
 80145fc:	d10b      	bne.n	8014616 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80145fe:	4b59      	ldr	r3, [pc, #356]	; (8014764 <tcp_slowtmr+0x580>)
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014604:	6a1b      	ldr	r3, [r3, #32]
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	2bf0      	cmp	r3, #240	; 0xf0
 801460a:	d904      	bls.n	8014616 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801460c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014610:	3301      	adds	r3, #1
 8014612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801461a:	2b00      	cmp	r3, #0
 801461c:	d060      	beq.n	80146e0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014624:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014628:	f000 fcce 	bl	8014fc8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801462e:	2b00      	cmp	r3, #0
 8014630:	d010      	beq.n	8014654 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014632:	4b50      	ldr	r3, [pc, #320]	; (8014774 <tcp_slowtmr+0x590>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014638:	429a      	cmp	r2, r3
 801463a:	d106      	bne.n	801464a <tcp_slowtmr+0x466>
 801463c:	4b4e      	ldr	r3, [pc, #312]	; (8014778 <tcp_slowtmr+0x594>)
 801463e:	f240 526d 	movw	r2, #1389	; 0x56d
 8014642:	494e      	ldr	r1, [pc, #312]	; (801477c <tcp_slowtmr+0x598>)
 8014644:	484e      	ldr	r0, [pc, #312]	; (8014780 <tcp_slowtmr+0x59c>)
 8014646:	f006 faad 	bl	801aba4 <iprintf>
        prev->next = pcb->next;
 801464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464c:	68da      	ldr	r2, [r3, #12]
 801464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014650:	60da      	str	r2, [r3, #12]
 8014652:	e00f      	b.n	8014674 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014654:	4b47      	ldr	r3, [pc, #284]	; (8014774 <tcp_slowtmr+0x590>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801465a:	429a      	cmp	r2, r3
 801465c:	d006      	beq.n	801466c <tcp_slowtmr+0x488>
 801465e:	4b46      	ldr	r3, [pc, #280]	; (8014778 <tcp_slowtmr+0x594>)
 8014660:	f240 5271 	movw	r2, #1393	; 0x571
 8014664:	4947      	ldr	r1, [pc, #284]	; (8014784 <tcp_slowtmr+0x5a0>)
 8014666:	4846      	ldr	r0, [pc, #280]	; (8014780 <tcp_slowtmr+0x59c>)
 8014668:	f006 fa9c 	bl	801aba4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	4a40      	ldr	r2, [pc, #256]	; (8014774 <tcp_slowtmr+0x590>)
 8014672:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014678:	2b00      	cmp	r3, #0
 801467a:	d013      	beq.n	80146a4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014682:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014684:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014688:	3304      	adds	r3, #4
 801468a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801468c:	8ad2      	ldrh	r2, [r2, #22]
 801468e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014690:	8b09      	ldrh	r1, [r1, #24]
 8014692:	9102      	str	r1, [sp, #8]
 8014694:	9201      	str	r2, [sp, #4]
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	462b      	mov	r3, r5
 801469a:	4622      	mov	r2, r4
 801469c:	4601      	mov	r1, r0
 801469e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146a0:	f004 feb0 	bl	8019404 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80146a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a6:	691b      	ldr	r3, [r3, #16]
 80146a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80146aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ac:	7d1b      	ldrb	r3, [r3, #20]
 80146ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80146b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80146b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b6:	68db      	ldr	r3, [r3, #12]
 80146b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80146ba:	6838      	ldr	r0, [r7, #0]
 80146bc:	f7fe ffee 	bl	801369c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80146c0:	4b31      	ldr	r3, [pc, #196]	; (8014788 <tcp_slowtmr+0x5a4>)
 80146c2:	2200      	movs	r2, #0
 80146c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d004      	beq.n	80146d6 <tcp_slowtmr+0x4f2>
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f06f 010c 	mvn.w	r1, #12
 80146d2:	68b8      	ldr	r0, [r7, #8]
 80146d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80146d6:	4b2c      	ldr	r3, [pc, #176]	; (8014788 <tcp_slowtmr+0x5a4>)
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d037      	beq.n	801474e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80146de:	e592      	b.n	8014206 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80146e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80146e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80146ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ec:	7f1b      	ldrb	r3, [r3, #28]
 80146ee:	3301      	adds	r3, #1
 80146f0:	b2da      	uxtb	r2, r3
 80146f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80146f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f8:	7f1a      	ldrb	r2, [r3, #28]
 80146fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fc:	7f5b      	ldrb	r3, [r3, #29]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d325      	bcc.n	801474e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	2200      	movs	r2, #0
 8014706:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014708:	4b1f      	ldr	r3, [pc, #124]	; (8014788 <tcp_slowtmr+0x5a4>)
 801470a:	2200      	movs	r2, #0
 801470c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014714:	2b00      	cmp	r3, #0
 8014716:	d00b      	beq.n	8014730 <tcp_slowtmr+0x54c>
 8014718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801471e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014720:	6912      	ldr	r2, [r2, #16]
 8014722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014724:	4610      	mov	r0, r2
 8014726:	4798      	blx	r3
 8014728:	4603      	mov	r3, r0
 801472a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801472e:	e002      	b.n	8014736 <tcp_slowtmr+0x552>
 8014730:	2300      	movs	r3, #0
 8014732:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014736:	4b14      	ldr	r3, [pc, #80]	; (8014788 <tcp_slowtmr+0x5a4>)
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d000      	beq.n	8014740 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801473e:	e562      	b.n	8014206 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014740:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014744:	2b00      	cmp	r3, #0
 8014746:	d102      	bne.n	801474e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8014748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801474a:	f004 f8a7 	bl	801889c <tcp_output>
  while (pcb != NULL) {
 801474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014750:	2b00      	cmp	r3, #0
 8014752:	f47f ad5e 	bne.w	8014212 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014756:	2300      	movs	r3, #0
 8014758:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801475a:	4b0c      	ldr	r3, [pc, #48]	; (801478c <tcp_slowtmr+0x5a8>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014760:	e069      	b.n	8014836 <tcp_slowtmr+0x652>
 8014762:	bf00      	nop
 8014764:	2000c668 	.word	0x2000c668
 8014768:	000a4cb8 	.word	0x000a4cb8
 801476c:	10624dd3 	.word	0x10624dd3
 8014770:	000124f8 	.word	0x000124f8
 8014774:	2000c664 	.word	0x2000c664
 8014778:	0801ec84 	.word	0x0801ec84
 801477c:	0801f140 	.word	0x0801f140
 8014780:	0801ed4c 	.word	0x0801ed4c
 8014784:	0801f16c 	.word	0x0801f16c
 8014788:	2000c660 	.word	0x2000c660
 801478c:	2000c674 	.word	0x2000c674
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014792:	7d1b      	ldrb	r3, [r3, #20]
 8014794:	2b0a      	cmp	r3, #10
 8014796:	d006      	beq.n	80147a6 <tcp_slowtmr+0x5c2>
 8014798:	4b2b      	ldr	r3, [pc, #172]	; (8014848 <tcp_slowtmr+0x664>)
 801479a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801479e:	492b      	ldr	r1, [pc, #172]	; (801484c <tcp_slowtmr+0x668>)
 80147a0:	482b      	ldr	r0, [pc, #172]	; (8014850 <tcp_slowtmr+0x66c>)
 80147a2:	f006 f9ff 	bl	801aba4 <iprintf>
    pcb_remove = 0;
 80147a6:	2300      	movs	r3, #0
 80147a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80147ac:	4b29      	ldr	r3, [pc, #164]	; (8014854 <tcp_slowtmr+0x670>)
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	6a1b      	ldr	r3, [r3, #32]
 80147b4:	1ad3      	subs	r3, r2, r3
 80147b6:	2bf0      	cmp	r3, #240	; 0xf0
 80147b8:	d904      	bls.n	80147c4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80147ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147be:	3301      	adds	r3, #1
 80147c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80147c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d02f      	beq.n	801482c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80147cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80147ce:	f000 fbfb 	bl	8014fc8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80147d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d010      	beq.n	80147fa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80147d8:	4b1f      	ldr	r3, [pc, #124]	; (8014858 <tcp_slowtmr+0x674>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147de:	429a      	cmp	r2, r3
 80147e0:	d106      	bne.n	80147f0 <tcp_slowtmr+0x60c>
 80147e2:	4b19      	ldr	r3, [pc, #100]	; (8014848 <tcp_slowtmr+0x664>)
 80147e4:	f240 52af 	movw	r2, #1455	; 0x5af
 80147e8:	491c      	ldr	r1, [pc, #112]	; (801485c <tcp_slowtmr+0x678>)
 80147ea:	4819      	ldr	r0, [pc, #100]	; (8014850 <tcp_slowtmr+0x66c>)
 80147ec:	f006 f9da 	bl	801aba4 <iprintf>
        prev->next = pcb->next;
 80147f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f2:	68da      	ldr	r2, [r3, #12]
 80147f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f6:	60da      	str	r2, [r3, #12]
 80147f8:	e00f      	b.n	801481a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80147fa:	4b17      	ldr	r3, [pc, #92]	; (8014858 <tcp_slowtmr+0x674>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014800:	429a      	cmp	r2, r3
 8014802:	d006      	beq.n	8014812 <tcp_slowtmr+0x62e>
 8014804:	4b10      	ldr	r3, [pc, #64]	; (8014848 <tcp_slowtmr+0x664>)
 8014806:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801480a:	4915      	ldr	r1, [pc, #84]	; (8014860 <tcp_slowtmr+0x67c>)
 801480c:	4810      	ldr	r0, [pc, #64]	; (8014850 <tcp_slowtmr+0x66c>)
 801480e:	f006 f9c9 	bl	801aba4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	4a10      	ldr	r2, [pc, #64]	; (8014858 <tcp_slowtmr+0x674>)
 8014818:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801481c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014824:	69f8      	ldr	r0, [r7, #28]
 8014826:	f7fe ff39 	bl	801369c <tcp_free>
 801482a:	e004      	b.n	8014836 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014838:	2b00      	cmp	r3, #0
 801483a:	d1a9      	bne.n	8014790 <tcp_slowtmr+0x5ac>
    }
  }
}
 801483c:	bf00      	nop
 801483e:	bf00      	nop
 8014840:	3730      	adds	r7, #48	; 0x30
 8014842:	46bd      	mov	sp, r7
 8014844:	bdb0      	pop	{r4, r5, r7, pc}
 8014846:	bf00      	nop
 8014848:	0801ec84 	.word	0x0801ec84
 801484c:	0801f198 	.word	0x0801f198
 8014850:	0801ed4c 	.word	0x0801ed4c
 8014854:	2000c668 	.word	0x2000c668
 8014858:	2000c674 	.word	0x2000c674
 801485c:	0801f1c8 	.word	0x0801f1c8
 8014860:	0801f1f0 	.word	0x0801f1f0

08014864 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801486a:	4b2d      	ldr	r3, [pc, #180]	; (8014920 <tcp_fasttmr+0xbc>)
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	3301      	adds	r3, #1
 8014870:	b2da      	uxtb	r2, r3
 8014872:	4b2b      	ldr	r3, [pc, #172]	; (8014920 <tcp_fasttmr+0xbc>)
 8014874:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014876:	4b2b      	ldr	r3, [pc, #172]	; (8014924 <tcp_fasttmr+0xc0>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801487c:	e048      	b.n	8014910 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	7f9a      	ldrb	r2, [r3, #30]
 8014882:	4b27      	ldr	r3, [pc, #156]	; (8014920 <tcp_fasttmr+0xbc>)
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	429a      	cmp	r2, r3
 8014888:	d03f      	beq.n	801490a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801488a:	4b25      	ldr	r3, [pc, #148]	; (8014920 <tcp_fasttmr+0xbc>)
 801488c:	781a      	ldrb	r2, [r3, #0]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	8b5b      	ldrh	r3, [r3, #26]
 8014896:	f003 0301 	and.w	r3, r3, #1
 801489a:	2b00      	cmp	r3, #0
 801489c:	d010      	beq.n	80148c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	8b5b      	ldrh	r3, [r3, #26]
 80148a2:	f043 0302 	orr.w	r3, r3, #2
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f003 fff5 	bl	801889c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	8b5b      	ldrh	r3, [r3, #26]
 80148b6:	f023 0303 	bic.w	r3, r3, #3
 80148ba:	b29a      	uxth	r2, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	8b5b      	ldrh	r3, [r3, #26]
 80148c4:	f003 0308 	and.w	r3, r3, #8
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d009      	beq.n	80148e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	8b5b      	ldrh	r3, [r3, #26]
 80148d0:	f023 0308 	bic.w	r3, r3, #8
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f7ff f872 	bl	80139c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00a      	beq.n	8014904 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80148ee:	4b0e      	ldr	r3, [pc, #56]	; (8014928 <tcp_fasttmr+0xc4>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f000 f819 	bl	801492c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80148fa:	4b0b      	ldr	r3, [pc, #44]	; (8014928 <tcp_fasttmr+0xc4>)
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d000      	beq.n	8014904 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014902:	e7b8      	b.n	8014876 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	607b      	str	r3, [r7, #4]
 8014908:	e002      	b.n	8014910 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d1b3      	bne.n	801487e <tcp_fasttmr+0x1a>
    }
  }
}
 8014916:	bf00      	nop
 8014918:	bf00      	nop
 801491a:	3708      	adds	r7, #8
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	200085d2 	.word	0x200085d2
 8014924:	2000c664 	.word	0x2000c664
 8014928:	2000c660 	.word	0x2000c660

0801492c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801492c:	b590      	push	{r4, r7, lr}
 801492e:	b085      	sub	sp, #20
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d109      	bne.n	801494e <tcp_process_refused_data+0x22>
 801493a:	4b38      	ldr	r3, [pc, #224]	; (8014a1c <tcp_process_refused_data+0xf0>)
 801493c:	f240 6209 	movw	r2, #1545	; 0x609
 8014940:	4937      	ldr	r1, [pc, #220]	; (8014a20 <tcp_process_refused_data+0xf4>)
 8014942:	4838      	ldr	r0, [pc, #224]	; (8014a24 <tcp_process_refused_data+0xf8>)
 8014944:	f006 f92e 	bl	801aba4 <iprintf>
 8014948:	f06f 030f 	mvn.w	r3, #15
 801494c:	e061      	b.n	8014a12 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014952:	7b5b      	ldrb	r3, [r3, #13]
 8014954:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801495a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2200      	movs	r2, #0
 8014960:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014968:	2b00      	cmp	r3, #0
 801496a:	d00b      	beq.n	8014984 <tcp_process_refused_data+0x58>
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6918      	ldr	r0, [r3, #16]
 8014976:	2300      	movs	r3, #0
 8014978:	68ba      	ldr	r2, [r7, #8]
 801497a:	6879      	ldr	r1, [r7, #4]
 801497c:	47a0      	blx	r4
 801497e:	4603      	mov	r3, r0
 8014980:	73fb      	strb	r3, [r7, #15]
 8014982:	e007      	b.n	8014994 <tcp_process_refused_data+0x68>
 8014984:	2300      	movs	r3, #0
 8014986:	68ba      	ldr	r2, [r7, #8]
 8014988:	6879      	ldr	r1, [r7, #4]
 801498a:	2000      	movs	r0, #0
 801498c:	f000 f8a6 	bl	8014adc <tcp_recv_null>
 8014990:	4603      	mov	r3, r0
 8014992:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d12b      	bne.n	80149f4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801499c:	7bbb      	ldrb	r3, [r7, #14]
 801499e:	f003 0320 	and.w	r3, r3, #32
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d034      	beq.n	8014a10 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149aa:	f640 3268 	movw	r2, #2920	; 0xb68
 80149ae:	4293      	cmp	r3, r2
 80149b0:	d005      	beq.n	80149be <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149b6:	3301      	adds	r3, #1
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d00b      	beq.n	80149e0 <tcp_process_refused_data+0xb4>
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6918      	ldr	r0, [r3, #16]
 80149d2:	2300      	movs	r3, #0
 80149d4:	2200      	movs	r2, #0
 80149d6:	6879      	ldr	r1, [r7, #4]
 80149d8:	47a0      	blx	r4
 80149da:	4603      	mov	r3, r0
 80149dc:	73fb      	strb	r3, [r7, #15]
 80149de:	e001      	b.n	80149e4 <tcp_process_refused_data+0xb8>
 80149e0:	2300      	movs	r3, #0
 80149e2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80149e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149e8:	f113 0f0d 	cmn.w	r3, #13
 80149ec:	d110      	bne.n	8014a10 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80149ee:	f06f 030c 	mvn.w	r3, #12
 80149f2:	e00e      	b.n	8014a12 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80149f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149f8:	f113 0f0d 	cmn.w	r3, #13
 80149fc:	d102      	bne.n	8014a04 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80149fe:	f06f 030c 	mvn.w	r3, #12
 8014a02:	e006      	b.n	8014a12 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	68ba      	ldr	r2, [r7, #8]
 8014a08:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014a0a:	f06f 0304 	mvn.w	r3, #4
 8014a0e:	e000      	b.n	8014a12 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8014a10:	2300      	movs	r3, #0
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3714      	adds	r7, #20
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd90      	pop	{r4, r7, pc}
 8014a1a:	bf00      	nop
 8014a1c:	0801ec84 	.word	0x0801ec84
 8014a20:	0801f218 	.word	0x0801f218
 8014a24:	0801ed4c 	.word	0x0801ed4c

08014a28 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014a30:	e007      	b.n	8014a42 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f000 f80a 	bl	8014a52 <tcp_seg_free>
    seg = next;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d1f4      	bne.n	8014a32 <tcp_segs_free+0xa>
  }
}
 8014a48:	bf00      	nop
 8014a4a:	bf00      	nop
 8014a4c:	3710      	adds	r7, #16
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b082      	sub	sp, #8
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00c      	beq.n	8014a7a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d004      	beq.n	8014a72 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7fe fb59 	bl	8013124 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014a72:	6879      	ldr	r1, [r7, #4]
 8014a74:	2003      	movs	r0, #3
 8014a76:	f7fd fc73 	bl	8012360 <memp_free>
  }
}
 8014a7a:	bf00      	nop
 8014a7c:	3708      	adds	r7, #8
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}
	...

08014a84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d106      	bne.n	8014aa0 <tcp_seg_copy+0x1c>
 8014a92:	4b0f      	ldr	r3, [pc, #60]	; (8014ad0 <tcp_seg_copy+0x4c>)
 8014a94:	f240 6282 	movw	r2, #1666	; 0x682
 8014a98:	490e      	ldr	r1, [pc, #56]	; (8014ad4 <tcp_seg_copy+0x50>)
 8014a9a:	480f      	ldr	r0, [pc, #60]	; (8014ad8 <tcp_seg_copy+0x54>)
 8014a9c:	f006 f882 	bl	801aba4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014aa0:	2003      	movs	r0, #3
 8014aa2:	f7fd fbe7 	bl	8012274 <memp_malloc>
 8014aa6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d101      	bne.n	8014ab2 <tcp_seg_copy+0x2e>
    return NULL;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e00a      	b.n	8014ac8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014ab2:	2210      	movs	r2, #16
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	68f8      	ldr	r0, [r7, #12]
 8014ab8:	f006 f844 	bl	801ab44 <memcpy>
  pbuf_ref(cseg->p);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fe fbd5 	bl	8013270 <pbuf_ref>
  return cseg;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3710      	adds	r7, #16
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	0801ec84 	.word	0x0801ec84
 8014ad4:	0801f25c 	.word	0x0801f25c
 8014ad8:	0801ed4c 	.word	0x0801ed4c

08014adc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
 8014ae8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d109      	bne.n	8014b04 <tcp_recv_null+0x28>
 8014af0:	4b12      	ldr	r3, [pc, #72]	; (8014b3c <tcp_recv_null+0x60>)
 8014af2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014af6:	4912      	ldr	r1, [pc, #72]	; (8014b40 <tcp_recv_null+0x64>)
 8014af8:	4812      	ldr	r0, [pc, #72]	; (8014b44 <tcp_recv_null+0x68>)
 8014afa:	f006 f853 	bl	801aba4 <iprintf>
 8014afe:	f06f 030f 	mvn.w	r3, #15
 8014b02:	e016      	b.n	8014b32 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d009      	beq.n	8014b1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	891b      	ldrh	r3, [r3, #8]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	68b8      	ldr	r0, [r7, #8]
 8014b12:	f7ff facf 	bl	80140b4 <tcp_recved>
    pbuf_free(p);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f7fe fb04 	bl	8013124 <pbuf_free>
 8014b1c:	e008      	b.n	8014b30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d104      	bne.n	8014b30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014b26:	68b8      	ldr	r0, [r7, #8]
 8014b28:	f7fe ffb6 	bl	8013a98 <tcp_close>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	e000      	b.n	8014b32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014b30:	2300      	movs	r3, #0
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3710      	adds	r7, #16
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	0801ec84 	.word	0x0801ec84
 8014b40:	0801f278 	.word	0x0801f278
 8014b44:	0801ed4c 	.word	0x0801ed4c

08014b48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	4603      	mov	r3, r0
 8014b50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	db01      	blt.n	8014b5e <tcp_kill_prio+0x16>
 8014b5a:	79fb      	ldrb	r3, [r7, #7]
 8014b5c:	e000      	b.n	8014b60 <tcp_kill_prio+0x18>
 8014b5e:	237f      	movs	r3, #127	; 0x7f
 8014b60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014b62:	7afb      	ldrb	r3, [r7, #11]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d034      	beq.n	8014bd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014b68:	7afb      	ldrb	r3, [r7, #11]
 8014b6a:	3b01      	subs	r3, #1
 8014b6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014b72:	2300      	movs	r3, #0
 8014b74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b76:	4b19      	ldr	r3, [pc, #100]	; (8014bdc <tcp_kill_prio+0x94>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	617b      	str	r3, [r7, #20]
 8014b7c:	e01f      	b.n	8014bbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	7d5b      	ldrb	r3, [r3, #21]
 8014b82:	7afa      	ldrb	r2, [r7, #11]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d80c      	bhi.n	8014ba2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014b8c:	7afa      	ldrb	r2, [r7, #11]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d112      	bne.n	8014bb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b92:	4b13      	ldr	r3, [pc, #76]	; (8014be0 <tcp_kill_prio+0x98>)
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	6a1b      	ldr	r3, [r3, #32]
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d80a      	bhi.n	8014bb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014ba2:	4b0f      	ldr	r3, [pc, #60]	; (8014be0 <tcp_kill_prio+0x98>)
 8014ba4:	681a      	ldr	r2, [r3, #0]
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	6a1b      	ldr	r3, [r3, #32]
 8014baa:	1ad3      	subs	r3, r2, r3
 8014bac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	7d5b      	ldrb	r3, [r3, #21]
 8014bb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	617b      	str	r3, [r7, #20]
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d1dc      	bne.n	8014b7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d004      	beq.n	8014bd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014bca:	6938      	ldr	r0, [r7, #16]
 8014bcc:	f7ff f8aa 	bl	8013d24 <tcp_abort>
 8014bd0:	e000      	b.n	8014bd4 <tcp_kill_prio+0x8c>
    return;
 8014bd2:	bf00      	nop
  }
}
 8014bd4:	3718      	adds	r7, #24
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	2000c664 	.word	0x2000c664
 8014be0:	2000c668 	.word	0x2000c668

08014be4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	4603      	mov	r3, r0
 8014bec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014bee:	79fb      	ldrb	r3, [r7, #7]
 8014bf0:	2b08      	cmp	r3, #8
 8014bf2:	d009      	beq.n	8014c08 <tcp_kill_state+0x24>
 8014bf4:	79fb      	ldrb	r3, [r7, #7]
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	d006      	beq.n	8014c08 <tcp_kill_state+0x24>
 8014bfa:	4b1a      	ldr	r3, [pc, #104]	; (8014c64 <tcp_kill_state+0x80>)
 8014bfc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014c00:	4919      	ldr	r1, [pc, #100]	; (8014c68 <tcp_kill_state+0x84>)
 8014c02:	481a      	ldr	r0, [pc, #104]	; (8014c6c <tcp_kill_state+0x88>)
 8014c04:	f005 ffce 	bl	801aba4 <iprintf>

  inactivity = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c10:	4b17      	ldr	r3, [pc, #92]	; (8014c70 <tcp_kill_state+0x8c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	617b      	str	r3, [r7, #20]
 8014c16:	e017      	b.n	8014c48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	7d1b      	ldrb	r3, [r3, #20]
 8014c1c:	79fa      	ldrb	r2, [r7, #7]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d10f      	bne.n	8014c42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c22:	4b14      	ldr	r3, [pc, #80]	; (8014c74 <tcp_kill_state+0x90>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	6a1b      	ldr	r3, [r3, #32]
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	68fa      	ldr	r2, [r7, #12]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d807      	bhi.n	8014c42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014c32:	4b10      	ldr	r3, [pc, #64]	; (8014c74 <tcp_kill_state+0x90>)
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	6a1b      	ldr	r3, [r3, #32]
 8014c3a:	1ad3      	subs	r3, r2, r3
 8014c3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	617b      	str	r3, [r7, #20]
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1e4      	bne.n	8014c18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d003      	beq.n	8014c5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014c54:	2100      	movs	r1, #0
 8014c56:	6938      	ldr	r0, [r7, #16]
 8014c58:	f7fe ffa6 	bl	8013ba8 <tcp_abandon>
  }
}
 8014c5c:	bf00      	nop
 8014c5e:	3718      	adds	r7, #24
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	0801ec84 	.word	0x0801ec84
 8014c68:	0801f294 	.word	0x0801f294
 8014c6c:	0801ed4c 	.word	0x0801ed4c
 8014c70:	2000c664 	.word	0x2000c664
 8014c74:	2000c668 	.word	0x2000c668

08014c78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014c82:	2300      	movs	r3, #0
 8014c84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c86:	4b12      	ldr	r3, [pc, #72]	; (8014cd0 <tcp_kill_timewait+0x58>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	60fb      	str	r3, [r7, #12]
 8014c8c:	e012      	b.n	8014cb4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c8e:	4b11      	ldr	r3, [pc, #68]	; (8014cd4 <tcp_kill_timewait+0x5c>)
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6a1b      	ldr	r3, [r3, #32]
 8014c96:	1ad3      	subs	r3, r2, r3
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d807      	bhi.n	8014cae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014c9e:	4b0d      	ldr	r3, [pc, #52]	; (8014cd4 <tcp_kill_timewait+0x5c>)
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	6a1b      	ldr	r3, [r3, #32]
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	60fb      	str	r3, [r7, #12]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d1e9      	bne.n	8014c8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014cc0:	68b8      	ldr	r0, [r7, #8]
 8014cc2:	f7ff f82f 	bl	8013d24 <tcp_abort>
  }
}
 8014cc6:	bf00      	nop
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	2000c674 	.word	0x2000c674
 8014cd4:	2000c668 	.word	0x2000c668

08014cd8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014cde:	4b10      	ldr	r3, [pc, #64]	; (8014d20 <tcp_handle_closepend+0x48>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014ce4:	e014      	b.n	8014d10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	8b5b      	ldrh	r3, [r3, #26]
 8014cf0:	f003 0308 	and.w	r3, r3, #8
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d009      	beq.n	8014d0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8b5b      	ldrh	r3, [r3, #26]
 8014cfc:	f023 0308 	bic.w	r3, r3, #8
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7fe fe5c 	bl	80139c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d1e7      	bne.n	8014ce6 <tcp_handle_closepend+0xe>
  }
}
 8014d16:	bf00      	nop
 8014d18:	bf00      	nop
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	2000c664 	.word	0x2000c664

08014d24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d2e:	2001      	movs	r0, #1
 8014d30:	f7fd faa0 	bl	8012274 <memp_malloc>
 8014d34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d126      	bne.n	8014d8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014d3c:	f7ff ffcc 	bl	8014cd8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014d40:	f7ff ff9a 	bl	8014c78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d44:	2001      	movs	r0, #1
 8014d46:	f7fd fa95 	bl	8012274 <memp_malloc>
 8014d4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d11b      	bne.n	8014d8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014d52:	2009      	movs	r0, #9
 8014d54:	f7ff ff46 	bl	8014be4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d58:	2001      	movs	r0, #1
 8014d5a:	f7fd fa8b 	bl	8012274 <memp_malloc>
 8014d5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d111      	bne.n	8014d8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014d66:	2008      	movs	r0, #8
 8014d68:	f7ff ff3c 	bl	8014be4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d6c:	2001      	movs	r0, #1
 8014d6e:	f7fd fa81 	bl	8012274 <memp_malloc>
 8014d72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d107      	bne.n	8014d8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014d7a:	79fb      	ldrb	r3, [r7, #7]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7ff fee3 	bl	8014b48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d82:	2001      	movs	r0, #1
 8014d84:	f7fd fa76 	bl	8012274 <memp_malloc>
 8014d88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d03f      	beq.n	8014e10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014d90:	229c      	movs	r2, #156	; 0x9c
 8014d92:	2100      	movs	r1, #0
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f005 fefd 	bl	801ab94 <memset>
    pcb->prio = prio;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	79fa      	ldrb	r2, [r7, #7]
 8014d9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014da6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f640 3268 	movw	r2, #2920	; 0xb68
 8014db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	22ff      	movs	r2, #255	; 0xff
 8014dbe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014dc6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2206      	movs	r2, #6
 8014dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2206      	movs	r2, #6
 8014dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ddc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2201      	movs	r2, #1
 8014de2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014de6:	4b0d      	ldr	r3, [pc, #52]	; (8014e1c <tcp_alloc+0xf8>)
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014dee:	4b0c      	ldr	r3, [pc, #48]	; (8014e20 <tcp_alloc+0xfc>)
 8014df0:	781a      	ldrb	r2, [r3, #0]
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014dfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	4a08      	ldr	r2, [pc, #32]	; (8014e24 <tcp_alloc+0x100>)
 8014e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	4a07      	ldr	r2, [pc, #28]	; (8014e28 <tcp_alloc+0x104>)
 8014e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014e10:	68fb      	ldr	r3, [r7, #12]
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	2000c668 	.word	0x2000c668
 8014e20:	200085d2 	.word	0x200085d2
 8014e24:	08014add 	.word	0x08014add
 8014e28:	006ddd00 	.word	0x006ddd00

08014e2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	4603      	mov	r3, r0
 8014e34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014e36:	2040      	movs	r0, #64	; 0x40
 8014e38:	f7ff ff74 	bl	8014d24 <tcp_alloc>
 8014e3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3710      	adds	r7, #16
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d002      	beq.n	8014e5e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	683a      	ldr	r2, [r7, #0]
 8014e5c:	611a      	str	r2, [r3, #16]
  }
}
 8014e5e:	bf00      	nop
 8014e60:	370c      	adds	r7, #12
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr
	...

08014e6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d00e      	beq.n	8014e9a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	7d1b      	ldrb	r3, [r3, #20]
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d106      	bne.n	8014e92 <tcp_recv+0x26>
 8014e84:	4b07      	ldr	r3, [pc, #28]	; (8014ea4 <tcp_recv+0x38>)
 8014e86:	f240 72df 	movw	r2, #2015	; 0x7df
 8014e8a:	4907      	ldr	r1, [pc, #28]	; (8014ea8 <tcp_recv+0x3c>)
 8014e8c:	4807      	ldr	r0, [pc, #28]	; (8014eac <tcp_recv+0x40>)
 8014e8e:	f005 fe89 	bl	801aba4 <iprintf>
    pcb->recv = recv;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	683a      	ldr	r2, [r7, #0]
 8014e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014e9a:	bf00      	nop
 8014e9c:	3708      	adds	r7, #8
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	0801ec84 	.word	0x0801ec84
 8014ea8:	0801f2a4 	.word	0x0801f2a4
 8014eac:	0801ed4c 	.word	0x0801ed4c

08014eb0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00e      	beq.n	8014ede <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	7d1b      	ldrb	r3, [r3, #20]
 8014ec4:	2b01      	cmp	r3, #1
 8014ec6:	d106      	bne.n	8014ed6 <tcp_sent+0x26>
 8014ec8:	4b07      	ldr	r3, [pc, #28]	; (8014ee8 <tcp_sent+0x38>)
 8014eca:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014ece:	4907      	ldr	r1, [pc, #28]	; (8014eec <tcp_sent+0x3c>)
 8014ed0:	4807      	ldr	r0, [pc, #28]	; (8014ef0 <tcp_sent+0x40>)
 8014ed2:	f005 fe67 	bl	801aba4 <iprintf>
    pcb->sent = sent;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	683a      	ldr	r2, [r7, #0]
 8014eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014ede:	bf00      	nop
 8014ee0:	3708      	adds	r7, #8
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	0801ec84 	.word	0x0801ec84
 8014eec:	0801f2cc 	.word	0x0801f2cc
 8014ef0:	0801ed4c 	.word	0x0801ed4c

08014ef4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00e      	beq.n	8014f22 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	7d1b      	ldrb	r3, [r3, #20]
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d106      	bne.n	8014f1a <tcp_err+0x26>
 8014f0c:	4b07      	ldr	r3, [pc, #28]	; (8014f2c <tcp_err+0x38>)
 8014f0e:	f640 020d 	movw	r2, #2061	; 0x80d
 8014f12:	4907      	ldr	r1, [pc, #28]	; (8014f30 <tcp_err+0x3c>)
 8014f14:	4807      	ldr	r0, [pc, #28]	; (8014f34 <tcp_err+0x40>)
 8014f16:	f005 fe45 	bl	801aba4 <iprintf>
    pcb->errf = err;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	683a      	ldr	r2, [r7, #0]
 8014f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	0801ec84 	.word	0x0801ec84
 8014f30:	0801f2f4 	.word	0x0801f2f4
 8014f34:	0801ed4c 	.word	0x0801ed4c

08014f38 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d008      	beq.n	8014f5a <tcp_accept+0x22>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	7d1b      	ldrb	r3, [r3, #20]
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d104      	bne.n	8014f5a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	683a      	ldr	r2, [r7, #0]
 8014f58:	619a      	str	r2, [r3, #24]
  }
}
 8014f5a:	bf00      	nop
 8014f5c:	3714      	adds	r7, #20
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr
	...

08014f68 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	4613      	mov	r3, r2
 8014f74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d107      	bne.n	8014f8c <tcp_poll+0x24>
 8014f7c:	4b0e      	ldr	r3, [pc, #56]	; (8014fb8 <tcp_poll+0x50>)
 8014f7e:	f640 023d 	movw	r2, #2109	; 0x83d
 8014f82:	490e      	ldr	r1, [pc, #56]	; (8014fbc <tcp_poll+0x54>)
 8014f84:	480e      	ldr	r0, [pc, #56]	; (8014fc0 <tcp_poll+0x58>)
 8014f86:	f005 fe0d 	bl	801aba4 <iprintf>
 8014f8a:	e011      	b.n	8014fb0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	7d1b      	ldrb	r3, [r3, #20]
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d106      	bne.n	8014fa2 <tcp_poll+0x3a>
 8014f94:	4b08      	ldr	r3, [pc, #32]	; (8014fb8 <tcp_poll+0x50>)
 8014f96:	f640 023e 	movw	r2, #2110	; 0x83e
 8014f9a:	490a      	ldr	r1, [pc, #40]	; (8014fc4 <tcp_poll+0x5c>)
 8014f9c:	4808      	ldr	r0, [pc, #32]	; (8014fc0 <tcp_poll+0x58>)
 8014f9e:	f005 fe01 	bl	801aba4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	68ba      	ldr	r2, [r7, #8]
 8014fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	79fa      	ldrb	r2, [r7, #7]
 8014fae:	775a      	strb	r2, [r3, #29]
}
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	0801ec84 	.word	0x0801ec84
 8014fbc:	0801f31c 	.word	0x0801f31c
 8014fc0:	0801ed4c 	.word	0x0801ed4c
 8014fc4:	0801f334 	.word	0x0801f334

08014fc8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d107      	bne.n	8014fe6 <tcp_pcb_purge+0x1e>
 8014fd6:	4b21      	ldr	r3, [pc, #132]	; (801505c <tcp_pcb_purge+0x94>)
 8014fd8:	f640 0251 	movw	r2, #2129	; 0x851
 8014fdc:	4920      	ldr	r1, [pc, #128]	; (8015060 <tcp_pcb_purge+0x98>)
 8014fde:	4821      	ldr	r0, [pc, #132]	; (8015064 <tcp_pcb_purge+0x9c>)
 8014fe0:	f005 fde0 	bl	801aba4 <iprintf>
 8014fe4:	e037      	b.n	8015056 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	7d1b      	ldrb	r3, [r3, #20]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d033      	beq.n	8015056 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014ff2:	2b0a      	cmp	r3, #10
 8014ff4:	d02f      	beq.n	8015056 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d02b      	beq.n	8015056 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015002:	2b00      	cmp	r3, #0
 8015004:	d007      	beq.n	8015016 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801500a:	4618      	mov	r0, r3
 801500c:	f7fe f88a 	bl	8013124 <pbuf_free>
      pcb->refused_data = NULL;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801501a:	2b00      	cmp	r3, #0
 801501c:	d002      	beq.n	8015024 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 f986 	bl	8015330 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801502a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015030:	4618      	mov	r0, r3
 8015032:	f7ff fcf9 	bl	8014a28 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801503a:	4618      	mov	r0, r3
 801503c:	f7ff fcf4 	bl	8014a28 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	66da      	str	r2, [r3, #108]	; 0x6c
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2200      	movs	r2, #0
 8015052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015056:	3708      	adds	r7, #8
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	0801ec84 	.word	0x0801ec84
 8015060:	0801f354 	.word	0x0801f354
 8015064:	0801ed4c 	.word	0x0801ed4c

08015068 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d106      	bne.n	8015086 <tcp_pcb_remove+0x1e>
 8015078:	4b3e      	ldr	r3, [pc, #248]	; (8015174 <tcp_pcb_remove+0x10c>)
 801507a:	f640 0283 	movw	r2, #2179	; 0x883
 801507e:	493e      	ldr	r1, [pc, #248]	; (8015178 <tcp_pcb_remove+0x110>)
 8015080:	483e      	ldr	r0, [pc, #248]	; (801517c <tcp_pcb_remove+0x114>)
 8015082:	f005 fd8f 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d106      	bne.n	801509a <tcp_pcb_remove+0x32>
 801508c:	4b39      	ldr	r3, [pc, #228]	; (8015174 <tcp_pcb_remove+0x10c>)
 801508e:	f640 0284 	movw	r2, #2180	; 0x884
 8015092:	493b      	ldr	r1, [pc, #236]	; (8015180 <tcp_pcb_remove+0x118>)
 8015094:	4839      	ldr	r0, [pc, #228]	; (801517c <tcp_pcb_remove+0x114>)
 8015096:	f005 fd85 	bl	801aba4 <iprintf>

  TCP_RMV(pcblist, pcb);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d105      	bne.n	80150b0 <tcp_pcb_remove+0x48>
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	68da      	ldr	r2, [r3, #12]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	601a      	str	r2, [r3, #0]
 80150ae:	e013      	b.n	80150d8 <tcp_pcb_remove+0x70>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	60fb      	str	r3, [r7, #12]
 80150b6:	e00c      	b.n	80150d2 <tcp_pcb_remove+0x6a>
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d104      	bne.n	80150cc <tcp_pcb_remove+0x64>
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	68da      	ldr	r2, [r3, #12]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	60da      	str	r2, [r3, #12]
 80150ca:	e005      	b.n	80150d8 <tcp_pcb_remove+0x70>
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	60fb      	str	r3, [r7, #12]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d1ef      	bne.n	80150b8 <tcp_pcb_remove+0x50>
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	2200      	movs	r2, #0
 80150dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80150de:	6838      	ldr	r0, [r7, #0]
 80150e0:	f7ff ff72 	bl	8014fc8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	7d1b      	ldrb	r3, [r3, #20]
 80150e8:	2b0a      	cmp	r3, #10
 80150ea:	d013      	beq.n	8015114 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d00f      	beq.n	8015114 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	8b5b      	ldrh	r3, [r3, #26]
 80150f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d009      	beq.n	8015114 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	8b5b      	ldrh	r3, [r3, #26]
 8015104:	f043 0302 	orr.w	r3, r3, #2
 8015108:	b29a      	uxth	r2, r3
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801510e:	6838      	ldr	r0, [r7, #0]
 8015110:	f003 fbc4 	bl	801889c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	7d1b      	ldrb	r3, [r3, #20]
 8015118:	2b01      	cmp	r3, #1
 801511a:	d020      	beq.n	801515e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015120:	2b00      	cmp	r3, #0
 8015122:	d006      	beq.n	8015132 <tcp_pcb_remove+0xca>
 8015124:	4b13      	ldr	r3, [pc, #76]	; (8015174 <tcp_pcb_remove+0x10c>)
 8015126:	f640 0293 	movw	r2, #2195	; 0x893
 801512a:	4916      	ldr	r1, [pc, #88]	; (8015184 <tcp_pcb_remove+0x11c>)
 801512c:	4813      	ldr	r0, [pc, #76]	; (801517c <tcp_pcb_remove+0x114>)
 801512e:	f005 fd39 	bl	801aba4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015136:	2b00      	cmp	r3, #0
 8015138:	d006      	beq.n	8015148 <tcp_pcb_remove+0xe0>
 801513a:	4b0e      	ldr	r3, [pc, #56]	; (8015174 <tcp_pcb_remove+0x10c>)
 801513c:	f640 0294 	movw	r2, #2196	; 0x894
 8015140:	4911      	ldr	r1, [pc, #68]	; (8015188 <tcp_pcb_remove+0x120>)
 8015142:	480e      	ldr	r0, [pc, #56]	; (801517c <tcp_pcb_remove+0x114>)
 8015144:	f005 fd2e 	bl	801aba4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801514c:	2b00      	cmp	r3, #0
 801514e:	d006      	beq.n	801515e <tcp_pcb_remove+0xf6>
 8015150:	4b08      	ldr	r3, [pc, #32]	; (8015174 <tcp_pcb_remove+0x10c>)
 8015152:	f640 0296 	movw	r2, #2198	; 0x896
 8015156:	490d      	ldr	r1, [pc, #52]	; (801518c <tcp_pcb_remove+0x124>)
 8015158:	4808      	ldr	r0, [pc, #32]	; (801517c <tcp_pcb_remove+0x114>)
 801515a:	f005 fd23 	bl	801aba4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	2200      	movs	r2, #0
 8015162:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	2200      	movs	r2, #0
 8015168:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801516a:	bf00      	nop
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	0801ec84 	.word	0x0801ec84
 8015178:	0801f370 	.word	0x0801f370
 801517c:	0801ed4c 	.word	0x0801ed4c
 8015180:	0801f38c 	.word	0x0801f38c
 8015184:	0801f3ac 	.word	0x0801f3ac
 8015188:	0801f3c4 	.word	0x0801f3c4
 801518c:	0801f3e0 	.word	0x0801f3e0

08015190 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d106      	bne.n	80151ac <tcp_next_iss+0x1c>
 801519e:	4b0a      	ldr	r3, [pc, #40]	; (80151c8 <tcp_next_iss+0x38>)
 80151a0:	f640 02af 	movw	r2, #2223	; 0x8af
 80151a4:	4909      	ldr	r1, [pc, #36]	; (80151cc <tcp_next_iss+0x3c>)
 80151a6:	480a      	ldr	r0, [pc, #40]	; (80151d0 <tcp_next_iss+0x40>)
 80151a8:	f005 fcfc 	bl	801aba4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80151ac:	4b09      	ldr	r3, [pc, #36]	; (80151d4 <tcp_next_iss+0x44>)
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	4b09      	ldr	r3, [pc, #36]	; (80151d8 <tcp_next_iss+0x48>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4413      	add	r3, r2
 80151b6:	4a07      	ldr	r2, [pc, #28]	; (80151d4 <tcp_next_iss+0x44>)
 80151b8:	6013      	str	r3, [r2, #0]
  return iss;
 80151ba:	4b06      	ldr	r3, [pc, #24]	; (80151d4 <tcp_next_iss+0x44>)
 80151bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	0801ec84 	.word	0x0801ec84
 80151cc:	0801f3f8 	.word	0x0801f3f8
 80151d0:	0801ed4c 	.word	0x0801ed4c
 80151d4:	2000003c 	.word	0x2000003c
 80151d8:	2000c668 	.word	0x2000c668

080151dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b086      	sub	sp, #24
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	4603      	mov	r3, r0
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d106      	bne.n	80151fe <tcp_eff_send_mss_netif+0x22>
 80151f0:	4b14      	ldr	r3, [pc, #80]	; (8015244 <tcp_eff_send_mss_netif+0x68>)
 80151f2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80151f6:	4914      	ldr	r1, [pc, #80]	; (8015248 <tcp_eff_send_mss_netif+0x6c>)
 80151f8:	4814      	ldr	r0, [pc, #80]	; (801524c <tcp_eff_send_mss_netif+0x70>)
 80151fa:	f005 fcd3 	bl	801aba4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d101      	bne.n	8015208 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015204:	89fb      	ldrh	r3, [r7, #14]
 8015206:	e019      	b.n	801523c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801520c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801520e:	8afb      	ldrh	r3, [r7, #22]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d012      	beq.n	801523a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015214:	2328      	movs	r3, #40	; 0x28
 8015216:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015218:	8afa      	ldrh	r2, [r7, #22]
 801521a:	8abb      	ldrh	r3, [r7, #20]
 801521c:	429a      	cmp	r2, r3
 801521e:	d904      	bls.n	801522a <tcp_eff_send_mss_netif+0x4e>
 8015220:	8afa      	ldrh	r2, [r7, #22]
 8015222:	8abb      	ldrh	r3, [r7, #20]
 8015224:	1ad3      	subs	r3, r2, r3
 8015226:	b29b      	uxth	r3, r3
 8015228:	e000      	b.n	801522c <tcp_eff_send_mss_netif+0x50>
 801522a:	2300      	movs	r3, #0
 801522c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801522e:	8a7a      	ldrh	r2, [r7, #18]
 8015230:	89fb      	ldrh	r3, [r7, #14]
 8015232:	4293      	cmp	r3, r2
 8015234:	bf28      	it	cs
 8015236:	4613      	movcs	r3, r2
 8015238:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801523a:	89fb      	ldrh	r3, [r7, #14]
}
 801523c:	4618      	mov	r0, r3
 801523e:	3718      	adds	r7, #24
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	0801ec84 	.word	0x0801ec84
 8015248:	0801f414 	.word	0x0801f414
 801524c:	0801ed4c 	.word	0x0801ed4c

08015250 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d119      	bne.n	8015298 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015264:	4b10      	ldr	r3, [pc, #64]	; (80152a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015266:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801526a:	4910      	ldr	r1, [pc, #64]	; (80152ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801526c:	4810      	ldr	r0, [pc, #64]	; (80152b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801526e:	f005 fc99 	bl	801aba4 <iprintf>

  while (pcb != NULL) {
 8015272:	e011      	b.n	8015298 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	681a      	ldr	r2, [r3, #0]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	429a      	cmp	r2, r3
 801527e:	d108      	bne.n	8015292 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f7fe fd4c 	bl	8013d24 <tcp_abort>
      pcb = next;
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	60fb      	str	r3, [r7, #12]
 8015290:	e002      	b.n	8015298 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1ea      	bne.n	8015274 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801529e:	bf00      	nop
 80152a0:	bf00      	nop
 80152a2:	3710      	adds	r7, #16
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	0801ec84 	.word	0x0801ec84
 80152ac:	0801f43c 	.word	0x0801f43c
 80152b0:	0801ed4c 	.word	0x0801ed4c

080152b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b084      	sub	sp, #16
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d02a      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d026      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80152cc:	4b15      	ldr	r3, [pc, #84]	; (8015324 <tcp_netif_ip_addr_changed+0x70>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	4619      	mov	r1, r3
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7ff ffbc 	bl	8015250 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80152d8:	4b13      	ldr	r3, [pc, #76]	; (8015328 <tcp_netif_ip_addr_changed+0x74>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	4619      	mov	r1, r3
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f7ff ffb6 	bl	8015250 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d017      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d013      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152f2:	4b0e      	ldr	r3, [pc, #56]	; (801532c <tcp_netif_ip_addr_changed+0x78>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	60fb      	str	r3, [r7, #12]
 80152f8:	e00c      	b.n	8015314 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681a      	ldr	r2, [r3, #0]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d103      	bne.n	801530e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	60fb      	str	r3, [r7, #12]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d1ef      	bne.n	80152fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801531a:	bf00      	nop
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	2000c664 	.word	0x2000c664
 8015328:	2000c670 	.word	0x2000c670
 801532c:	2000c66c 	.word	0x2000c66c

08015330 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801533c:	2b00      	cmp	r3, #0
 801533e:	d007      	beq.n	8015350 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015344:	4618      	mov	r0, r3
 8015346:	f7ff fb6f 	bl	8014a28 <tcp_segs_free>
    pcb->ooseq = NULL;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	2200      	movs	r2, #0
 801534e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015350:	bf00      	nop
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015358:	b590      	push	{r4, r7, lr}
 801535a:	b08d      	sub	sp, #52	; 0x34
 801535c:	af04      	add	r7, sp, #16
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d105      	bne.n	8015374 <tcp_input+0x1c>
 8015368:	4b9b      	ldr	r3, [pc, #620]	; (80155d8 <tcp_input+0x280>)
 801536a:	2283      	movs	r2, #131	; 0x83
 801536c:	499b      	ldr	r1, [pc, #620]	; (80155dc <tcp_input+0x284>)
 801536e:	489c      	ldr	r0, [pc, #624]	; (80155e0 <tcp_input+0x288>)
 8015370:	f005 fc18 	bl	801aba4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	4a9a      	ldr	r2, [pc, #616]	; (80155e4 <tcp_input+0x28c>)
 801537a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	895b      	ldrh	r3, [r3, #10]
 8015380:	2b13      	cmp	r3, #19
 8015382:	f240 83c5 	bls.w	8015b10 <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015386:	4b98      	ldr	r3, [pc, #608]	; (80155e8 <tcp_input+0x290>)
 8015388:	695b      	ldr	r3, [r3, #20]
 801538a:	4a97      	ldr	r2, [pc, #604]	; (80155e8 <tcp_input+0x290>)
 801538c:	6812      	ldr	r2, [r2, #0]
 801538e:	4611      	mov	r1, r2
 8015390:	4618      	mov	r0, r3
 8015392:	f7fb fbb3 	bl	8010afc <ip4_addr_isbroadcast_u32>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	f040 83bb 	bne.w	8015b14 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801539e:	4b92      	ldr	r3, [pc, #584]	; (80155e8 <tcp_input+0x290>)
 80153a0:	695b      	ldr	r3, [r3, #20]
 80153a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80153a6:	2be0      	cmp	r3, #224	; 0xe0
 80153a8:	f000 83b4 	beq.w	8015b14 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80153ac:	4b8d      	ldr	r3, [pc, #564]	; (80155e4 <tcp_input+0x28c>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	899b      	ldrh	r3, [r3, #12]
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7fc fa1b 	bl	80117f0 <lwip_htons>
 80153ba:	4603      	mov	r3, r0
 80153bc:	0b1b      	lsrs	r3, r3, #12
 80153be:	b29b      	uxth	r3, r3
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80153c6:	7cbb      	ldrb	r3, [r7, #18]
 80153c8:	2b13      	cmp	r3, #19
 80153ca:	f240 83a5 	bls.w	8015b18 <tcp_input+0x7c0>
 80153ce:	7cbb      	ldrb	r3, [r7, #18]
 80153d0:	b29a      	uxth	r2, r3
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	891b      	ldrh	r3, [r3, #8]
 80153d6:	429a      	cmp	r2, r3
 80153d8:	f200 839e 	bhi.w	8015b18 <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80153dc:	7cbb      	ldrb	r3, [r7, #18]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	3b14      	subs	r3, #20
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	4b81      	ldr	r3, [pc, #516]	; (80155ec <tcp_input+0x294>)
 80153e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80153e8:	4b81      	ldr	r3, [pc, #516]	; (80155f0 <tcp_input+0x298>)
 80153ea:	2200      	movs	r2, #0
 80153ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	895a      	ldrh	r2, [r3, #10]
 80153f2:	7cbb      	ldrb	r3, [r7, #18]
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d309      	bcc.n	801540e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80153fa:	4b7c      	ldr	r3, [pc, #496]	; (80155ec <tcp_input+0x294>)
 80153fc:	881a      	ldrh	r2, [r3, #0]
 80153fe:	4b7d      	ldr	r3, [pc, #500]	; (80155f4 <tcp_input+0x29c>)
 8015400:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015402:	7cbb      	ldrb	r3, [r7, #18]
 8015404:	4619      	mov	r1, r3
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f7fd fdd4 	bl	8012fb4 <pbuf_remove_header>
 801540c:	e04e      	b.n	80154ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d105      	bne.n	8015422 <tcp_input+0xca>
 8015416:	4b70      	ldr	r3, [pc, #448]	; (80155d8 <tcp_input+0x280>)
 8015418:	22c2      	movs	r2, #194	; 0xc2
 801541a:	4977      	ldr	r1, [pc, #476]	; (80155f8 <tcp_input+0x2a0>)
 801541c:	4870      	ldr	r0, [pc, #448]	; (80155e0 <tcp_input+0x288>)
 801541e:	f005 fbc1 	bl	801aba4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015422:	2114      	movs	r1, #20
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7fd fdc5 	bl	8012fb4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	895a      	ldrh	r2, [r3, #10]
 801542e:	4b71      	ldr	r3, [pc, #452]	; (80155f4 <tcp_input+0x29c>)
 8015430:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015432:	4b6e      	ldr	r3, [pc, #440]	; (80155ec <tcp_input+0x294>)
 8015434:	881a      	ldrh	r2, [r3, #0]
 8015436:	4b6f      	ldr	r3, [pc, #444]	; (80155f4 <tcp_input+0x29c>)
 8015438:	881b      	ldrh	r3, [r3, #0]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801543e:	4b6d      	ldr	r3, [pc, #436]	; (80155f4 <tcp_input+0x29c>)
 8015440:	881b      	ldrh	r3, [r3, #0]
 8015442:	4619      	mov	r1, r3
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7fd fdb5 	bl	8012fb4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	895b      	ldrh	r3, [r3, #10]
 8015450:	8a3a      	ldrh	r2, [r7, #16]
 8015452:	429a      	cmp	r2, r3
 8015454:	f200 8362 	bhi.w	8015b1c <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	4a64      	ldr	r2, [pc, #400]	; (80155f0 <tcp_input+0x298>)
 8015460:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	8a3a      	ldrh	r2, [r7, #16]
 8015468:	4611      	mov	r1, r2
 801546a:	4618      	mov	r0, r3
 801546c:	f7fd fda2 	bl	8012fb4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	891a      	ldrh	r2, [r3, #8]
 8015474:	8a3b      	ldrh	r3, [r7, #16]
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	b29a      	uxth	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	895b      	ldrh	r3, [r3, #10]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d005      	beq.n	8015492 <tcp_input+0x13a>
 8015486:	4b54      	ldr	r3, [pc, #336]	; (80155d8 <tcp_input+0x280>)
 8015488:	22df      	movs	r2, #223	; 0xdf
 801548a:	495c      	ldr	r1, [pc, #368]	; (80155fc <tcp_input+0x2a4>)
 801548c:	4854      	ldr	r0, [pc, #336]	; (80155e0 <tcp_input+0x288>)
 801548e:	f005 fb89 	bl	801aba4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	891a      	ldrh	r2, [r3, #8]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	891b      	ldrh	r3, [r3, #8]
 801549c:	429a      	cmp	r2, r3
 801549e:	d005      	beq.n	80154ac <tcp_input+0x154>
 80154a0:	4b4d      	ldr	r3, [pc, #308]	; (80155d8 <tcp_input+0x280>)
 80154a2:	22e0      	movs	r2, #224	; 0xe0
 80154a4:	4956      	ldr	r1, [pc, #344]	; (8015600 <tcp_input+0x2a8>)
 80154a6:	484e      	ldr	r0, [pc, #312]	; (80155e0 <tcp_input+0x288>)
 80154a8:	f005 fb7c 	bl	801aba4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80154ac:	4b4d      	ldr	r3, [pc, #308]	; (80155e4 <tcp_input+0x28c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	4a4b      	ldr	r2, [pc, #300]	; (80155e4 <tcp_input+0x28c>)
 80154b6:	6814      	ldr	r4, [r2, #0]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7fc f999 	bl	80117f0 <lwip_htons>
 80154be:	4603      	mov	r3, r0
 80154c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80154c2:	4b48      	ldr	r3, [pc, #288]	; (80155e4 <tcp_input+0x28c>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	885b      	ldrh	r3, [r3, #2]
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	4a46      	ldr	r2, [pc, #280]	; (80155e4 <tcp_input+0x28c>)
 80154cc:	6814      	ldr	r4, [r2, #0]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fc f98e 	bl	80117f0 <lwip_htons>
 80154d4:	4603      	mov	r3, r0
 80154d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80154d8:	4b42      	ldr	r3, [pc, #264]	; (80155e4 <tcp_input+0x28c>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	4a41      	ldr	r2, [pc, #260]	; (80155e4 <tcp_input+0x28c>)
 80154e0:	6814      	ldr	r4, [r2, #0]
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fc f999 	bl	801181a <lwip_htonl>
 80154e8:	4603      	mov	r3, r0
 80154ea:	6063      	str	r3, [r4, #4]
 80154ec:	6863      	ldr	r3, [r4, #4]
 80154ee:	4a45      	ldr	r2, [pc, #276]	; (8015604 <tcp_input+0x2ac>)
 80154f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80154f2:	4b3c      	ldr	r3, [pc, #240]	; (80155e4 <tcp_input+0x28c>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	689b      	ldr	r3, [r3, #8]
 80154f8:	4a3a      	ldr	r2, [pc, #232]	; (80155e4 <tcp_input+0x28c>)
 80154fa:	6814      	ldr	r4, [r2, #0]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7fc f98c 	bl	801181a <lwip_htonl>
 8015502:	4603      	mov	r3, r0
 8015504:	60a3      	str	r3, [r4, #8]
 8015506:	68a3      	ldr	r3, [r4, #8]
 8015508:	4a3f      	ldr	r2, [pc, #252]	; (8015608 <tcp_input+0x2b0>)
 801550a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801550c:	4b35      	ldr	r3, [pc, #212]	; (80155e4 <tcp_input+0x28c>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	89db      	ldrh	r3, [r3, #14]
 8015512:	b29b      	uxth	r3, r3
 8015514:	4a33      	ldr	r2, [pc, #204]	; (80155e4 <tcp_input+0x28c>)
 8015516:	6814      	ldr	r4, [r2, #0]
 8015518:	4618      	mov	r0, r3
 801551a:	f7fc f969 	bl	80117f0 <lwip_htons>
 801551e:	4603      	mov	r3, r0
 8015520:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015522:	4b30      	ldr	r3, [pc, #192]	; (80155e4 <tcp_input+0x28c>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	899b      	ldrh	r3, [r3, #12]
 8015528:	b29b      	uxth	r3, r3
 801552a:	4618      	mov	r0, r3
 801552c:	f7fc f960 	bl	80117f0 <lwip_htons>
 8015530:	4603      	mov	r3, r0
 8015532:	b2db      	uxtb	r3, r3
 8015534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015538:	b2da      	uxtb	r2, r3
 801553a:	4b34      	ldr	r3, [pc, #208]	; (801560c <tcp_input+0x2b4>)
 801553c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	891a      	ldrh	r2, [r3, #8]
 8015542:	4b33      	ldr	r3, [pc, #204]	; (8015610 <tcp_input+0x2b8>)
 8015544:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015546:	4b31      	ldr	r3, [pc, #196]	; (801560c <tcp_input+0x2b4>)
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	f003 0303 	and.w	r3, r3, #3
 801554e:	2b00      	cmp	r3, #0
 8015550:	d00c      	beq.n	801556c <tcp_input+0x214>
    tcplen++;
 8015552:	4b2f      	ldr	r3, [pc, #188]	; (8015610 <tcp_input+0x2b8>)
 8015554:	881b      	ldrh	r3, [r3, #0]
 8015556:	3301      	adds	r3, #1
 8015558:	b29a      	uxth	r2, r3
 801555a:	4b2d      	ldr	r3, [pc, #180]	; (8015610 <tcp_input+0x2b8>)
 801555c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	891a      	ldrh	r2, [r3, #8]
 8015562:	4b2b      	ldr	r3, [pc, #172]	; (8015610 <tcp_input+0x2b8>)
 8015564:	881b      	ldrh	r3, [r3, #0]
 8015566:	429a      	cmp	r2, r3
 8015568:	f200 82da 	bhi.w	8015b20 <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801556c:	2300      	movs	r3, #0
 801556e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015570:	4b28      	ldr	r3, [pc, #160]	; (8015614 <tcp_input+0x2bc>)
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	61fb      	str	r3, [r7, #28]
 8015576:	e09d      	b.n	80156b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	7d1b      	ldrb	r3, [r3, #20]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d105      	bne.n	801558c <tcp_input+0x234>
 8015580:	4b15      	ldr	r3, [pc, #84]	; (80155d8 <tcp_input+0x280>)
 8015582:	22fb      	movs	r2, #251	; 0xfb
 8015584:	4924      	ldr	r1, [pc, #144]	; (8015618 <tcp_input+0x2c0>)
 8015586:	4816      	ldr	r0, [pc, #88]	; (80155e0 <tcp_input+0x288>)
 8015588:	f005 fb0c 	bl	801aba4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	7d1b      	ldrb	r3, [r3, #20]
 8015590:	2b0a      	cmp	r3, #10
 8015592:	d105      	bne.n	80155a0 <tcp_input+0x248>
 8015594:	4b10      	ldr	r3, [pc, #64]	; (80155d8 <tcp_input+0x280>)
 8015596:	22fc      	movs	r2, #252	; 0xfc
 8015598:	4920      	ldr	r1, [pc, #128]	; (801561c <tcp_input+0x2c4>)
 801559a:	4811      	ldr	r0, [pc, #68]	; (80155e0 <tcp_input+0x288>)
 801559c:	f005 fb02 	bl	801aba4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	7d1b      	ldrb	r3, [r3, #20]
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d105      	bne.n	80155b4 <tcp_input+0x25c>
 80155a8:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <tcp_input+0x280>)
 80155aa:	22fd      	movs	r2, #253	; 0xfd
 80155ac:	491c      	ldr	r1, [pc, #112]	; (8015620 <tcp_input+0x2c8>)
 80155ae:	480c      	ldr	r0, [pc, #48]	; (80155e0 <tcp_input+0x288>)
 80155b0:	f005 faf8 	bl	801aba4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	7a1b      	ldrb	r3, [r3, #8]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d033      	beq.n	8015624 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	7a1a      	ldrb	r2, [r3, #8]
 80155c0:	4b09      	ldr	r3, [pc, #36]	; (80155e8 <tcp_input+0x290>)
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80155c8:	3301      	adds	r3, #1
 80155ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d029      	beq.n	8015624 <tcp_input+0x2cc>
      prev = pcb;
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	61bb      	str	r3, [r7, #24]
      continue;
 80155d4:	e06b      	b.n	80156ae <tcp_input+0x356>
 80155d6:	bf00      	nop
 80155d8:	0801f470 	.word	0x0801f470
 80155dc:	0801f524 	.word	0x0801f524
 80155e0:	0801f53c 	.word	0x0801f53c
 80155e4:	200085e4 	.word	0x200085e4
 80155e8:	2000889c 	.word	0x2000889c
 80155ec:	200085e8 	.word	0x200085e8
 80155f0:	200085ec 	.word	0x200085ec
 80155f4:	200085ea 	.word	0x200085ea
 80155f8:	0801f564 	.word	0x0801f564
 80155fc:	0801f574 	.word	0x0801f574
 8015600:	0801f580 	.word	0x0801f580
 8015604:	200085f4 	.word	0x200085f4
 8015608:	200085f8 	.word	0x200085f8
 801560c:	20008600 	.word	0x20008600
 8015610:	200085fe 	.word	0x200085fe
 8015614:	2000c664 	.word	0x2000c664
 8015618:	0801f5a0 	.word	0x0801f5a0
 801561c:	0801f5c8 	.word	0x0801f5c8
 8015620:	0801f5f4 	.word	0x0801f5f4
    }

    if (pcb->remote_port == tcphdr->src &&
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	8b1a      	ldrh	r2, [r3, #24]
 8015628:	4b94      	ldr	r3, [pc, #592]	; (801587c <tcp_input+0x524>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	881b      	ldrh	r3, [r3, #0]
 801562e:	b29b      	uxth	r3, r3
 8015630:	429a      	cmp	r2, r3
 8015632:	d13a      	bne.n	80156aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	8ada      	ldrh	r2, [r3, #22]
 8015638:	4b90      	ldr	r3, [pc, #576]	; (801587c <tcp_input+0x524>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	885b      	ldrh	r3, [r3, #2]
 801563e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015640:	429a      	cmp	r2, r3
 8015642:	d132      	bne.n	80156aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	685a      	ldr	r2, [r3, #4]
 8015648:	4b8d      	ldr	r3, [pc, #564]	; (8015880 <tcp_input+0x528>)
 801564a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801564c:	429a      	cmp	r2, r3
 801564e:	d12c      	bne.n	80156aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	4b8a      	ldr	r3, [pc, #552]	; (8015880 <tcp_input+0x528>)
 8015656:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015658:	429a      	cmp	r2, r3
 801565a:	d126      	bne.n	80156aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	69fa      	ldr	r2, [r7, #28]
 8015662:	429a      	cmp	r2, r3
 8015664:	d106      	bne.n	8015674 <tcp_input+0x31c>
 8015666:	4b87      	ldr	r3, [pc, #540]	; (8015884 <tcp_input+0x52c>)
 8015668:	f240 120d 	movw	r2, #269	; 0x10d
 801566c:	4986      	ldr	r1, [pc, #536]	; (8015888 <tcp_input+0x530>)
 801566e:	4887      	ldr	r0, [pc, #540]	; (801588c <tcp_input+0x534>)
 8015670:	f005 fa98 	bl	801aba4 <iprintf>
      if (prev != NULL) {
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d00a      	beq.n	8015690 <tcp_input+0x338>
        prev->next = pcb->next;
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	68da      	ldr	r2, [r3, #12]
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015682:	4b83      	ldr	r3, [pc, #524]	; (8015890 <tcp_input+0x538>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801568a:	4a81      	ldr	r2, [pc, #516]	; (8015890 <tcp_input+0x538>)
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	69fa      	ldr	r2, [r7, #28]
 8015696:	429a      	cmp	r2, r3
 8015698:	d111      	bne.n	80156be <tcp_input+0x366>
 801569a:	4b7a      	ldr	r3, [pc, #488]	; (8015884 <tcp_input+0x52c>)
 801569c:	f240 1215 	movw	r2, #277	; 0x115
 80156a0:	497c      	ldr	r1, [pc, #496]	; (8015894 <tcp_input+0x53c>)
 80156a2:	487a      	ldr	r0, [pc, #488]	; (801588c <tcp_input+0x534>)
 80156a4:	f005 fa7e 	bl	801aba4 <iprintf>
      break;
 80156a8:	e009      	b.n	80156be <tcp_input+0x366>
    }
    prev = pcb;
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	61fb      	str	r3, [r7, #28]
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f47f af5e 	bne.w	8015578 <tcp_input+0x220>
 80156bc:	e000      	b.n	80156c0 <tcp_input+0x368>
      break;
 80156be:	bf00      	nop
  }

  if (pcb == NULL) {
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f040 8095 	bne.w	80157f2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80156c8:	4b73      	ldr	r3, [pc, #460]	; (8015898 <tcp_input+0x540>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	61fb      	str	r3, [r7, #28]
 80156ce:	e03f      	b.n	8015750 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	7d1b      	ldrb	r3, [r3, #20]
 80156d4:	2b0a      	cmp	r3, #10
 80156d6:	d006      	beq.n	80156e6 <tcp_input+0x38e>
 80156d8:	4b6a      	ldr	r3, [pc, #424]	; (8015884 <tcp_input+0x52c>)
 80156da:	f240 121f 	movw	r2, #287	; 0x11f
 80156de:	496f      	ldr	r1, [pc, #444]	; (801589c <tcp_input+0x544>)
 80156e0:	486a      	ldr	r0, [pc, #424]	; (801588c <tcp_input+0x534>)
 80156e2:	f005 fa5f 	bl	801aba4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	7a1b      	ldrb	r3, [r3, #8]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d009      	beq.n	8015702 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	7a1a      	ldrb	r2, [r3, #8]
 80156f2:	4b63      	ldr	r3, [pc, #396]	; (8015880 <tcp_input+0x528>)
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80156fa:	3301      	adds	r3, #1
 80156fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156fe:	429a      	cmp	r2, r3
 8015700:	d122      	bne.n	8015748 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	8b1a      	ldrh	r2, [r3, #24]
 8015706:	4b5d      	ldr	r3, [pc, #372]	; (801587c <tcp_input+0x524>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	b29b      	uxth	r3, r3
 801570e:	429a      	cmp	r2, r3
 8015710:	d11b      	bne.n	801574a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	8ada      	ldrh	r2, [r3, #22]
 8015716:	4b59      	ldr	r3, [pc, #356]	; (801587c <tcp_input+0x524>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	885b      	ldrh	r3, [r3, #2]
 801571c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801571e:	429a      	cmp	r2, r3
 8015720:	d113      	bne.n	801574a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	685a      	ldr	r2, [r3, #4]
 8015726:	4b56      	ldr	r3, [pc, #344]	; (8015880 <tcp_input+0x528>)
 8015728:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801572a:	429a      	cmp	r2, r3
 801572c:	d10d      	bne.n	801574a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	4b53      	ldr	r3, [pc, #332]	; (8015880 <tcp_input+0x528>)
 8015734:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015736:	429a      	cmp	r2, r3
 8015738:	d107      	bne.n	801574a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801573a:	69f8      	ldr	r0, [r7, #28]
 801573c:	f000 fb56 	bl	8015dec <tcp_timewait_input>
        }
        pbuf_free(p);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7fd fcef 	bl	8013124 <pbuf_free>
        return;
 8015746:	e1f1      	b.n	8015b2c <tcp_input+0x7d4>
        continue;
 8015748:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801574a:	69fb      	ldr	r3, [r7, #28]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	61fb      	str	r3, [r7, #28]
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d1bc      	bne.n	80156d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015756:	2300      	movs	r3, #0
 8015758:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801575a:	4b51      	ldr	r3, [pc, #324]	; (80158a0 <tcp_input+0x548>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	617b      	str	r3, [r7, #20]
 8015760:	e02a      	b.n	80157b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	7a1b      	ldrb	r3, [r3, #8]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d00c      	beq.n	8015784 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	7a1a      	ldrb	r2, [r3, #8]
 801576e:	4b44      	ldr	r3, [pc, #272]	; (8015880 <tcp_input+0x528>)
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015776:	3301      	adds	r3, #1
 8015778:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801577a:	429a      	cmp	r2, r3
 801577c:	d002      	beq.n	8015784 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	61bb      	str	r3, [r7, #24]
        continue;
 8015782:	e016      	b.n	80157b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	8ada      	ldrh	r2, [r3, #22]
 8015788:	4b3c      	ldr	r3, [pc, #240]	; (801587c <tcp_input+0x524>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	885b      	ldrh	r3, [r3, #2]
 801578e:	b29b      	uxth	r3, r3
 8015790:	429a      	cmp	r2, r3
 8015792:	d10c      	bne.n	80157ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	4b39      	ldr	r3, [pc, #228]	; (8015880 <tcp_input+0x528>)
 801579a:	695b      	ldr	r3, [r3, #20]
 801579c:	429a      	cmp	r2, r3
 801579e:	d00f      	beq.n	80157c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d00d      	beq.n	80157c2 <tcp_input+0x46a>
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d009      	beq.n	80157c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80157b2:	697b      	ldr	r3, [r7, #20]
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d1d1      	bne.n	8015762 <tcp_input+0x40a>
 80157be:	e000      	b.n	80157c2 <tcp_input+0x46a>
            break;
 80157c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d014      	beq.n	80157f2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d00a      	beq.n	80157e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	68da      	ldr	r2, [r3, #12]
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80157d6:	4b32      	ldr	r3, [pc, #200]	; (80158a0 <tcp_input+0x548>)
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80157de:	4a30      	ldr	r2, [pc, #192]	; (80158a0 <tcp_input+0x548>)
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80157e4:	6978      	ldr	r0, [r7, #20]
 80157e6:	f000 fa03 	bl	8015bf0 <tcp_listen_input>
      }
      pbuf_free(p);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7fd fc9a 	bl	8013124 <pbuf_free>
      return;
 80157f0:	e19c      	b.n	8015b2c <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 8161 	beq.w	8015abc <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80157fa:	4b2a      	ldr	r3, [pc, #168]	; (80158a4 <tcp_input+0x54c>)
 80157fc:	2200      	movs	r2, #0
 80157fe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	891a      	ldrh	r2, [r3, #8]
 8015804:	4b27      	ldr	r3, [pc, #156]	; (80158a4 <tcp_input+0x54c>)
 8015806:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015808:	4a26      	ldr	r2, [pc, #152]	; (80158a4 <tcp_input+0x54c>)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801580e:	4b1b      	ldr	r3, [pc, #108]	; (801587c <tcp_input+0x524>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4a24      	ldr	r2, [pc, #144]	; (80158a4 <tcp_input+0x54c>)
 8015814:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015816:	4b24      	ldr	r3, [pc, #144]	; (80158a8 <tcp_input+0x550>)
 8015818:	2200      	movs	r2, #0
 801581a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801581c:	4b23      	ldr	r3, [pc, #140]	; (80158ac <tcp_input+0x554>)
 801581e:	2200      	movs	r2, #0
 8015820:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015822:	4b23      	ldr	r3, [pc, #140]	; (80158b0 <tcp_input+0x558>)
 8015824:	2200      	movs	r2, #0
 8015826:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015828:	4b22      	ldr	r3, [pc, #136]	; (80158b4 <tcp_input+0x55c>)
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	f003 0308 	and.w	r3, r3, #8
 8015830:	2b00      	cmp	r3, #0
 8015832:	d006      	beq.n	8015842 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	7b5b      	ldrb	r3, [r3, #13]
 8015838:	f043 0301 	orr.w	r3, r3, #1
 801583c:	b2da      	uxtb	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015846:	2b00      	cmp	r3, #0
 8015848:	d038      	beq.n	80158bc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801584a:	69f8      	ldr	r0, [r7, #28]
 801584c:	f7ff f86e 	bl	801492c <tcp_process_refused_data>
 8015850:	4603      	mov	r3, r0
 8015852:	f113 0f0d 	cmn.w	r3, #13
 8015856:	d007      	beq.n	8015868 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801585c:	2b00      	cmp	r3, #0
 801585e:	d02d      	beq.n	80158bc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015860:	4b15      	ldr	r3, [pc, #84]	; (80158b8 <tcp_input+0x560>)
 8015862:	881b      	ldrh	r3, [r3, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d029      	beq.n	80158bc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801586c:	2b00      	cmp	r3, #0
 801586e:	f040 8105 	bne.w	8015a7c <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015872:	69f8      	ldr	r0, [r7, #28]
 8015874:	f003 fe18 	bl	80194a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015878:	e100      	b.n	8015a7c <tcp_input+0x724>
 801587a:	bf00      	nop
 801587c:	200085e4 	.word	0x200085e4
 8015880:	2000889c 	.word	0x2000889c
 8015884:	0801f470 	.word	0x0801f470
 8015888:	0801f61c 	.word	0x0801f61c
 801588c:	0801f53c 	.word	0x0801f53c
 8015890:	2000c664 	.word	0x2000c664
 8015894:	0801f648 	.word	0x0801f648
 8015898:	2000c674 	.word	0x2000c674
 801589c:	0801f674 	.word	0x0801f674
 80158a0:	2000c66c 	.word	0x2000c66c
 80158a4:	200085d4 	.word	0x200085d4
 80158a8:	20008604 	.word	0x20008604
 80158ac:	20008601 	.word	0x20008601
 80158b0:	200085fc 	.word	0x200085fc
 80158b4:	20008600 	.word	0x20008600
 80158b8:	200085fe 	.word	0x200085fe
      }
    }
    tcp_input_pcb = pcb;
 80158bc:	4a9d      	ldr	r2, [pc, #628]	; (8015b34 <tcp_input+0x7dc>)
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80158c2:	69f8      	ldr	r0, [r7, #28]
 80158c4:	f000 fb0c 	bl	8015ee0 <tcp_process>
 80158c8:	4603      	mov	r3, r0
 80158ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80158cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158d0:	f113 0f0d 	cmn.w	r3, #13
 80158d4:	f000 80d4 	beq.w	8015a80 <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 80158d8:	4b97      	ldr	r3, [pc, #604]	; (8015b38 <tcp_input+0x7e0>)
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	f003 0308 	and.w	r3, r3, #8
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d015      	beq.n	8015910 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d008      	beq.n	8015900 <tcp_input+0x5a8>
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158f4:	69fa      	ldr	r2, [r7, #28]
 80158f6:	6912      	ldr	r2, [r2, #16]
 80158f8:	f06f 010d 	mvn.w	r1, #13
 80158fc:	4610      	mov	r0, r2
 80158fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015900:	69f9      	ldr	r1, [r7, #28]
 8015902:	488e      	ldr	r0, [pc, #568]	; (8015b3c <tcp_input+0x7e4>)
 8015904:	f7ff fbb0 	bl	8015068 <tcp_pcb_remove>
        tcp_free(pcb);
 8015908:	69f8      	ldr	r0, [r7, #28]
 801590a:	f7fd fec7 	bl	801369c <tcp_free>
 801590e:	e0c2      	b.n	8015a96 <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 8015910:	2300      	movs	r3, #0
 8015912:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015914:	4b8a      	ldr	r3, [pc, #552]	; (8015b40 <tcp_input+0x7e8>)
 8015916:	881b      	ldrh	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d01d      	beq.n	8015958 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801591c:	4b88      	ldr	r3, [pc, #544]	; (8015b40 <tcp_input+0x7e8>)
 801591e:	881b      	ldrh	r3, [r3, #0]
 8015920:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015928:	2b00      	cmp	r3, #0
 801592a:	d00a      	beq.n	8015942 <tcp_input+0x5ea>
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015932:	69fa      	ldr	r2, [r7, #28]
 8015934:	6910      	ldr	r0, [r2, #16]
 8015936:	89fa      	ldrh	r2, [r7, #14]
 8015938:	69f9      	ldr	r1, [r7, #28]
 801593a:	4798      	blx	r3
 801593c:	4603      	mov	r3, r0
 801593e:	74fb      	strb	r3, [r7, #19]
 8015940:	e001      	b.n	8015946 <tcp_input+0x5ee>
 8015942:	2300      	movs	r3, #0
 8015944:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015946:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801594a:	f113 0f0d 	cmn.w	r3, #13
 801594e:	f000 8099 	beq.w	8015a84 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015952:	4b7b      	ldr	r3, [pc, #492]	; (8015b40 <tcp_input+0x7e8>)
 8015954:	2200      	movs	r2, #0
 8015956:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015958:	69f8      	ldr	r0, [r7, #28]
 801595a:	f000 f909 	bl	8015b70 <tcp_input_delayed_close>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	f040 8091 	bne.w	8015a88 <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015966:	4b77      	ldr	r3, [pc, #476]	; (8015b44 <tcp_input+0x7ec>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d041      	beq.n	80159f2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801596e:	69fb      	ldr	r3, [r7, #28]
 8015970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015972:	2b00      	cmp	r3, #0
 8015974:	d006      	beq.n	8015984 <tcp_input+0x62c>
 8015976:	4b74      	ldr	r3, [pc, #464]	; (8015b48 <tcp_input+0x7f0>)
 8015978:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801597c:	4973      	ldr	r1, [pc, #460]	; (8015b4c <tcp_input+0x7f4>)
 801597e:	4874      	ldr	r0, [pc, #464]	; (8015b50 <tcp_input+0x7f8>)
 8015980:	f005 f910 	bl	801aba4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	8b5b      	ldrh	r3, [r3, #26]
 8015988:	f003 0310 	and.w	r3, r3, #16
 801598c:	2b00      	cmp	r3, #0
 801598e:	d008      	beq.n	80159a2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015990:	4b6c      	ldr	r3, [pc, #432]	; (8015b44 <tcp_input+0x7ec>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4618      	mov	r0, r3
 8015996:	f7fd fbc5 	bl	8013124 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801599a:	69f8      	ldr	r0, [r7, #28]
 801599c:	f7fe f9c2 	bl	8013d24 <tcp_abort>
            goto aborted;
 80159a0:	e079      	b.n	8015a96 <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00c      	beq.n	80159c6 <tcp_input+0x66e>
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	6918      	ldr	r0, [r3, #16]
 80159b6:	4b63      	ldr	r3, [pc, #396]	; (8015b44 <tcp_input+0x7ec>)
 80159b8:	681a      	ldr	r2, [r3, #0]
 80159ba:	2300      	movs	r3, #0
 80159bc:	69f9      	ldr	r1, [r7, #28]
 80159be:	47a0      	blx	r4
 80159c0:	4603      	mov	r3, r0
 80159c2:	74fb      	strb	r3, [r7, #19]
 80159c4:	e008      	b.n	80159d8 <tcp_input+0x680>
 80159c6:	4b5f      	ldr	r3, [pc, #380]	; (8015b44 <tcp_input+0x7ec>)
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	2300      	movs	r3, #0
 80159cc:	69f9      	ldr	r1, [r7, #28]
 80159ce:	2000      	movs	r0, #0
 80159d0:	f7ff f884 	bl	8014adc <tcp_recv_null>
 80159d4:	4603      	mov	r3, r0
 80159d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80159d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80159dc:	f113 0f0d 	cmn.w	r3, #13
 80159e0:	d054      	beq.n	8015a8c <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80159e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80159ea:	4b56      	ldr	r3, [pc, #344]	; (8015b44 <tcp_input+0x7ec>)
 80159ec:	681a      	ldr	r2, [r3, #0]
 80159ee:	69fb      	ldr	r3, [r7, #28]
 80159f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80159f2:	4b51      	ldr	r3, [pc, #324]	; (8015b38 <tcp_input+0x7e0>)
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	f003 0320 	and.w	r3, r3, #32
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d031      	beq.n	8015a62 <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 80159fe:	69fb      	ldr	r3, [r7, #28]
 8015a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d009      	beq.n	8015a1a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a0a:	7b5a      	ldrb	r2, [r3, #13]
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a10:	f042 0220 	orr.w	r2, r2, #32
 8015a14:	b2d2      	uxtb	r2, r2
 8015a16:	735a      	strb	r2, [r3, #13]
 8015a18:	e023      	b.n	8015a62 <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a1e:	f640 3268 	movw	r2, #2920	; 0xb68
 8015a22:	4293      	cmp	r3, r2
 8015a24:	d005      	beq.n	8015a32 <tcp_input+0x6da>
              pcb->rcv_wnd++;
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	b29a      	uxth	r2, r3
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d00b      	beq.n	8015a54 <tcp_input+0x6fc>
 8015a3c:	69fb      	ldr	r3, [r7, #28]
 8015a3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	6918      	ldr	r0, [r3, #16]
 8015a46:	2300      	movs	r3, #0
 8015a48:	2200      	movs	r2, #0
 8015a4a:	69f9      	ldr	r1, [r7, #28]
 8015a4c:	47a0      	blx	r4
 8015a4e:	4603      	mov	r3, r0
 8015a50:	74fb      	strb	r3, [r7, #19]
 8015a52:	e001      	b.n	8015a58 <tcp_input+0x700>
 8015a54:	2300      	movs	r3, #0
 8015a56:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015a58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a5c:	f113 0f0d 	cmn.w	r3, #13
 8015a60:	d016      	beq.n	8015a90 <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015a62:	4b34      	ldr	r3, [pc, #208]	; (8015b34 <tcp_input+0x7dc>)
 8015a64:	2200      	movs	r2, #0
 8015a66:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015a68:	69f8      	ldr	r0, [r7, #28]
 8015a6a:	f000 f881 	bl	8015b70 <tcp_input_delayed_close>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d10f      	bne.n	8015a94 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015a74:	69f8      	ldr	r0, [r7, #28]
 8015a76:	f002 ff11 	bl	801889c <tcp_output>
 8015a7a:	e00c      	b.n	8015a96 <tcp_input+0x73e>
        goto aborted;
 8015a7c:	bf00      	nop
 8015a7e:	e00a      	b.n	8015a96 <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015a80:	bf00      	nop
 8015a82:	e008      	b.n	8015a96 <tcp_input+0x73e>
              goto aborted;
 8015a84:	bf00      	nop
 8015a86:	e006      	b.n	8015a96 <tcp_input+0x73e>
          goto aborted;
 8015a88:	bf00      	nop
 8015a8a:	e004      	b.n	8015a96 <tcp_input+0x73e>
            goto aborted;
 8015a8c:	bf00      	nop
 8015a8e:	e002      	b.n	8015a96 <tcp_input+0x73e>
              goto aborted;
 8015a90:	bf00      	nop
 8015a92:	e000      	b.n	8015a96 <tcp_input+0x73e>
          goto aborted;
 8015a94:	bf00      	nop
    tcp_input_pcb = NULL;
 8015a96:	4b27      	ldr	r3, [pc, #156]	; (8015b34 <tcp_input+0x7dc>)
 8015a98:	2200      	movs	r2, #0
 8015a9a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015a9c:	4b29      	ldr	r3, [pc, #164]	; (8015b44 <tcp_input+0x7ec>)
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015aa2:	4b2c      	ldr	r3, [pc, #176]	; (8015b54 <tcp_input+0x7fc>)
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d03f      	beq.n	8015b2a <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 8015aaa:	4b2a      	ldr	r3, [pc, #168]	; (8015b54 <tcp_input+0x7fc>)
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7fd fb38 	bl	8013124 <pbuf_free>
      inseg.p = NULL;
 8015ab4:	4b27      	ldr	r3, [pc, #156]	; (8015b54 <tcp_input+0x7fc>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015aba:	e036      	b.n	8015b2a <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015abc:	4b26      	ldr	r3, [pc, #152]	; (8015b58 <tcp_input+0x800>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	899b      	ldrh	r3, [r3, #12]
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7fb fe93 	bl	80117f0 <lwip_htons>
 8015aca:	4603      	mov	r3, r0
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	f003 0304 	and.w	r3, r3, #4
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d118      	bne.n	8015b08 <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ad6:	4b21      	ldr	r3, [pc, #132]	; (8015b5c <tcp_input+0x804>)
 8015ad8:	6819      	ldr	r1, [r3, #0]
 8015ada:	4b21      	ldr	r3, [pc, #132]	; (8015b60 <tcp_input+0x808>)
 8015adc:	881b      	ldrh	r3, [r3, #0]
 8015ade:	461a      	mov	r2, r3
 8015ae0:	4b20      	ldr	r3, [pc, #128]	; (8015b64 <tcp_input+0x80c>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ae6:	4b1c      	ldr	r3, [pc, #112]	; (8015b58 <tcp_input+0x800>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015aea:	885b      	ldrh	r3, [r3, #2]
 8015aec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015aee:	4a1a      	ldr	r2, [pc, #104]	; (8015b58 <tcp_input+0x800>)
 8015af0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015af2:	8812      	ldrh	r2, [r2, #0]
 8015af4:	b292      	uxth	r2, r2
 8015af6:	9202      	str	r2, [sp, #8]
 8015af8:	9301      	str	r3, [sp, #4]
 8015afa:	4b1b      	ldr	r3, [pc, #108]	; (8015b68 <tcp_input+0x810>)
 8015afc:	9300      	str	r3, [sp, #0]
 8015afe:	4b1b      	ldr	r3, [pc, #108]	; (8015b6c <tcp_input+0x814>)
 8015b00:	4602      	mov	r2, r0
 8015b02:	2000      	movs	r0, #0
 8015b04:	f003 fc7e 	bl	8019404 <tcp_rst>
    pbuf_free(p);
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7fd fb0b 	bl	8013124 <pbuf_free>
  return;
 8015b0e:	e00c      	b.n	8015b2a <tcp_input+0x7d2>
    goto dropped;
 8015b10:	bf00      	nop
 8015b12:	e006      	b.n	8015b22 <tcp_input+0x7ca>
    goto dropped;
 8015b14:	bf00      	nop
 8015b16:	e004      	b.n	8015b22 <tcp_input+0x7ca>
    goto dropped;
 8015b18:	bf00      	nop
 8015b1a:	e002      	b.n	8015b22 <tcp_input+0x7ca>
      goto dropped;
 8015b1c:	bf00      	nop
 8015b1e:	e000      	b.n	8015b22 <tcp_input+0x7ca>
      goto dropped;
 8015b20:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f7fd fafe 	bl	8013124 <pbuf_free>
 8015b28:	e000      	b.n	8015b2c <tcp_input+0x7d4>
  return;
 8015b2a:	bf00      	nop
}
 8015b2c:	3724      	adds	r7, #36	; 0x24
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd90      	pop	{r4, r7, pc}
 8015b32:	bf00      	nop
 8015b34:	2000c678 	.word	0x2000c678
 8015b38:	20008601 	.word	0x20008601
 8015b3c:	2000c664 	.word	0x2000c664
 8015b40:	200085fc 	.word	0x200085fc
 8015b44:	20008604 	.word	0x20008604
 8015b48:	0801f470 	.word	0x0801f470
 8015b4c:	0801f6a4 	.word	0x0801f6a4
 8015b50:	0801f53c 	.word	0x0801f53c
 8015b54:	200085d4 	.word	0x200085d4
 8015b58:	200085e4 	.word	0x200085e4
 8015b5c:	200085f8 	.word	0x200085f8
 8015b60:	200085fe 	.word	0x200085fe
 8015b64:	200085f4 	.word	0x200085f4
 8015b68:	200088ac 	.word	0x200088ac
 8015b6c:	200088b0 	.word	0x200088b0

08015b70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d106      	bne.n	8015b8c <tcp_input_delayed_close+0x1c>
 8015b7e:	4b17      	ldr	r3, [pc, #92]	; (8015bdc <tcp_input_delayed_close+0x6c>)
 8015b80:	f240 225a 	movw	r2, #602	; 0x25a
 8015b84:	4916      	ldr	r1, [pc, #88]	; (8015be0 <tcp_input_delayed_close+0x70>)
 8015b86:	4817      	ldr	r0, [pc, #92]	; (8015be4 <tcp_input_delayed_close+0x74>)
 8015b88:	f005 f80c 	bl	801aba4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015b8c:	4b16      	ldr	r3, [pc, #88]	; (8015be8 <tcp_input_delayed_close+0x78>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	f003 0310 	and.w	r3, r3, #16
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d01c      	beq.n	8015bd2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	8b5b      	ldrh	r3, [r3, #26]
 8015b9c:	f003 0310 	and.w	r3, r3, #16
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d10d      	bne.n	8015bc0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d008      	beq.n	8015bc0 <tcp_input_delayed_close+0x50>
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bb4:	687a      	ldr	r2, [r7, #4]
 8015bb6:	6912      	ldr	r2, [r2, #16]
 8015bb8:	f06f 010e 	mvn.w	r1, #14
 8015bbc:	4610      	mov	r0, r2
 8015bbe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015bc0:	6879      	ldr	r1, [r7, #4]
 8015bc2:	480a      	ldr	r0, [pc, #40]	; (8015bec <tcp_input_delayed_close+0x7c>)
 8015bc4:	f7ff fa50 	bl	8015068 <tcp_pcb_remove>
    tcp_free(pcb);
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7fd fd67 	bl	801369c <tcp_free>
    return 1;
 8015bce:	2301      	movs	r3, #1
 8015bd0:	e000      	b.n	8015bd4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015bd2:	2300      	movs	r3, #0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3708      	adds	r7, #8
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	0801f470 	.word	0x0801f470
 8015be0:	0801f6c0 	.word	0x0801f6c0
 8015be4:	0801f53c 	.word	0x0801f53c
 8015be8:	20008601 	.word	0x20008601
 8015bec:	2000c664 	.word	0x2000c664

08015bf0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015bf0:	b590      	push	{r4, r7, lr}
 8015bf2:	b08b      	sub	sp, #44	; 0x2c
 8015bf4:	af04      	add	r7, sp, #16
 8015bf6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015bf8:	4b6f      	ldr	r3, [pc, #444]	; (8015db8 <tcp_listen_input+0x1c8>)
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	f003 0304 	and.w	r3, r3, #4
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	f040 80d2 	bne.w	8015daa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d106      	bne.n	8015c1a <tcp_listen_input+0x2a>
 8015c0c:	4b6b      	ldr	r3, [pc, #428]	; (8015dbc <tcp_listen_input+0x1cc>)
 8015c0e:	f240 2281 	movw	r2, #641	; 0x281
 8015c12:	496b      	ldr	r1, [pc, #428]	; (8015dc0 <tcp_listen_input+0x1d0>)
 8015c14:	486b      	ldr	r0, [pc, #428]	; (8015dc4 <tcp_listen_input+0x1d4>)
 8015c16:	f004 ffc5 	bl	801aba4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015c1a:	4b67      	ldr	r3, [pc, #412]	; (8015db8 <tcp_listen_input+0x1c8>)
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	f003 0310 	and.w	r3, r3, #16
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d019      	beq.n	8015c5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c26:	4b68      	ldr	r3, [pc, #416]	; (8015dc8 <tcp_listen_input+0x1d8>)
 8015c28:	6819      	ldr	r1, [r3, #0]
 8015c2a:	4b68      	ldr	r3, [pc, #416]	; (8015dcc <tcp_listen_input+0x1dc>)
 8015c2c:	881b      	ldrh	r3, [r3, #0]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	4b67      	ldr	r3, [pc, #412]	; (8015dd0 <tcp_listen_input+0x1e0>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c36:	4b67      	ldr	r3, [pc, #412]	; (8015dd4 <tcp_listen_input+0x1e4>)
 8015c38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c3a:	885b      	ldrh	r3, [r3, #2]
 8015c3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c3e:	4a65      	ldr	r2, [pc, #404]	; (8015dd4 <tcp_listen_input+0x1e4>)
 8015c40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c42:	8812      	ldrh	r2, [r2, #0]
 8015c44:	b292      	uxth	r2, r2
 8015c46:	9202      	str	r2, [sp, #8]
 8015c48:	9301      	str	r3, [sp, #4]
 8015c4a:	4b63      	ldr	r3, [pc, #396]	; (8015dd8 <tcp_listen_input+0x1e8>)
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	4b63      	ldr	r3, [pc, #396]	; (8015ddc <tcp_listen_input+0x1ec>)
 8015c50:	4602      	mov	r2, r0
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f003 fbd6 	bl	8019404 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015c58:	e0a9      	b.n	8015dae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015c5a:	4b57      	ldr	r3, [pc, #348]	; (8015db8 <tcp_listen_input+0x1c8>)
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	f003 0302 	and.w	r3, r3, #2
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	f000 80a3 	beq.w	8015dae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	7d5b      	ldrb	r3, [r3, #21]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7ff f859 	bl	8014d24 <tcp_alloc>
 8015c72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d111      	bne.n	8015c9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	699b      	ldr	r3, [r3, #24]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d00a      	beq.n	8015c98 <tcp_listen_input+0xa8>
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	699b      	ldr	r3, [r3, #24]
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	6910      	ldr	r0, [r2, #16]
 8015c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015c8e:	2100      	movs	r1, #0
 8015c90:	4798      	blx	r3
 8015c92:	4603      	mov	r3, r0
 8015c94:	73bb      	strb	r3, [r7, #14]
      return;
 8015c96:	e08b      	b.n	8015db0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015c98:	23f0      	movs	r3, #240	; 0xf0
 8015c9a:	73bb      	strb	r3, [r7, #14]
      return;
 8015c9c:	e088      	b.n	8015db0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015c9e:	4b50      	ldr	r3, [pc, #320]	; (8015de0 <tcp_listen_input+0x1f0>)
 8015ca0:	695a      	ldr	r2, [r3, #20]
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015ca6:	4b4e      	ldr	r3, [pc, #312]	; (8015de0 <tcp_listen_input+0x1f0>)
 8015ca8:	691a      	ldr	r2, [r3, #16]
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	8ada      	ldrh	r2, [r3, #22]
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015cb6:	4b47      	ldr	r3, [pc, #284]	; (8015dd4 <tcp_listen_input+0x1e4>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	881b      	ldrh	r3, [r3, #0]
 8015cbc:	b29a      	uxth	r2, r3
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	2203      	movs	r2, #3
 8015cc6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015cc8:	4b41      	ldr	r3, [pc, #260]	; (8015dd0 <tcp_listen_input+0x1e0>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	1c5a      	adds	r2, r3, #1
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015cda:	6978      	ldr	r0, [r7, #20]
 8015cdc:	f7ff fa58 	bl	8015190 <tcp_next_iss>
 8015ce0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	693a      	ldr	r2, [r7, #16]
 8015ce6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	693a      	ldr	r2, [r7, #16]
 8015cec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	693a      	ldr	r2, [r7, #16]
 8015cf2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	693a      	ldr	r2, [r7, #16]
 8015cf8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015cfa:	4b35      	ldr	r3, [pc, #212]	; (8015dd0 <tcp_listen_input+0x1e0>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	1e5a      	subs	r2, r3, #1
 8015d00:	697b      	ldr	r3, [r7, #20]
 8015d02:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	691a      	ldr	r2, [r3, #16]
 8015d08:	697b      	ldr	r3, [r7, #20]
 8015d0a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	7a5b      	ldrb	r3, [r3, #9]
 8015d16:	f003 030c 	and.w	r3, r3, #12
 8015d1a:	b2da      	uxtb	r2, r3
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	7a1a      	ldrb	r2, [r3, #8]
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015d28:	4b2e      	ldr	r3, [pc, #184]	; (8015de4 <tcp_listen_input+0x1f4>)
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	60da      	str	r2, [r3, #12]
 8015d30:	4a2c      	ldr	r2, [pc, #176]	; (8015de4 <tcp_listen_input+0x1f4>)
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	6013      	str	r3, [r2, #0]
 8015d36:	f003 fd27 	bl	8019788 <tcp_timer_needed>
 8015d3a:	4b2b      	ldr	r3, [pc, #172]	; (8015de8 <tcp_listen_input+0x1f8>)
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015d40:	6978      	ldr	r0, [r7, #20]
 8015d42:	f001 fd8d 	bl	8017860 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015d46:	4b23      	ldr	r3, [pc, #140]	; (8015dd4 <tcp_listen_input+0x1e4>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	89db      	ldrh	r3, [r3, #14]
 8015d4c:	b29a      	uxth	r2, r3
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	3304      	adds	r3, #4
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7fa fc13 	bl	8010594 <ip4_route>
 8015d6e:	4601      	mov	r1, r0
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	3304      	adds	r3, #4
 8015d74:	461a      	mov	r2, r3
 8015d76:	4620      	mov	r0, r4
 8015d78:	f7ff fa30 	bl	80151dc <tcp_eff_send_mss_netif>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	461a      	mov	r2, r3
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015d84:	2112      	movs	r1, #18
 8015d86:	6978      	ldr	r0, [r7, #20]
 8015d88:	f002 fc9a 	bl	80186c0 <tcp_enqueue_flags>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d004      	beq.n	8015da2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015d98:	2100      	movs	r1, #0
 8015d9a:	6978      	ldr	r0, [r7, #20]
 8015d9c:	f7fd ff04 	bl	8013ba8 <tcp_abandon>
      return;
 8015da0:	e006      	b.n	8015db0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015da2:	6978      	ldr	r0, [r7, #20]
 8015da4:	f002 fd7a 	bl	801889c <tcp_output>
  return;
 8015da8:	e001      	b.n	8015dae <tcp_listen_input+0x1be>
    return;
 8015daa:	bf00      	nop
 8015dac:	e000      	b.n	8015db0 <tcp_listen_input+0x1c0>
  return;
 8015dae:	bf00      	nop
}
 8015db0:	371c      	adds	r7, #28
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd90      	pop	{r4, r7, pc}
 8015db6:	bf00      	nop
 8015db8:	20008600 	.word	0x20008600
 8015dbc:	0801f470 	.word	0x0801f470
 8015dc0:	0801f6e8 	.word	0x0801f6e8
 8015dc4:	0801f53c 	.word	0x0801f53c
 8015dc8:	200085f8 	.word	0x200085f8
 8015dcc:	200085fe 	.word	0x200085fe
 8015dd0:	200085f4 	.word	0x200085f4
 8015dd4:	200085e4 	.word	0x200085e4
 8015dd8:	200088ac 	.word	0x200088ac
 8015ddc:	200088b0 	.word	0x200088b0
 8015de0:	2000889c 	.word	0x2000889c
 8015de4:	2000c664 	.word	0x2000c664
 8015de8:	2000c660 	.word	0x2000c660

08015dec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b086      	sub	sp, #24
 8015df0:	af04      	add	r7, sp, #16
 8015df2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015df4:	4b2f      	ldr	r3, [pc, #188]	; (8015eb4 <tcp_timewait_input+0xc8>)
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	f003 0304 	and.w	r3, r3, #4
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d153      	bne.n	8015ea8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d106      	bne.n	8015e14 <tcp_timewait_input+0x28>
 8015e06:	4b2c      	ldr	r3, [pc, #176]	; (8015eb8 <tcp_timewait_input+0xcc>)
 8015e08:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015e0c:	492b      	ldr	r1, [pc, #172]	; (8015ebc <tcp_timewait_input+0xd0>)
 8015e0e:	482c      	ldr	r0, [pc, #176]	; (8015ec0 <tcp_timewait_input+0xd4>)
 8015e10:	f004 fec8 	bl	801aba4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015e14:	4b27      	ldr	r3, [pc, #156]	; (8015eb4 <tcp_timewait_input+0xc8>)
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	f003 0302 	and.w	r3, r3, #2
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d02a      	beq.n	8015e76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015e20:	4b28      	ldr	r3, [pc, #160]	; (8015ec4 <tcp_timewait_input+0xd8>)
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e28:	1ad3      	subs	r3, r2, r3
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	db2d      	blt.n	8015e8a <tcp_timewait_input+0x9e>
 8015e2e:	4b25      	ldr	r3, [pc, #148]	; (8015ec4 <tcp_timewait_input+0xd8>)
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e36:	6879      	ldr	r1, [r7, #4]
 8015e38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015e3a:	440b      	add	r3, r1
 8015e3c:	1ad3      	subs	r3, r2, r3
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	dc23      	bgt.n	8015e8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e42:	4b21      	ldr	r3, [pc, #132]	; (8015ec8 <tcp_timewait_input+0xdc>)
 8015e44:	6819      	ldr	r1, [r3, #0]
 8015e46:	4b21      	ldr	r3, [pc, #132]	; (8015ecc <tcp_timewait_input+0xe0>)
 8015e48:	881b      	ldrh	r3, [r3, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	4b1d      	ldr	r3, [pc, #116]	; (8015ec4 <tcp_timewait_input+0xd8>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e52:	4b1f      	ldr	r3, [pc, #124]	; (8015ed0 <tcp_timewait_input+0xe4>)
 8015e54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e56:	885b      	ldrh	r3, [r3, #2]
 8015e58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e5a:	4a1d      	ldr	r2, [pc, #116]	; (8015ed0 <tcp_timewait_input+0xe4>)
 8015e5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e5e:	8812      	ldrh	r2, [r2, #0]
 8015e60:	b292      	uxth	r2, r2
 8015e62:	9202      	str	r2, [sp, #8]
 8015e64:	9301      	str	r3, [sp, #4]
 8015e66:	4b1b      	ldr	r3, [pc, #108]	; (8015ed4 <tcp_timewait_input+0xe8>)
 8015e68:	9300      	str	r3, [sp, #0]
 8015e6a:	4b1b      	ldr	r3, [pc, #108]	; (8015ed8 <tcp_timewait_input+0xec>)
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f003 fac8 	bl	8019404 <tcp_rst>
      return;
 8015e74:	e01b      	b.n	8015eae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015e76:	4b0f      	ldr	r3, [pc, #60]	; (8015eb4 <tcp_timewait_input+0xc8>)
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	f003 0301 	and.w	r3, r3, #1
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d003      	beq.n	8015e8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015e82:	4b16      	ldr	r3, [pc, #88]	; (8015edc <tcp_timewait_input+0xf0>)
 8015e84:	681a      	ldr	r2, [r3, #0]
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015e8a:	4b10      	ldr	r3, [pc, #64]	; (8015ecc <tcp_timewait_input+0xe0>)
 8015e8c:	881b      	ldrh	r3, [r3, #0]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00c      	beq.n	8015eac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	8b5b      	ldrh	r3, [r3, #26]
 8015e96:	f043 0302 	orr.w	r3, r3, #2
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f002 fcfb 	bl	801889c <tcp_output>
  }
  return;
 8015ea6:	e001      	b.n	8015eac <tcp_timewait_input+0xc0>
    return;
 8015ea8:	bf00      	nop
 8015eaa:	e000      	b.n	8015eae <tcp_timewait_input+0xc2>
  return;
 8015eac:	bf00      	nop
}
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	20008600 	.word	0x20008600
 8015eb8:	0801f470 	.word	0x0801f470
 8015ebc:	0801f708 	.word	0x0801f708
 8015ec0:	0801f53c 	.word	0x0801f53c
 8015ec4:	200085f4 	.word	0x200085f4
 8015ec8:	200085f8 	.word	0x200085f8
 8015ecc:	200085fe 	.word	0x200085fe
 8015ed0:	200085e4 	.word	0x200085e4
 8015ed4:	200088ac 	.word	0x200088ac
 8015ed8:	200088b0 	.word	0x200088b0
 8015edc:	2000c668 	.word	0x2000c668

08015ee0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015ee0:	b590      	push	{r4, r7, lr}
 8015ee2:	b08d      	sub	sp, #52	; 0x34
 8015ee4:	af04      	add	r7, sp, #16
 8015ee6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015eec:	2300      	movs	r3, #0
 8015eee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d106      	bne.n	8015f04 <tcp_process+0x24>
 8015ef6:	4ba5      	ldr	r3, [pc, #660]	; (801618c <tcp_process+0x2ac>)
 8015ef8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015efc:	49a4      	ldr	r1, [pc, #656]	; (8016190 <tcp_process+0x2b0>)
 8015efe:	48a5      	ldr	r0, [pc, #660]	; (8016194 <tcp_process+0x2b4>)
 8015f00:	f004 fe50 	bl	801aba4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015f04:	4ba4      	ldr	r3, [pc, #656]	; (8016198 <tcp_process+0x2b8>)
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	f003 0304 	and.w	r3, r3, #4
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d04e      	beq.n	8015fae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	7d1b      	ldrb	r3, [r3, #20]
 8015f14:	2b02      	cmp	r3, #2
 8015f16:	d108      	bne.n	8015f2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f1c:	4b9f      	ldr	r3, [pc, #636]	; (801619c <tcp_process+0x2bc>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d123      	bne.n	8015f6c <tcp_process+0x8c>
        acceptable = 1;
 8015f24:	2301      	movs	r3, #1
 8015f26:	76fb      	strb	r3, [r7, #27]
 8015f28:	e020      	b.n	8015f6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f2e:	4b9c      	ldr	r3, [pc, #624]	; (80161a0 <tcp_process+0x2c0>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d102      	bne.n	8015f3c <tcp_process+0x5c>
        acceptable = 1;
 8015f36:	2301      	movs	r3, #1
 8015f38:	76fb      	strb	r3, [r7, #27]
 8015f3a:	e017      	b.n	8015f6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015f3c:	4b98      	ldr	r3, [pc, #608]	; (80161a0 <tcp_process+0x2c0>)
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f44:	1ad3      	subs	r3, r2, r3
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	db10      	blt.n	8015f6c <tcp_process+0x8c>
 8015f4a:	4b95      	ldr	r3, [pc, #596]	; (80161a0 <tcp_process+0x2c0>)
 8015f4c:	681a      	ldr	r2, [r3, #0]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f52:	6879      	ldr	r1, [r7, #4]
 8015f54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015f56:	440b      	add	r3, r1
 8015f58:	1ad3      	subs	r3, r2, r3
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	dc06      	bgt.n	8015f6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	8b5b      	ldrh	r3, [r3, #26]
 8015f62:	f043 0302 	orr.w	r3, r3, #2
 8015f66:	b29a      	uxth	r2, r3
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015f6c:	7efb      	ldrb	r3, [r7, #27]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d01b      	beq.n	8015faa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	7d1b      	ldrb	r3, [r3, #20]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d106      	bne.n	8015f88 <tcp_process+0xa8>
 8015f7a:	4b84      	ldr	r3, [pc, #528]	; (801618c <tcp_process+0x2ac>)
 8015f7c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015f80:	4988      	ldr	r1, [pc, #544]	; (80161a4 <tcp_process+0x2c4>)
 8015f82:	4884      	ldr	r0, [pc, #528]	; (8016194 <tcp_process+0x2b4>)
 8015f84:	f004 fe0e 	bl	801aba4 <iprintf>
      recv_flags |= TF_RESET;
 8015f88:	4b87      	ldr	r3, [pc, #540]	; (80161a8 <tcp_process+0x2c8>)
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	f043 0308 	orr.w	r3, r3, #8
 8015f90:	b2da      	uxtb	r2, r3
 8015f92:	4b85      	ldr	r3, [pc, #532]	; (80161a8 <tcp_process+0x2c8>)
 8015f94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	8b5b      	ldrh	r3, [r3, #26]
 8015f9a:	f023 0301 	bic.w	r3, r3, #1
 8015f9e:	b29a      	uxth	r2, r3
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015fa4:	f06f 030d 	mvn.w	r3, #13
 8015fa8:	e37a      	b.n	80166a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015faa:	2300      	movs	r3, #0
 8015fac:	e378      	b.n	80166a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015fae:	4b7a      	ldr	r3, [pc, #488]	; (8016198 <tcp_process+0x2b8>)
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	f003 0302 	and.w	r3, r3, #2
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d010      	beq.n	8015fdc <tcp_process+0xfc>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	7d1b      	ldrb	r3, [r3, #20]
 8015fbe:	2b02      	cmp	r3, #2
 8015fc0:	d00c      	beq.n	8015fdc <tcp_process+0xfc>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	7d1b      	ldrb	r3, [r3, #20]
 8015fc6:	2b03      	cmp	r3, #3
 8015fc8:	d008      	beq.n	8015fdc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	8b5b      	ldrh	r3, [r3, #26]
 8015fce:	f043 0302 	orr.w	r3, r3, #2
 8015fd2:	b29a      	uxth	r2, r3
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	e361      	b.n	80166a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	8b5b      	ldrh	r3, [r3, #26]
 8015fe0:	f003 0310 	and.w	r3, r3, #16
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d103      	bne.n	8015ff0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015fe8:	4b70      	ldr	r3, [pc, #448]	; (80161ac <tcp_process+0x2cc>)
 8015fea:	681a      	ldr	r2, [r3, #0]
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f001 fc2d 	bl	8017860 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	7d1b      	ldrb	r3, [r3, #20]
 801600a:	3b02      	subs	r3, #2
 801600c:	2b07      	cmp	r3, #7
 801600e:	f200 8337 	bhi.w	8016680 <tcp_process+0x7a0>
 8016012:	a201      	add	r2, pc, #4	; (adr r2, 8016018 <tcp_process+0x138>)
 8016014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016018:	08016039 	.word	0x08016039
 801601c:	08016269 	.word	0x08016269
 8016020:	080163e1 	.word	0x080163e1
 8016024:	0801640b 	.word	0x0801640b
 8016028:	0801652f 	.word	0x0801652f
 801602c:	080163e1 	.word	0x080163e1
 8016030:	080165bb 	.word	0x080165bb
 8016034:	0801664b 	.word	0x0801664b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016038:	4b57      	ldr	r3, [pc, #348]	; (8016198 <tcp_process+0x2b8>)
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	f003 0310 	and.w	r3, r3, #16
 8016040:	2b00      	cmp	r3, #0
 8016042:	f000 80e4 	beq.w	801620e <tcp_process+0x32e>
 8016046:	4b54      	ldr	r3, [pc, #336]	; (8016198 <tcp_process+0x2b8>)
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	f003 0302 	and.w	r3, r3, #2
 801604e:	2b00      	cmp	r3, #0
 8016050:	f000 80dd 	beq.w	801620e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016058:	1c5a      	adds	r2, r3, #1
 801605a:	4b50      	ldr	r3, [pc, #320]	; (801619c <tcp_process+0x2bc>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	429a      	cmp	r2, r3
 8016060:	f040 80d5 	bne.w	801620e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016064:	4b4e      	ldr	r3, [pc, #312]	; (80161a0 <tcp_process+0x2c0>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	1c5a      	adds	r2, r3, #1
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8016076:	4b49      	ldr	r3, [pc, #292]	; (801619c <tcp_process+0x2bc>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801607e:	4b4c      	ldr	r3, [pc, #304]	; (80161b0 <tcp_process+0x2d0>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	89db      	ldrh	r3, [r3, #14]
 8016084:	b29a      	uxth	r2, r3
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016098:	4b41      	ldr	r3, [pc, #260]	; (80161a0 <tcp_process+0x2c0>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	1e5a      	subs	r2, r3, #1
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2204      	movs	r2, #4
 80160a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	3304      	adds	r3, #4
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fa fa6f 	bl	8010594 <ip4_route>
 80160b6:	4601      	mov	r1, r0
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	3304      	adds	r3, #4
 80160bc:	461a      	mov	r2, r3
 80160be:	4620      	mov	r0, r4
 80160c0:	f7ff f88c 	bl	80151dc <tcp_eff_send_mss_netif>
 80160c4:	4603      	mov	r3, r0
 80160c6:	461a      	mov	r2, r3
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160d0:	009a      	lsls	r2, r3, #2
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160d6:	005b      	lsls	r3, r3, #1
 80160d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80160dc:	428b      	cmp	r3, r1
 80160de:	bf38      	it	cc
 80160e0:	460b      	movcc	r3, r1
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d204      	bcs.n	80160f0 <tcp_process+0x210>
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	e00d      	b.n	801610c <tcp_process+0x22c>
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160f4:	005b      	lsls	r3, r3, #1
 80160f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80160fa:	4293      	cmp	r3, r2
 80160fc:	d904      	bls.n	8016108 <tcp_process+0x228>
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016102:	005b      	lsls	r3, r3, #1
 8016104:	b29b      	uxth	r3, r3
 8016106:	e001      	b.n	801610c <tcp_process+0x22c>
 8016108:	f241 131c 	movw	r3, #4380	; 0x111c
 801610c:	687a      	ldr	r2, [r7, #4]
 801610e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016118:	2b00      	cmp	r3, #0
 801611a:	d106      	bne.n	801612a <tcp_process+0x24a>
 801611c:	4b1b      	ldr	r3, [pc, #108]	; (801618c <tcp_process+0x2ac>)
 801611e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8016122:	4924      	ldr	r1, [pc, #144]	; (80161b4 <tcp_process+0x2d4>)
 8016124:	481b      	ldr	r0, [pc, #108]	; (8016194 <tcp_process+0x2b4>)
 8016126:	f004 fd3d 	bl	801aba4 <iprintf>
        --pcb->snd_queuelen;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016130:	3b01      	subs	r3, #1
 8016132:	b29a      	uxth	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801613e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016140:	69fb      	ldr	r3, [r7, #28]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d111      	bne.n	801616a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801614a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801614c:	69fb      	ldr	r3, [r7, #28]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d106      	bne.n	8016160 <tcp_process+0x280>
 8016152:	4b0e      	ldr	r3, [pc, #56]	; (801618c <tcp_process+0x2ac>)
 8016154:	f44f 725d 	mov.w	r2, #884	; 0x374
 8016158:	4917      	ldr	r1, [pc, #92]	; (80161b8 <tcp_process+0x2d8>)
 801615a:	480e      	ldr	r0, [pc, #56]	; (8016194 <tcp_process+0x2b4>)
 801615c:	f004 fd22 	bl	801aba4 <iprintf>
          pcb->unsent = rseg->next;
 8016160:	69fb      	ldr	r3, [r7, #28]
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	66da      	str	r2, [r3, #108]	; 0x6c
 8016168:	e003      	b.n	8016172 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8016172:	69f8      	ldr	r0, [r7, #28]
 8016174:	f7fe fc6d 	bl	8014a52 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801617c:	2b00      	cmp	r3, #0
 801617e:	d11d      	bne.n	80161bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016186:	861a      	strh	r2, [r3, #48]	; 0x30
 8016188:	e01f      	b.n	80161ca <tcp_process+0x2ea>
 801618a:	bf00      	nop
 801618c:	0801f470 	.word	0x0801f470
 8016190:	0801f728 	.word	0x0801f728
 8016194:	0801f53c 	.word	0x0801f53c
 8016198:	20008600 	.word	0x20008600
 801619c:	200085f8 	.word	0x200085f8
 80161a0:	200085f4 	.word	0x200085f4
 80161a4:	0801f744 	.word	0x0801f744
 80161a8:	20008601 	.word	0x20008601
 80161ac:	2000c668 	.word	0x2000c668
 80161b0:	200085e4 	.word	0x200085e4
 80161b4:	0801f764 	.word	0x0801f764
 80161b8:	0801f77c 	.word	0x0801f77c
        } else {
          pcb->rtime = 0;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2200      	movs	r2, #0
 80161c0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2200      	movs	r2, #0
 80161c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00a      	beq.n	80161ea <tcp_process+0x30a>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	6910      	ldr	r0, [r2, #16]
 80161de:	2200      	movs	r2, #0
 80161e0:	6879      	ldr	r1, [r7, #4]
 80161e2:	4798      	blx	r3
 80161e4:	4603      	mov	r3, r0
 80161e6:	76bb      	strb	r3, [r7, #26]
 80161e8:	e001      	b.n	80161ee <tcp_process+0x30e>
 80161ea:	2300      	movs	r3, #0
 80161ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80161ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80161f2:	f113 0f0d 	cmn.w	r3, #13
 80161f6:	d102      	bne.n	80161fe <tcp_process+0x31e>
          return ERR_ABRT;
 80161f8:	f06f 030c 	mvn.w	r3, #12
 80161fc:	e250      	b.n	80166a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	8b5b      	ldrh	r3, [r3, #26]
 8016202:	f043 0302 	orr.w	r3, r3, #2
 8016206:	b29a      	uxth	r2, r3
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801620c:	e23a      	b.n	8016684 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801620e:	4b9d      	ldr	r3, [pc, #628]	; (8016484 <tcp_process+0x5a4>)
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	f003 0310 	and.w	r3, r3, #16
 8016216:	2b00      	cmp	r3, #0
 8016218:	f000 8234 	beq.w	8016684 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801621c:	4b9a      	ldr	r3, [pc, #616]	; (8016488 <tcp_process+0x5a8>)
 801621e:	6819      	ldr	r1, [r3, #0]
 8016220:	4b9a      	ldr	r3, [pc, #616]	; (801648c <tcp_process+0x5ac>)
 8016222:	881b      	ldrh	r3, [r3, #0]
 8016224:	461a      	mov	r2, r3
 8016226:	4b9a      	ldr	r3, [pc, #616]	; (8016490 <tcp_process+0x5b0>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801622c:	4b99      	ldr	r3, [pc, #612]	; (8016494 <tcp_process+0x5b4>)
 801622e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016230:	885b      	ldrh	r3, [r3, #2]
 8016232:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016234:	4a97      	ldr	r2, [pc, #604]	; (8016494 <tcp_process+0x5b4>)
 8016236:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016238:	8812      	ldrh	r2, [r2, #0]
 801623a:	b292      	uxth	r2, r2
 801623c:	9202      	str	r2, [sp, #8]
 801623e:	9301      	str	r3, [sp, #4]
 8016240:	4b95      	ldr	r3, [pc, #596]	; (8016498 <tcp_process+0x5b8>)
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	4b95      	ldr	r3, [pc, #596]	; (801649c <tcp_process+0x5bc>)
 8016246:	4602      	mov	r2, r0
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f003 f8db 	bl	8019404 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016254:	2b05      	cmp	r3, #5
 8016256:	f200 8215 	bhi.w	8016684 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2200      	movs	r2, #0
 801625e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f002 fea5 	bl	8018fb0 <tcp_rexmit_rto>
      break;
 8016266:	e20d      	b.n	8016684 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016268:	4b86      	ldr	r3, [pc, #536]	; (8016484 <tcp_process+0x5a4>)
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	f003 0310 	and.w	r3, r3, #16
 8016270:	2b00      	cmp	r3, #0
 8016272:	f000 80a1 	beq.w	80163b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016276:	4b84      	ldr	r3, [pc, #528]	; (8016488 <tcp_process+0x5a8>)
 8016278:	681a      	ldr	r2, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801627e:	1ad3      	subs	r3, r2, r3
 8016280:	3b01      	subs	r3, #1
 8016282:	2b00      	cmp	r3, #0
 8016284:	db7e      	blt.n	8016384 <tcp_process+0x4a4>
 8016286:	4b80      	ldr	r3, [pc, #512]	; (8016488 <tcp_process+0x5a8>)
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801628e:	1ad3      	subs	r3, r2, r3
 8016290:	2b00      	cmp	r3, #0
 8016292:	dc77      	bgt.n	8016384 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2204      	movs	r2, #4
 8016298:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d102      	bne.n	80162a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80162a2:	23fa      	movs	r3, #250	; 0xfa
 80162a4:	76bb      	strb	r3, [r7, #26]
 80162a6:	e01d      	b.n	80162e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162ac:	699b      	ldr	r3, [r3, #24]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d106      	bne.n	80162c0 <tcp_process+0x3e0>
 80162b2:	4b7b      	ldr	r3, [pc, #492]	; (80164a0 <tcp_process+0x5c0>)
 80162b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80162b8:	497a      	ldr	r1, [pc, #488]	; (80164a4 <tcp_process+0x5c4>)
 80162ba:	487b      	ldr	r0, [pc, #492]	; (80164a8 <tcp_process+0x5c8>)
 80162bc:	f004 fc72 	bl	801aba4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162c4:	699b      	ldr	r3, [r3, #24]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d00a      	beq.n	80162e0 <tcp_process+0x400>
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162ce:	699b      	ldr	r3, [r3, #24]
 80162d0:	687a      	ldr	r2, [r7, #4]
 80162d2:	6910      	ldr	r0, [r2, #16]
 80162d4:	2200      	movs	r2, #0
 80162d6:	6879      	ldr	r1, [r7, #4]
 80162d8:	4798      	blx	r3
 80162da:	4603      	mov	r3, r0
 80162dc:	76bb      	strb	r3, [r7, #26]
 80162de:	e001      	b.n	80162e4 <tcp_process+0x404>
 80162e0:	23f0      	movs	r3, #240	; 0xf0
 80162e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80162e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d00a      	beq.n	8016302 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80162ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80162f0:	f113 0f0d 	cmn.w	r3, #13
 80162f4:	d002      	beq.n	80162fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f7fd fd14 	bl	8013d24 <tcp_abort>
            }
            return ERR_ABRT;
 80162fc:	f06f 030c 	mvn.w	r3, #12
 8016300:	e1ce      	b.n	80166a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fae0 	bl	80168c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016308:	4b68      	ldr	r3, [pc, #416]	; (80164ac <tcp_process+0x5cc>)
 801630a:	881b      	ldrh	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d005      	beq.n	801631c <tcp_process+0x43c>
            recv_acked--;
 8016310:	4b66      	ldr	r3, [pc, #408]	; (80164ac <tcp_process+0x5cc>)
 8016312:	881b      	ldrh	r3, [r3, #0]
 8016314:	3b01      	subs	r3, #1
 8016316:	b29a      	uxth	r2, r3
 8016318:	4b64      	ldr	r3, [pc, #400]	; (80164ac <tcp_process+0x5cc>)
 801631a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016320:	009a      	lsls	r2, r3, #2
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016326:	005b      	lsls	r3, r3, #1
 8016328:	f241 111c 	movw	r1, #4380	; 0x111c
 801632c:	428b      	cmp	r3, r1
 801632e:	bf38      	it	cc
 8016330:	460b      	movcc	r3, r1
 8016332:	429a      	cmp	r2, r3
 8016334:	d204      	bcs.n	8016340 <tcp_process+0x460>
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801633a:	009b      	lsls	r3, r3, #2
 801633c:	b29b      	uxth	r3, r3
 801633e:	e00d      	b.n	801635c <tcp_process+0x47c>
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016344:	005b      	lsls	r3, r3, #1
 8016346:	f241 121c 	movw	r2, #4380	; 0x111c
 801634a:	4293      	cmp	r3, r2
 801634c:	d904      	bls.n	8016358 <tcp_process+0x478>
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016352:	005b      	lsls	r3, r3, #1
 8016354:	b29b      	uxth	r3, r3
 8016356:	e001      	b.n	801635c <tcp_process+0x47c>
 8016358:	f241 131c 	movw	r3, #4380	; 0x111c
 801635c:	687a      	ldr	r2, [r7, #4]
 801635e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016362:	4b53      	ldr	r3, [pc, #332]	; (80164b0 <tcp_process+0x5d0>)
 8016364:	781b      	ldrb	r3, [r3, #0]
 8016366:	f003 0320 	and.w	r3, r3, #32
 801636a:	2b00      	cmp	r3, #0
 801636c:	d037      	beq.n	80163de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	8b5b      	ldrh	r3, [r3, #26]
 8016372:	f043 0302 	orr.w	r3, r3, #2
 8016376:	b29a      	uxth	r2, r3
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2207      	movs	r2, #7
 8016380:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016382:	e02c      	b.n	80163de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016384:	4b40      	ldr	r3, [pc, #256]	; (8016488 <tcp_process+0x5a8>)
 8016386:	6819      	ldr	r1, [r3, #0]
 8016388:	4b40      	ldr	r3, [pc, #256]	; (801648c <tcp_process+0x5ac>)
 801638a:	881b      	ldrh	r3, [r3, #0]
 801638c:	461a      	mov	r2, r3
 801638e:	4b40      	ldr	r3, [pc, #256]	; (8016490 <tcp_process+0x5b0>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016394:	4b3f      	ldr	r3, [pc, #252]	; (8016494 <tcp_process+0x5b4>)
 8016396:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016398:	885b      	ldrh	r3, [r3, #2]
 801639a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801639c:	4a3d      	ldr	r2, [pc, #244]	; (8016494 <tcp_process+0x5b4>)
 801639e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80163a0:	8812      	ldrh	r2, [r2, #0]
 80163a2:	b292      	uxth	r2, r2
 80163a4:	9202      	str	r2, [sp, #8]
 80163a6:	9301      	str	r3, [sp, #4]
 80163a8:	4b3b      	ldr	r3, [pc, #236]	; (8016498 <tcp_process+0x5b8>)
 80163aa:	9300      	str	r3, [sp, #0]
 80163ac:	4b3b      	ldr	r3, [pc, #236]	; (801649c <tcp_process+0x5bc>)
 80163ae:	4602      	mov	r2, r0
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f003 f827 	bl	8019404 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80163b6:	e167      	b.n	8016688 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80163b8:	4b32      	ldr	r3, [pc, #200]	; (8016484 <tcp_process+0x5a4>)
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	f003 0302 	and.w	r3, r3, #2
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	f000 8161 	beq.w	8016688 <tcp_process+0x7a8>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ca:	1e5a      	subs	r2, r3, #1
 80163cc:	4b30      	ldr	r3, [pc, #192]	; (8016490 <tcp_process+0x5b0>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	429a      	cmp	r2, r3
 80163d2:	f040 8159 	bne.w	8016688 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f002 fe0c 	bl	8018ff4 <tcp_rexmit>
      break;
 80163dc:	e154      	b.n	8016688 <tcp_process+0x7a8>
 80163de:	e153      	b.n	8016688 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f000 fa71 	bl	80168c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80163e6:	4b32      	ldr	r3, [pc, #200]	; (80164b0 <tcp_process+0x5d0>)
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	f003 0320 	and.w	r3, r3, #32
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	f000 814c 	beq.w	801668c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	8b5b      	ldrh	r3, [r3, #26]
 80163f8:	f043 0302 	orr.w	r3, r3, #2
 80163fc:	b29a      	uxth	r2, r3
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2207      	movs	r2, #7
 8016406:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016408:	e140      	b.n	801668c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f000 fa5c 	bl	80168c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016410:	4b27      	ldr	r3, [pc, #156]	; (80164b0 <tcp_process+0x5d0>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	f003 0320 	and.w	r3, r3, #32
 8016418:	2b00      	cmp	r3, #0
 801641a:	d071      	beq.n	8016500 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801641c:	4b19      	ldr	r3, [pc, #100]	; (8016484 <tcp_process+0x5a4>)
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	f003 0310 	and.w	r3, r3, #16
 8016424:	2b00      	cmp	r3, #0
 8016426:	d060      	beq.n	80164ea <tcp_process+0x60a>
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801642c:	4b16      	ldr	r3, [pc, #88]	; (8016488 <tcp_process+0x5a8>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	429a      	cmp	r2, r3
 8016432:	d15a      	bne.n	80164ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016438:	2b00      	cmp	r3, #0
 801643a:	d156      	bne.n	80164ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	8b5b      	ldrh	r3, [r3, #26]
 8016440:	f043 0302 	orr.w	r3, r3, #2
 8016444:	b29a      	uxth	r2, r3
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f7fe fdbc 	bl	8014fc8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016450:	4b18      	ldr	r3, [pc, #96]	; (80164b4 <tcp_process+0x5d4>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	429a      	cmp	r2, r3
 8016458:	d105      	bne.n	8016466 <tcp_process+0x586>
 801645a:	4b16      	ldr	r3, [pc, #88]	; (80164b4 <tcp_process+0x5d4>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	4a14      	ldr	r2, [pc, #80]	; (80164b4 <tcp_process+0x5d4>)
 8016462:	6013      	str	r3, [r2, #0]
 8016464:	e02e      	b.n	80164c4 <tcp_process+0x5e4>
 8016466:	4b13      	ldr	r3, [pc, #76]	; (80164b4 <tcp_process+0x5d4>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	617b      	str	r3, [r7, #20]
 801646c:	e027      	b.n	80164be <tcp_process+0x5de>
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	68db      	ldr	r3, [r3, #12]
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	429a      	cmp	r2, r3
 8016476:	d11f      	bne.n	80164b8 <tcp_process+0x5d8>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	68da      	ldr	r2, [r3, #12]
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	60da      	str	r2, [r3, #12]
 8016480:	e020      	b.n	80164c4 <tcp_process+0x5e4>
 8016482:	bf00      	nop
 8016484:	20008600 	.word	0x20008600
 8016488:	200085f8 	.word	0x200085f8
 801648c:	200085fe 	.word	0x200085fe
 8016490:	200085f4 	.word	0x200085f4
 8016494:	200085e4 	.word	0x200085e4
 8016498:	200088ac 	.word	0x200088ac
 801649c:	200088b0 	.word	0x200088b0
 80164a0:	0801f470 	.word	0x0801f470
 80164a4:	0801f790 	.word	0x0801f790
 80164a8:	0801f53c 	.word	0x0801f53c
 80164ac:	200085fc 	.word	0x200085fc
 80164b0:	20008601 	.word	0x20008601
 80164b4:	2000c664 	.word	0x2000c664
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	68db      	ldr	r3, [r3, #12]
 80164bc:	617b      	str	r3, [r7, #20]
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d1d4      	bne.n	801646e <tcp_process+0x58e>
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2200      	movs	r2, #0
 80164c8:	60da      	str	r2, [r3, #12]
 80164ca:	4b77      	ldr	r3, [pc, #476]	; (80166a8 <tcp_process+0x7c8>)
 80164cc:	2201      	movs	r2, #1
 80164ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	220a      	movs	r2, #10
 80164d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80164d6:	4b75      	ldr	r3, [pc, #468]	; (80166ac <tcp_process+0x7cc>)
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	60da      	str	r2, [r3, #12]
 80164de:	4a73      	ldr	r2, [pc, #460]	; (80166ac <tcp_process+0x7cc>)
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	6013      	str	r3, [r2, #0]
 80164e4:	f003 f950 	bl	8019788 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80164e8:	e0d2      	b.n	8016690 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	8b5b      	ldrh	r3, [r3, #26]
 80164ee:	f043 0302 	orr.w	r3, r3, #2
 80164f2:	b29a      	uxth	r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2208      	movs	r2, #8
 80164fc:	751a      	strb	r2, [r3, #20]
      break;
 80164fe:	e0c7      	b.n	8016690 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016500:	4b6b      	ldr	r3, [pc, #428]	; (80166b0 <tcp_process+0x7d0>)
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	f003 0310 	and.w	r3, r3, #16
 8016508:	2b00      	cmp	r3, #0
 801650a:	f000 80c1 	beq.w	8016690 <tcp_process+0x7b0>
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016512:	4b68      	ldr	r3, [pc, #416]	; (80166b4 <tcp_process+0x7d4>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	429a      	cmp	r2, r3
 8016518:	f040 80ba 	bne.w	8016690 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016520:	2b00      	cmp	r3, #0
 8016522:	f040 80b5 	bne.w	8016690 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2206      	movs	r2, #6
 801652a:	751a      	strb	r2, [r3, #20]
      break;
 801652c:	e0b0      	b.n	8016690 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 f9ca 	bl	80168c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016534:	4b60      	ldr	r3, [pc, #384]	; (80166b8 <tcp_process+0x7d8>)
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	f003 0320 	and.w	r3, r3, #32
 801653c:	2b00      	cmp	r3, #0
 801653e:	f000 80a9 	beq.w	8016694 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	8b5b      	ldrh	r3, [r3, #26]
 8016546:	f043 0302 	orr.w	r3, r3, #2
 801654a:	b29a      	uxth	r2, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f7fe fd39 	bl	8014fc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016556:	4b59      	ldr	r3, [pc, #356]	; (80166bc <tcp_process+0x7dc>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	429a      	cmp	r2, r3
 801655e:	d105      	bne.n	801656c <tcp_process+0x68c>
 8016560:	4b56      	ldr	r3, [pc, #344]	; (80166bc <tcp_process+0x7dc>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	68db      	ldr	r3, [r3, #12]
 8016566:	4a55      	ldr	r2, [pc, #340]	; (80166bc <tcp_process+0x7dc>)
 8016568:	6013      	str	r3, [r2, #0]
 801656a:	e013      	b.n	8016594 <tcp_process+0x6b4>
 801656c:	4b53      	ldr	r3, [pc, #332]	; (80166bc <tcp_process+0x7dc>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	613b      	str	r3, [r7, #16]
 8016572:	e00c      	b.n	801658e <tcp_process+0x6ae>
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	68db      	ldr	r3, [r3, #12]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	429a      	cmp	r2, r3
 801657c:	d104      	bne.n	8016588 <tcp_process+0x6a8>
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	68da      	ldr	r2, [r3, #12]
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	60da      	str	r2, [r3, #12]
 8016586:	e005      	b.n	8016594 <tcp_process+0x6b4>
 8016588:	693b      	ldr	r3, [r7, #16]
 801658a:	68db      	ldr	r3, [r3, #12]
 801658c:	613b      	str	r3, [r7, #16]
 801658e:	693b      	ldr	r3, [r7, #16]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d1ef      	bne.n	8016574 <tcp_process+0x694>
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2200      	movs	r2, #0
 8016598:	60da      	str	r2, [r3, #12]
 801659a:	4b43      	ldr	r3, [pc, #268]	; (80166a8 <tcp_process+0x7c8>)
 801659c:	2201      	movs	r2, #1
 801659e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	220a      	movs	r2, #10
 80165a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80165a6:	4b41      	ldr	r3, [pc, #260]	; (80166ac <tcp_process+0x7cc>)
 80165a8:	681a      	ldr	r2, [r3, #0]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	60da      	str	r2, [r3, #12]
 80165ae:	4a3f      	ldr	r2, [pc, #252]	; (80166ac <tcp_process+0x7cc>)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6013      	str	r3, [r2, #0]
 80165b4:	f003 f8e8 	bl	8019788 <tcp_timer_needed>
      }
      break;
 80165b8:	e06c      	b.n	8016694 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f000 f984 	bl	80168c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80165c0:	4b3b      	ldr	r3, [pc, #236]	; (80166b0 <tcp_process+0x7d0>)
 80165c2:	781b      	ldrb	r3, [r3, #0]
 80165c4:	f003 0310 	and.w	r3, r3, #16
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d065      	beq.n	8016698 <tcp_process+0x7b8>
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80165d0:	4b38      	ldr	r3, [pc, #224]	; (80166b4 <tcp_process+0x7d4>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d15f      	bne.n	8016698 <tcp_process+0x7b8>
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d15b      	bne.n	8016698 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7fe fcf1 	bl	8014fc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80165e6:	4b35      	ldr	r3, [pc, #212]	; (80166bc <tcp_process+0x7dc>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d105      	bne.n	80165fc <tcp_process+0x71c>
 80165f0:	4b32      	ldr	r3, [pc, #200]	; (80166bc <tcp_process+0x7dc>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	4a31      	ldr	r2, [pc, #196]	; (80166bc <tcp_process+0x7dc>)
 80165f8:	6013      	str	r3, [r2, #0]
 80165fa:	e013      	b.n	8016624 <tcp_process+0x744>
 80165fc:	4b2f      	ldr	r3, [pc, #188]	; (80166bc <tcp_process+0x7dc>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	60fb      	str	r3, [r7, #12]
 8016602:	e00c      	b.n	801661e <tcp_process+0x73e>
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	68db      	ldr	r3, [r3, #12]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	429a      	cmp	r2, r3
 801660c:	d104      	bne.n	8016618 <tcp_process+0x738>
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	68da      	ldr	r2, [r3, #12]
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	60da      	str	r2, [r3, #12]
 8016616:	e005      	b.n	8016624 <tcp_process+0x744>
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	60fb      	str	r3, [r7, #12]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d1ef      	bne.n	8016604 <tcp_process+0x724>
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2200      	movs	r2, #0
 8016628:	60da      	str	r2, [r3, #12]
 801662a:	4b1f      	ldr	r3, [pc, #124]	; (80166a8 <tcp_process+0x7c8>)
 801662c:	2201      	movs	r2, #1
 801662e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	220a      	movs	r2, #10
 8016634:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016636:	4b1d      	ldr	r3, [pc, #116]	; (80166ac <tcp_process+0x7cc>)
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	60da      	str	r2, [r3, #12]
 801663e:	4a1b      	ldr	r2, [pc, #108]	; (80166ac <tcp_process+0x7cc>)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6013      	str	r3, [r2, #0]
 8016644:	f003 f8a0 	bl	8019788 <tcp_timer_needed>
      }
      break;
 8016648:	e026      	b.n	8016698 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f000 f93c 	bl	80168c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016650:	4b17      	ldr	r3, [pc, #92]	; (80166b0 <tcp_process+0x7d0>)
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	f003 0310 	and.w	r3, r3, #16
 8016658:	2b00      	cmp	r3, #0
 801665a:	d01f      	beq.n	801669c <tcp_process+0x7bc>
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016660:	4b14      	ldr	r3, [pc, #80]	; (80166b4 <tcp_process+0x7d4>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	429a      	cmp	r2, r3
 8016666:	d119      	bne.n	801669c <tcp_process+0x7bc>
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801666c:	2b00      	cmp	r3, #0
 801666e:	d115      	bne.n	801669c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016670:	4b11      	ldr	r3, [pc, #68]	; (80166b8 <tcp_process+0x7d8>)
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	f043 0310 	orr.w	r3, r3, #16
 8016678:	b2da      	uxtb	r2, r3
 801667a:	4b0f      	ldr	r3, [pc, #60]	; (80166b8 <tcp_process+0x7d8>)
 801667c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801667e:	e00d      	b.n	801669c <tcp_process+0x7bc>
    default:
      break;
 8016680:	bf00      	nop
 8016682:	e00c      	b.n	801669e <tcp_process+0x7be>
      break;
 8016684:	bf00      	nop
 8016686:	e00a      	b.n	801669e <tcp_process+0x7be>
      break;
 8016688:	bf00      	nop
 801668a:	e008      	b.n	801669e <tcp_process+0x7be>
      break;
 801668c:	bf00      	nop
 801668e:	e006      	b.n	801669e <tcp_process+0x7be>
      break;
 8016690:	bf00      	nop
 8016692:	e004      	b.n	801669e <tcp_process+0x7be>
      break;
 8016694:	bf00      	nop
 8016696:	e002      	b.n	801669e <tcp_process+0x7be>
      break;
 8016698:	bf00      	nop
 801669a:	e000      	b.n	801669e <tcp_process+0x7be>
      break;
 801669c:	bf00      	nop
  }
  return ERR_OK;
 801669e:	2300      	movs	r3, #0
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3724      	adds	r7, #36	; 0x24
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd90      	pop	{r4, r7, pc}
 80166a8:	2000c660 	.word	0x2000c660
 80166ac:	2000c674 	.word	0x2000c674
 80166b0:	20008600 	.word	0x20008600
 80166b4:	200085f8 	.word	0x200085f8
 80166b8:	20008601 	.word	0x20008601
 80166bc:	2000c664 	.word	0x2000c664

080166c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80166c0:	b590      	push	{r4, r7, lr}
 80166c2:	b085      	sub	sp, #20
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d106      	bne.n	80166de <tcp_oos_insert_segment+0x1e>
 80166d0:	4b3b      	ldr	r3, [pc, #236]	; (80167c0 <tcp_oos_insert_segment+0x100>)
 80166d2:	f240 421f 	movw	r2, #1055	; 0x41f
 80166d6:	493b      	ldr	r1, [pc, #236]	; (80167c4 <tcp_oos_insert_segment+0x104>)
 80166d8:	483b      	ldr	r0, [pc, #236]	; (80167c8 <tcp_oos_insert_segment+0x108>)
 80166da:	f004 fa63 	bl	801aba4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	899b      	ldrh	r3, [r3, #12]
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	4618      	mov	r0, r3
 80166e8:	f7fb f882 	bl	80117f0 <lwip_htons>
 80166ec:	4603      	mov	r3, r0
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	f003 0301 	and.w	r3, r3, #1
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d028      	beq.n	801674a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80166f8:	6838      	ldr	r0, [r7, #0]
 80166fa:	f7fe f995 	bl	8014a28 <tcp_segs_free>
    next = NULL;
 80166fe:	2300      	movs	r3, #0
 8016700:	603b      	str	r3, [r7, #0]
 8016702:	e056      	b.n	80167b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	899b      	ldrh	r3, [r3, #12]
 801670a:	b29b      	uxth	r3, r3
 801670c:	4618      	mov	r0, r3
 801670e:	f7fb f86f 	bl	80117f0 <lwip_htons>
 8016712:	4603      	mov	r3, r0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	f003 0301 	and.w	r3, r3, #1
 801671a:	2b00      	cmp	r3, #0
 801671c:	d00d      	beq.n	801673a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	68db      	ldr	r3, [r3, #12]
 8016722:	899b      	ldrh	r3, [r3, #12]
 8016724:	b29c      	uxth	r4, r3
 8016726:	2001      	movs	r0, #1
 8016728:	f7fb f862 	bl	80117f0 <lwip_htons>
 801672c:	4603      	mov	r3, r0
 801672e:	461a      	mov	r2, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	68db      	ldr	r3, [r3, #12]
 8016734:	4322      	orrs	r2, r4
 8016736:	b292      	uxth	r2, r2
 8016738:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016744:	68f8      	ldr	r0, [r7, #12]
 8016746:	f7fe f984 	bl	8014a52 <tcp_seg_free>
    while (next &&
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d00e      	beq.n	801676e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	891b      	ldrh	r3, [r3, #8]
 8016754:	461a      	mov	r2, r3
 8016756:	4b1d      	ldr	r3, [pc, #116]	; (80167cc <tcp_oos_insert_segment+0x10c>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	441a      	add	r2, r3
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	68db      	ldr	r3, [r3, #12]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	6839      	ldr	r1, [r7, #0]
 8016764:	8909      	ldrh	r1, [r1, #8]
 8016766:	440b      	add	r3, r1
 8016768:	1ad3      	subs	r3, r2, r3
    while (next &&
 801676a:	2b00      	cmp	r3, #0
 801676c:	daca      	bge.n	8016704 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d01e      	beq.n	80167b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	891b      	ldrh	r3, [r3, #8]
 8016778:	461a      	mov	r2, r3
 801677a:	4b14      	ldr	r3, [pc, #80]	; (80167cc <tcp_oos_insert_segment+0x10c>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	441a      	add	r2, r3
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	68db      	ldr	r3, [r3, #12]
 8016784:	685b      	ldr	r3, [r3, #4]
 8016786:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016788:	2b00      	cmp	r3, #0
 801678a:	dd12      	ble.n	80167b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	68db      	ldr	r3, [r3, #12]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	b29a      	uxth	r2, r3
 8016794:	4b0d      	ldr	r3, [pc, #52]	; (80167cc <tcp_oos_insert_segment+0x10c>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	b29b      	uxth	r3, r3
 801679a:	1ad3      	subs	r3, r2, r3
 801679c:	b29a      	uxth	r2, r3
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	685a      	ldr	r2, [r3, #4]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	891b      	ldrh	r3, [r3, #8]
 80167aa:	4619      	mov	r1, r3
 80167ac:	4610      	mov	r0, r2
 80167ae:	f7fc fb01 	bl	8012db4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	683a      	ldr	r2, [r7, #0]
 80167b6:	601a      	str	r2, [r3, #0]
}
 80167b8:	bf00      	nop
 80167ba:	3714      	adds	r7, #20
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd90      	pop	{r4, r7, pc}
 80167c0:	0801f470 	.word	0x0801f470
 80167c4:	0801f7b0 	.word	0x0801f7b0
 80167c8:	0801f53c 	.word	0x0801f53c
 80167cc:	200085f4 	.word	0x200085f4

080167d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80167d0:	b5b0      	push	{r4, r5, r7, lr}
 80167d2:	b086      	sub	sp, #24
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	607a      	str	r2, [r7, #4]
 80167dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80167de:	e03e      	b.n	801685e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	685b      	ldr	r3, [r3, #4]
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7fc fd26 	bl	8013240 <pbuf_clen>
 80167f4:	4603      	mov	r3, r0
 80167f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167fe:	8a7a      	ldrh	r2, [r7, #18]
 8016800:	429a      	cmp	r2, r3
 8016802:	d906      	bls.n	8016812 <tcp_free_acked_segments+0x42>
 8016804:	4b2a      	ldr	r3, [pc, #168]	; (80168b0 <tcp_free_acked_segments+0xe0>)
 8016806:	f240 4257 	movw	r2, #1111	; 0x457
 801680a:	492a      	ldr	r1, [pc, #168]	; (80168b4 <tcp_free_acked_segments+0xe4>)
 801680c:	482a      	ldr	r0, [pc, #168]	; (80168b8 <tcp_free_acked_segments+0xe8>)
 801680e:	f004 f9c9 	bl	801aba4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016818:	8a7b      	ldrh	r3, [r7, #18]
 801681a:	1ad3      	subs	r3, r2, r3
 801681c:	b29a      	uxth	r2, r3
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016824:	697b      	ldr	r3, [r7, #20]
 8016826:	891a      	ldrh	r2, [r3, #8]
 8016828:	4b24      	ldr	r3, [pc, #144]	; (80168bc <tcp_free_acked_segments+0xec>)
 801682a:	881b      	ldrh	r3, [r3, #0]
 801682c:	4413      	add	r3, r2
 801682e:	b29a      	uxth	r2, r3
 8016830:	4b22      	ldr	r3, [pc, #136]	; (80168bc <tcp_free_acked_segments+0xec>)
 8016832:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016834:	6978      	ldr	r0, [r7, #20]
 8016836:	f7fe f90c 	bl	8014a52 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016840:	2b00      	cmp	r3, #0
 8016842:	d00c      	beq.n	801685e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d109      	bne.n	801685e <tcp_free_acked_segments+0x8e>
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d106      	bne.n	801685e <tcp_free_acked_segments+0x8e>
 8016850:	4b17      	ldr	r3, [pc, #92]	; (80168b0 <tcp_free_acked_segments+0xe0>)
 8016852:	f240 4261 	movw	r2, #1121	; 0x461
 8016856:	491a      	ldr	r1, [pc, #104]	; (80168c0 <tcp_free_acked_segments+0xf0>)
 8016858:	4817      	ldr	r0, [pc, #92]	; (80168b8 <tcp_free_acked_segments+0xe8>)
 801685a:	f004 f9a3 	bl	801aba4 <iprintf>
  while (seg_list != NULL &&
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d020      	beq.n	80168a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	68db      	ldr	r3, [r3, #12]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	4618      	mov	r0, r3
 801686c:	f7fa ffd5 	bl	801181a <lwip_htonl>
 8016870:	4604      	mov	r4, r0
 8016872:	68bb      	ldr	r3, [r7, #8]
 8016874:	891b      	ldrh	r3, [r3, #8]
 8016876:	461d      	mov	r5, r3
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	68db      	ldr	r3, [r3, #12]
 801687c:	899b      	ldrh	r3, [r3, #12]
 801687e:	b29b      	uxth	r3, r3
 8016880:	4618      	mov	r0, r3
 8016882:	f7fa ffb5 	bl	80117f0 <lwip_htons>
 8016886:	4603      	mov	r3, r0
 8016888:	b2db      	uxtb	r3, r3
 801688a:	f003 0303 	and.w	r3, r3, #3
 801688e:	2b00      	cmp	r3, #0
 8016890:	d001      	beq.n	8016896 <tcp_free_acked_segments+0xc6>
 8016892:	2301      	movs	r3, #1
 8016894:	e000      	b.n	8016898 <tcp_free_acked_segments+0xc8>
 8016896:	2300      	movs	r3, #0
 8016898:	442b      	add	r3, r5
 801689a:	18e2      	adds	r2, r4, r3
 801689c:	4b09      	ldr	r3, [pc, #36]	; (80168c4 <tcp_free_acked_segments+0xf4>)
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	dd9c      	ble.n	80167e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80168a6:	68bb      	ldr	r3, [r7, #8]
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3718      	adds	r7, #24
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bdb0      	pop	{r4, r5, r7, pc}
 80168b0:	0801f470 	.word	0x0801f470
 80168b4:	0801f7d8 	.word	0x0801f7d8
 80168b8:	0801f53c 	.word	0x0801f53c
 80168bc:	200085fc 	.word	0x200085fc
 80168c0:	0801f800 	.word	0x0801f800
 80168c4:	200085f8 	.word	0x200085f8

080168c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80168c8:	b5b0      	push	{r4, r5, r7, lr}
 80168ca:	b094      	sub	sp, #80	; 0x50
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80168d0:	2300      	movs	r3, #0
 80168d2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d106      	bne.n	80168e8 <tcp_receive+0x20>
 80168da:	4ba6      	ldr	r3, [pc, #664]	; (8016b74 <tcp_receive+0x2ac>)
 80168dc:	f240 427b 	movw	r2, #1147	; 0x47b
 80168e0:	49a5      	ldr	r1, [pc, #660]	; (8016b78 <tcp_receive+0x2b0>)
 80168e2:	48a6      	ldr	r0, [pc, #664]	; (8016b7c <tcp_receive+0x2b4>)
 80168e4:	f004 f95e 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	7d1b      	ldrb	r3, [r3, #20]
 80168ec:	2b03      	cmp	r3, #3
 80168ee:	d806      	bhi.n	80168fe <tcp_receive+0x36>
 80168f0:	4ba0      	ldr	r3, [pc, #640]	; (8016b74 <tcp_receive+0x2ac>)
 80168f2:	f240 427c 	movw	r2, #1148	; 0x47c
 80168f6:	49a2      	ldr	r1, [pc, #648]	; (8016b80 <tcp_receive+0x2b8>)
 80168f8:	48a0      	ldr	r0, [pc, #640]	; (8016b7c <tcp_receive+0x2b4>)
 80168fa:	f004 f953 	bl	801aba4 <iprintf>

  if (flags & TCP_ACK) {
 80168fe:	4ba1      	ldr	r3, [pc, #644]	; (8016b84 <tcp_receive+0x2bc>)
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	f003 0310 	and.w	r3, r3, #16
 8016906:	2b00      	cmp	r3, #0
 8016908:	f000 8263 	beq.w	8016dd2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016912:	461a      	mov	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016918:	4413      	add	r3, r2
 801691a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016920:	4b99      	ldr	r3, [pc, #612]	; (8016b88 <tcp_receive+0x2c0>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	1ad3      	subs	r3, r2, r3
 8016926:	2b00      	cmp	r3, #0
 8016928:	db1b      	blt.n	8016962 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801692e:	4b96      	ldr	r3, [pc, #600]	; (8016b88 <tcp_receive+0x2c0>)
 8016930:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016932:	429a      	cmp	r2, r3
 8016934:	d106      	bne.n	8016944 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801693a:	4b94      	ldr	r3, [pc, #592]	; (8016b8c <tcp_receive+0x2c4>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	1ad3      	subs	r3, r2, r3
 8016940:	2b00      	cmp	r3, #0
 8016942:	db0e      	blt.n	8016962 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016948:	4b90      	ldr	r3, [pc, #576]	; (8016b8c <tcp_receive+0x2c4>)
 801694a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801694c:	429a      	cmp	r2, r3
 801694e:	d125      	bne.n	801699c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016950:	4b8f      	ldr	r3, [pc, #572]	; (8016b90 <tcp_receive+0x2c8>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	89db      	ldrh	r3, [r3, #14]
 8016956:	b29a      	uxth	r2, r3
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801695e:	429a      	cmp	r2, r3
 8016960:	d91c      	bls.n	801699c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016962:	4b8b      	ldr	r3, [pc, #556]	; (8016b90 <tcp_receive+0x2c8>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	89db      	ldrh	r3, [r3, #14]
 8016968:	b29a      	uxth	r2, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801697c:	429a      	cmp	r2, r3
 801697e:	d205      	bcs.n	801698c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801698c:	4b7e      	ldr	r3, [pc, #504]	; (8016b88 <tcp_receive+0x2c0>)
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016994:	4b7d      	ldr	r3, [pc, #500]	; (8016b8c <tcp_receive+0x2c4>)
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801699c:	4b7b      	ldr	r3, [pc, #492]	; (8016b8c <tcp_receive+0x2c4>)
 801699e:	681a      	ldr	r2, [r3, #0]
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	dc58      	bgt.n	8016a5c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80169aa:	4b7a      	ldr	r3, [pc, #488]	; (8016b94 <tcp_receive+0x2cc>)
 80169ac:	881b      	ldrh	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d14b      	bne.n	8016a4a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169b6:	687a      	ldr	r2, [r7, #4]
 80169b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80169bc:	4413      	add	r3, r2
 80169be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d142      	bne.n	8016a4a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	db3d      	blt.n	8016a4a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80169d2:	4b6e      	ldr	r3, [pc, #440]	; (8016b8c <tcp_receive+0x2c4>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d137      	bne.n	8016a4a <tcp_receive+0x182>
              found_dupack = 1;
 80169da:	2301      	movs	r3, #1
 80169dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169e4:	2bff      	cmp	r3, #255	; 0xff
 80169e6:	d007      	beq.n	80169f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169ee:	3301      	adds	r3, #1
 80169f0:	b2da      	uxtb	r2, r3
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169fe:	2b03      	cmp	r3, #3
 8016a00:	d91b      	bls.n	8016a3a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a0c:	4413      	add	r3, r2
 8016a0e:	b29a      	uxth	r2, r3
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d30a      	bcc.n	8016a30 <tcp_receive+0x168>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a24:	4413      	add	r3, r2
 8016a26:	b29a      	uxth	r2, r3
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016a2e:	e004      	b.n	8016a3a <tcp_receive+0x172>
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016a40:	2b02      	cmp	r3, #2
 8016a42:	d902      	bls.n	8016a4a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f002 fb41 	bl	80190cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	f040 8160 	bne.w	8016d12 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	2200      	movs	r2, #0
 8016a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016a5a:	e15a      	b.n	8016d12 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016a5c:	4b4b      	ldr	r3, [pc, #300]	; (8016b8c <tcp_receive+0x2c4>)
 8016a5e:	681a      	ldr	r2, [r3, #0]
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a64:	1ad3      	subs	r3, r2, r3
 8016a66:	3b01      	subs	r3, #1
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f2c0 814d 	blt.w	8016d08 <tcp_receive+0x440>
 8016a6e:	4b47      	ldr	r3, [pc, #284]	; (8016b8c <tcp_receive+0x2c4>)
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a76:	1ad3      	subs	r3, r2, r3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	f300 8145 	bgt.w	8016d08 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	8b5b      	ldrh	r3, [r3, #26]
 8016a82:	f003 0304 	and.w	r3, r3, #4
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d010      	beq.n	8016aac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	8b5b      	ldrh	r3, [r3, #26]
 8016a8e:	f023 0304 	bic.w	r3, r3, #4
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2200      	movs	r2, #0
 8016ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016aba:	10db      	asrs	r3, r3, #3
 8016abc:	b21b      	sxth	r3, r3
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	4413      	add	r3, r2
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	b21a      	sxth	r2, r3
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016ad4:	4b2d      	ldr	r3, [pc, #180]	; (8016b8c <tcp_receive+0x2c4>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	b29a      	uxth	r2, r3
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	1ad3      	subs	r3, r2, r3
 8016ae2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016aec:	4b27      	ldr	r3, [pc, #156]	; (8016b8c <tcp_receive+0x2c4>)
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	7d1b      	ldrb	r3, [r3, #20]
 8016af8:	2b03      	cmp	r3, #3
 8016afa:	f240 8096 	bls.w	8016c2a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d244      	bcs.n	8016b98 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	8b5b      	ldrh	r3, [r3, #26]
 8016b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d001      	beq.n	8016b1e <tcp_receive+0x256>
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e000      	b.n	8016b20 <tcp_receive+0x258>
 8016b1e:	2302      	movs	r3, #2
 8016b20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016b24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016b28:	b29a      	uxth	r2, r3
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b2e:	fb12 f303 	smulbb	r3, r2, r3
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016b36:	4293      	cmp	r3, r2
 8016b38:	bf28      	it	cs
 8016b3a:	4613      	movcs	r3, r2
 8016b3c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b46:	4413      	add	r3, r2
 8016b48:	b29a      	uxth	r2, r3
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b50:	429a      	cmp	r2, r3
 8016b52:	d309      	bcc.n	8016b68 <tcp_receive+0x2a0>
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b5c:	4413      	add	r3, r2
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016b66:	e060      	b.n	8016c2a <tcp_receive+0x362>
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016b72:	e05a      	b.n	8016c2a <tcp_receive+0x362>
 8016b74:	0801f470 	.word	0x0801f470
 8016b78:	0801f820 	.word	0x0801f820
 8016b7c:	0801f53c 	.word	0x0801f53c
 8016b80:	0801f83c 	.word	0x0801f83c
 8016b84:	20008600 	.word	0x20008600
 8016b88:	200085f4 	.word	0x200085f4
 8016b8c:	200085f8 	.word	0x200085f8
 8016b90:	200085e4 	.word	0x200085e4
 8016b94:	200085fe 	.word	0x200085fe
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016b9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016ba0:	4413      	add	r3, r2
 8016ba2:	b29a      	uxth	r2, r3
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016baa:	429a      	cmp	r2, r3
 8016bac:	d309      	bcc.n	8016bc2 <tcp_receive+0x2fa>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016bb6:	4413      	add	r3, r2
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016bc0:	e004      	b.n	8016bcc <tcp_receive+0x304>
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d326      	bcc.n	8016c2a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016be8:	1ad3      	subs	r3, r2, r3
 8016bea:	b29a      	uxth	r2, r3
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016bfc:	4413      	add	r3, r2
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d30a      	bcc.n	8016c20 <tcp_receive+0x358>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c14:	4413      	add	r3, r2
 8016c16:	b29a      	uxth	r2, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016c1e:	e004      	b.n	8016c2a <tcp_receive+0x362>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c32:	4a98      	ldr	r2, [pc, #608]	; (8016e94 <tcp_receive+0x5cc>)
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f7ff fdcb 	bl	80167d0 <tcp_free_acked_segments>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c48:	4a93      	ldr	r2, [pc, #588]	; (8016e98 <tcp_receive+0x5d0>)
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7ff fdc0 	bl	80167d0 <tcp_free_acked_segments>
 8016c50:	4602      	mov	r2, r0
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d104      	bne.n	8016c68 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c64:	861a      	strh	r2, [r3, #48]	; 0x30
 8016c66:	e002      	b.n	8016c6e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2200      	movs	r2, #0
 8016c72:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d103      	bne.n	8016c84 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016c8a:	4b84      	ldr	r3, [pc, #528]	; (8016e9c <tcp_receive+0x5d4>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	4413      	add	r3, r2
 8016c90:	b29a      	uxth	r2, r3
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	8b5b      	ldrh	r3, [r3, #26]
 8016c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d035      	beq.n	8016d10 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d118      	bne.n	8016cde <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00c      	beq.n	8016cce <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cbc:	68db      	ldr	r3, [r3, #12]
 8016cbe:	685b      	ldr	r3, [r3, #4]
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fa fdaa 	bl	801181a <lwip_htonl>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	dc20      	bgt.n	8016d10 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	8b5b      	ldrh	r3, [r3, #26]
 8016cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016cd6:	b29a      	uxth	r2, r3
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016cdc:	e018      	b.n	8016d10 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7fa fd95 	bl	801181a <lwip_htonl>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	1ae3      	subs	r3, r4, r3
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	dc0b      	bgt.n	8016d10 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	8b5b      	ldrh	r3, [r3, #26]
 8016cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016d00:	b29a      	uxth	r2, r3
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016d06:	e003      	b.n	8016d10 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f002 fbcd 	bl	80194a8 <tcp_send_empty_ack>
 8016d0e:	e000      	b.n	8016d12 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016d10:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d05b      	beq.n	8016dd2 <tcp_receive+0x50a>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d1e:	4b60      	ldr	r3, [pc, #384]	; (8016ea0 <tcp_receive+0x5d8>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	1ad3      	subs	r3, r2, r3
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	da54      	bge.n	8016dd2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016d28:	4b5e      	ldr	r3, [pc, #376]	; (8016ea4 <tcp_receive+0x5dc>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d32:	b29b      	uxth	r3, r3
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016d3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d46:	10db      	asrs	r3, r3, #3
 8016d48:	b21b      	sxth	r3, r3
 8016d4a:	b29b      	uxth	r3, r3
 8016d4c:	1ad3      	subs	r3, r2, r3
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d5a:	b29a      	uxth	r2, r3
 8016d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d60:	4413      	add	r3, r2
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	b21a      	sxth	r2, r3
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016d6a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	da05      	bge.n	8016d7e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8016d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d76:	425b      	negs	r3, r3
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016d7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d88:	109b      	asrs	r3, r3, #2
 8016d8a:	b21b      	sxth	r3, r3
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	1ad3      	subs	r3, r2, r3
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016da2:	4413      	add	r3, r2
 8016da4:	b29b      	uxth	r3, r3
 8016da6:	b21a      	sxth	r2, r3
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016db2:	10db      	asrs	r3, r3, #3
 8016db4:	b21b      	sxth	r3, r3
 8016db6:	b29a      	uxth	r2, r3
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	4413      	add	r3, r2
 8016dc2:	b29b      	uxth	r3, r3
 8016dc4:	b21a      	sxth	r2, r3
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016dd2:	4b35      	ldr	r3, [pc, #212]	; (8016ea8 <tcp_receive+0x5e0>)
 8016dd4:	881b      	ldrh	r3, [r3, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f000 84e1 	beq.w	801779e <tcp_receive+0xed6>
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	7d1b      	ldrb	r3, [r3, #20]
 8016de0:	2b06      	cmp	r3, #6
 8016de2:	f200 84dc 	bhi.w	801779e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dea:	4b30      	ldr	r3, [pc, #192]	; (8016eac <tcp_receive+0x5e4>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	1ad3      	subs	r3, r2, r3
 8016df0:	3b01      	subs	r3, #1
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	f2c0 808e 	blt.w	8016f14 <tcp_receive+0x64c>
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dfc:	4b2a      	ldr	r3, [pc, #168]	; (8016ea8 <tcp_receive+0x5e0>)
 8016dfe:	881b      	ldrh	r3, [r3, #0]
 8016e00:	4619      	mov	r1, r3
 8016e02:	4b2a      	ldr	r3, [pc, #168]	; (8016eac <tcp_receive+0x5e4>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	440b      	add	r3, r1
 8016e08:	1ad3      	subs	r3, r2, r3
 8016e0a:	3301      	adds	r3, #1
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	f300 8081 	bgt.w	8016f14 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016e12:	4b27      	ldr	r3, [pc, #156]	; (8016eb0 <tcp_receive+0x5e8>)
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016e1c:	4b23      	ldr	r3, [pc, #140]	; (8016eac <tcp_receive+0x5e4>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	1ad3      	subs	r3, r2, r3
 8016e22:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016e24:	4b22      	ldr	r3, [pc, #136]	; (8016eb0 <tcp_receive+0x5e8>)
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d106      	bne.n	8016e3a <tcp_receive+0x572>
 8016e2c:	4b21      	ldr	r3, [pc, #132]	; (8016eb4 <tcp_receive+0x5ec>)
 8016e2e:	f240 5294 	movw	r2, #1428	; 0x594
 8016e32:	4921      	ldr	r1, [pc, #132]	; (8016eb8 <tcp_receive+0x5f0>)
 8016e34:	4821      	ldr	r0, [pc, #132]	; (8016ebc <tcp_receive+0x5f4>)
 8016e36:	f003 feb5 	bl	801aba4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d906      	bls.n	8016e52 <tcp_receive+0x58a>
 8016e44:	4b1b      	ldr	r3, [pc, #108]	; (8016eb4 <tcp_receive+0x5ec>)
 8016e46:	f240 5295 	movw	r2, #1429	; 0x595
 8016e4a:	491d      	ldr	r1, [pc, #116]	; (8016ec0 <tcp_receive+0x5f8>)
 8016e4c:	481b      	ldr	r0, [pc, #108]	; (8016ebc <tcp_receive+0x5f4>)
 8016e4e:	f003 fea9 	bl	801aba4 <iprintf>
      off = (u16_t)off32;
 8016e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016e58:	4b15      	ldr	r3, [pc, #84]	; (8016eb0 <tcp_receive+0x5e8>)
 8016e5a:	685b      	ldr	r3, [r3, #4]
 8016e5c:	891b      	ldrh	r3, [r3, #8]
 8016e5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d906      	bls.n	8016e74 <tcp_receive+0x5ac>
 8016e66:	4b13      	ldr	r3, [pc, #76]	; (8016eb4 <tcp_receive+0x5ec>)
 8016e68:	f240 5297 	movw	r2, #1431	; 0x597
 8016e6c:	4915      	ldr	r1, [pc, #84]	; (8016ec4 <tcp_receive+0x5fc>)
 8016e6e:	4813      	ldr	r0, [pc, #76]	; (8016ebc <tcp_receive+0x5f4>)
 8016e70:	f003 fe98 	bl	801aba4 <iprintf>
      inseg.len -= off;
 8016e74:	4b0e      	ldr	r3, [pc, #56]	; (8016eb0 <tcp_receive+0x5e8>)
 8016e76:	891a      	ldrh	r2, [r3, #8]
 8016e78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	4b0b      	ldr	r3, [pc, #44]	; (8016eb0 <tcp_receive+0x5e8>)
 8016e82:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016e84:	4b0a      	ldr	r3, [pc, #40]	; (8016eb0 <tcp_receive+0x5e8>)
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	891a      	ldrh	r2, [r3, #8]
 8016e8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e8e:	1ad3      	subs	r3, r2, r3
 8016e90:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016e92:	e029      	b.n	8016ee8 <tcp_receive+0x620>
 8016e94:	0801f858 	.word	0x0801f858
 8016e98:	0801f860 	.word	0x0801f860
 8016e9c:	200085fc 	.word	0x200085fc
 8016ea0:	200085f8 	.word	0x200085f8
 8016ea4:	2000c668 	.word	0x2000c668
 8016ea8:	200085fe 	.word	0x200085fe
 8016eac:	200085f4 	.word	0x200085f4
 8016eb0:	200085d4 	.word	0x200085d4
 8016eb4:	0801f470 	.word	0x0801f470
 8016eb8:	0801f868 	.word	0x0801f868
 8016ebc:	0801f53c 	.word	0x0801f53c
 8016ec0:	0801f878 	.word	0x0801f878
 8016ec4:	0801f888 	.word	0x0801f888
        off -= p->len;
 8016ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eca:	895b      	ldrh	r3, [r3, #10]
 8016ecc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ed0:	1ad3      	subs	r3, r2, r3
 8016ed2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ed8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016eda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ede:	2200      	movs	r2, #0
 8016ee0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eea:	895b      	ldrh	r3, [r3, #10]
 8016eec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d8e9      	bhi.n	8016ec8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016ef4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ef8:	4619      	mov	r1, r3
 8016efa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016efc:	f7fc f85a 	bl	8012fb4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f04:	4a91      	ldr	r2, [pc, #580]	; (801714c <tcp_receive+0x884>)
 8016f06:	6013      	str	r3, [r2, #0]
 8016f08:	4b91      	ldr	r3, [pc, #580]	; (8017150 <tcp_receive+0x888>)
 8016f0a:	68db      	ldr	r3, [r3, #12]
 8016f0c:	4a8f      	ldr	r2, [pc, #572]	; (801714c <tcp_receive+0x884>)
 8016f0e:	6812      	ldr	r2, [r2, #0]
 8016f10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016f12:	e00d      	b.n	8016f30 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016f14:	4b8d      	ldr	r3, [pc, #564]	; (801714c <tcp_receive+0x884>)
 8016f16:	681a      	ldr	r2, [r3, #0]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f1c:	1ad3      	subs	r3, r2, r3
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	da06      	bge.n	8016f30 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	8b5b      	ldrh	r3, [r3, #26]
 8016f26:	f043 0302 	orr.w	r3, r3, #2
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016f30:	4b86      	ldr	r3, [pc, #536]	; (801714c <tcp_receive+0x884>)
 8016f32:	681a      	ldr	r2, [r3, #0]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f38:	1ad3      	subs	r3, r2, r3
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	f2c0 842a 	blt.w	8017794 <tcp_receive+0xecc>
 8016f40:	4b82      	ldr	r3, [pc, #520]	; (801714c <tcp_receive+0x884>)
 8016f42:	681a      	ldr	r2, [r3, #0]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f48:	6879      	ldr	r1, [r7, #4]
 8016f4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016f4c:	440b      	add	r3, r1
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	3301      	adds	r3, #1
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	f300 841e 	bgt.w	8017794 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f5c:	4b7b      	ldr	r3, [pc, #492]	; (801714c <tcp_receive+0x884>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	429a      	cmp	r2, r3
 8016f62:	f040 829a 	bne.w	801749a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016f66:	4b7a      	ldr	r3, [pc, #488]	; (8017150 <tcp_receive+0x888>)
 8016f68:	891c      	ldrh	r4, [r3, #8]
 8016f6a:	4b79      	ldr	r3, [pc, #484]	; (8017150 <tcp_receive+0x888>)
 8016f6c:	68db      	ldr	r3, [r3, #12]
 8016f6e:	899b      	ldrh	r3, [r3, #12]
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7fa fc3c 	bl	80117f0 <lwip_htons>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	b2db      	uxtb	r3, r3
 8016f7c:	f003 0303 	and.w	r3, r3, #3
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d001      	beq.n	8016f88 <tcp_receive+0x6c0>
 8016f84:	2301      	movs	r3, #1
 8016f86:	e000      	b.n	8016f8a <tcp_receive+0x6c2>
 8016f88:	2300      	movs	r3, #0
 8016f8a:	4423      	add	r3, r4
 8016f8c:	b29a      	uxth	r2, r3
 8016f8e:	4b71      	ldr	r3, [pc, #452]	; (8017154 <tcp_receive+0x88c>)
 8016f90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f96:	4b6f      	ldr	r3, [pc, #444]	; (8017154 <tcp_receive+0x88c>)
 8016f98:	881b      	ldrh	r3, [r3, #0]
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	d275      	bcs.n	801708a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f9e:	4b6c      	ldr	r3, [pc, #432]	; (8017150 <tcp_receive+0x888>)
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	899b      	ldrh	r3, [r3, #12]
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7fa fc22 	bl	80117f0 <lwip_htons>
 8016fac:	4603      	mov	r3, r0
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	f003 0301 	and.w	r3, r3, #1
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d01f      	beq.n	8016ff8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016fb8:	4b65      	ldr	r3, [pc, #404]	; (8017150 <tcp_receive+0x888>)
 8016fba:	68db      	ldr	r3, [r3, #12]
 8016fbc:	899b      	ldrh	r3, [r3, #12]
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	b21b      	sxth	r3, r3
 8016fc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016fc6:	b21c      	sxth	r4, r3
 8016fc8:	4b61      	ldr	r3, [pc, #388]	; (8017150 <tcp_receive+0x888>)
 8016fca:	68db      	ldr	r3, [r3, #12]
 8016fcc:	899b      	ldrh	r3, [r3, #12]
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7fa fc0d 	bl	80117f0 <lwip_htons>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7fa fc04 	bl	80117f0 <lwip_htons>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	b21b      	sxth	r3, r3
 8016fec:	4323      	orrs	r3, r4
 8016fee:	b21a      	sxth	r2, r3
 8016ff0:	4b57      	ldr	r3, [pc, #348]	; (8017150 <tcp_receive+0x888>)
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	b292      	uxth	r2, r2
 8016ff6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016ffc:	4b54      	ldr	r3, [pc, #336]	; (8017150 <tcp_receive+0x888>)
 8016ffe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017000:	4b53      	ldr	r3, [pc, #332]	; (8017150 <tcp_receive+0x888>)
 8017002:	68db      	ldr	r3, [r3, #12]
 8017004:	899b      	ldrh	r3, [r3, #12]
 8017006:	b29b      	uxth	r3, r3
 8017008:	4618      	mov	r0, r3
 801700a:	f7fa fbf1 	bl	80117f0 <lwip_htons>
 801700e:	4603      	mov	r3, r0
 8017010:	b2db      	uxtb	r3, r3
 8017012:	f003 0302 	and.w	r3, r3, #2
 8017016:	2b00      	cmp	r3, #0
 8017018:	d005      	beq.n	8017026 <tcp_receive+0x75e>
            inseg.len -= 1;
 801701a:	4b4d      	ldr	r3, [pc, #308]	; (8017150 <tcp_receive+0x888>)
 801701c:	891b      	ldrh	r3, [r3, #8]
 801701e:	3b01      	subs	r3, #1
 8017020:	b29a      	uxth	r2, r3
 8017022:	4b4b      	ldr	r3, [pc, #300]	; (8017150 <tcp_receive+0x888>)
 8017024:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017026:	4b4a      	ldr	r3, [pc, #296]	; (8017150 <tcp_receive+0x888>)
 8017028:	685b      	ldr	r3, [r3, #4]
 801702a:	4a49      	ldr	r2, [pc, #292]	; (8017150 <tcp_receive+0x888>)
 801702c:	8912      	ldrh	r2, [r2, #8]
 801702e:	4611      	mov	r1, r2
 8017030:	4618      	mov	r0, r3
 8017032:	f7fb febf 	bl	8012db4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017036:	4b46      	ldr	r3, [pc, #280]	; (8017150 <tcp_receive+0x888>)
 8017038:	891c      	ldrh	r4, [r3, #8]
 801703a:	4b45      	ldr	r3, [pc, #276]	; (8017150 <tcp_receive+0x888>)
 801703c:	68db      	ldr	r3, [r3, #12]
 801703e:	899b      	ldrh	r3, [r3, #12]
 8017040:	b29b      	uxth	r3, r3
 8017042:	4618      	mov	r0, r3
 8017044:	f7fa fbd4 	bl	80117f0 <lwip_htons>
 8017048:	4603      	mov	r3, r0
 801704a:	b2db      	uxtb	r3, r3
 801704c:	f003 0303 	and.w	r3, r3, #3
 8017050:	2b00      	cmp	r3, #0
 8017052:	d001      	beq.n	8017058 <tcp_receive+0x790>
 8017054:	2301      	movs	r3, #1
 8017056:	e000      	b.n	801705a <tcp_receive+0x792>
 8017058:	2300      	movs	r3, #0
 801705a:	4423      	add	r3, r4
 801705c:	b29a      	uxth	r2, r3
 801705e:	4b3d      	ldr	r3, [pc, #244]	; (8017154 <tcp_receive+0x88c>)
 8017060:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017062:	4b3c      	ldr	r3, [pc, #240]	; (8017154 <tcp_receive+0x88c>)
 8017064:	881b      	ldrh	r3, [r3, #0]
 8017066:	461a      	mov	r2, r3
 8017068:	4b38      	ldr	r3, [pc, #224]	; (801714c <tcp_receive+0x884>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	441a      	add	r2, r3
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017072:	6879      	ldr	r1, [r7, #4]
 8017074:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017076:	440b      	add	r3, r1
 8017078:	429a      	cmp	r2, r3
 801707a:	d006      	beq.n	801708a <tcp_receive+0x7c2>
 801707c:	4b36      	ldr	r3, [pc, #216]	; (8017158 <tcp_receive+0x890>)
 801707e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8017082:	4936      	ldr	r1, [pc, #216]	; (801715c <tcp_receive+0x894>)
 8017084:	4836      	ldr	r0, [pc, #216]	; (8017160 <tcp_receive+0x898>)
 8017086:	f003 fd8d 	bl	801aba4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801708e:	2b00      	cmp	r3, #0
 8017090:	f000 80e7 	beq.w	8017262 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017094:	4b2e      	ldr	r3, [pc, #184]	; (8017150 <tcp_receive+0x888>)
 8017096:	68db      	ldr	r3, [r3, #12]
 8017098:	899b      	ldrh	r3, [r3, #12]
 801709a:	b29b      	uxth	r3, r3
 801709c:	4618      	mov	r0, r3
 801709e:	f7fa fba7 	bl	80117f0 <lwip_htons>
 80170a2:	4603      	mov	r3, r0
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	f003 0301 	and.w	r3, r3, #1
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d010      	beq.n	80170d0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80170ae:	e00a      	b.n	80170c6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80170c0:	68f8      	ldr	r0, [r7, #12]
 80170c2:	f7fd fcc6 	bl	8014a52 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d1f0      	bne.n	80170b0 <tcp_receive+0x7e8>
 80170ce:	e0c8      	b.n	8017262 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80170d6:	e052      	b.n	801717e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80170d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170da:	68db      	ldr	r3, [r3, #12]
 80170dc:	899b      	ldrh	r3, [r3, #12]
 80170de:	b29b      	uxth	r3, r3
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7fa fb85 	bl	80117f0 <lwip_htons>
 80170e6:	4603      	mov	r3, r0
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	f003 0301 	and.w	r3, r3, #1
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d03d      	beq.n	801716e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80170f2:	4b17      	ldr	r3, [pc, #92]	; (8017150 <tcp_receive+0x888>)
 80170f4:	68db      	ldr	r3, [r3, #12]
 80170f6:	899b      	ldrh	r3, [r3, #12]
 80170f8:	b29b      	uxth	r3, r3
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7fa fb78 	bl	80117f0 <lwip_htons>
 8017100:	4603      	mov	r3, r0
 8017102:	b2db      	uxtb	r3, r3
 8017104:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017108:	2b00      	cmp	r3, #0
 801710a:	d130      	bne.n	801716e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801710c:	4b10      	ldr	r3, [pc, #64]	; (8017150 <tcp_receive+0x888>)
 801710e:	68db      	ldr	r3, [r3, #12]
 8017110:	899b      	ldrh	r3, [r3, #12]
 8017112:	b29c      	uxth	r4, r3
 8017114:	2001      	movs	r0, #1
 8017116:	f7fa fb6b 	bl	80117f0 <lwip_htons>
 801711a:	4603      	mov	r3, r0
 801711c:	461a      	mov	r2, r3
 801711e:	4b0c      	ldr	r3, [pc, #48]	; (8017150 <tcp_receive+0x888>)
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	4322      	orrs	r2, r4
 8017124:	b292      	uxth	r2, r2
 8017126:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017128:	4b09      	ldr	r3, [pc, #36]	; (8017150 <tcp_receive+0x888>)
 801712a:	891c      	ldrh	r4, [r3, #8]
 801712c:	4b08      	ldr	r3, [pc, #32]	; (8017150 <tcp_receive+0x888>)
 801712e:	68db      	ldr	r3, [r3, #12]
 8017130:	899b      	ldrh	r3, [r3, #12]
 8017132:	b29b      	uxth	r3, r3
 8017134:	4618      	mov	r0, r3
 8017136:	f7fa fb5b 	bl	80117f0 <lwip_htons>
 801713a:	4603      	mov	r3, r0
 801713c:	b2db      	uxtb	r3, r3
 801713e:	f003 0303 	and.w	r3, r3, #3
 8017142:	2b00      	cmp	r3, #0
 8017144:	d00e      	beq.n	8017164 <tcp_receive+0x89c>
 8017146:	2301      	movs	r3, #1
 8017148:	e00d      	b.n	8017166 <tcp_receive+0x89e>
 801714a:	bf00      	nop
 801714c:	200085f4 	.word	0x200085f4
 8017150:	200085d4 	.word	0x200085d4
 8017154:	200085fe 	.word	0x200085fe
 8017158:	0801f470 	.word	0x0801f470
 801715c:	0801f898 	.word	0x0801f898
 8017160:	0801f53c 	.word	0x0801f53c
 8017164:	2300      	movs	r3, #0
 8017166:	4423      	add	r3, r4
 8017168:	b29a      	uxth	r2, r3
 801716a:	4b98      	ldr	r3, [pc, #608]	; (80173cc <tcp_receive+0xb04>)
 801716c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801716e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017170:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8017178:	6938      	ldr	r0, [r7, #16]
 801717a:	f7fd fc6a 	bl	8014a52 <tcp_seg_free>
            while (next &&
 801717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017180:	2b00      	cmp	r3, #0
 8017182:	d00e      	beq.n	80171a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017184:	4b91      	ldr	r3, [pc, #580]	; (80173cc <tcp_receive+0xb04>)
 8017186:	881b      	ldrh	r3, [r3, #0]
 8017188:	461a      	mov	r2, r3
 801718a:	4b91      	ldr	r3, [pc, #580]	; (80173d0 <tcp_receive+0xb08>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	441a      	add	r2, r3
 8017190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017192:	68db      	ldr	r3, [r3, #12]
 8017194:	685b      	ldr	r3, [r3, #4]
 8017196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017198:	8909      	ldrh	r1, [r1, #8]
 801719a:	440b      	add	r3, r1
 801719c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801719e:	2b00      	cmp	r3, #0
 80171a0:	da9a      	bge.n	80170d8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80171a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d059      	beq.n	801725c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80171a8:	4b88      	ldr	r3, [pc, #544]	; (80173cc <tcp_receive+0xb04>)
 80171aa:	881b      	ldrh	r3, [r3, #0]
 80171ac:	461a      	mov	r2, r3
 80171ae:	4b88      	ldr	r3, [pc, #544]	; (80173d0 <tcp_receive+0xb08>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	441a      	add	r2, r3
 80171b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171b6:	68db      	ldr	r3, [r3, #12]
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80171bc:	2b00      	cmp	r3, #0
 80171be:	dd4d      	ble.n	801725c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80171c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171c2:	68db      	ldr	r3, [r3, #12]
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	4b81      	ldr	r3, [pc, #516]	; (80173d0 <tcp_receive+0xb08>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	b29b      	uxth	r3, r3
 80171ce:	1ad3      	subs	r3, r2, r3
 80171d0:	b29a      	uxth	r2, r3
 80171d2:	4b80      	ldr	r3, [pc, #512]	; (80173d4 <tcp_receive+0xb0c>)
 80171d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80171d6:	4b7f      	ldr	r3, [pc, #508]	; (80173d4 <tcp_receive+0xb0c>)
 80171d8:	68db      	ldr	r3, [r3, #12]
 80171da:	899b      	ldrh	r3, [r3, #12]
 80171dc:	b29b      	uxth	r3, r3
 80171de:	4618      	mov	r0, r3
 80171e0:	f7fa fb06 	bl	80117f0 <lwip_htons>
 80171e4:	4603      	mov	r3, r0
 80171e6:	b2db      	uxtb	r3, r3
 80171e8:	f003 0302 	and.w	r3, r3, #2
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d005      	beq.n	80171fc <tcp_receive+0x934>
                inseg.len -= 1;
 80171f0:	4b78      	ldr	r3, [pc, #480]	; (80173d4 <tcp_receive+0xb0c>)
 80171f2:	891b      	ldrh	r3, [r3, #8]
 80171f4:	3b01      	subs	r3, #1
 80171f6:	b29a      	uxth	r2, r3
 80171f8:	4b76      	ldr	r3, [pc, #472]	; (80173d4 <tcp_receive+0xb0c>)
 80171fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80171fc:	4b75      	ldr	r3, [pc, #468]	; (80173d4 <tcp_receive+0xb0c>)
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	4a74      	ldr	r2, [pc, #464]	; (80173d4 <tcp_receive+0xb0c>)
 8017202:	8912      	ldrh	r2, [r2, #8]
 8017204:	4611      	mov	r1, r2
 8017206:	4618      	mov	r0, r3
 8017208:	f7fb fdd4 	bl	8012db4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801720c:	4b71      	ldr	r3, [pc, #452]	; (80173d4 <tcp_receive+0xb0c>)
 801720e:	891c      	ldrh	r4, [r3, #8]
 8017210:	4b70      	ldr	r3, [pc, #448]	; (80173d4 <tcp_receive+0xb0c>)
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	899b      	ldrh	r3, [r3, #12]
 8017216:	b29b      	uxth	r3, r3
 8017218:	4618      	mov	r0, r3
 801721a:	f7fa fae9 	bl	80117f0 <lwip_htons>
 801721e:	4603      	mov	r3, r0
 8017220:	b2db      	uxtb	r3, r3
 8017222:	f003 0303 	and.w	r3, r3, #3
 8017226:	2b00      	cmp	r3, #0
 8017228:	d001      	beq.n	801722e <tcp_receive+0x966>
 801722a:	2301      	movs	r3, #1
 801722c:	e000      	b.n	8017230 <tcp_receive+0x968>
 801722e:	2300      	movs	r3, #0
 8017230:	4423      	add	r3, r4
 8017232:	b29a      	uxth	r2, r3
 8017234:	4b65      	ldr	r3, [pc, #404]	; (80173cc <tcp_receive+0xb04>)
 8017236:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017238:	4b64      	ldr	r3, [pc, #400]	; (80173cc <tcp_receive+0xb04>)
 801723a:	881b      	ldrh	r3, [r3, #0]
 801723c:	461a      	mov	r2, r3
 801723e:	4b64      	ldr	r3, [pc, #400]	; (80173d0 <tcp_receive+0xb08>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	441a      	add	r2, r3
 8017244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	429a      	cmp	r2, r3
 801724c:	d006      	beq.n	801725c <tcp_receive+0x994>
 801724e:	4b62      	ldr	r3, [pc, #392]	; (80173d8 <tcp_receive+0xb10>)
 8017250:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017254:	4961      	ldr	r1, [pc, #388]	; (80173dc <tcp_receive+0xb14>)
 8017256:	4862      	ldr	r0, [pc, #392]	; (80173e0 <tcp_receive+0xb18>)
 8017258:	f003 fca4 	bl	801aba4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017260:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017262:	4b5a      	ldr	r3, [pc, #360]	; (80173cc <tcp_receive+0xb04>)
 8017264:	881b      	ldrh	r3, [r3, #0]
 8017266:	461a      	mov	r2, r3
 8017268:	4b59      	ldr	r3, [pc, #356]	; (80173d0 <tcp_receive+0xb08>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	441a      	add	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017276:	4b55      	ldr	r3, [pc, #340]	; (80173cc <tcp_receive+0xb04>)
 8017278:	881b      	ldrh	r3, [r3, #0]
 801727a:	429a      	cmp	r2, r3
 801727c:	d206      	bcs.n	801728c <tcp_receive+0x9c4>
 801727e:	4b56      	ldr	r3, [pc, #344]	; (80173d8 <tcp_receive+0xb10>)
 8017280:	f240 6207 	movw	r2, #1543	; 0x607
 8017284:	4957      	ldr	r1, [pc, #348]	; (80173e4 <tcp_receive+0xb1c>)
 8017286:	4856      	ldr	r0, [pc, #344]	; (80173e0 <tcp_receive+0xb18>)
 8017288:	f003 fc8c 	bl	801aba4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017290:	4b4e      	ldr	r3, [pc, #312]	; (80173cc <tcp_receive+0xb04>)
 8017292:	881b      	ldrh	r3, [r3, #0]
 8017294:	1ad3      	subs	r3, r2, r3
 8017296:	b29a      	uxth	r2, r3
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f7fc feaf 	bl	8014000 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80172a2:	4b4c      	ldr	r3, [pc, #304]	; (80173d4 <tcp_receive+0xb0c>)
 80172a4:	685b      	ldr	r3, [r3, #4]
 80172a6:	891b      	ldrh	r3, [r3, #8]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d006      	beq.n	80172ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80172ac:	4b49      	ldr	r3, [pc, #292]	; (80173d4 <tcp_receive+0xb0c>)
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	4a4d      	ldr	r2, [pc, #308]	; (80173e8 <tcp_receive+0xb20>)
 80172b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80172b4:	4b47      	ldr	r3, [pc, #284]	; (80173d4 <tcp_receive+0xb0c>)
 80172b6:	2200      	movs	r2, #0
 80172b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80172ba:	4b46      	ldr	r3, [pc, #280]	; (80173d4 <tcp_receive+0xb0c>)
 80172bc:	68db      	ldr	r3, [r3, #12]
 80172be:	899b      	ldrh	r3, [r3, #12]
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7fa fa94 	bl	80117f0 <lwip_htons>
 80172c8:	4603      	mov	r3, r0
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	f003 0301 	and.w	r3, r3, #1
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	f000 80b8 	beq.w	8017446 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80172d6:	4b45      	ldr	r3, [pc, #276]	; (80173ec <tcp_receive+0xb24>)
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	f043 0320 	orr.w	r3, r3, #32
 80172de:	b2da      	uxtb	r2, r3
 80172e0:	4b42      	ldr	r3, [pc, #264]	; (80173ec <tcp_receive+0xb24>)
 80172e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80172e4:	e0af      	b.n	8017446 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	4a36      	ldr	r2, [pc, #216]	; (80173d0 <tcp_receive+0xb08>)
 80172f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	891b      	ldrh	r3, [r3, #8]
 80172fc:	461c      	mov	r4, r3
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	68db      	ldr	r3, [r3, #12]
 8017302:	899b      	ldrh	r3, [r3, #12]
 8017304:	b29b      	uxth	r3, r3
 8017306:	4618      	mov	r0, r3
 8017308:	f7fa fa72 	bl	80117f0 <lwip_htons>
 801730c:	4603      	mov	r3, r0
 801730e:	b2db      	uxtb	r3, r3
 8017310:	f003 0303 	and.w	r3, r3, #3
 8017314:	2b00      	cmp	r3, #0
 8017316:	d001      	beq.n	801731c <tcp_receive+0xa54>
 8017318:	2301      	movs	r3, #1
 801731a:	e000      	b.n	801731e <tcp_receive+0xa56>
 801731c:	2300      	movs	r3, #0
 801731e:	191a      	adds	r2, r3, r4
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017324:	441a      	add	r2, r3
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801732e:	461c      	mov	r4, r3
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	891b      	ldrh	r3, [r3, #8]
 8017334:	461d      	mov	r5, r3
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	899b      	ldrh	r3, [r3, #12]
 801733c:	b29b      	uxth	r3, r3
 801733e:	4618      	mov	r0, r3
 8017340:	f7fa fa56 	bl	80117f0 <lwip_htons>
 8017344:	4603      	mov	r3, r0
 8017346:	b2db      	uxtb	r3, r3
 8017348:	f003 0303 	and.w	r3, r3, #3
 801734c:	2b00      	cmp	r3, #0
 801734e:	d001      	beq.n	8017354 <tcp_receive+0xa8c>
 8017350:	2301      	movs	r3, #1
 8017352:	e000      	b.n	8017356 <tcp_receive+0xa8e>
 8017354:	2300      	movs	r3, #0
 8017356:	442b      	add	r3, r5
 8017358:	429c      	cmp	r4, r3
 801735a:	d206      	bcs.n	801736a <tcp_receive+0xaa2>
 801735c:	4b1e      	ldr	r3, [pc, #120]	; (80173d8 <tcp_receive+0xb10>)
 801735e:	f240 622b 	movw	r2, #1579	; 0x62b
 8017362:	4923      	ldr	r1, [pc, #140]	; (80173f0 <tcp_receive+0xb28>)
 8017364:	481e      	ldr	r0, [pc, #120]	; (80173e0 <tcp_receive+0xb18>)
 8017366:	f003 fc1d 	bl	801aba4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801736a:	68bb      	ldr	r3, [r7, #8]
 801736c:	891b      	ldrh	r3, [r3, #8]
 801736e:	461c      	mov	r4, r3
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	68db      	ldr	r3, [r3, #12]
 8017374:	899b      	ldrh	r3, [r3, #12]
 8017376:	b29b      	uxth	r3, r3
 8017378:	4618      	mov	r0, r3
 801737a:	f7fa fa39 	bl	80117f0 <lwip_htons>
 801737e:	4603      	mov	r3, r0
 8017380:	b2db      	uxtb	r3, r3
 8017382:	f003 0303 	and.w	r3, r3, #3
 8017386:	2b00      	cmp	r3, #0
 8017388:	d001      	beq.n	801738e <tcp_receive+0xac6>
 801738a:	2301      	movs	r3, #1
 801738c:	e000      	b.n	8017390 <tcp_receive+0xac8>
 801738e:	2300      	movs	r3, #0
 8017390:	1919      	adds	r1, r3, r4
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017396:	b28b      	uxth	r3, r1
 8017398:	1ad3      	subs	r3, r2, r3
 801739a:	b29a      	uxth	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f7fc fe2d 	bl	8014000 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	891b      	ldrh	r3, [r3, #8]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d028      	beq.n	8017402 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80173b0:	4b0d      	ldr	r3, [pc, #52]	; (80173e8 <tcp_receive+0xb20>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d01d      	beq.n	80173f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80173b8:	4b0b      	ldr	r3, [pc, #44]	; (80173e8 <tcp_receive+0xb20>)
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	68bb      	ldr	r3, [r7, #8]
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	4619      	mov	r1, r3
 80173c2:	4610      	mov	r0, r2
 80173c4:	f7fb ff7c 	bl	80132c0 <pbuf_cat>
 80173c8:	e018      	b.n	80173fc <tcp_receive+0xb34>
 80173ca:	bf00      	nop
 80173cc:	200085fe 	.word	0x200085fe
 80173d0:	200085f4 	.word	0x200085f4
 80173d4:	200085d4 	.word	0x200085d4
 80173d8:	0801f470 	.word	0x0801f470
 80173dc:	0801f8d0 	.word	0x0801f8d0
 80173e0:	0801f53c 	.word	0x0801f53c
 80173e4:	0801f90c 	.word	0x0801f90c
 80173e8:	20008604 	.word	0x20008604
 80173ec:	20008601 	.word	0x20008601
 80173f0:	0801f92c 	.word	0x0801f92c
            } else {
              recv_data = cseg->p;
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	4a70      	ldr	r2, [pc, #448]	; (80175bc <tcp_receive+0xcf4>)
 80173fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	2200      	movs	r2, #0
 8017400:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	68db      	ldr	r3, [r3, #12]
 8017406:	899b      	ldrh	r3, [r3, #12]
 8017408:	b29b      	uxth	r3, r3
 801740a:	4618      	mov	r0, r3
 801740c:	f7fa f9f0 	bl	80117f0 <lwip_htons>
 8017410:	4603      	mov	r3, r0
 8017412:	b2db      	uxtb	r3, r3
 8017414:	f003 0301 	and.w	r3, r3, #1
 8017418:	2b00      	cmp	r3, #0
 801741a:	d00d      	beq.n	8017438 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801741c:	4b68      	ldr	r3, [pc, #416]	; (80175c0 <tcp_receive+0xcf8>)
 801741e:	781b      	ldrb	r3, [r3, #0]
 8017420:	f043 0320 	orr.w	r3, r3, #32
 8017424:	b2da      	uxtb	r2, r3
 8017426:	4b66      	ldr	r3, [pc, #408]	; (80175c0 <tcp_receive+0xcf8>)
 8017428:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	7d1b      	ldrb	r3, [r3, #20]
 801742e:	2b04      	cmp	r3, #4
 8017430:	d102      	bne.n	8017438 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2207      	movs	r2, #7
 8017436:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017438:	68bb      	ldr	r3, [r7, #8]
 801743a:	681a      	ldr	r2, [r3, #0]
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017440:	68b8      	ldr	r0, [r7, #8]
 8017442:	f7fd fb06 	bl	8014a52 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801744a:	2b00      	cmp	r3, #0
 801744c:	d008      	beq.n	8017460 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017452:	68db      	ldr	r3, [r3, #12]
 8017454:	685a      	ldr	r2, [r3, #4]
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801745a:	429a      	cmp	r2, r3
 801745c:	f43f af43 	beq.w	80172e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	8b5b      	ldrh	r3, [r3, #26]
 8017464:	f003 0301 	and.w	r3, r3, #1
 8017468:	2b00      	cmp	r3, #0
 801746a:	d00e      	beq.n	801748a <tcp_receive+0xbc2>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	8b5b      	ldrh	r3, [r3, #26]
 8017470:	f023 0301 	bic.w	r3, r3, #1
 8017474:	b29a      	uxth	r2, r3
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	835a      	strh	r2, [r3, #26]
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	8b5b      	ldrh	r3, [r3, #26]
 801747e:	f043 0302 	orr.w	r3, r3, #2
 8017482:	b29a      	uxth	r2, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017488:	e188      	b.n	801779c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	8b5b      	ldrh	r3, [r3, #26]
 801748e:	f043 0301 	orr.w	r3, r3, #1
 8017492:	b29a      	uxth	r2, r3
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017498:	e180      	b.n	801779c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d106      	bne.n	80174b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80174a2:	4848      	ldr	r0, [pc, #288]	; (80175c4 <tcp_receive+0xcfc>)
 80174a4:	f7fd faee 	bl	8014a84 <tcp_seg_copy>
 80174a8:	4602      	mov	r2, r0
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	675a      	str	r2, [r3, #116]	; 0x74
 80174ae:	e16d      	b.n	801778c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80174b0:	2300      	movs	r3, #0
 80174b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80174ba:	e157      	b.n	801776c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80174bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174be:	68db      	ldr	r3, [r3, #12]
 80174c0:	685a      	ldr	r2, [r3, #4]
 80174c2:	4b41      	ldr	r3, [pc, #260]	; (80175c8 <tcp_receive+0xd00>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	429a      	cmp	r2, r3
 80174c8:	d11d      	bne.n	8017506 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80174ca:	4b3e      	ldr	r3, [pc, #248]	; (80175c4 <tcp_receive+0xcfc>)
 80174cc:	891a      	ldrh	r2, [r3, #8]
 80174ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d0:	891b      	ldrh	r3, [r3, #8]
 80174d2:	429a      	cmp	r2, r3
 80174d4:	f240 814f 	bls.w	8017776 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80174d8:	483a      	ldr	r0, [pc, #232]	; (80175c4 <tcp_receive+0xcfc>)
 80174da:	f7fd fad3 	bl	8014a84 <tcp_seg_copy>
 80174de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f000 8149 	beq.w	801777a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80174e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d003      	beq.n	80174f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80174ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174f0:	697a      	ldr	r2, [r7, #20]
 80174f2:	601a      	str	r2, [r3, #0]
 80174f4:	e002      	b.n	80174fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	697a      	ldr	r2, [r7, #20]
 80174fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80174fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174fe:	6978      	ldr	r0, [r7, #20]
 8017500:	f7ff f8de 	bl	80166c0 <tcp_oos_insert_segment>
                }
                break;
 8017504:	e139      	b.n	801777a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017508:	2b00      	cmp	r3, #0
 801750a:	d117      	bne.n	801753c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801750c:	4b2e      	ldr	r3, [pc, #184]	; (80175c8 <tcp_receive+0xd00>)
 801750e:	681a      	ldr	r2, [r3, #0]
 8017510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017512:	68db      	ldr	r3, [r3, #12]
 8017514:	685b      	ldr	r3, [r3, #4]
 8017516:	1ad3      	subs	r3, r2, r3
 8017518:	2b00      	cmp	r3, #0
 801751a:	da57      	bge.n	80175cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801751c:	4829      	ldr	r0, [pc, #164]	; (80175c4 <tcp_receive+0xcfc>)
 801751e:	f7fd fab1 	bl	8014a84 <tcp_seg_copy>
 8017522:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017524:	69bb      	ldr	r3, [r7, #24]
 8017526:	2b00      	cmp	r3, #0
 8017528:	f000 8129 	beq.w	801777e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	69ba      	ldr	r2, [r7, #24]
 8017530:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017534:	69b8      	ldr	r0, [r7, #24]
 8017536:	f7ff f8c3 	bl	80166c0 <tcp_oos_insert_segment>
                  }
                  break;
 801753a:	e120      	b.n	801777e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801753c:	4b22      	ldr	r3, [pc, #136]	; (80175c8 <tcp_receive+0xd00>)
 801753e:	681a      	ldr	r2, [r3, #0]
 8017540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017542:	68db      	ldr	r3, [r3, #12]
 8017544:	685b      	ldr	r3, [r3, #4]
 8017546:	1ad3      	subs	r3, r2, r3
 8017548:	3b01      	subs	r3, #1
 801754a:	2b00      	cmp	r3, #0
 801754c:	db3e      	blt.n	80175cc <tcp_receive+0xd04>
 801754e:	4b1e      	ldr	r3, [pc, #120]	; (80175c8 <tcp_receive+0xd00>)
 8017550:	681a      	ldr	r2, [r3, #0]
 8017552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017554:	68db      	ldr	r3, [r3, #12]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	1ad3      	subs	r3, r2, r3
 801755a:	3301      	adds	r3, #1
 801755c:	2b00      	cmp	r3, #0
 801755e:	dc35      	bgt.n	80175cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017560:	4818      	ldr	r0, [pc, #96]	; (80175c4 <tcp_receive+0xcfc>)
 8017562:	f7fd fa8f 	bl	8014a84 <tcp_seg_copy>
 8017566:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017568:	69fb      	ldr	r3, [r7, #28]
 801756a:	2b00      	cmp	r3, #0
 801756c:	f000 8109 	beq.w	8017782 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017578:	8912      	ldrh	r2, [r2, #8]
 801757a:	441a      	add	r2, r3
 801757c:	4b12      	ldr	r3, [pc, #72]	; (80175c8 <tcp_receive+0xd00>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	1ad3      	subs	r3, r2, r3
 8017582:	2b00      	cmp	r3, #0
 8017584:	dd12      	ble.n	80175ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017586:	4b10      	ldr	r3, [pc, #64]	; (80175c8 <tcp_receive+0xd00>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	b29a      	uxth	r2, r3
 801758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801758e:	68db      	ldr	r3, [r3, #12]
 8017590:	685b      	ldr	r3, [r3, #4]
 8017592:	b29b      	uxth	r3, r3
 8017594:	1ad3      	subs	r3, r2, r3
 8017596:	b29a      	uxth	r2, r3
 8017598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801759a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801759e:	685a      	ldr	r2, [r3, #4]
 80175a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175a2:	891b      	ldrh	r3, [r3, #8]
 80175a4:	4619      	mov	r1, r3
 80175a6:	4610      	mov	r0, r2
 80175a8:	f7fb fc04 	bl	8012db4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80175ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175ae:	69fa      	ldr	r2, [r7, #28]
 80175b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80175b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80175b4:	69f8      	ldr	r0, [r7, #28]
 80175b6:	f7ff f883 	bl	80166c0 <tcp_oos_insert_segment>
                  }
                  break;
 80175ba:	e0e2      	b.n	8017782 <tcp_receive+0xeba>
 80175bc:	20008604 	.word	0x20008604
 80175c0:	20008601 	.word	0x20008601
 80175c4:	200085d4 	.word	0x200085d4
 80175c8:	200085f4 	.word	0x200085f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80175cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80175d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	f040 80c6 	bne.w	8017766 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80175da:	4b80      	ldr	r3, [pc, #512]	; (80177dc <tcp_receive+0xf14>)
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175e0:	68db      	ldr	r3, [r3, #12]
 80175e2:	685b      	ldr	r3, [r3, #4]
 80175e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f340 80bd 	ble.w	8017766 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80175ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ee:	68db      	ldr	r3, [r3, #12]
 80175f0:	899b      	ldrh	r3, [r3, #12]
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	4618      	mov	r0, r3
 80175f6:	f7fa f8fb 	bl	80117f0 <lwip_htons>
 80175fa:	4603      	mov	r3, r0
 80175fc:	b2db      	uxtb	r3, r3
 80175fe:	f003 0301 	and.w	r3, r3, #1
 8017602:	2b00      	cmp	r3, #0
 8017604:	f040 80bf 	bne.w	8017786 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017608:	4875      	ldr	r0, [pc, #468]	; (80177e0 <tcp_receive+0xf18>)
 801760a:	f7fd fa3b 	bl	8014a84 <tcp_seg_copy>
 801760e:	4602      	mov	r2, r0
 8017610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017612:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2b00      	cmp	r3, #0
 801761a:	f000 80b6 	beq.w	801778a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017620:	68db      	ldr	r3, [r3, #12]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017626:	8912      	ldrh	r2, [r2, #8]
 8017628:	441a      	add	r2, r3
 801762a:	4b6c      	ldr	r3, [pc, #432]	; (80177dc <tcp_receive+0xf14>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	1ad3      	subs	r3, r2, r3
 8017630:	2b00      	cmp	r3, #0
 8017632:	dd12      	ble.n	801765a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017634:	4b69      	ldr	r3, [pc, #420]	; (80177dc <tcp_receive+0xf14>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	b29a      	uxth	r2, r3
 801763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801763c:	68db      	ldr	r3, [r3, #12]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	b29b      	uxth	r3, r3
 8017642:	1ad3      	subs	r3, r2, r3
 8017644:	b29a      	uxth	r2, r3
 8017646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017648:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801764c:	685a      	ldr	r2, [r3, #4]
 801764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017650:	891b      	ldrh	r3, [r3, #8]
 8017652:	4619      	mov	r1, r3
 8017654:	4610      	mov	r0, r2
 8017656:	f7fb fbad 	bl	8012db4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801765a:	4b62      	ldr	r3, [pc, #392]	; (80177e4 <tcp_receive+0xf1c>)
 801765c:	881b      	ldrh	r3, [r3, #0]
 801765e:	461a      	mov	r2, r3
 8017660:	4b5e      	ldr	r3, [pc, #376]	; (80177dc <tcp_receive+0xf14>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	441a      	add	r2, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801766a:	6879      	ldr	r1, [r7, #4]
 801766c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801766e:	440b      	add	r3, r1
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	2b00      	cmp	r3, #0
 8017674:	f340 8089 	ble.w	801778a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	68db      	ldr	r3, [r3, #12]
 801767e:	899b      	ldrh	r3, [r3, #12]
 8017680:	b29b      	uxth	r3, r3
 8017682:	4618      	mov	r0, r3
 8017684:	f7fa f8b4 	bl	80117f0 <lwip_htons>
 8017688:	4603      	mov	r3, r0
 801768a:	b2db      	uxtb	r3, r3
 801768c:	f003 0301 	and.w	r3, r3, #1
 8017690:	2b00      	cmp	r3, #0
 8017692:	d022      	beq.n	80176da <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	68db      	ldr	r3, [r3, #12]
 801769a:	899b      	ldrh	r3, [r3, #12]
 801769c:	b29b      	uxth	r3, r3
 801769e:	b21b      	sxth	r3, r3
 80176a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80176a4:	b21c      	sxth	r4, r3
 80176a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	68db      	ldr	r3, [r3, #12]
 80176ac:	899b      	ldrh	r3, [r3, #12]
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7fa f89d 	bl	80117f0 <lwip_htons>
 80176b6:	4603      	mov	r3, r0
 80176b8:	b2db      	uxtb	r3, r3
 80176ba:	b29b      	uxth	r3, r3
 80176bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7fa f894 	bl	80117f0 <lwip_htons>
 80176c8:	4603      	mov	r3, r0
 80176ca:	b21b      	sxth	r3, r3
 80176cc:	4323      	orrs	r3, r4
 80176ce:	b21a      	sxth	r2, r3
 80176d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	68db      	ldr	r3, [r3, #12]
 80176d6:	b292      	uxth	r2, r2
 80176d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176de:	b29a      	uxth	r2, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176e4:	4413      	add	r3, r2
 80176e6:	b299      	uxth	r1, r3
 80176e8:	4b3c      	ldr	r3, [pc, #240]	; (80177dc <tcp_receive+0xf14>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	b29a      	uxth	r2, r3
 80176ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	1a8a      	subs	r2, r1, r2
 80176f4:	b292      	uxth	r2, r2
 80176f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80176f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	685a      	ldr	r2, [r3, #4]
 80176fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	891b      	ldrh	r3, [r3, #8]
 8017704:	4619      	mov	r1, r3
 8017706:	4610      	mov	r0, r2
 8017708:	f7fb fb54 	bl	8012db4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	891c      	ldrh	r4, [r3, #8]
 8017712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	68db      	ldr	r3, [r3, #12]
 8017718:	899b      	ldrh	r3, [r3, #12]
 801771a:	b29b      	uxth	r3, r3
 801771c:	4618      	mov	r0, r3
 801771e:	f7fa f867 	bl	80117f0 <lwip_htons>
 8017722:	4603      	mov	r3, r0
 8017724:	b2db      	uxtb	r3, r3
 8017726:	f003 0303 	and.w	r3, r3, #3
 801772a:	2b00      	cmp	r3, #0
 801772c:	d001      	beq.n	8017732 <tcp_receive+0xe6a>
 801772e:	2301      	movs	r3, #1
 8017730:	e000      	b.n	8017734 <tcp_receive+0xe6c>
 8017732:	2300      	movs	r3, #0
 8017734:	4423      	add	r3, r4
 8017736:	b29a      	uxth	r2, r3
 8017738:	4b2a      	ldr	r3, [pc, #168]	; (80177e4 <tcp_receive+0xf1c>)
 801773a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801773c:	4b29      	ldr	r3, [pc, #164]	; (80177e4 <tcp_receive+0xf1c>)
 801773e:	881b      	ldrh	r3, [r3, #0]
 8017740:	461a      	mov	r2, r3
 8017742:	4b26      	ldr	r3, [pc, #152]	; (80177dc <tcp_receive+0xf14>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	441a      	add	r2, r3
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801774c:	6879      	ldr	r1, [r7, #4]
 801774e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017750:	440b      	add	r3, r1
 8017752:	429a      	cmp	r2, r3
 8017754:	d019      	beq.n	801778a <tcp_receive+0xec2>
 8017756:	4b24      	ldr	r3, [pc, #144]	; (80177e8 <tcp_receive+0xf20>)
 8017758:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801775c:	4923      	ldr	r1, [pc, #140]	; (80177ec <tcp_receive+0xf24>)
 801775e:	4824      	ldr	r0, [pc, #144]	; (80177f0 <tcp_receive+0xf28>)
 8017760:	f003 fa20 	bl	801aba4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017764:	e011      	b.n	801778a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	63bb      	str	r3, [r7, #56]	; 0x38
 801776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801776e:	2b00      	cmp	r3, #0
 8017770:	f47f aea4 	bne.w	80174bc <tcp_receive+0xbf4>
 8017774:	e00a      	b.n	801778c <tcp_receive+0xec4>
                break;
 8017776:	bf00      	nop
 8017778:	e008      	b.n	801778c <tcp_receive+0xec4>
                break;
 801777a:	bf00      	nop
 801777c:	e006      	b.n	801778c <tcp_receive+0xec4>
                  break;
 801777e:	bf00      	nop
 8017780:	e004      	b.n	801778c <tcp_receive+0xec4>
                  break;
 8017782:	bf00      	nop
 8017784:	e002      	b.n	801778c <tcp_receive+0xec4>
                  break;
 8017786:	bf00      	nop
 8017788:	e000      	b.n	801778c <tcp_receive+0xec4>
                break;
 801778a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801778c:	6878      	ldr	r0, [r7, #4]
 801778e:	f001 fe8b 	bl	80194a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017792:	e003      	b.n	801779c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f001 fe87 	bl	80194a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801779a:	e01a      	b.n	80177d2 <tcp_receive+0xf0a>
 801779c:	e019      	b.n	80177d2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801779e:	4b0f      	ldr	r3, [pc, #60]	; (80177dc <tcp_receive+0xf14>)
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a6:	1ad3      	subs	r3, r2, r3
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	db0a      	blt.n	80177c2 <tcp_receive+0xefa>
 80177ac:	4b0b      	ldr	r3, [pc, #44]	; (80177dc <tcp_receive+0xf14>)
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177b4:	6879      	ldr	r1, [r7, #4]
 80177b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80177b8:	440b      	add	r3, r1
 80177ba:	1ad3      	subs	r3, r2, r3
 80177bc:	3301      	adds	r3, #1
 80177be:	2b00      	cmp	r3, #0
 80177c0:	dd07      	ble.n	80177d2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	8b5b      	ldrh	r3, [r3, #26]
 80177c6:	f043 0302 	orr.w	r3, r3, #2
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80177d0:	e7ff      	b.n	80177d2 <tcp_receive+0xf0a>
 80177d2:	bf00      	nop
 80177d4:	3750      	adds	r7, #80	; 0x50
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bdb0      	pop	{r4, r5, r7, pc}
 80177da:	bf00      	nop
 80177dc:	200085f4 	.word	0x200085f4
 80177e0:	200085d4 	.word	0x200085d4
 80177e4:	200085fe 	.word	0x200085fe
 80177e8:	0801f470 	.word	0x0801f470
 80177ec:	0801f898 	.word	0x0801f898
 80177f0:	0801f53c 	.word	0x0801f53c

080177f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80177fa:	4b15      	ldr	r3, [pc, #84]	; (8017850 <tcp_get_next_optbyte+0x5c>)
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	1c5a      	adds	r2, r3, #1
 8017800:	b291      	uxth	r1, r2
 8017802:	4a13      	ldr	r2, [pc, #76]	; (8017850 <tcp_get_next_optbyte+0x5c>)
 8017804:	8011      	strh	r1, [r2, #0]
 8017806:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017808:	4b12      	ldr	r3, [pc, #72]	; (8017854 <tcp_get_next_optbyte+0x60>)
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d004      	beq.n	801781a <tcp_get_next_optbyte+0x26>
 8017810:	4b11      	ldr	r3, [pc, #68]	; (8017858 <tcp_get_next_optbyte+0x64>)
 8017812:	881b      	ldrh	r3, [r3, #0]
 8017814:	88fa      	ldrh	r2, [r7, #6]
 8017816:	429a      	cmp	r2, r3
 8017818:	d208      	bcs.n	801782c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801781a:	4b10      	ldr	r3, [pc, #64]	; (801785c <tcp_get_next_optbyte+0x68>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	3314      	adds	r3, #20
 8017820:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8017822:	88fb      	ldrh	r3, [r7, #6]
 8017824:	683a      	ldr	r2, [r7, #0]
 8017826:	4413      	add	r3, r2
 8017828:	781b      	ldrb	r3, [r3, #0]
 801782a:	e00b      	b.n	8017844 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801782c:	88fb      	ldrh	r3, [r7, #6]
 801782e:	b2da      	uxtb	r2, r3
 8017830:	4b09      	ldr	r3, [pc, #36]	; (8017858 <tcp_get_next_optbyte+0x64>)
 8017832:	881b      	ldrh	r3, [r3, #0]
 8017834:	b2db      	uxtb	r3, r3
 8017836:	1ad3      	subs	r3, r2, r3
 8017838:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801783a:	4b06      	ldr	r3, [pc, #24]	; (8017854 <tcp_get_next_optbyte+0x60>)
 801783c:	681a      	ldr	r2, [r3, #0]
 801783e:	797b      	ldrb	r3, [r7, #5]
 8017840:	4413      	add	r3, r2
 8017842:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017844:	4618      	mov	r0, r3
 8017846:	370c      	adds	r7, #12
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr
 8017850:	200085f0 	.word	0x200085f0
 8017854:	200085ec 	.word	0x200085ec
 8017858:	200085ea 	.word	0x200085ea
 801785c:	200085e4 	.word	0x200085e4

08017860 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b084      	sub	sp, #16
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d106      	bne.n	801787c <tcp_parseopt+0x1c>
 801786e:	4b32      	ldr	r3, [pc, #200]	; (8017938 <tcp_parseopt+0xd8>)
 8017870:	f240 727d 	movw	r2, #1917	; 0x77d
 8017874:	4931      	ldr	r1, [pc, #196]	; (801793c <tcp_parseopt+0xdc>)
 8017876:	4832      	ldr	r0, [pc, #200]	; (8017940 <tcp_parseopt+0xe0>)
 8017878:	f003 f994 	bl	801aba4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801787c:	4b31      	ldr	r3, [pc, #196]	; (8017944 <tcp_parseopt+0xe4>)
 801787e:	881b      	ldrh	r3, [r3, #0]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d056      	beq.n	8017932 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017884:	4b30      	ldr	r3, [pc, #192]	; (8017948 <tcp_parseopt+0xe8>)
 8017886:	2200      	movs	r2, #0
 8017888:	801a      	strh	r2, [r3, #0]
 801788a:	e046      	b.n	801791a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801788c:	f7ff ffb2 	bl	80177f4 <tcp_get_next_optbyte>
 8017890:	4603      	mov	r3, r0
 8017892:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017894:	7bfb      	ldrb	r3, [r7, #15]
 8017896:	2b02      	cmp	r3, #2
 8017898:	d006      	beq.n	80178a8 <tcp_parseopt+0x48>
 801789a:	2b02      	cmp	r3, #2
 801789c:	dc2c      	bgt.n	80178f8 <tcp_parseopt+0x98>
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d042      	beq.n	8017928 <tcp_parseopt+0xc8>
 80178a2:	2b01      	cmp	r3, #1
 80178a4:	d128      	bne.n	80178f8 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80178a6:	e038      	b.n	801791a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80178a8:	f7ff ffa4 	bl	80177f4 <tcp_get_next_optbyte>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b04      	cmp	r3, #4
 80178b0:	d13c      	bne.n	801792c <tcp_parseopt+0xcc>
 80178b2:	4b25      	ldr	r3, [pc, #148]	; (8017948 <tcp_parseopt+0xe8>)
 80178b4:	881b      	ldrh	r3, [r3, #0]
 80178b6:	3301      	adds	r3, #1
 80178b8:	4a22      	ldr	r2, [pc, #136]	; (8017944 <tcp_parseopt+0xe4>)
 80178ba:	8812      	ldrh	r2, [r2, #0]
 80178bc:	4293      	cmp	r3, r2
 80178be:	da35      	bge.n	801792c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80178c0:	f7ff ff98 	bl	80177f4 <tcp_get_next_optbyte>
 80178c4:	4603      	mov	r3, r0
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	021b      	lsls	r3, r3, #8
 80178ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80178cc:	f7ff ff92 	bl	80177f4 <tcp_get_next_optbyte>
 80178d0:	4603      	mov	r3, r0
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	89bb      	ldrh	r3, [r7, #12]
 80178d6:	4313      	orrs	r3, r2
 80178d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80178da:	89bb      	ldrh	r3, [r7, #12]
 80178dc:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d804      	bhi.n	80178ee <tcp_parseopt+0x8e>
 80178e4:	89bb      	ldrh	r3, [r7, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d001      	beq.n	80178ee <tcp_parseopt+0x8e>
 80178ea:	89ba      	ldrh	r2, [r7, #12]
 80178ec:	e001      	b.n	80178f2 <tcp_parseopt+0x92>
 80178ee:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80178f6:	e010      	b.n	801791a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80178f8:	f7ff ff7c 	bl	80177f4 <tcp_get_next_optbyte>
 80178fc:	4603      	mov	r3, r0
 80178fe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017900:	7afb      	ldrb	r3, [r7, #11]
 8017902:	2b01      	cmp	r3, #1
 8017904:	d914      	bls.n	8017930 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017906:	7afb      	ldrb	r3, [r7, #11]
 8017908:	b29a      	uxth	r2, r3
 801790a:	4b0f      	ldr	r3, [pc, #60]	; (8017948 <tcp_parseopt+0xe8>)
 801790c:	881b      	ldrh	r3, [r3, #0]
 801790e:	4413      	add	r3, r2
 8017910:	b29b      	uxth	r3, r3
 8017912:	3b02      	subs	r3, #2
 8017914:	b29a      	uxth	r2, r3
 8017916:	4b0c      	ldr	r3, [pc, #48]	; (8017948 <tcp_parseopt+0xe8>)
 8017918:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801791a:	4b0b      	ldr	r3, [pc, #44]	; (8017948 <tcp_parseopt+0xe8>)
 801791c:	881a      	ldrh	r2, [r3, #0]
 801791e:	4b09      	ldr	r3, [pc, #36]	; (8017944 <tcp_parseopt+0xe4>)
 8017920:	881b      	ldrh	r3, [r3, #0]
 8017922:	429a      	cmp	r2, r3
 8017924:	d3b2      	bcc.n	801788c <tcp_parseopt+0x2c>
 8017926:	e004      	b.n	8017932 <tcp_parseopt+0xd2>
          return;
 8017928:	bf00      	nop
 801792a:	e002      	b.n	8017932 <tcp_parseopt+0xd2>
            return;
 801792c:	bf00      	nop
 801792e:	e000      	b.n	8017932 <tcp_parseopt+0xd2>
            return;
 8017930:	bf00      	nop
      }
    }
  }
}
 8017932:	3710      	adds	r7, #16
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}
 8017938:	0801f470 	.word	0x0801f470
 801793c:	0801f954 	.word	0x0801f954
 8017940:	0801f53c 	.word	0x0801f53c
 8017944:	200085e8 	.word	0x200085e8
 8017948:	200085f0 	.word	0x200085f0

0801794c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801794c:	b480      	push	{r7}
 801794e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017950:	4b05      	ldr	r3, [pc, #20]	; (8017968 <tcp_trigger_input_pcb_close+0x1c>)
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	f043 0310 	orr.w	r3, r3, #16
 8017958:	b2da      	uxtb	r2, r3
 801795a:	4b03      	ldr	r3, [pc, #12]	; (8017968 <tcp_trigger_input_pcb_close+0x1c>)
 801795c:	701a      	strb	r2, [r3, #0]
}
 801795e:	bf00      	nop
 8017960:	46bd      	mov	sp, r7
 8017962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017966:	4770      	bx	lr
 8017968:	20008601 	.word	0x20008601

0801796c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b084      	sub	sp, #16
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d00a      	beq.n	8017994 <tcp_route+0x28>
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	7a1b      	ldrb	r3, [r3, #8]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d006      	beq.n	8017994 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	7a1b      	ldrb	r3, [r3, #8]
 801798a:	4618      	mov	r0, r3
 801798c:	f7fb f80a 	bl	80129a4 <netif_get_by_index>
 8017990:	4603      	mov	r3, r0
 8017992:	e003      	b.n	801799c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017994:	6878      	ldr	r0, [r7, #4]
 8017996:	f7f8 fdfd 	bl	8010594 <ip4_route>
 801799a:	4603      	mov	r3, r0
  }
}
 801799c:	4618      	mov	r0, r3
 801799e:	3710      	adds	r7, #16
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b087      	sub	sp, #28
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	603b      	str	r3, [r7, #0]
 80179b0:	4613      	mov	r3, r2
 80179b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d105      	bne.n	80179c6 <tcp_create_segment+0x22>
 80179ba:	4b44      	ldr	r3, [pc, #272]	; (8017acc <tcp_create_segment+0x128>)
 80179bc:	22a3      	movs	r2, #163	; 0xa3
 80179be:	4944      	ldr	r1, [pc, #272]	; (8017ad0 <tcp_create_segment+0x12c>)
 80179c0:	4844      	ldr	r0, [pc, #272]	; (8017ad4 <tcp_create_segment+0x130>)
 80179c2:	f003 f8ef 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80179c6:	68bb      	ldr	r3, [r7, #8]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d105      	bne.n	80179d8 <tcp_create_segment+0x34>
 80179cc:	4b3f      	ldr	r3, [pc, #252]	; (8017acc <tcp_create_segment+0x128>)
 80179ce:	22a4      	movs	r2, #164	; 0xa4
 80179d0:	4941      	ldr	r1, [pc, #260]	; (8017ad8 <tcp_create_segment+0x134>)
 80179d2:	4840      	ldr	r0, [pc, #256]	; (8017ad4 <tcp_create_segment+0x130>)
 80179d4:	f003 f8e6 	bl	801aba4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80179d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	f003 0304 	and.w	r3, r3, #4
 80179e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80179e6:	2003      	movs	r0, #3
 80179e8:	f7fa fc44 	bl	8012274 <memp_malloc>
 80179ec:	6138      	str	r0, [r7, #16]
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d104      	bne.n	80179fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80179f4:	68b8      	ldr	r0, [r7, #8]
 80179f6:	f7fb fb95 	bl	8013124 <pbuf_free>
    return NULL;
 80179fa:	2300      	movs	r3, #0
 80179fc:	e061      	b.n	8017ac2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017a04:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017a06:	693b      	ldr	r3, [r7, #16]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	68ba      	ldr	r2, [r7, #8]
 8017a10:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	891a      	ldrh	r2, [r3, #8]
 8017a16:	7dfb      	ldrb	r3, [r7, #23]
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d205      	bcs.n	8017a2a <tcp_create_segment+0x86>
 8017a1e:	4b2b      	ldr	r3, [pc, #172]	; (8017acc <tcp_create_segment+0x128>)
 8017a20:	22b0      	movs	r2, #176	; 0xb0
 8017a22:	492e      	ldr	r1, [pc, #184]	; (8017adc <tcp_create_segment+0x138>)
 8017a24:	482b      	ldr	r0, [pc, #172]	; (8017ad4 <tcp_create_segment+0x130>)
 8017a26:	f003 f8bd 	bl	801aba4 <iprintf>
  seg->len = p->tot_len - optlen;
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	891a      	ldrh	r2, [r3, #8]
 8017a2e:	7dfb      	ldrb	r3, [r7, #23]
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	1ad3      	subs	r3, r2, r3
 8017a34:	b29a      	uxth	r2, r3
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017a3a:	2114      	movs	r1, #20
 8017a3c:	68b8      	ldr	r0, [r7, #8]
 8017a3e:	f7fb faa9 	bl	8012f94 <pbuf_add_header>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d004      	beq.n	8017a52 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017a48:	6938      	ldr	r0, [r7, #16]
 8017a4a:	f7fd f802 	bl	8014a52 <tcp_seg_free>
    return NULL;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	e037      	b.n	8017ac2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	685a      	ldr	r2, [r3, #4]
 8017a58:	693b      	ldr	r3, [r7, #16]
 8017a5a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	8ada      	ldrh	r2, [r3, #22]
 8017a60:	693b      	ldr	r3, [r7, #16]
 8017a62:	68dc      	ldr	r4, [r3, #12]
 8017a64:	4610      	mov	r0, r2
 8017a66:	f7f9 fec3 	bl	80117f0 <lwip_htons>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	8b1a      	ldrh	r2, [r3, #24]
 8017a72:	693b      	ldr	r3, [r7, #16]
 8017a74:	68dc      	ldr	r4, [r3, #12]
 8017a76:	4610      	mov	r0, r2
 8017a78:	f7f9 feba 	bl	80117f0 <lwip_htons>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017a80:	693b      	ldr	r3, [r7, #16]
 8017a82:	68dc      	ldr	r4, [r3, #12]
 8017a84:	6838      	ldr	r0, [r7, #0]
 8017a86:	f7f9 fec8 	bl	801181a <lwip_htonl>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017a8e:	7dfb      	ldrb	r3, [r7, #23]
 8017a90:	089b      	lsrs	r3, r3, #2
 8017a92:	b2db      	uxtb	r3, r3
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	3305      	adds	r3, #5
 8017a98:	b29b      	uxth	r3, r3
 8017a9a:	031b      	lsls	r3, r3, #12
 8017a9c:	b29a      	uxth	r2, r3
 8017a9e:	79fb      	ldrb	r3, [r7, #7]
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	4313      	orrs	r3, r2
 8017aa4:	b29a      	uxth	r2, r3
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	68dc      	ldr	r4, [r3, #12]
 8017aaa:	4610      	mov	r0, r2
 8017aac:	f7f9 fea0 	bl	80117f0 <lwip_htons>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	68db      	ldr	r3, [r3, #12]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	749a      	strb	r2, [r3, #18]
 8017abc:	2200      	movs	r2, #0
 8017abe:	74da      	strb	r2, [r3, #19]
  return seg;
 8017ac0:	693b      	ldr	r3, [r7, #16]
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	371c      	adds	r7, #28
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd90      	pop	{r4, r7, pc}
 8017aca:	bf00      	nop
 8017acc:	0801f970 	.word	0x0801f970
 8017ad0:	0801fa28 	.word	0x0801fa28
 8017ad4:	0801fa48 	.word	0x0801fa48
 8017ad8:	0801fa70 	.word	0x0801fa70
 8017adc:	0801fa94 	.word	0x0801fa94

08017ae0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b086      	sub	sp, #24
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	607b      	str	r3, [r7, #4]
 8017ae8:	4603      	mov	r3, r0
 8017aea:	73fb      	strb	r3, [r7, #15]
 8017aec:	460b      	mov	r3, r1
 8017aee:	81bb      	strh	r3, [r7, #12]
 8017af0:	4613      	mov	r3, r2
 8017af2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017af4:	89bb      	ldrh	r3, [r7, #12]
 8017af6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d105      	bne.n	8017b0a <tcp_pbuf_prealloc+0x2a>
 8017afe:	4b30      	ldr	r3, [pc, #192]	; (8017bc0 <tcp_pbuf_prealloc+0xe0>)
 8017b00:	22e8      	movs	r2, #232	; 0xe8
 8017b02:	4930      	ldr	r1, [pc, #192]	; (8017bc4 <tcp_pbuf_prealloc+0xe4>)
 8017b04:	4830      	ldr	r0, [pc, #192]	; (8017bc8 <tcp_pbuf_prealloc+0xe8>)
 8017b06:	f003 f84d 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017b0a:	6a3b      	ldr	r3, [r7, #32]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d105      	bne.n	8017b1c <tcp_pbuf_prealloc+0x3c>
 8017b10:	4b2b      	ldr	r3, [pc, #172]	; (8017bc0 <tcp_pbuf_prealloc+0xe0>)
 8017b12:	22e9      	movs	r2, #233	; 0xe9
 8017b14:	492d      	ldr	r1, [pc, #180]	; (8017bcc <tcp_pbuf_prealloc+0xec>)
 8017b16:	482c      	ldr	r0, [pc, #176]	; (8017bc8 <tcp_pbuf_prealloc+0xe8>)
 8017b18:	f003 f844 	bl	801aba4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017b1c:	89ba      	ldrh	r2, [r7, #12]
 8017b1e:	897b      	ldrh	r3, [r7, #10]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d221      	bcs.n	8017b68 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017b24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b28:	f003 0302 	and.w	r3, r3, #2
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d111      	bne.n	8017b54 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017b30:	6a3b      	ldr	r3, [r7, #32]
 8017b32:	8b5b      	ldrh	r3, [r3, #26]
 8017b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d115      	bne.n	8017b68 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017b3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d007      	beq.n	8017b54 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017b44:	6a3b      	ldr	r3, [r7, #32]
 8017b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d103      	bne.n	8017b54 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017b4c:	6a3b      	ldr	r3, [r7, #32]
 8017b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d009      	beq.n	8017b68 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017b54:	89bb      	ldrh	r3, [r7, #12]
 8017b56:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8017b5a:	f023 0203 	bic.w	r2, r3, #3
 8017b5e:	897b      	ldrh	r3, [r7, #10]
 8017b60:	4293      	cmp	r3, r2
 8017b62:	bf28      	it	cs
 8017b64:	4613      	movcs	r3, r2
 8017b66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017b68:	8af9      	ldrh	r1, [r7, #22]
 8017b6a:	7bfb      	ldrb	r3, [r7, #15]
 8017b6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7fa ffc1 	bl	8012af8 <pbuf_alloc>
 8017b76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d101      	bne.n	8017b82 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	e019      	b.n	8017bb6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d006      	beq.n	8017b98 <tcp_pbuf_prealloc+0xb8>
 8017b8a:	4b0d      	ldr	r3, [pc, #52]	; (8017bc0 <tcp_pbuf_prealloc+0xe0>)
 8017b8c:	f240 120b 	movw	r2, #267	; 0x10b
 8017b90:	490f      	ldr	r1, [pc, #60]	; (8017bd0 <tcp_pbuf_prealloc+0xf0>)
 8017b92:	480d      	ldr	r0, [pc, #52]	; (8017bc8 <tcp_pbuf_prealloc+0xe8>)
 8017b94:	f003 f806 	bl	801aba4 <iprintf>
  *oversize = p->len - length;
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	895a      	ldrh	r2, [r3, #10]
 8017b9c:	89bb      	ldrh	r3, [r7, #12]
 8017b9e:	1ad3      	subs	r3, r2, r3
 8017ba0:	b29a      	uxth	r2, r3
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	89ba      	ldrh	r2, [r7, #12]
 8017baa:	811a      	strh	r2, [r3, #8]
 8017bac:	693b      	ldr	r3, [r7, #16]
 8017bae:	891a      	ldrh	r2, [r3, #8]
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	815a      	strh	r2, [r3, #10]
  return p;
 8017bb4:	693b      	ldr	r3, [r7, #16]
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	3718      	adds	r7, #24
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	0801f970 	.word	0x0801f970
 8017bc4:	0801faac 	.word	0x0801faac
 8017bc8:	0801fa48 	.word	0x0801fa48
 8017bcc:	0801fad0 	.word	0x0801fad0
 8017bd0:	0801faf0 	.word	0x0801faf0

08017bd4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	460b      	mov	r3, r1
 8017bde:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d106      	bne.n	8017bf4 <tcp_write_checks+0x20>
 8017be6:	4b33      	ldr	r3, [pc, #204]	; (8017cb4 <tcp_write_checks+0xe0>)
 8017be8:	f240 1233 	movw	r2, #307	; 0x133
 8017bec:	4932      	ldr	r1, [pc, #200]	; (8017cb8 <tcp_write_checks+0xe4>)
 8017bee:	4833      	ldr	r0, [pc, #204]	; (8017cbc <tcp_write_checks+0xe8>)
 8017bf0:	f002 ffd8 	bl	801aba4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	7d1b      	ldrb	r3, [r3, #20]
 8017bf8:	2b04      	cmp	r3, #4
 8017bfa:	d00e      	beq.n	8017c1a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017c00:	2b07      	cmp	r3, #7
 8017c02:	d00a      	beq.n	8017c1a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017c08:	2b02      	cmp	r3, #2
 8017c0a:	d006      	beq.n	8017c1a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017c10:	2b03      	cmp	r3, #3
 8017c12:	d002      	beq.n	8017c1a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017c14:	f06f 030a 	mvn.w	r3, #10
 8017c18:	e048      	b.n	8017cac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017c1a:	887b      	ldrh	r3, [r7, #2]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d101      	bne.n	8017c24 <tcp_write_checks+0x50>
    return ERR_OK;
 8017c20:	2300      	movs	r3, #0
 8017c22:	e043      	b.n	8017cac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017c2a:	887a      	ldrh	r2, [r7, #2]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d909      	bls.n	8017c44 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	8b5b      	ldrh	r3, [r3, #26]
 8017c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c38:	b29a      	uxth	r2, r3
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c42:	e033      	b.n	8017cac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c4a:	2b07      	cmp	r3, #7
 8017c4c:	d909      	bls.n	8017c62 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	8b5b      	ldrh	r3, [r3, #26]
 8017c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c56:	b29a      	uxth	r2, r3
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c60:	e024      	b.n	8017cac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d00f      	beq.n	8017c8c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d11a      	bne.n	8017caa <tcp_write_checks+0xd6>
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d116      	bne.n	8017caa <tcp_write_checks+0xd6>
 8017c7c:	4b0d      	ldr	r3, [pc, #52]	; (8017cb4 <tcp_write_checks+0xe0>)
 8017c7e:	f240 1255 	movw	r2, #341	; 0x155
 8017c82:	490f      	ldr	r1, [pc, #60]	; (8017cc0 <tcp_write_checks+0xec>)
 8017c84:	480d      	ldr	r0, [pc, #52]	; (8017cbc <tcp_write_checks+0xe8>)
 8017c86:	f002 ff8d 	bl	801aba4 <iprintf>
 8017c8a:	e00e      	b.n	8017caa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d103      	bne.n	8017c9c <tcp_write_checks+0xc8>
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d006      	beq.n	8017caa <tcp_write_checks+0xd6>
 8017c9c:	4b05      	ldr	r3, [pc, #20]	; (8017cb4 <tcp_write_checks+0xe0>)
 8017c9e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017ca2:	4908      	ldr	r1, [pc, #32]	; (8017cc4 <tcp_write_checks+0xf0>)
 8017ca4:	4805      	ldr	r0, [pc, #20]	; (8017cbc <tcp_write_checks+0xe8>)
 8017ca6:	f002 ff7d 	bl	801aba4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017caa:	2300      	movs	r3, #0
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3708      	adds	r7, #8
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	0801f970 	.word	0x0801f970
 8017cb8:	0801fb04 	.word	0x0801fb04
 8017cbc:	0801fa48 	.word	0x0801fa48
 8017cc0:	0801fb24 	.word	0x0801fb24
 8017cc4:	0801fb60 	.word	0x0801fb60

08017cc8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017cc8:	b590      	push	{r4, r7, lr}
 8017cca:	b09b      	sub	sp, #108	; 0x6c
 8017ccc:	af04      	add	r7, sp, #16
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	60b9      	str	r1, [r7, #8]
 8017cd2:	4611      	mov	r1, r2
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	460b      	mov	r3, r1
 8017cd8:	80fb      	strh	r3, [r7, #6]
 8017cda:	4613      	mov	r3, r2
 8017cdc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017cea:	2300      	movs	r3, #0
 8017cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8017cee:	2300      	movs	r3, #0
 8017cf0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017d02:	2300      	movs	r3, #0
 8017d04:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d109      	bne.n	8017d24 <tcp_write+0x5c>
 8017d10:	4ba4      	ldr	r3, [pc, #656]	; (8017fa4 <tcp_write+0x2dc>)
 8017d12:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8017d16:	49a4      	ldr	r1, [pc, #656]	; (8017fa8 <tcp_write+0x2e0>)
 8017d18:	48a4      	ldr	r0, [pc, #656]	; (8017fac <tcp_write+0x2e4>)
 8017d1a:	f002 ff43 	bl	801aba4 <iprintf>
 8017d1e:	f06f 030f 	mvn.w	r3, #15
 8017d22:	e32a      	b.n	801837a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017d2a:	085b      	lsrs	r3, r3, #1
 8017d2c:	b29a      	uxth	r2, r3
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d32:	4293      	cmp	r3, r2
 8017d34:	bf28      	it	cs
 8017d36:	4613      	movcs	r3, r2
 8017d38:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d102      	bne.n	8017d46 <tcp_write+0x7e>
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d44:	e000      	b.n	8017d48 <tcp_write+0x80>
 8017d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d48:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017d4a:	68bb      	ldr	r3, [r7, #8]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d109      	bne.n	8017d64 <tcp_write+0x9c>
 8017d50:	4b94      	ldr	r3, [pc, #592]	; (8017fa4 <tcp_write+0x2dc>)
 8017d52:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017d56:	4996      	ldr	r1, [pc, #600]	; (8017fb0 <tcp_write+0x2e8>)
 8017d58:	4894      	ldr	r0, [pc, #592]	; (8017fac <tcp_write+0x2e4>)
 8017d5a:	f002 ff23 	bl	801aba4 <iprintf>
 8017d5e:	f06f 030f 	mvn.w	r3, #15
 8017d62:	e30a      	b.n	801837a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017d64:	88fb      	ldrh	r3, [r7, #6]
 8017d66:	4619      	mov	r1, r3
 8017d68:	68f8      	ldr	r0, [r7, #12]
 8017d6a:	f7ff ff33 	bl	8017bd4 <tcp_write_checks>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017d74:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d002      	beq.n	8017d82 <tcp_write+0xba>
    return err;
 8017d7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017d80:	e2fb      	b.n	801837a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	f000 80f6 	beq.w	8017f88 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017da0:	653b      	str	r3, [r7, #80]	; 0x50
 8017da2:	e002      	b.n	8017daa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d1f8      	bne.n	8017da4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017db4:	7a9b      	ldrb	r3, [r3, #10]
 8017db6:	009b      	lsls	r3, r3, #2
 8017db8:	b29b      	uxth	r3, r3
 8017dba:	f003 0304 	and.w	r3, r3, #4
 8017dbe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017dc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dc4:	891b      	ldrh	r3, [r3, #8]
 8017dc6:	4619      	mov	r1, r3
 8017dc8:	8c3b      	ldrh	r3, [r7, #32]
 8017dca:	440b      	add	r3, r1
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	da06      	bge.n	8017dde <tcp_write+0x116>
 8017dd0:	4b74      	ldr	r3, [pc, #464]	; (8017fa4 <tcp_write+0x2dc>)
 8017dd2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017dd6:	4977      	ldr	r1, [pc, #476]	; (8017fb4 <tcp_write+0x2ec>)
 8017dd8:	4874      	ldr	r0, [pc, #464]	; (8017fac <tcp_write+0x2e4>)
 8017dda:	f002 fee3 	bl	801aba4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017de0:	891a      	ldrh	r2, [r3, #8]
 8017de2:	8c3b      	ldrh	r3, [r7, #32]
 8017de4:	4413      	add	r3, r2
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dea:	1ad3      	subs	r3, r2, r3
 8017dec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017df4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017df6:	8a7b      	ldrh	r3, [r7, #18]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d026      	beq.n	8017e4a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017dfc:	8a7b      	ldrh	r3, [r7, #18]
 8017dfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d206      	bcs.n	8017e12 <tcp_write+0x14a>
 8017e04:	4b67      	ldr	r3, [pc, #412]	; (8017fa4 <tcp_write+0x2dc>)
 8017e06:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017e0a:	496b      	ldr	r1, [pc, #428]	; (8017fb8 <tcp_write+0x2f0>)
 8017e0c:	4867      	ldr	r0, [pc, #412]	; (8017fac <tcp_write+0x2e4>)
 8017e0e:	f002 fec9 	bl	801aba4 <iprintf>
      seg = last_unsent;
 8017e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e14:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017e16:	8a7b      	ldrh	r3, [r7, #18]
 8017e18:	88fa      	ldrh	r2, [r7, #6]
 8017e1a:	4293      	cmp	r3, r2
 8017e1c:	bf28      	it	cs
 8017e1e:	4613      	movcs	r3, r2
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e24:	4293      	cmp	r3, r2
 8017e26:	bf28      	it	cs
 8017e28:	4613      	movcs	r3, r2
 8017e2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017e2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e32:	4413      	add	r3, r2
 8017e34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017e38:	8a7a      	ldrh	r2, [r7, #18]
 8017e3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e3c:	1ad3      	subs	r3, r2, r3
 8017e3e:	b29b      	uxth	r3, r3
 8017e40:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017e42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e46:	1ad3      	subs	r3, r2, r3
 8017e48:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017e4a:	8a7b      	ldrh	r3, [r7, #18]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00b      	beq.n	8017e68 <tcp_write+0x1a0>
 8017e50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e54:	88fb      	ldrh	r3, [r7, #6]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d006      	beq.n	8017e68 <tcp_write+0x1a0>
 8017e5a:	4b52      	ldr	r3, [pc, #328]	; (8017fa4 <tcp_write+0x2dc>)
 8017e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e60:	4956      	ldr	r1, [pc, #344]	; (8017fbc <tcp_write+0x2f4>)
 8017e62:	4852      	ldr	r0, [pc, #328]	; (8017fac <tcp_write+0x2e4>)
 8017e64:	f002 fe9e 	bl	801aba4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017e68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e6c:	88fb      	ldrh	r3, [r7, #6]
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	f080 8167 	bcs.w	8018142 <tcp_write+0x47a>
 8017e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	f000 8163 	beq.w	8018142 <tcp_write+0x47a>
 8017e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e7e:	891b      	ldrh	r3, [r3, #8]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	f000 815e 	beq.w	8018142 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017e86:	88fa      	ldrh	r2, [r7, #6]
 8017e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e8c:	1ad2      	subs	r2, r2, r3
 8017e8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e90:	4293      	cmp	r3, r2
 8017e92:	bfa8      	it	ge
 8017e94:	4613      	movge	r3, r2
 8017e96:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e9a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017e9c:	797b      	ldrb	r3, [r7, #5]
 8017e9e:	f003 0301 	and.w	r3, r3, #1
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d027      	beq.n	8017ef6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017ea6:	f107 0012 	add.w	r0, r7, #18
 8017eaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017eac:	8bf9      	ldrh	r1, [r7, #30]
 8017eae:	2301      	movs	r3, #1
 8017eb0:	9302      	str	r3, [sp, #8]
 8017eb2:	797b      	ldrb	r3, [r7, #5]
 8017eb4:	9301      	str	r3, [sp, #4]
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	9300      	str	r3, [sp, #0]
 8017eba:	4603      	mov	r3, r0
 8017ebc:	2000      	movs	r0, #0
 8017ebe:	f7ff fe0f 	bl	8017ae0 <tcp_pbuf_prealloc>
 8017ec2:	6578      	str	r0, [r7, #84]	; 0x54
 8017ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	f000 8225 	beq.w	8018316 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ece:	6858      	ldr	r0, [r3, #4]
 8017ed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ed4:	68ba      	ldr	r2, [r7, #8]
 8017ed6:	4413      	add	r3, r2
 8017ed8:	8bfa      	ldrh	r2, [r7, #30]
 8017eda:	4619      	mov	r1, r3
 8017edc:	f002 fe32 	bl	801ab44 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017ee0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017ee2:	f7fb f9ad 	bl	8013240 <pbuf_clen>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	461a      	mov	r2, r3
 8017eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017eee:	4413      	add	r3, r2
 8017ef0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017ef4:	e041      	b.n	8017f7a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ef8:	685b      	ldr	r3, [r3, #4]
 8017efa:	637b      	str	r3, [r7, #52]	; 0x34
 8017efc:	e002      	b.n	8017f04 <tcp_write+0x23c>
 8017efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	637b      	str	r3, [r7, #52]	; 0x34
 8017f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d1f8      	bne.n	8017efe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f0e:	7b1b      	ldrb	r3, [r3, #12]
 8017f10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d115      	bne.n	8017f44 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017f1e:	8952      	ldrh	r2, [r2, #10]
 8017f20:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017f22:	68ba      	ldr	r2, [r7, #8]
 8017f24:	429a      	cmp	r2, r3
 8017f26:	d10d      	bne.n	8017f44 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017f28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d006      	beq.n	8017f3e <tcp_write+0x276>
 8017f30:	4b1c      	ldr	r3, [pc, #112]	; (8017fa4 <tcp_write+0x2dc>)
 8017f32:	f240 2231 	movw	r2, #561	; 0x231
 8017f36:	4922      	ldr	r1, [pc, #136]	; (8017fc0 <tcp_write+0x2f8>)
 8017f38:	481c      	ldr	r0, [pc, #112]	; (8017fac <tcp_write+0x2e4>)
 8017f3a:	f002 fe33 	bl	801aba4 <iprintf>
          extendlen = seglen;
 8017f3e:	8bfb      	ldrh	r3, [r7, #30]
 8017f40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017f42:	e01a      	b.n	8017f7a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017f44:	8bfb      	ldrh	r3, [r7, #30]
 8017f46:	2201      	movs	r2, #1
 8017f48:	4619      	mov	r1, r3
 8017f4a:	2000      	movs	r0, #0
 8017f4c:	f7fa fdd4 	bl	8012af8 <pbuf_alloc>
 8017f50:	6578      	str	r0, [r7, #84]	; 0x54
 8017f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f000 81e0 	beq.w	801831a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017f5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f5e:	68ba      	ldr	r2, [r7, #8]
 8017f60:	441a      	add	r2, r3
 8017f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f64:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017f66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017f68:	f7fb f96a 	bl	8013240 <pbuf_clen>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	461a      	mov	r2, r3
 8017f70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f74:	4413      	add	r3, r2
 8017f76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017f7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f7e:	8bfb      	ldrh	r3, [r7, #30]
 8017f80:	4413      	add	r3, r2
 8017f82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017f86:	e0dc      	b.n	8018142 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	f000 80d7 	beq.w	8018142 <tcp_write+0x47a>
 8017f94:	4b03      	ldr	r3, [pc, #12]	; (8017fa4 <tcp_write+0x2dc>)
 8017f96:	f240 224a 	movw	r2, #586	; 0x24a
 8017f9a:	490a      	ldr	r1, [pc, #40]	; (8017fc4 <tcp_write+0x2fc>)
 8017f9c:	4803      	ldr	r0, [pc, #12]	; (8017fac <tcp_write+0x2e4>)
 8017f9e:	f002 fe01 	bl	801aba4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017fa2:	e0ce      	b.n	8018142 <tcp_write+0x47a>
 8017fa4:	0801f970 	.word	0x0801f970
 8017fa8:	0801fb94 	.word	0x0801fb94
 8017fac:	0801fa48 	.word	0x0801fa48
 8017fb0:	0801fbac 	.word	0x0801fbac
 8017fb4:	0801fbe0 	.word	0x0801fbe0
 8017fb8:	0801fbf8 	.word	0x0801fbf8
 8017fbc:	0801fc18 	.word	0x0801fc18
 8017fc0:	0801fc38 	.word	0x0801fc38
 8017fc4:	0801fc64 	.word	0x0801fc64
    struct pbuf *p;
    u16_t left = len - pos;
 8017fc8:	88fa      	ldrh	r2, [r7, #6]
 8017fca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017fce:	1ad3      	subs	r3, r2, r3
 8017fd0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017fd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017fd6:	b29b      	uxth	r3, r3
 8017fd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fda:	1ad3      	subs	r3, r2, r3
 8017fdc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017fde:	8b7a      	ldrh	r2, [r7, #26]
 8017fe0:	8bbb      	ldrh	r3, [r7, #28]
 8017fe2:	4293      	cmp	r3, r2
 8017fe4:	bf28      	it	cs
 8017fe6:	4613      	movcs	r3, r2
 8017fe8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017fea:	797b      	ldrb	r3, [r7, #5]
 8017fec:	f003 0301 	and.w	r3, r3, #1
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d036      	beq.n	8018062 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017ff4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	8b3b      	ldrh	r3, [r7, #24]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	b299      	uxth	r1, r3
 8018000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018002:	2b00      	cmp	r3, #0
 8018004:	bf0c      	ite	eq
 8018006:	2301      	moveq	r3, #1
 8018008:	2300      	movne	r3, #0
 801800a:	b2db      	uxtb	r3, r3
 801800c:	f107 0012 	add.w	r0, r7, #18
 8018010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018012:	9302      	str	r3, [sp, #8]
 8018014:	797b      	ldrb	r3, [r7, #5]
 8018016:	9301      	str	r3, [sp, #4]
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	9300      	str	r3, [sp, #0]
 801801c:	4603      	mov	r3, r0
 801801e:	2036      	movs	r0, #54	; 0x36
 8018020:	f7ff fd5e 	bl	8017ae0 <tcp_pbuf_prealloc>
 8018024:	6338      	str	r0, [r7, #48]	; 0x30
 8018026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018028:	2b00      	cmp	r3, #0
 801802a:	f000 8178 	beq.w	801831e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018030:	895b      	ldrh	r3, [r3, #10]
 8018032:	8b3a      	ldrh	r2, [r7, #24]
 8018034:	429a      	cmp	r2, r3
 8018036:	d906      	bls.n	8018046 <tcp_write+0x37e>
 8018038:	4b8c      	ldr	r3, [pc, #560]	; (801826c <tcp_write+0x5a4>)
 801803a:	f240 2266 	movw	r2, #614	; 0x266
 801803e:	498c      	ldr	r1, [pc, #560]	; (8018270 <tcp_write+0x5a8>)
 8018040:	488c      	ldr	r0, [pc, #560]	; (8018274 <tcp_write+0x5ac>)
 8018042:	f002 fdaf 	bl	801aba4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018048:	685a      	ldr	r2, [r3, #4]
 801804a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801804e:	18d0      	adds	r0, r2, r3
 8018050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018054:	68ba      	ldr	r2, [r7, #8]
 8018056:	4413      	add	r3, r2
 8018058:	8b3a      	ldrh	r2, [r7, #24]
 801805a:	4619      	mov	r1, r3
 801805c:	f002 fd72 	bl	801ab44 <memcpy>
 8018060:	e02f      	b.n	80180c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018062:	8a7b      	ldrh	r3, [r7, #18]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d006      	beq.n	8018076 <tcp_write+0x3ae>
 8018068:	4b80      	ldr	r3, [pc, #512]	; (801826c <tcp_write+0x5a4>)
 801806a:	f240 2271 	movw	r2, #625	; 0x271
 801806e:	4982      	ldr	r1, [pc, #520]	; (8018278 <tcp_write+0x5b0>)
 8018070:	4880      	ldr	r0, [pc, #512]	; (8018274 <tcp_write+0x5ac>)
 8018072:	f002 fd97 	bl	801aba4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018076:	8b3b      	ldrh	r3, [r7, #24]
 8018078:	2201      	movs	r2, #1
 801807a:	4619      	mov	r1, r3
 801807c:	2036      	movs	r0, #54	; 0x36
 801807e:	f7fa fd3b 	bl	8012af8 <pbuf_alloc>
 8018082:	6178      	str	r0, [r7, #20]
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	2b00      	cmp	r3, #0
 8018088:	f000 814b 	beq.w	8018322 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801808c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018090:	68ba      	ldr	r2, [r7, #8]
 8018092:	441a      	add	r2, r3
 8018094:	697b      	ldr	r3, [r7, #20]
 8018096:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018098:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801809c:	b29b      	uxth	r3, r3
 801809e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180a2:	4619      	mov	r1, r3
 80180a4:	2036      	movs	r0, #54	; 0x36
 80180a6:	f7fa fd27 	bl	8012af8 <pbuf_alloc>
 80180aa:	6338      	str	r0, [r7, #48]	; 0x30
 80180ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d103      	bne.n	80180ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80180b2:	6978      	ldr	r0, [r7, #20]
 80180b4:	f7fb f836 	bl	8013124 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80180b8:	e136      	b.n	8018328 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80180ba:	6979      	ldr	r1, [r7, #20]
 80180bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180be:	f7fb f8ff 	bl	80132c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80180c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180c4:	f7fb f8bc 	bl	8013240 <pbuf_clen>
 80180c8:	4603      	mov	r3, r0
 80180ca:	461a      	mov	r2, r3
 80180cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80180d0:	4413      	add	r3, r2
 80180d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80180d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80180da:	2b08      	cmp	r3, #8
 80180dc:	d903      	bls.n	80180e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80180de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180e0:	f7fb f820 	bl	8013124 <pbuf_free>
      goto memerr;
 80180e4:	e120      	b.n	8018328 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80180ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80180ee:	441a      	add	r2, r3
 80180f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180f4:	9300      	str	r3, [sp, #0]
 80180f6:	4613      	mov	r3, r2
 80180f8:	2200      	movs	r2, #0
 80180fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80180fc:	68f8      	ldr	r0, [r7, #12]
 80180fe:	f7ff fc51 	bl	80179a4 <tcp_create_segment>
 8018102:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018106:	2b00      	cmp	r3, #0
 8018108:	f000 810d 	beq.w	8018326 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801810c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801810e:	2b00      	cmp	r3, #0
 8018110:	d102      	bne.n	8018118 <tcp_write+0x450>
      queue = seg;
 8018112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018114:	647b      	str	r3, [r7, #68]	; 0x44
 8018116:	e00c      	b.n	8018132 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801811a:	2b00      	cmp	r3, #0
 801811c:	d106      	bne.n	801812c <tcp_write+0x464>
 801811e:	4b53      	ldr	r3, [pc, #332]	; (801826c <tcp_write+0x5a4>)
 8018120:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018124:	4955      	ldr	r1, [pc, #340]	; (801827c <tcp_write+0x5b4>)
 8018126:	4853      	ldr	r0, [pc, #332]	; (8018274 <tcp_write+0x5ac>)
 8018128:	f002 fd3c 	bl	801aba4 <iprintf>
      prev_seg->next = seg;
 801812c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801812e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018130:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018134:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018136:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801813a:	8b3b      	ldrh	r3, [r7, #24]
 801813c:	4413      	add	r3, r2
 801813e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8018142:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018146:	88fb      	ldrh	r3, [r7, #6]
 8018148:	429a      	cmp	r2, r3
 801814a:	f4ff af3d 	bcc.w	8017fc8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801814e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018150:	2b00      	cmp	r3, #0
 8018152:	d02c      	beq.n	80181ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018156:	685b      	ldr	r3, [r3, #4]
 8018158:	62fb      	str	r3, [r7, #44]	; 0x2c
 801815a:	e01e      	b.n	801819a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815e:	891a      	ldrh	r2, [r3, #8]
 8018160:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018162:	4413      	add	r3, r2
 8018164:	b29a      	uxth	r2, r3
 8018166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018168:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d110      	bne.n	8018194 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018174:	685b      	ldr	r3, [r3, #4]
 8018176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018178:	8952      	ldrh	r2, [r2, #10]
 801817a:	4413      	add	r3, r2
 801817c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801817e:	68b9      	ldr	r1, [r7, #8]
 8018180:	4618      	mov	r0, r3
 8018182:	f002 fcdf 	bl	801ab44 <memcpy>
        p->len += oversize_used;
 8018186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018188:	895a      	ldrh	r2, [r3, #10]
 801818a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801818c:	4413      	add	r3, r2
 801818e:	b29a      	uxth	r2, r3
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	62fb      	str	r3, [r7, #44]	; 0x2c
 801819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801819c:	2b00      	cmp	r3, #0
 801819e:	d1dd      	bne.n	801815c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80181a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181a2:	891a      	ldrh	r2, [r3, #8]
 80181a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80181a6:	4413      	add	r3, r2
 80181a8:	b29a      	uxth	r2, r3
 80181aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80181ae:	8a7a      	ldrh	r2, [r7, #18]
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80181b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d018      	beq.n	80181ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80181bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d106      	bne.n	80181d0 <tcp_write+0x508>
 80181c2:	4b2a      	ldr	r3, [pc, #168]	; (801826c <tcp_write+0x5a4>)
 80181c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80181c8:	492d      	ldr	r1, [pc, #180]	; (8018280 <tcp_write+0x5b8>)
 80181ca:	482a      	ldr	r0, [pc, #168]	; (8018274 <tcp_write+0x5ac>)
 80181cc:	f002 fcea 	bl	801aba4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80181d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181d2:	685b      	ldr	r3, [r3, #4]
 80181d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7fb f872 	bl	80132c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80181dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181de:	891a      	ldrh	r2, [r3, #8]
 80181e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181e2:	891b      	ldrh	r3, [r3, #8]
 80181e4:	4413      	add	r3, r2
 80181e6:	b29a      	uxth	r2, r3
 80181e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181ea:	811a      	strh	r2, [r3, #8]
 80181ec:	e037      	b.n	801825e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80181ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d034      	beq.n	801825e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80181f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d003      	beq.n	8018202 <tcp_write+0x53a>
 80181fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d106      	bne.n	8018210 <tcp_write+0x548>
 8018202:	4b1a      	ldr	r3, [pc, #104]	; (801826c <tcp_write+0x5a4>)
 8018204:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018208:	491e      	ldr	r1, [pc, #120]	; (8018284 <tcp_write+0x5bc>)
 801820a:	481a      	ldr	r0, [pc, #104]	; (8018274 <tcp_write+0x5ac>)
 801820c:	f002 fcca 	bl	801aba4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	62bb      	str	r3, [r7, #40]	; 0x28
 8018216:	e009      	b.n	801822c <tcp_write+0x564>
      p->tot_len += extendlen;
 8018218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801821a:	891a      	ldrh	r2, [r3, #8]
 801821c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801821e:	4413      	add	r3, r2
 8018220:	b29a      	uxth	r2, r3
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	62bb      	str	r3, [r7, #40]	; 0x28
 801822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d1f1      	bne.n	8018218 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018236:	891a      	ldrh	r2, [r3, #8]
 8018238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801823a:	4413      	add	r3, r2
 801823c:	b29a      	uxth	r2, r3
 801823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018240:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8018242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018244:	895a      	ldrh	r2, [r3, #10]
 8018246:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018248:	4413      	add	r3, r2
 801824a:	b29a      	uxth	r2, r3
 801824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801824e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018252:	891a      	ldrh	r2, [r3, #8]
 8018254:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018256:	4413      	add	r3, r2
 8018258:	b29a      	uxth	r2, r3
 801825a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801825c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801825e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018260:	2b00      	cmp	r3, #0
 8018262:	d111      	bne.n	8018288 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018268:	66da      	str	r2, [r3, #108]	; 0x6c
 801826a:	e010      	b.n	801828e <tcp_write+0x5c6>
 801826c:	0801f970 	.word	0x0801f970
 8018270:	0801fc94 	.word	0x0801fc94
 8018274:	0801fa48 	.word	0x0801fa48
 8018278:	0801fcd4 	.word	0x0801fcd4
 801827c:	0801fce4 	.word	0x0801fce4
 8018280:	0801fcf8 	.word	0x0801fcf8
 8018284:	0801fd30 	.word	0x0801fd30
  } else {
    last_unsent->next = queue;
 8018288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801828a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801828c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018292:	88fb      	ldrh	r3, [r7, #6]
 8018294:	441a      	add	r2, r3
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80182a0:	88fb      	ldrh	r3, [r7, #6]
 80182a2:	1ad3      	subs	r3, r2, r3
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80182b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d00e      	beq.n	80182de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d10a      	bne.n	80182de <tcp_write+0x616>
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d106      	bne.n	80182de <tcp_write+0x616>
 80182d0:	4b2c      	ldr	r3, [pc, #176]	; (8018384 <tcp_write+0x6bc>)
 80182d2:	f240 3212 	movw	r2, #786	; 0x312
 80182d6:	492c      	ldr	r1, [pc, #176]	; (8018388 <tcp_write+0x6c0>)
 80182d8:	482c      	ldr	r0, [pc, #176]	; (801838c <tcp_write+0x6c4>)
 80182da:	f002 fc63 	bl	801aba4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80182de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d016      	beq.n	8018312 <tcp_write+0x64a>
 80182e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182e6:	68db      	ldr	r3, [r3, #12]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d012      	beq.n	8018312 <tcp_write+0x64a>
 80182ec:	797b      	ldrb	r3, [r7, #5]
 80182ee:	f003 0302 	and.w	r3, r3, #2
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d10d      	bne.n	8018312 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80182f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	899b      	ldrh	r3, [r3, #12]
 80182fc:	b29c      	uxth	r4, r3
 80182fe:	2008      	movs	r0, #8
 8018300:	f7f9 fa76 	bl	80117f0 <lwip_htons>
 8018304:	4603      	mov	r3, r0
 8018306:	461a      	mov	r2, r3
 8018308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801830a:	68db      	ldr	r3, [r3, #12]
 801830c:	4322      	orrs	r2, r4
 801830e:	b292      	uxth	r2, r2
 8018310:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8018312:	2300      	movs	r3, #0
 8018314:	e031      	b.n	801837a <tcp_write+0x6b2>
          goto memerr;
 8018316:	bf00      	nop
 8018318:	e006      	b.n	8018328 <tcp_write+0x660>
            goto memerr;
 801831a:	bf00      	nop
 801831c:	e004      	b.n	8018328 <tcp_write+0x660>
        goto memerr;
 801831e:	bf00      	nop
 8018320:	e002      	b.n	8018328 <tcp_write+0x660>
        goto memerr;
 8018322:	bf00      	nop
 8018324:	e000      	b.n	8018328 <tcp_write+0x660>
      goto memerr;
 8018326:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	8b5b      	ldrh	r3, [r3, #26]
 801832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018330:	b29a      	uxth	r2, r3
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018338:	2b00      	cmp	r3, #0
 801833a:	d002      	beq.n	8018342 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801833c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801833e:	f7fa fef1 	bl	8013124 <pbuf_free>
  }
  if (queue != NULL) {
 8018342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018344:	2b00      	cmp	r3, #0
 8018346:	d002      	beq.n	801834e <tcp_write+0x686>
    tcp_segs_free(queue);
 8018348:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801834a:	f7fc fb6d 	bl	8014a28 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018354:	2b00      	cmp	r3, #0
 8018356:	d00e      	beq.n	8018376 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801835c:	2b00      	cmp	r3, #0
 801835e:	d10a      	bne.n	8018376 <tcp_write+0x6ae>
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018364:	2b00      	cmp	r3, #0
 8018366:	d106      	bne.n	8018376 <tcp_write+0x6ae>
 8018368:	4b06      	ldr	r3, [pc, #24]	; (8018384 <tcp_write+0x6bc>)
 801836a:	f240 3227 	movw	r2, #807	; 0x327
 801836e:	4906      	ldr	r1, [pc, #24]	; (8018388 <tcp_write+0x6c0>)
 8018370:	4806      	ldr	r0, [pc, #24]	; (801838c <tcp_write+0x6c4>)
 8018372:	f002 fc17 	bl	801aba4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018376:	f04f 33ff 	mov.w	r3, #4294967295
}
 801837a:	4618      	mov	r0, r3
 801837c:	375c      	adds	r7, #92	; 0x5c
 801837e:	46bd      	mov	sp, r7
 8018380:	bd90      	pop	{r4, r7, pc}
 8018382:	bf00      	nop
 8018384:	0801f970 	.word	0x0801f970
 8018388:	0801fd68 	.word	0x0801fd68
 801838c:	0801fa48 	.word	0x0801fa48

08018390 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018390:	b590      	push	{r4, r7, lr}
 8018392:	b08b      	sub	sp, #44	; 0x2c
 8018394:	af02      	add	r7, sp, #8
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	460b      	mov	r3, r1
 801839a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801839c:	2300      	movs	r3, #0
 801839e:	61fb      	str	r3, [r7, #28]
 80183a0:	2300      	movs	r3, #0
 80183a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80183a4:	2300      	movs	r3, #0
 80183a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d106      	bne.n	80183bc <tcp_split_unsent_seg+0x2c>
 80183ae:	4b95      	ldr	r3, [pc, #596]	; (8018604 <tcp_split_unsent_seg+0x274>)
 80183b0:	f240 324b 	movw	r2, #843	; 0x34b
 80183b4:	4994      	ldr	r1, [pc, #592]	; (8018608 <tcp_split_unsent_seg+0x278>)
 80183b6:	4895      	ldr	r0, [pc, #596]	; (801860c <tcp_split_unsent_seg+0x27c>)
 80183b8:	f002 fbf4 	bl	801aba4 <iprintf>

  useg = pcb->unsent;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80183c2:	697b      	ldr	r3, [r7, #20]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d102      	bne.n	80183ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80183c8:	f04f 33ff 	mov.w	r3, #4294967295
 80183cc:	e116      	b.n	80185fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80183ce:	887b      	ldrh	r3, [r7, #2]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d109      	bne.n	80183e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80183d4:	4b8b      	ldr	r3, [pc, #556]	; (8018604 <tcp_split_unsent_seg+0x274>)
 80183d6:	f240 3253 	movw	r2, #851	; 0x353
 80183da:	498d      	ldr	r1, [pc, #564]	; (8018610 <tcp_split_unsent_seg+0x280>)
 80183dc:	488b      	ldr	r0, [pc, #556]	; (801860c <tcp_split_unsent_seg+0x27c>)
 80183de:	f002 fbe1 	bl	801aba4 <iprintf>
    return ERR_VAL;
 80183e2:	f06f 0305 	mvn.w	r3, #5
 80183e6:	e109      	b.n	80185fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	891b      	ldrh	r3, [r3, #8]
 80183ec:	887a      	ldrh	r2, [r7, #2]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d301      	bcc.n	80183f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80183f2:	2300      	movs	r3, #0
 80183f4:	e102      	b.n	80185fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183fa:	887a      	ldrh	r2, [r7, #2]
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d906      	bls.n	801840e <tcp_split_unsent_seg+0x7e>
 8018400:	4b80      	ldr	r3, [pc, #512]	; (8018604 <tcp_split_unsent_seg+0x274>)
 8018402:	f240 325b 	movw	r2, #859	; 0x35b
 8018406:	4983      	ldr	r1, [pc, #524]	; (8018614 <tcp_split_unsent_seg+0x284>)
 8018408:	4880      	ldr	r0, [pc, #512]	; (801860c <tcp_split_unsent_seg+0x27c>)
 801840a:	f002 fbcb 	bl	801aba4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801840e:	697b      	ldr	r3, [r7, #20]
 8018410:	891b      	ldrh	r3, [r3, #8]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d106      	bne.n	8018424 <tcp_split_unsent_seg+0x94>
 8018416:	4b7b      	ldr	r3, [pc, #492]	; (8018604 <tcp_split_unsent_seg+0x274>)
 8018418:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801841c:	497e      	ldr	r1, [pc, #504]	; (8018618 <tcp_split_unsent_seg+0x288>)
 801841e:	487b      	ldr	r0, [pc, #492]	; (801860c <tcp_split_unsent_seg+0x27c>)
 8018420:	f002 fbc0 	bl	801aba4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	7a9b      	ldrb	r3, [r3, #10]
 8018428:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801842a:	7bfb      	ldrb	r3, [r7, #15]
 801842c:	009b      	lsls	r3, r3, #2
 801842e:	b2db      	uxtb	r3, r3
 8018430:	f003 0304 	and.w	r3, r3, #4
 8018434:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018436:	697b      	ldr	r3, [r7, #20]
 8018438:	891a      	ldrh	r2, [r3, #8]
 801843a:	887b      	ldrh	r3, [r7, #2]
 801843c:	1ad3      	subs	r3, r2, r3
 801843e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018440:	7bbb      	ldrb	r3, [r7, #14]
 8018442:	b29a      	uxth	r2, r3
 8018444:	89bb      	ldrh	r3, [r7, #12]
 8018446:	4413      	add	r3, r2
 8018448:	b29b      	uxth	r3, r3
 801844a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801844e:	4619      	mov	r1, r3
 8018450:	2036      	movs	r0, #54	; 0x36
 8018452:	f7fa fb51 	bl	8012af8 <pbuf_alloc>
 8018456:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	2b00      	cmp	r3, #0
 801845c:	f000 80b7 	beq.w	80185ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018460:	697b      	ldr	r3, [r7, #20]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	891a      	ldrh	r2, [r3, #8]
 8018466:	697b      	ldr	r3, [r7, #20]
 8018468:	891b      	ldrh	r3, [r3, #8]
 801846a:	1ad3      	subs	r3, r2, r3
 801846c:	b29a      	uxth	r2, r3
 801846e:	887b      	ldrh	r3, [r7, #2]
 8018470:	4413      	add	r3, r2
 8018472:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	6858      	ldr	r0, [r3, #4]
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	685a      	ldr	r2, [r3, #4]
 801847c:	7bbb      	ldrb	r3, [r7, #14]
 801847e:	18d1      	adds	r1, r2, r3
 8018480:	897b      	ldrh	r3, [r7, #10]
 8018482:	89ba      	ldrh	r2, [r7, #12]
 8018484:	f7fb f854 	bl	8013530 <pbuf_copy_partial>
 8018488:	4603      	mov	r3, r0
 801848a:	461a      	mov	r2, r3
 801848c:	89bb      	ldrh	r3, [r7, #12]
 801848e:	4293      	cmp	r3, r2
 8018490:	f040 809f 	bne.w	80185d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	68db      	ldr	r3, [r3, #12]
 8018498:	899b      	ldrh	r3, [r3, #12]
 801849a:	b29b      	uxth	r3, r3
 801849c:	4618      	mov	r0, r3
 801849e:	f7f9 f9a7 	bl	80117f0 <lwip_htons>
 80184a2:	4603      	mov	r3, r0
 80184a4:	b2db      	uxtb	r3, r3
 80184a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80184ac:	2300      	movs	r3, #0
 80184ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80184b0:	7efb      	ldrb	r3, [r7, #27]
 80184b2:	f003 0308 	and.w	r3, r3, #8
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d007      	beq.n	80184ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80184ba:	7efb      	ldrb	r3, [r7, #27]
 80184bc:	f023 0308 	bic.w	r3, r3, #8
 80184c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80184c2:	7ebb      	ldrb	r3, [r7, #26]
 80184c4:	f043 0308 	orr.w	r3, r3, #8
 80184c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80184ca:	7efb      	ldrb	r3, [r7, #27]
 80184cc:	f003 0301 	and.w	r3, r3, #1
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d007      	beq.n	80184e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80184d4:	7efb      	ldrb	r3, [r7, #27]
 80184d6:	f023 0301 	bic.w	r3, r3, #1
 80184da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80184dc:	7ebb      	ldrb	r3, [r7, #26]
 80184de:	f043 0301 	orr.w	r3, r3, #1
 80184e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	68db      	ldr	r3, [r3, #12]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7f9 f995 	bl	801181a <lwip_htonl>
 80184f0:	4602      	mov	r2, r0
 80184f2:	887b      	ldrh	r3, [r7, #2]
 80184f4:	18d1      	adds	r1, r2, r3
 80184f6:	7eba      	ldrb	r2, [r7, #26]
 80184f8:	7bfb      	ldrb	r3, [r7, #15]
 80184fa:	9300      	str	r3, [sp, #0]
 80184fc:	460b      	mov	r3, r1
 80184fe:	6939      	ldr	r1, [r7, #16]
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f7ff fa4f 	bl	80179a4 <tcp_create_segment>
 8018506:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018508:	69fb      	ldr	r3, [r7, #28]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d063      	beq.n	80185d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	685b      	ldr	r3, [r3, #4]
 8018512:	4618      	mov	r0, r3
 8018514:	f7fa fe94 	bl	8013240 <pbuf_clen>
 8018518:	4603      	mov	r3, r0
 801851a:	461a      	mov	r2, r3
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018522:	1a9b      	subs	r3, r3, r2
 8018524:	b29a      	uxth	r2, r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	6858      	ldr	r0, [r3, #4]
 8018530:	697b      	ldr	r3, [r7, #20]
 8018532:	685b      	ldr	r3, [r3, #4]
 8018534:	891a      	ldrh	r2, [r3, #8]
 8018536:	89bb      	ldrh	r3, [r7, #12]
 8018538:	1ad3      	subs	r3, r2, r3
 801853a:	b29b      	uxth	r3, r3
 801853c:	4619      	mov	r1, r3
 801853e:	f7fa fc39 	bl	8012db4 <pbuf_realloc>
  useg->len -= remainder;
 8018542:	697b      	ldr	r3, [r7, #20]
 8018544:	891a      	ldrh	r2, [r3, #8]
 8018546:	89bb      	ldrh	r3, [r7, #12]
 8018548:	1ad3      	subs	r3, r2, r3
 801854a:	b29a      	uxth	r2, r3
 801854c:	697b      	ldr	r3, [r7, #20]
 801854e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018550:	697b      	ldr	r3, [r7, #20]
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	899b      	ldrh	r3, [r3, #12]
 8018556:	b29c      	uxth	r4, r3
 8018558:	7efb      	ldrb	r3, [r7, #27]
 801855a:	b29b      	uxth	r3, r3
 801855c:	4618      	mov	r0, r3
 801855e:	f7f9 f947 	bl	80117f0 <lwip_htons>
 8018562:	4603      	mov	r3, r0
 8018564:	461a      	mov	r2, r3
 8018566:	697b      	ldr	r3, [r7, #20]
 8018568:	68db      	ldr	r3, [r3, #12]
 801856a:	4322      	orrs	r2, r4
 801856c:	b292      	uxth	r2, r2
 801856e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	4618      	mov	r0, r3
 8018576:	f7fa fe63 	bl	8013240 <pbuf_clen>
 801857a:	4603      	mov	r3, r0
 801857c:	461a      	mov	r2, r3
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018584:	4413      	add	r3, r2
 8018586:	b29a      	uxth	r2, r3
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	4618      	mov	r0, r3
 8018594:	f7fa fe54 	bl	8013240 <pbuf_clen>
 8018598:	4603      	mov	r3, r0
 801859a:	461a      	mov	r2, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80185a2:	4413      	add	r3, r2
 80185a4:	b29a      	uxth	r2, r3
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	681a      	ldr	r2, [r3, #0]
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	69fa      	ldr	r2, [r7, #28]
 80185b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80185ba:	69fb      	ldr	r3, [r7, #28]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d103      	bne.n	80185ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	2200      	movs	r2, #0
 80185c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80185ca:	2300      	movs	r3, #0
 80185cc:	e016      	b.n	80185fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80185ce:	bf00      	nop
 80185d0:	e002      	b.n	80185d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80185d2:	bf00      	nop
 80185d4:	e000      	b.n	80185d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80185d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80185d8:	69fb      	ldr	r3, [r7, #28]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d006      	beq.n	80185ec <tcp_split_unsent_seg+0x25c>
 80185de:	4b09      	ldr	r3, [pc, #36]	; (8018604 <tcp_split_unsent_seg+0x274>)
 80185e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80185e4:	490d      	ldr	r1, [pc, #52]	; (801861c <tcp_split_unsent_seg+0x28c>)
 80185e6:	4809      	ldr	r0, [pc, #36]	; (801860c <tcp_split_unsent_seg+0x27c>)
 80185e8:	f002 fadc 	bl	801aba4 <iprintf>
  if (p != NULL) {
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d002      	beq.n	80185f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80185f2:	6938      	ldr	r0, [r7, #16]
 80185f4:	f7fa fd96 	bl	8013124 <pbuf_free>
  }

  return ERR_MEM;
 80185f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3724      	adds	r7, #36	; 0x24
 8018600:	46bd      	mov	sp, r7
 8018602:	bd90      	pop	{r4, r7, pc}
 8018604:	0801f970 	.word	0x0801f970
 8018608:	0801fd88 	.word	0x0801fd88
 801860c:	0801fa48 	.word	0x0801fa48
 8018610:	0801fdac 	.word	0x0801fdac
 8018614:	0801fdd0 	.word	0x0801fdd0
 8018618:	0801fde0 	.word	0x0801fde0
 801861c:	0801fdf0 	.word	0x0801fdf0

08018620 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018620:	b590      	push	{r4, r7, lr}
 8018622:	b085      	sub	sp, #20
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d106      	bne.n	801863c <tcp_send_fin+0x1c>
 801862e:	4b21      	ldr	r3, [pc, #132]	; (80186b4 <tcp_send_fin+0x94>)
 8018630:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8018634:	4920      	ldr	r1, [pc, #128]	; (80186b8 <tcp_send_fin+0x98>)
 8018636:	4821      	ldr	r0, [pc, #132]	; (80186bc <tcp_send_fin+0x9c>)
 8018638:	f002 fab4 	bl	801aba4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018640:	2b00      	cmp	r3, #0
 8018642:	d02e      	beq.n	80186a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018648:	60fb      	str	r3, [r7, #12]
 801864a:	e002      	b.n	8018652 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d1f8      	bne.n	801864c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	68db      	ldr	r3, [r3, #12]
 801865e:	899b      	ldrh	r3, [r3, #12]
 8018660:	b29b      	uxth	r3, r3
 8018662:	4618      	mov	r0, r3
 8018664:	f7f9 f8c4 	bl	80117f0 <lwip_htons>
 8018668:	4603      	mov	r3, r0
 801866a:	b2db      	uxtb	r3, r3
 801866c:	f003 0307 	and.w	r3, r3, #7
 8018670:	2b00      	cmp	r3, #0
 8018672:	d116      	bne.n	80186a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	899b      	ldrh	r3, [r3, #12]
 801867a:	b29c      	uxth	r4, r3
 801867c:	2001      	movs	r0, #1
 801867e:	f7f9 f8b7 	bl	80117f0 <lwip_htons>
 8018682:	4603      	mov	r3, r0
 8018684:	461a      	mov	r2, r3
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	68db      	ldr	r3, [r3, #12]
 801868a:	4322      	orrs	r2, r4
 801868c:	b292      	uxth	r2, r2
 801868e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	8b5b      	ldrh	r3, [r3, #26]
 8018694:	f043 0320 	orr.w	r3, r3, #32
 8018698:	b29a      	uxth	r2, r3
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801869e:	2300      	movs	r3, #0
 80186a0:	e004      	b.n	80186ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80186a2:	2101      	movs	r1, #1
 80186a4:	6878      	ldr	r0, [r7, #4]
 80186a6:	f000 f80b 	bl	80186c0 <tcp_enqueue_flags>
 80186aa:	4603      	mov	r3, r0
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	3714      	adds	r7, #20
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd90      	pop	{r4, r7, pc}
 80186b4:	0801f970 	.word	0x0801f970
 80186b8:	0801fdfc 	.word	0x0801fdfc
 80186bc:	0801fa48 	.word	0x0801fa48

080186c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b08a      	sub	sp, #40	; 0x28
 80186c4:	af02      	add	r7, sp, #8
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	460b      	mov	r3, r1
 80186ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80186cc:	2300      	movs	r3, #0
 80186ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80186d0:	2300      	movs	r3, #0
 80186d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80186d4:	78fb      	ldrb	r3, [r7, #3]
 80186d6:	f003 0303 	and.w	r3, r3, #3
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d106      	bne.n	80186ec <tcp_enqueue_flags+0x2c>
 80186de:	4b67      	ldr	r3, [pc, #412]	; (801887c <tcp_enqueue_flags+0x1bc>)
 80186e0:	f240 4211 	movw	r2, #1041	; 0x411
 80186e4:	4966      	ldr	r1, [pc, #408]	; (8018880 <tcp_enqueue_flags+0x1c0>)
 80186e6:	4867      	ldr	r0, [pc, #412]	; (8018884 <tcp_enqueue_flags+0x1c4>)
 80186e8:	f002 fa5c 	bl	801aba4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d106      	bne.n	8018700 <tcp_enqueue_flags+0x40>
 80186f2:	4b62      	ldr	r3, [pc, #392]	; (801887c <tcp_enqueue_flags+0x1bc>)
 80186f4:	f240 4213 	movw	r2, #1043	; 0x413
 80186f8:	4963      	ldr	r1, [pc, #396]	; (8018888 <tcp_enqueue_flags+0x1c8>)
 80186fa:	4862      	ldr	r0, [pc, #392]	; (8018884 <tcp_enqueue_flags+0x1c4>)
 80186fc:	f002 fa52 	bl	801aba4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018700:	78fb      	ldrb	r3, [r7, #3]
 8018702:	f003 0302 	and.w	r3, r3, #2
 8018706:	2b00      	cmp	r3, #0
 8018708:	d001      	beq.n	801870e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801870a:	2301      	movs	r3, #1
 801870c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801870e:	7ffb      	ldrb	r3, [r7, #31]
 8018710:	009b      	lsls	r3, r3, #2
 8018712:	b2db      	uxtb	r3, r3
 8018714:	f003 0304 	and.w	r3, r3, #4
 8018718:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801871a:	7dfb      	ldrb	r3, [r7, #23]
 801871c:	b29b      	uxth	r3, r3
 801871e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018722:	4619      	mov	r1, r3
 8018724:	2036      	movs	r0, #54	; 0x36
 8018726:	f7fa f9e7 	bl	8012af8 <pbuf_alloc>
 801872a:	6138      	str	r0, [r7, #16]
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d109      	bne.n	8018746 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	8b5b      	ldrh	r3, [r3, #26]
 8018736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801873a:	b29a      	uxth	r2, r3
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018740:	f04f 33ff 	mov.w	r3, #4294967295
 8018744:	e095      	b.n	8018872 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	895a      	ldrh	r2, [r3, #10]
 801874a:	7dfb      	ldrb	r3, [r7, #23]
 801874c:	b29b      	uxth	r3, r3
 801874e:	429a      	cmp	r2, r3
 8018750:	d206      	bcs.n	8018760 <tcp_enqueue_flags+0xa0>
 8018752:	4b4a      	ldr	r3, [pc, #296]	; (801887c <tcp_enqueue_flags+0x1bc>)
 8018754:	f240 4239 	movw	r2, #1081	; 0x439
 8018758:	494c      	ldr	r1, [pc, #304]	; (801888c <tcp_enqueue_flags+0x1cc>)
 801875a:	484a      	ldr	r0, [pc, #296]	; (8018884 <tcp_enqueue_flags+0x1c4>)
 801875c:	f002 fa22 	bl	801aba4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018764:	78fa      	ldrb	r2, [r7, #3]
 8018766:	7ffb      	ldrb	r3, [r7, #31]
 8018768:	9300      	str	r3, [sp, #0]
 801876a:	460b      	mov	r3, r1
 801876c:	6939      	ldr	r1, [r7, #16]
 801876e:	6878      	ldr	r0, [r7, #4]
 8018770:	f7ff f918 	bl	80179a4 <tcp_create_segment>
 8018774:	60f8      	str	r0, [r7, #12]
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d109      	bne.n	8018790 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	8b5b      	ldrh	r3, [r3, #26]
 8018780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018784:	b29a      	uxth	r2, r3
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801878a:	f04f 33ff 	mov.w	r3, #4294967295
 801878e:	e070      	b.n	8018872 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	68db      	ldr	r3, [r3, #12]
 8018794:	f003 0303 	and.w	r3, r3, #3
 8018798:	2b00      	cmp	r3, #0
 801879a:	d006      	beq.n	80187aa <tcp_enqueue_flags+0xea>
 801879c:	4b37      	ldr	r3, [pc, #220]	; (801887c <tcp_enqueue_flags+0x1bc>)
 801879e:	f240 4242 	movw	r2, #1090	; 0x442
 80187a2:	493b      	ldr	r1, [pc, #236]	; (8018890 <tcp_enqueue_flags+0x1d0>)
 80187a4:	4837      	ldr	r0, [pc, #220]	; (8018884 <tcp_enqueue_flags+0x1c4>)
 80187a6:	f002 f9fd 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	891b      	ldrh	r3, [r3, #8]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d006      	beq.n	80187c0 <tcp_enqueue_flags+0x100>
 80187b2:	4b32      	ldr	r3, [pc, #200]	; (801887c <tcp_enqueue_flags+0x1bc>)
 80187b4:	f240 4243 	movw	r2, #1091	; 0x443
 80187b8:	4936      	ldr	r1, [pc, #216]	; (8018894 <tcp_enqueue_flags+0x1d4>)
 80187ba:	4832      	ldr	r0, [pc, #200]	; (8018884 <tcp_enqueue_flags+0x1c4>)
 80187bc:	f002 f9f2 	bl	801aba4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d103      	bne.n	80187d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	68fa      	ldr	r2, [r7, #12]
 80187cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80187ce:	e00d      	b.n	80187ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187d4:	61bb      	str	r3, [r7, #24]
 80187d6:	e002      	b.n	80187de <tcp_enqueue_flags+0x11e>
 80187d8:	69bb      	ldr	r3, [r7, #24]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	61bb      	str	r3, [r7, #24]
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d1f8      	bne.n	80187d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80187e6:	69bb      	ldr	r3, [r7, #24]
 80187e8:	68fa      	ldr	r2, [r7, #12]
 80187ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2200      	movs	r2, #0
 80187f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80187f4:	78fb      	ldrb	r3, [r7, #3]
 80187f6:	f003 0302 	and.w	r3, r3, #2
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d104      	bne.n	8018808 <tcp_enqueue_flags+0x148>
 80187fe:	78fb      	ldrb	r3, [r7, #3]
 8018800:	f003 0301 	and.w	r3, r3, #1
 8018804:	2b00      	cmp	r3, #0
 8018806:	d004      	beq.n	8018812 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801880c:	1c5a      	adds	r2, r3, #1
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018812:	78fb      	ldrb	r3, [r7, #3]
 8018814:	f003 0301 	and.w	r3, r3, #1
 8018818:	2b00      	cmp	r3, #0
 801881a:	d006      	beq.n	801882a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	8b5b      	ldrh	r3, [r3, #26]
 8018820:	f043 0320 	orr.w	r3, r3, #32
 8018824:	b29a      	uxth	r2, r3
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	685b      	ldr	r3, [r3, #4]
 801882e:	4618      	mov	r0, r3
 8018830:	f7fa fd06 	bl	8013240 <pbuf_clen>
 8018834:	4603      	mov	r3, r0
 8018836:	461a      	mov	r2, r3
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801883e:	4413      	add	r3, r2
 8018840:	b29a      	uxth	r2, r3
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801884e:	2b00      	cmp	r3, #0
 8018850:	d00e      	beq.n	8018870 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018856:	2b00      	cmp	r3, #0
 8018858:	d10a      	bne.n	8018870 <tcp_enqueue_flags+0x1b0>
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801885e:	2b00      	cmp	r3, #0
 8018860:	d106      	bne.n	8018870 <tcp_enqueue_flags+0x1b0>
 8018862:	4b06      	ldr	r3, [pc, #24]	; (801887c <tcp_enqueue_flags+0x1bc>)
 8018864:	f240 4265 	movw	r2, #1125	; 0x465
 8018868:	490b      	ldr	r1, [pc, #44]	; (8018898 <tcp_enqueue_flags+0x1d8>)
 801886a:	4806      	ldr	r0, [pc, #24]	; (8018884 <tcp_enqueue_flags+0x1c4>)
 801886c:	f002 f99a 	bl	801aba4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018870:	2300      	movs	r3, #0
}
 8018872:	4618      	mov	r0, r3
 8018874:	3720      	adds	r7, #32
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	0801f970 	.word	0x0801f970
 8018880:	0801fe18 	.word	0x0801fe18
 8018884:	0801fa48 	.word	0x0801fa48
 8018888:	0801fe70 	.word	0x0801fe70
 801888c:	0801fe90 	.word	0x0801fe90
 8018890:	0801fecc 	.word	0x0801fecc
 8018894:	0801fee4 	.word	0x0801fee4
 8018898:	0801ff10 	.word	0x0801ff10

0801889c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801889c:	b5b0      	push	{r4, r5, r7, lr}
 801889e:	b08a      	sub	sp, #40	; 0x28
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d106      	bne.n	80188b8 <tcp_output+0x1c>
 80188aa:	4b9e      	ldr	r3, [pc, #632]	; (8018b24 <tcp_output+0x288>)
 80188ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80188b0:	499d      	ldr	r1, [pc, #628]	; (8018b28 <tcp_output+0x28c>)
 80188b2:	489e      	ldr	r0, [pc, #632]	; (8018b2c <tcp_output+0x290>)
 80188b4:	f002 f976 	bl	801aba4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	7d1b      	ldrb	r3, [r3, #20]
 80188bc:	2b01      	cmp	r3, #1
 80188be:	d106      	bne.n	80188ce <tcp_output+0x32>
 80188c0:	4b98      	ldr	r3, [pc, #608]	; (8018b24 <tcp_output+0x288>)
 80188c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80188c6:	499a      	ldr	r1, [pc, #616]	; (8018b30 <tcp_output+0x294>)
 80188c8:	4898      	ldr	r0, [pc, #608]	; (8018b2c <tcp_output+0x290>)
 80188ca:	f002 f96b 	bl	801aba4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80188ce:	4b99      	ldr	r3, [pc, #612]	; (8018b34 <tcp_output+0x298>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	687a      	ldr	r2, [r7, #4]
 80188d4:	429a      	cmp	r2, r3
 80188d6:	d101      	bne.n	80188dc <tcp_output+0x40>
    return ERR_OK;
 80188d8:	2300      	movs	r3, #0
 80188da:	e1ce      	b.n	8018c7a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80188e8:	4293      	cmp	r3, r2
 80188ea:	bf28      	it	cs
 80188ec:	4613      	movcs	r3, r2
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80188f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d10b      	bne.n	8018916 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	8b5b      	ldrh	r3, [r3, #26]
 8018902:	f003 0302 	and.w	r3, r3, #2
 8018906:	2b00      	cmp	r3, #0
 8018908:	f000 81aa 	beq.w	8018c60 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801890c:	6878      	ldr	r0, [r7, #4]
 801890e:	f000 fdcb 	bl	80194a8 <tcp_send_empty_ack>
 8018912:	4603      	mov	r3, r0
 8018914:	e1b1      	b.n	8018c7a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018916:	6879      	ldr	r1, [r7, #4]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	3304      	adds	r3, #4
 801891c:	461a      	mov	r2, r3
 801891e:	6878      	ldr	r0, [r7, #4]
 8018920:	f7ff f824 	bl	801796c <tcp_route>
 8018924:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d102      	bne.n	8018932 <tcp_output+0x96>
    return ERR_RTE;
 801892c:	f06f 0303 	mvn.w	r3, #3
 8018930:	e1a3      	b.n	8018c7a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d003      	beq.n	8018940 <tcp_output+0xa4>
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d111      	bne.n	8018964 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d002      	beq.n	801894c <tcp_output+0xb0>
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	3304      	adds	r3, #4
 801894a:	e000      	b.n	801894e <tcp_output+0xb2>
 801894c:	2300      	movs	r3, #0
 801894e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018950:	693b      	ldr	r3, [r7, #16]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d102      	bne.n	801895c <tcp_output+0xc0>
      return ERR_RTE;
 8018956:	f06f 0303 	mvn.w	r3, #3
 801895a:	e18e      	b.n	8018c7a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801895c:	693b      	ldr	r3, [r7, #16]
 801895e:	681a      	ldr	r2, [r3, #0]
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018966:	68db      	ldr	r3, [r3, #12]
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	4618      	mov	r0, r3
 801896c:	f7f8 ff55 	bl	801181a <lwip_htonl>
 8018970:	4602      	mov	r2, r0
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018976:	1ad3      	subs	r3, r2, r3
 8018978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801897a:	8912      	ldrh	r2, [r2, #8]
 801897c:	4413      	add	r3, r2
 801897e:	69ba      	ldr	r2, [r7, #24]
 8018980:	429a      	cmp	r2, r3
 8018982:	d227      	bcs.n	80189d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801898a:	461a      	mov	r2, r3
 801898c:	69bb      	ldr	r3, [r7, #24]
 801898e:	4293      	cmp	r3, r2
 8018990:	d114      	bne.n	80189bc <tcp_output+0x120>
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018996:	2b00      	cmp	r3, #0
 8018998:	d110      	bne.n	80189bc <tcp_output+0x120>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d10b      	bne.n	80189bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	2200      	movs	r2, #0
 80189a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2201      	movs	r2, #1
 80189b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2200      	movs	r2, #0
 80189b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	8b5b      	ldrh	r3, [r3, #26]
 80189c0:	f003 0302 	and.w	r3, r3, #2
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	f000 814d 	beq.w	8018c64 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80189ca:	6878      	ldr	r0, [r7, #4]
 80189cc:	f000 fd6c 	bl	80194a8 <tcp_send_empty_ack>
 80189d0:	4603      	mov	r3, r0
 80189d2:	e152      	b.n	8018c7a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2200      	movs	r2, #0
 80189d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80189e2:	6a3b      	ldr	r3, [r7, #32]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	f000 811c 	beq.w	8018c22 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80189ea:	e002      	b.n	80189f2 <tcp_output+0x156>
 80189ec:	6a3b      	ldr	r3, [r7, #32]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	623b      	str	r3, [r7, #32]
 80189f2:	6a3b      	ldr	r3, [r7, #32]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d1f8      	bne.n	80189ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80189fa:	e112      	b.n	8018c22 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80189fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	899b      	ldrh	r3, [r3, #12]
 8018a02:	b29b      	uxth	r3, r3
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7f8 fef3 	bl	80117f0 <lwip_htons>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	b2db      	uxtb	r3, r3
 8018a0e:	f003 0304 	and.w	r3, r3, #4
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d006      	beq.n	8018a24 <tcp_output+0x188>
 8018a16:	4b43      	ldr	r3, [pc, #268]	; (8018b24 <tcp_output+0x288>)
 8018a18:	f240 5236 	movw	r2, #1334	; 0x536
 8018a1c:	4946      	ldr	r1, [pc, #280]	; (8018b38 <tcp_output+0x29c>)
 8018a1e:	4843      	ldr	r0, [pc, #268]	; (8018b2c <tcp_output+0x290>)
 8018a20:	f002 f8c0 	bl	801aba4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d01f      	beq.n	8018a6c <tcp_output+0x1d0>
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	8b5b      	ldrh	r3, [r3, #26]
 8018a30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d119      	bne.n	8018a6c <tcp_output+0x1d0>
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d00b      	beq.n	8018a58 <tcp_output+0x1bc>
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d110      	bne.n	8018a6c <tcp_output+0x1d0>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a4e:	891a      	ldrh	r2, [r3, #8]
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a54:	429a      	cmp	r2, r3
 8018a56:	d209      	bcs.n	8018a6c <tcp_output+0x1d0>
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d004      	beq.n	8018a6c <tcp_output+0x1d0>
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a68:	2b07      	cmp	r3, #7
 8018a6a:	d901      	bls.n	8018a70 <tcp_output+0x1d4>
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	e000      	b.n	8018a72 <tcp_output+0x1d6>
 8018a70:	2300      	movs	r3, #0
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d106      	bne.n	8018a84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	8b5b      	ldrh	r3, [r3, #26]
 8018a7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	f000 80e4 	beq.w	8018c4c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	7d1b      	ldrb	r3, [r3, #20]
 8018a88:	2b02      	cmp	r3, #2
 8018a8a:	d00d      	beq.n	8018aa8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8e:	68db      	ldr	r3, [r3, #12]
 8018a90:	899b      	ldrh	r3, [r3, #12]
 8018a92:	b29c      	uxth	r4, r3
 8018a94:	2010      	movs	r0, #16
 8018a96:	f7f8 feab 	bl	80117f0 <lwip_htons>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	461a      	mov	r2, r3
 8018a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa0:	68db      	ldr	r3, [r3, #12]
 8018aa2:	4322      	orrs	r2, r4
 8018aa4:	b292      	uxth	r2, r2
 8018aa6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018aa8:	697a      	ldr	r2, [r7, #20]
 8018aaa:	6879      	ldr	r1, [r7, #4]
 8018aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018aae:	f000 f909 	bl	8018cc4 <tcp_output_segment>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d009      	beq.n	8018ad2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	8b5b      	ldrh	r3, [r3, #26]
 8018ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ac6:	b29a      	uxth	r2, r3
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	835a      	strh	r2, [r3, #26]
      return err;
 8018acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ad0:	e0d3      	b.n	8018c7a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad4:	681a      	ldr	r2, [r3, #0]
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	7d1b      	ldrb	r3, [r3, #20]
 8018ade:	2b02      	cmp	r3, #2
 8018ae0:	d006      	beq.n	8018af0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	8b5b      	ldrh	r3, [r3, #26]
 8018ae6:	f023 0303 	bic.w	r3, r3, #3
 8018aea:	b29a      	uxth	r2, r3
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018af2:	68db      	ldr	r3, [r3, #12]
 8018af4:	685b      	ldr	r3, [r3, #4]
 8018af6:	4618      	mov	r0, r3
 8018af8:	f7f8 fe8f 	bl	801181a <lwip_htonl>
 8018afc:	4604      	mov	r4, r0
 8018afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b00:	891b      	ldrh	r3, [r3, #8]
 8018b02:	461d      	mov	r5, r3
 8018b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b06:	68db      	ldr	r3, [r3, #12]
 8018b08:	899b      	ldrh	r3, [r3, #12]
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7f8 fe6f 	bl	80117f0 <lwip_htons>
 8018b12:	4603      	mov	r3, r0
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	f003 0303 	and.w	r3, r3, #3
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d00e      	beq.n	8018b3c <tcp_output+0x2a0>
 8018b1e:	2301      	movs	r3, #1
 8018b20:	e00d      	b.n	8018b3e <tcp_output+0x2a2>
 8018b22:	bf00      	nop
 8018b24:	0801f970 	.word	0x0801f970
 8018b28:	0801ff38 	.word	0x0801ff38
 8018b2c:	0801fa48 	.word	0x0801fa48
 8018b30:	0801ff50 	.word	0x0801ff50
 8018b34:	2000c678 	.word	0x2000c678
 8018b38:	0801ff78 	.word	0x0801ff78
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	442b      	add	r3, r5
 8018b40:	4423      	add	r3, r4
 8018b42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	1ad3      	subs	r3, r2, r3
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	da02      	bge.n	8018b56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	68ba      	ldr	r2, [r7, #8]
 8018b54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b58:	891b      	ldrh	r3, [r3, #8]
 8018b5a:	461c      	mov	r4, r3
 8018b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b5e:	68db      	ldr	r3, [r3, #12]
 8018b60:	899b      	ldrh	r3, [r3, #12]
 8018b62:	b29b      	uxth	r3, r3
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7f8 fe43 	bl	80117f0 <lwip_htons>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	f003 0303 	and.w	r3, r3, #3
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d001      	beq.n	8018b7a <tcp_output+0x2de>
 8018b76:	2301      	movs	r3, #1
 8018b78:	e000      	b.n	8018b7c <tcp_output+0x2e0>
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	4423      	add	r3, r4
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d049      	beq.n	8018c16 <tcp_output+0x37a>
      seg->next = NULL;
 8018b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b84:	2200      	movs	r2, #0
 8018b86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d105      	bne.n	8018b9c <tcp_output+0x300>
        pcb->unacked = seg;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b98:	623b      	str	r3, [r7, #32]
 8018b9a:	e03f      	b.n	8018c1c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9e:	68db      	ldr	r3, [r3, #12]
 8018ba0:	685b      	ldr	r3, [r3, #4]
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7f8 fe39 	bl	801181a <lwip_htonl>
 8018ba8:	4604      	mov	r4, r0
 8018baa:	6a3b      	ldr	r3, [r7, #32]
 8018bac:	68db      	ldr	r3, [r3, #12]
 8018bae:	685b      	ldr	r3, [r3, #4]
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7f8 fe32 	bl	801181a <lwip_htonl>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	1ae3      	subs	r3, r4, r3
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	da24      	bge.n	8018c08 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	3370      	adds	r3, #112	; 0x70
 8018bc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018bc4:	e002      	b.n	8018bcc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018bc6:	69fb      	ldr	r3, [r7, #28]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018bcc:	69fb      	ldr	r3, [r7, #28]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d011      	beq.n	8018bf8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018bd4:	69fb      	ldr	r3, [r7, #28]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	68db      	ldr	r3, [r3, #12]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7f8 fe1c 	bl	801181a <lwip_htonl>
 8018be2:	4604      	mov	r4, r0
 8018be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be6:	68db      	ldr	r3, [r3, #12]
 8018be8:	685b      	ldr	r3, [r3, #4]
 8018bea:	4618      	mov	r0, r3
 8018bec:	f7f8 fe15 	bl	801181a <lwip_htonl>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	dbe6      	blt.n	8018bc6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018bf8:	69fb      	ldr	r3, [r7, #28]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018c00:	69fb      	ldr	r3, [r7, #28]
 8018c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c04:	601a      	str	r2, [r3, #0]
 8018c06:	e009      	b.n	8018c1c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018c08:	6a3b      	ldr	r3, [r7, #32]
 8018c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c0c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018c0e:	6a3b      	ldr	r3, [r7, #32]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	623b      	str	r3, [r7, #32]
 8018c14:	e002      	b.n	8018c1c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c18:	f7fb ff1b 	bl	8014a52 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c20:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d012      	beq.n	8018c4e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2a:	68db      	ldr	r3, [r3, #12]
 8018c2c:	685b      	ldr	r3, [r3, #4]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7f8 fdf3 	bl	801181a <lwip_htonl>
 8018c34:	4602      	mov	r2, r0
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c3a:	1ad3      	subs	r3, r2, r3
 8018c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c3e:	8912      	ldrh	r2, [r2, #8]
 8018c40:	4413      	add	r3, r2
  while (seg != NULL &&
 8018c42:	69ba      	ldr	r2, [r7, #24]
 8018c44:	429a      	cmp	r2, r3
 8018c46:	f4bf aed9 	bcs.w	80189fc <tcp_output+0x160>
 8018c4a:	e000      	b.n	8018c4e <tcp_output+0x3b2>
      break;
 8018c4c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d108      	bne.n	8018c68 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	2200      	movs	r2, #0
 8018c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018c5e:	e004      	b.n	8018c6a <tcp_output+0x3ce>
    goto output_done;
 8018c60:	bf00      	nop
 8018c62:	e002      	b.n	8018c6a <tcp_output+0x3ce>
    goto output_done;
 8018c64:	bf00      	nop
 8018c66:	e000      	b.n	8018c6a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018c68:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	8b5b      	ldrh	r3, [r3, #26]
 8018c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018c72:	b29a      	uxth	r2, r3
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018c78:	2300      	movs	r3, #0
}
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3728      	adds	r7, #40	; 0x28
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bdb0      	pop	{r4, r5, r7, pc}
 8018c82:	bf00      	nop

08018c84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d106      	bne.n	8018ca0 <tcp_output_segment_busy+0x1c>
 8018c92:	4b09      	ldr	r3, [pc, #36]	; (8018cb8 <tcp_output_segment_busy+0x34>)
 8018c94:	f240 529a 	movw	r2, #1434	; 0x59a
 8018c98:	4908      	ldr	r1, [pc, #32]	; (8018cbc <tcp_output_segment_busy+0x38>)
 8018c9a:	4809      	ldr	r0, [pc, #36]	; (8018cc0 <tcp_output_segment_busy+0x3c>)
 8018c9c:	f001 ff82 	bl	801aba4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	7b9b      	ldrb	r3, [r3, #14]
 8018ca6:	2b01      	cmp	r3, #1
 8018ca8:	d001      	beq.n	8018cae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018caa:	2301      	movs	r3, #1
 8018cac:	e000      	b.n	8018cb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018cae:	2300      	movs	r3, #0
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3708      	adds	r7, #8
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	0801f970 	.word	0x0801f970
 8018cbc:	0801ff90 	.word	0x0801ff90
 8018cc0:	0801fa48 	.word	0x0801fa48

08018cc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018cc4:	b5b0      	push	{r4, r5, r7, lr}
 8018cc6:	b08c      	sub	sp, #48	; 0x30
 8018cc8:	af04      	add	r7, sp, #16
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d106      	bne.n	8018ce4 <tcp_output_segment+0x20>
 8018cd6:	4b63      	ldr	r3, [pc, #396]	; (8018e64 <tcp_output_segment+0x1a0>)
 8018cd8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018cdc:	4962      	ldr	r1, [pc, #392]	; (8018e68 <tcp_output_segment+0x1a4>)
 8018cde:	4863      	ldr	r0, [pc, #396]	; (8018e6c <tcp_output_segment+0x1a8>)
 8018ce0:	f001 ff60 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018ce4:	68bb      	ldr	r3, [r7, #8]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d106      	bne.n	8018cf8 <tcp_output_segment+0x34>
 8018cea:	4b5e      	ldr	r3, [pc, #376]	; (8018e64 <tcp_output_segment+0x1a0>)
 8018cec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018cf0:	495f      	ldr	r1, [pc, #380]	; (8018e70 <tcp_output_segment+0x1ac>)
 8018cf2:	485e      	ldr	r0, [pc, #376]	; (8018e6c <tcp_output_segment+0x1a8>)
 8018cf4:	f001 ff56 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d106      	bne.n	8018d0c <tcp_output_segment+0x48>
 8018cfe:	4b59      	ldr	r3, [pc, #356]	; (8018e64 <tcp_output_segment+0x1a0>)
 8018d00:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018d04:	495b      	ldr	r1, [pc, #364]	; (8018e74 <tcp_output_segment+0x1b0>)
 8018d06:	4859      	ldr	r0, [pc, #356]	; (8018e6c <tcp_output_segment+0x1a8>)
 8018d08:	f001 ff4c 	bl	801aba4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018d0c:	68f8      	ldr	r0, [r7, #12]
 8018d0e:	f7ff ffb9 	bl	8018c84 <tcp_output_segment_busy>
 8018d12:	4603      	mov	r3, r0
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d001      	beq.n	8018d1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	e09f      	b.n	8018e5c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018d1c:	68bb      	ldr	r3, [r7, #8]
 8018d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	68dc      	ldr	r4, [r3, #12]
 8018d24:	4610      	mov	r0, r2
 8018d26:	f7f8 fd78 	bl	801181a <lwip_htonl>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018d2e:	68bb      	ldr	r3, [r7, #8]
 8018d30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	68dc      	ldr	r4, [r3, #12]
 8018d36:	4610      	mov	r0, r2
 8018d38:	f7f8 fd5a 	bl	80117f0 <lwip_htons>
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d44:	68ba      	ldr	r2, [r7, #8]
 8018d46:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018d48:	441a      	add	r2, r3
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	68db      	ldr	r3, [r3, #12]
 8018d52:	3314      	adds	r3, #20
 8018d54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	7a9b      	ldrb	r3, [r3, #10]
 8018d5a:	f003 0301 	and.w	r3, r3, #1
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d015      	beq.n	8018d8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018d62:	68bb      	ldr	r3, [r7, #8]
 8018d64:	3304      	adds	r3, #4
 8018d66:	461a      	mov	r2, r3
 8018d68:	6879      	ldr	r1, [r7, #4]
 8018d6a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8018d6e:	f7fc fa35 	bl	80151dc <tcp_eff_send_mss_netif>
 8018d72:	4603      	mov	r3, r0
 8018d74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018d76:	8b7b      	ldrh	r3, [r7, #26]
 8018d78:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7f8 fd4c 	bl	801181a <lwip_htonl>
 8018d82:	4602      	mov	r2, r0
 8018d84:	69fb      	ldr	r3, [r7, #28]
 8018d86:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018d88:	69fb      	ldr	r3, [r7, #28]
 8018d8a:	3304      	adds	r3, #4
 8018d8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018d8e:	68bb      	ldr	r3, [r7, #8]
 8018d90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	da02      	bge.n	8018d9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018d98:	68bb      	ldr	r3, [r7, #8]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d10c      	bne.n	8018dc0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018da6:	4b34      	ldr	r3, [pc, #208]	; (8018e78 <tcp_output_segment+0x1b4>)
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	68db      	ldr	r3, [r3, #12]
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	4618      	mov	r0, r3
 8018db6:	f7f8 fd30 	bl	801181a <lwip_htonl>
 8018dba:	4602      	mov	r2, r0
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	68da      	ldr	r2, [r3, #12]
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	1ad3      	subs	r3, r2, r3
 8018dcc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	685b      	ldr	r3, [r3, #4]
 8018dd2:	8959      	ldrh	r1, [r3, #10]
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	685b      	ldr	r3, [r3, #4]
 8018dd8:	8b3a      	ldrh	r2, [r7, #24]
 8018dda:	1a8a      	subs	r2, r1, r2
 8018ddc:	b292      	uxth	r2, r2
 8018dde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	685b      	ldr	r3, [r3, #4]
 8018de4:	8919      	ldrh	r1, [r3, #8]
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	8b3a      	ldrh	r2, [r7, #24]
 8018dec:	1a8a      	subs	r2, r1, r2
 8018dee:	b292      	uxth	r2, r2
 8018df0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	685b      	ldr	r3, [r3, #4]
 8018df6:	68fa      	ldr	r2, [r7, #12]
 8018df8:	68d2      	ldr	r2, [r2, #12]
 8018dfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	68db      	ldr	r3, [r3, #12]
 8018e00:	2200      	movs	r2, #0
 8018e02:	741a      	strb	r2, [r3, #16]
 8018e04:	2200      	movs	r2, #0
 8018e06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	68db      	ldr	r3, [r3, #12]
 8018e0c:	f103 0214 	add.w	r2, r3, #20
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	7a9b      	ldrb	r3, [r3, #10]
 8018e14:	009b      	lsls	r3, r3, #2
 8018e16:	f003 0304 	and.w	r3, r3, #4
 8018e1a:	4413      	add	r3, r2
 8018e1c:	69fa      	ldr	r2, [r7, #28]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d006      	beq.n	8018e30 <tcp_output_segment+0x16c>
 8018e22:	4b10      	ldr	r3, [pc, #64]	; (8018e64 <tcp_output_segment+0x1a0>)
 8018e24:	f240 621c 	movw	r2, #1564	; 0x61c
 8018e28:	4914      	ldr	r1, [pc, #80]	; (8018e7c <tcp_output_segment+0x1b8>)
 8018e2a:	4810      	ldr	r0, [pc, #64]	; (8018e6c <tcp_output_segment+0x1a8>)
 8018e2c:	f001 feba 	bl	801aba4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	6858      	ldr	r0, [r3, #4]
 8018e34:	68b9      	ldr	r1, [r7, #8]
 8018e36:	68bb      	ldr	r3, [r7, #8]
 8018e38:	1d1c      	adds	r4, r3, #4
 8018e3a:	68bb      	ldr	r3, [r7, #8]
 8018e3c:	7add      	ldrb	r5, [r3, #11]
 8018e3e:	68bb      	ldr	r3, [r7, #8]
 8018e40:	7a9b      	ldrb	r3, [r3, #10]
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	9202      	str	r2, [sp, #8]
 8018e46:	2206      	movs	r2, #6
 8018e48:	9201      	str	r2, [sp, #4]
 8018e4a:	9300      	str	r3, [sp, #0]
 8018e4c:	462b      	mov	r3, r5
 8018e4e:	4622      	mov	r2, r4
 8018e50:	f7f7 fd7c 	bl	801094c <ip4_output_if>
 8018e54:	4603      	mov	r3, r0
 8018e56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3720      	adds	r7, #32
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bdb0      	pop	{r4, r5, r7, pc}
 8018e64:	0801f970 	.word	0x0801f970
 8018e68:	0801ffb8 	.word	0x0801ffb8
 8018e6c:	0801fa48 	.word	0x0801fa48
 8018e70:	0801ffd8 	.word	0x0801ffd8
 8018e74:	0801fff8 	.word	0x0801fff8
 8018e78:	2000c668 	.word	0x2000c668
 8018e7c:	0802001c 	.word	0x0802001c

08018e80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018e80:	b5b0      	push	{r4, r5, r7, lr}
 8018e82:	b084      	sub	sp, #16
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d106      	bne.n	8018e9c <tcp_rexmit_rto_prepare+0x1c>
 8018e8e:	4b31      	ldr	r3, [pc, #196]	; (8018f54 <tcp_rexmit_rto_prepare+0xd4>)
 8018e90:	f240 6263 	movw	r2, #1635	; 0x663
 8018e94:	4930      	ldr	r1, [pc, #192]	; (8018f58 <tcp_rexmit_rto_prepare+0xd8>)
 8018e96:	4831      	ldr	r0, [pc, #196]	; (8018f5c <tcp_rexmit_rto_prepare+0xdc>)
 8018e98:	f001 fe84 	bl	801aba4 <iprintf>

  if (pcb->unacked == NULL) {
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d102      	bne.n	8018eaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018ea4:	f06f 0305 	mvn.w	r3, #5
 8018ea8:	e050      	b.n	8018f4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018eae:	60fb      	str	r3, [r7, #12]
 8018eb0:	e00b      	b.n	8018eca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018eb2:	68f8      	ldr	r0, [r7, #12]
 8018eb4:	f7ff fee6 	bl	8018c84 <tcp_output_segment_busy>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d002      	beq.n	8018ec4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018ebe:	f06f 0305 	mvn.w	r3, #5
 8018ec2:	e043      	b.n	8018f4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	60fb      	str	r3, [r7, #12]
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d1ef      	bne.n	8018eb2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018ed2:	68f8      	ldr	r0, [r7, #12]
 8018ed4:	f7ff fed6 	bl	8018c84 <tcp_output_segment_busy>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d002      	beq.n	8018ee4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018ede:	f06f 0305 	mvn.w	r3, #5
 8018ee2:	e033      	b.n	8018f4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	8b5b      	ldrh	r3, [r3, #26]
 8018efe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	68db      	ldr	r3, [r3, #12]
 8018f0c:	685b      	ldr	r3, [r3, #4]
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7f8 fc83 	bl	801181a <lwip_htonl>
 8018f14:	4604      	mov	r4, r0
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	891b      	ldrh	r3, [r3, #8]
 8018f1a:	461d      	mov	r5, r3
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	68db      	ldr	r3, [r3, #12]
 8018f20:	899b      	ldrh	r3, [r3, #12]
 8018f22:	b29b      	uxth	r3, r3
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f8 fc63 	bl	80117f0 <lwip_htons>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	f003 0303 	and.w	r3, r3, #3
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d001      	beq.n	8018f3a <tcp_rexmit_rto_prepare+0xba>
 8018f36:	2301      	movs	r3, #1
 8018f38:	e000      	b.n	8018f3c <tcp_rexmit_rto_prepare+0xbc>
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	442b      	add	r3, r5
 8018f3e:	18e2      	adds	r2, r4, r3
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2200      	movs	r2, #0
 8018f48:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018f4a:	2300      	movs	r3, #0
}
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	3710      	adds	r7, #16
 8018f50:	46bd      	mov	sp, r7
 8018f52:	bdb0      	pop	{r4, r5, r7, pc}
 8018f54:	0801f970 	.word	0x0801f970
 8018f58:	08020030 	.word	0x08020030
 8018f5c:	0801fa48 	.word	0x0801fa48

08018f60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b082      	sub	sp, #8
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d106      	bne.n	8018f7c <tcp_rexmit_rto_commit+0x1c>
 8018f6e:	4b0d      	ldr	r3, [pc, #52]	; (8018fa4 <tcp_rexmit_rto_commit+0x44>)
 8018f70:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018f74:	490c      	ldr	r1, [pc, #48]	; (8018fa8 <tcp_rexmit_rto_commit+0x48>)
 8018f76:	480d      	ldr	r0, [pc, #52]	; (8018fac <tcp_rexmit_rto_commit+0x4c>)
 8018f78:	f001 fe14 	bl	801aba4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f82:	2bff      	cmp	r3, #255	; 0xff
 8018f84:	d007      	beq.n	8018f96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f8c:	3301      	adds	r3, #1
 8018f8e:	b2da      	uxtb	r2, r3
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f7ff fc80 	bl	801889c <tcp_output>
}
 8018f9c:	bf00      	nop
 8018f9e:	3708      	adds	r7, #8
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}
 8018fa4:	0801f970 	.word	0x0801f970
 8018fa8:	08020054 	.word	0x08020054
 8018fac:	0801fa48 	.word	0x0801fa48

08018fb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d106      	bne.n	8018fcc <tcp_rexmit_rto+0x1c>
 8018fbe:	4b0a      	ldr	r3, [pc, #40]	; (8018fe8 <tcp_rexmit_rto+0x38>)
 8018fc0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018fc4:	4909      	ldr	r1, [pc, #36]	; (8018fec <tcp_rexmit_rto+0x3c>)
 8018fc6:	480a      	ldr	r0, [pc, #40]	; (8018ff0 <tcp_rexmit_rto+0x40>)
 8018fc8:	f001 fdec 	bl	801aba4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	f7ff ff57 	bl	8018e80 <tcp_rexmit_rto_prepare>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d102      	bne.n	8018fde <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018fd8:	6878      	ldr	r0, [r7, #4]
 8018fda:	f7ff ffc1 	bl	8018f60 <tcp_rexmit_rto_commit>
  }
}
 8018fde:	bf00      	nop
 8018fe0:	3708      	adds	r7, #8
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}
 8018fe6:	bf00      	nop
 8018fe8:	0801f970 	.word	0x0801f970
 8018fec:	08020078 	.word	0x08020078
 8018ff0:	0801fa48 	.word	0x0801fa48

08018ff4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018ff4:	b590      	push	{r4, r7, lr}
 8018ff6:	b085      	sub	sp, #20
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d106      	bne.n	8019010 <tcp_rexmit+0x1c>
 8019002:	4b2f      	ldr	r3, [pc, #188]	; (80190c0 <tcp_rexmit+0xcc>)
 8019004:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8019008:	492e      	ldr	r1, [pc, #184]	; (80190c4 <tcp_rexmit+0xd0>)
 801900a:	482f      	ldr	r0, [pc, #188]	; (80190c8 <tcp_rexmit+0xd4>)
 801900c:	f001 fdca 	bl	801aba4 <iprintf>

  if (pcb->unacked == NULL) {
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019014:	2b00      	cmp	r3, #0
 8019016:	d102      	bne.n	801901e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019018:	f06f 0305 	mvn.w	r3, #5
 801901c:	e04c      	b.n	80190b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019022:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019024:	68b8      	ldr	r0, [r7, #8]
 8019026:	f7ff fe2d 	bl	8018c84 <tcp_output_segment_busy>
 801902a:	4603      	mov	r3, r0
 801902c:	2b00      	cmp	r3, #0
 801902e:	d002      	beq.n	8019036 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019030:	f06f 0305 	mvn.w	r3, #5
 8019034:	e040      	b.n	80190b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	336c      	adds	r3, #108	; 0x6c
 8019042:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019044:	e002      	b.n	801904c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d011      	beq.n	8019078 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	68db      	ldr	r3, [r3, #12]
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	4618      	mov	r0, r3
 801905e:	f7f8 fbdc 	bl	801181a <lwip_htonl>
 8019062:	4604      	mov	r4, r0
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	68db      	ldr	r3, [r3, #12]
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	4618      	mov	r0, r3
 801906c:	f7f8 fbd5 	bl	801181a <lwip_htonl>
 8019070:	4603      	mov	r3, r0
 8019072:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019074:	2b00      	cmp	r3, #0
 8019076:	dbe6      	blt.n	8019046 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	681a      	ldr	r2, [r3, #0]
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	68ba      	ldr	r2, [r7, #8]
 8019084:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019086:	68bb      	ldr	r3, [r7, #8]
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d103      	bne.n	8019096 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2200      	movs	r2, #0
 8019092:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801909c:	2bff      	cmp	r3, #255	; 0xff
 801909e:	d007      	beq.n	80190b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80190a6:	3301      	adds	r3, #1
 80190a8:	b2da      	uxtb	r2, r3
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	2200      	movs	r2, #0
 80190b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80190b6:	2300      	movs	r3, #0
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3714      	adds	r7, #20
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd90      	pop	{r4, r7, pc}
 80190c0:	0801f970 	.word	0x0801f970
 80190c4:	08020094 	.word	0x08020094
 80190c8:	0801fa48 	.word	0x0801fa48

080190cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b082      	sub	sp, #8
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d106      	bne.n	80190e8 <tcp_rexmit_fast+0x1c>
 80190da:	4b2a      	ldr	r3, [pc, #168]	; (8019184 <tcp_rexmit_fast+0xb8>)
 80190dc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80190e0:	4929      	ldr	r1, [pc, #164]	; (8019188 <tcp_rexmit_fast+0xbc>)
 80190e2:	482a      	ldr	r0, [pc, #168]	; (801918c <tcp_rexmit_fast+0xc0>)
 80190e4:	f001 fd5e 	bl	801aba4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d045      	beq.n	801917c <tcp_rexmit_fast+0xb0>
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	8b5b      	ldrh	r3, [r3, #26]
 80190f4:	f003 0304 	and.w	r3, r3, #4
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d13f      	bne.n	801917c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f7ff ff79 	bl	8018ff4 <tcp_rexmit>
 8019102:	4603      	mov	r3, r0
 8019104:	2b00      	cmp	r3, #0
 8019106:	d139      	bne.n	801917c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019114:	4293      	cmp	r3, r2
 8019116:	bf28      	it	cs
 8019118:	4613      	movcs	r3, r2
 801911a:	b29b      	uxth	r3, r3
 801911c:	2b00      	cmp	r3, #0
 801911e:	da00      	bge.n	8019122 <tcp_rexmit_fast+0x56>
 8019120:	3301      	adds	r3, #1
 8019122:	105b      	asrs	r3, r3, #1
 8019124:	b29a      	uxth	r2, r3
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019132:	461a      	mov	r2, r3
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019138:	005b      	lsls	r3, r3, #1
 801913a:	429a      	cmp	r2, r3
 801913c:	d206      	bcs.n	801914c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019142:	005b      	lsls	r3, r3, #1
 8019144:	b29a      	uxth	r2, r3
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019156:	4619      	mov	r1, r3
 8019158:	0049      	lsls	r1, r1, #1
 801915a:	440b      	add	r3, r1
 801915c:	b29b      	uxth	r3, r3
 801915e:	4413      	add	r3, r2
 8019160:	b29a      	uxth	r2, r3
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	8b5b      	ldrh	r3, [r3, #26]
 801916c:	f043 0304 	orr.w	r3, r3, #4
 8019170:	b29a      	uxth	r2, r3
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2200      	movs	r2, #0
 801917a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801917c:	bf00      	nop
 801917e:	3708      	adds	r7, #8
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}
 8019184:	0801f970 	.word	0x0801f970
 8019188:	080200ac 	.word	0x080200ac
 801918c:	0801fa48 	.word	0x0801fa48

08019190 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b086      	sub	sp, #24
 8019194:	af00      	add	r7, sp, #0
 8019196:	60f8      	str	r0, [r7, #12]
 8019198:	607b      	str	r3, [r7, #4]
 801919a:	460b      	mov	r3, r1
 801919c:	817b      	strh	r3, [r7, #10]
 801919e:	4613      	mov	r3, r2
 80191a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80191a2:	897a      	ldrh	r2, [r7, #10]
 80191a4:	893b      	ldrh	r3, [r7, #8]
 80191a6:	4413      	add	r3, r2
 80191a8:	b29b      	uxth	r3, r3
 80191aa:	3314      	adds	r3, #20
 80191ac:	b29b      	uxth	r3, r3
 80191ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80191b2:	4619      	mov	r1, r3
 80191b4:	2022      	movs	r0, #34	; 0x22
 80191b6:	f7f9 fc9f 	bl	8012af8 <pbuf_alloc>
 80191ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d04d      	beq.n	801925e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80191c2:	897b      	ldrh	r3, [r7, #10]
 80191c4:	3313      	adds	r3, #19
 80191c6:	697a      	ldr	r2, [r7, #20]
 80191c8:	8952      	ldrh	r2, [r2, #10]
 80191ca:	4293      	cmp	r3, r2
 80191cc:	db06      	blt.n	80191dc <tcp_output_alloc_header_common+0x4c>
 80191ce:	4b26      	ldr	r3, [pc, #152]	; (8019268 <tcp_output_alloc_header_common+0xd8>)
 80191d0:	f240 7223 	movw	r2, #1827	; 0x723
 80191d4:	4925      	ldr	r1, [pc, #148]	; (801926c <tcp_output_alloc_header_common+0xdc>)
 80191d6:	4826      	ldr	r0, [pc, #152]	; (8019270 <tcp_output_alloc_header_common+0xe0>)
 80191d8:	f001 fce4 	bl	801aba4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80191dc:	697b      	ldr	r3, [r7, #20]
 80191de:	685b      	ldr	r3, [r3, #4]
 80191e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80191e2:	8c3b      	ldrh	r3, [r7, #32]
 80191e4:	4618      	mov	r0, r3
 80191e6:	f7f8 fb03 	bl	80117f0 <lwip_htons>
 80191ea:	4603      	mov	r3, r0
 80191ec:	461a      	mov	r2, r3
 80191ee:	693b      	ldr	r3, [r7, #16]
 80191f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80191f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7f8 fafb 	bl	80117f0 <lwip_htons>
 80191fa:	4603      	mov	r3, r0
 80191fc:	461a      	mov	r2, r3
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019202:	693b      	ldr	r3, [r7, #16]
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019208:	68f8      	ldr	r0, [r7, #12]
 801920a:	f7f8 fb06 	bl	801181a <lwip_htonl>
 801920e:	4602      	mov	r2, r0
 8019210:	693b      	ldr	r3, [r7, #16]
 8019212:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019214:	897b      	ldrh	r3, [r7, #10]
 8019216:	089b      	lsrs	r3, r3, #2
 8019218:	b29b      	uxth	r3, r3
 801921a:	3305      	adds	r3, #5
 801921c:	b29b      	uxth	r3, r3
 801921e:	031b      	lsls	r3, r3, #12
 8019220:	b29a      	uxth	r2, r3
 8019222:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019226:	b29b      	uxth	r3, r3
 8019228:	4313      	orrs	r3, r2
 801922a:	b29b      	uxth	r3, r3
 801922c:	4618      	mov	r0, r3
 801922e:	f7f8 fadf 	bl	80117f0 <lwip_htons>
 8019232:	4603      	mov	r3, r0
 8019234:	461a      	mov	r2, r3
 8019236:	693b      	ldr	r3, [r7, #16]
 8019238:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801923a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801923c:	4618      	mov	r0, r3
 801923e:	f7f8 fad7 	bl	80117f0 <lwip_htons>
 8019242:	4603      	mov	r3, r0
 8019244:	461a      	mov	r2, r3
 8019246:	693b      	ldr	r3, [r7, #16]
 8019248:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	2200      	movs	r2, #0
 801924e:	741a      	strb	r2, [r3, #16]
 8019250:	2200      	movs	r2, #0
 8019252:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019254:	693b      	ldr	r3, [r7, #16]
 8019256:	2200      	movs	r2, #0
 8019258:	749a      	strb	r2, [r3, #18]
 801925a:	2200      	movs	r2, #0
 801925c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801925e:	697b      	ldr	r3, [r7, #20]
}
 8019260:	4618      	mov	r0, r3
 8019262:	3718      	adds	r7, #24
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	0801f970 	.word	0x0801f970
 801926c:	080200cc 	.word	0x080200cc
 8019270:	0801fa48 	.word	0x0801fa48

08019274 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019274:	b5b0      	push	{r4, r5, r7, lr}
 8019276:	b08a      	sub	sp, #40	; 0x28
 8019278:	af04      	add	r7, sp, #16
 801927a:	60f8      	str	r0, [r7, #12]
 801927c:	607b      	str	r3, [r7, #4]
 801927e:	460b      	mov	r3, r1
 8019280:	817b      	strh	r3, [r7, #10]
 8019282:	4613      	mov	r3, r2
 8019284:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d106      	bne.n	801929a <tcp_output_alloc_header+0x26>
 801928c:	4b15      	ldr	r3, [pc, #84]	; (80192e4 <tcp_output_alloc_header+0x70>)
 801928e:	f240 7242 	movw	r2, #1858	; 0x742
 8019292:	4915      	ldr	r1, [pc, #84]	; (80192e8 <tcp_output_alloc_header+0x74>)
 8019294:	4815      	ldr	r0, [pc, #84]	; (80192ec <tcp_output_alloc_header+0x78>)
 8019296:	f001 fc85 	bl	801aba4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	8adb      	ldrh	r3, [r3, #22]
 80192a2:	68fa      	ldr	r2, [r7, #12]
 80192a4:	8b12      	ldrh	r2, [r2, #24]
 80192a6:	68f9      	ldr	r1, [r7, #12]
 80192a8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80192aa:	893d      	ldrh	r5, [r7, #8]
 80192ac:	897c      	ldrh	r4, [r7, #10]
 80192ae:	9103      	str	r1, [sp, #12]
 80192b0:	2110      	movs	r1, #16
 80192b2:	9102      	str	r1, [sp, #8]
 80192b4:	9201      	str	r2, [sp, #4]
 80192b6:	9300      	str	r3, [sp, #0]
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	462a      	mov	r2, r5
 80192bc:	4621      	mov	r1, r4
 80192be:	f7ff ff67 	bl	8019190 <tcp_output_alloc_header_common>
 80192c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d006      	beq.n	80192d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ce:	68fa      	ldr	r2, [r7, #12]
 80192d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80192d2:	441a      	add	r2, r3
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80192d8:	697b      	ldr	r3, [r7, #20]
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3718      	adds	r7, #24
 80192de:	46bd      	mov	sp, r7
 80192e0:	bdb0      	pop	{r4, r5, r7, pc}
 80192e2:	bf00      	nop
 80192e4:	0801f970 	.word	0x0801f970
 80192e8:	080200fc 	.word	0x080200fc
 80192ec:	0801fa48 	.word	0x0801fa48

080192f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b088      	sub	sp, #32
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	60f8      	str	r0, [r7, #12]
 80192f8:	60b9      	str	r1, [r7, #8]
 80192fa:	4611      	mov	r1, r2
 80192fc:	461a      	mov	r2, r3
 80192fe:	460b      	mov	r3, r1
 8019300:	71fb      	strb	r3, [r7, #7]
 8019302:	4613      	mov	r3, r2
 8019304:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019306:	2300      	movs	r3, #0
 8019308:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d106      	bne.n	801931e <tcp_output_fill_options+0x2e>
 8019310:	4b13      	ldr	r3, [pc, #76]	; (8019360 <tcp_output_fill_options+0x70>)
 8019312:	f240 7256 	movw	r2, #1878	; 0x756
 8019316:	4913      	ldr	r1, [pc, #76]	; (8019364 <tcp_output_fill_options+0x74>)
 8019318:	4813      	ldr	r0, [pc, #76]	; (8019368 <tcp_output_fill_options+0x78>)
 801931a:	f001 fc43 	bl	801aba4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801931e:	68bb      	ldr	r3, [r7, #8]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019324:	69bb      	ldr	r3, [r7, #24]
 8019326:	3314      	adds	r3, #20
 8019328:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801932a:	69bb      	ldr	r3, [r7, #24]
 801932c:	f103 0214 	add.w	r2, r3, #20
 8019330:	8bfb      	ldrh	r3, [r7, #30]
 8019332:	009b      	lsls	r3, r3, #2
 8019334:	4619      	mov	r1, r3
 8019336:	79fb      	ldrb	r3, [r7, #7]
 8019338:	009b      	lsls	r3, r3, #2
 801933a:	f003 0304 	and.w	r3, r3, #4
 801933e:	440b      	add	r3, r1
 8019340:	4413      	add	r3, r2
 8019342:	697a      	ldr	r2, [r7, #20]
 8019344:	429a      	cmp	r2, r3
 8019346:	d006      	beq.n	8019356 <tcp_output_fill_options+0x66>
 8019348:	4b05      	ldr	r3, [pc, #20]	; (8019360 <tcp_output_fill_options+0x70>)
 801934a:	f240 7275 	movw	r2, #1909	; 0x775
 801934e:	4907      	ldr	r1, [pc, #28]	; (801936c <tcp_output_fill_options+0x7c>)
 8019350:	4805      	ldr	r0, [pc, #20]	; (8019368 <tcp_output_fill_options+0x78>)
 8019352:	f001 fc27 	bl	801aba4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019356:	bf00      	nop
 8019358:	3720      	adds	r7, #32
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
 801935e:	bf00      	nop
 8019360:	0801f970 	.word	0x0801f970
 8019364:	08020124 	.word	0x08020124
 8019368:	0801fa48 	.word	0x0801fa48
 801936c:	0802001c 	.word	0x0802001c

08019370 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b08a      	sub	sp, #40	; 0x28
 8019374:	af04      	add	r7, sp, #16
 8019376:	60f8      	str	r0, [r7, #12]
 8019378:	60b9      	str	r1, [r7, #8]
 801937a:	607a      	str	r2, [r7, #4]
 801937c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d106      	bne.n	8019392 <tcp_output_control_segment+0x22>
 8019384:	4b1c      	ldr	r3, [pc, #112]	; (80193f8 <tcp_output_control_segment+0x88>)
 8019386:	f240 7287 	movw	r2, #1927	; 0x787
 801938a:	491c      	ldr	r1, [pc, #112]	; (80193fc <tcp_output_control_segment+0x8c>)
 801938c:	481c      	ldr	r0, [pc, #112]	; (8019400 <tcp_output_control_segment+0x90>)
 801938e:	f001 fc09 	bl	801aba4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019392:	683a      	ldr	r2, [r7, #0]
 8019394:	6879      	ldr	r1, [r7, #4]
 8019396:	68f8      	ldr	r0, [r7, #12]
 8019398:	f7fe fae8 	bl	801796c <tcp_route>
 801939c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801939e:	693b      	ldr	r3, [r7, #16]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d102      	bne.n	80193aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80193a4:	23fc      	movs	r3, #252	; 0xfc
 80193a6:	75fb      	strb	r3, [r7, #23]
 80193a8:	e01c      	b.n	80193e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d006      	beq.n	80193be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	7adb      	ldrb	r3, [r3, #11]
 80193b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	7a9b      	ldrb	r3, [r3, #10]
 80193ba:	757b      	strb	r3, [r7, #21]
 80193bc:	e003      	b.n	80193c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80193be:	23ff      	movs	r3, #255	; 0xff
 80193c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80193c2:	2300      	movs	r3, #0
 80193c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80193c6:	7dba      	ldrb	r2, [r7, #22]
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	9302      	str	r3, [sp, #8]
 80193cc:	2306      	movs	r3, #6
 80193ce:	9301      	str	r3, [sp, #4]
 80193d0:	7d7b      	ldrb	r3, [r7, #21]
 80193d2:	9300      	str	r3, [sp, #0]
 80193d4:	4613      	mov	r3, r2
 80193d6:	683a      	ldr	r2, [r7, #0]
 80193d8:	6879      	ldr	r1, [r7, #4]
 80193da:	68b8      	ldr	r0, [r7, #8]
 80193dc:	f7f7 fab6 	bl	801094c <ip4_output_if>
 80193e0:	4603      	mov	r3, r0
 80193e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80193e4:	68b8      	ldr	r0, [r7, #8]
 80193e6:	f7f9 fe9d 	bl	8013124 <pbuf_free>
  return err;
 80193ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	3718      	adds	r7, #24
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	0801f970 	.word	0x0801f970
 80193fc:	0802014c 	.word	0x0802014c
 8019400:	0801fa48 	.word	0x0801fa48

08019404 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019404:	b590      	push	{r4, r7, lr}
 8019406:	b08b      	sub	sp, #44	; 0x2c
 8019408:	af04      	add	r7, sp, #16
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	60b9      	str	r1, [r7, #8]
 801940e:	607a      	str	r2, [r7, #4]
 8019410:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019412:	683b      	ldr	r3, [r7, #0]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d106      	bne.n	8019426 <tcp_rst+0x22>
 8019418:	4b1f      	ldr	r3, [pc, #124]	; (8019498 <tcp_rst+0x94>)
 801941a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801941e:	491f      	ldr	r1, [pc, #124]	; (801949c <tcp_rst+0x98>)
 8019420:	481f      	ldr	r0, [pc, #124]	; (80194a0 <tcp_rst+0x9c>)
 8019422:	f001 fbbf 	bl	801aba4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8019426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019428:	2b00      	cmp	r3, #0
 801942a:	d106      	bne.n	801943a <tcp_rst+0x36>
 801942c:	4b1a      	ldr	r3, [pc, #104]	; (8019498 <tcp_rst+0x94>)
 801942e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8019432:	491c      	ldr	r1, [pc, #112]	; (80194a4 <tcp_rst+0xa0>)
 8019434:	481a      	ldr	r0, [pc, #104]	; (80194a0 <tcp_rst+0x9c>)
 8019436:	f001 fbb5 	bl	801aba4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801943a:	2300      	movs	r3, #0
 801943c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801943e:	f646 030b 	movw	r3, #26635	; 0x680b
 8019442:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019444:	7dfb      	ldrb	r3, [r7, #23]
 8019446:	b29c      	uxth	r4, r3
 8019448:	68b8      	ldr	r0, [r7, #8]
 801944a:	f7f8 f9e6 	bl	801181a <lwip_htonl>
 801944e:	4602      	mov	r2, r0
 8019450:	8abb      	ldrh	r3, [r7, #20]
 8019452:	9303      	str	r3, [sp, #12]
 8019454:	2314      	movs	r3, #20
 8019456:	9302      	str	r3, [sp, #8]
 8019458:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801945a:	9301      	str	r3, [sp, #4]
 801945c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801945e:	9300      	str	r3, [sp, #0]
 8019460:	4613      	mov	r3, r2
 8019462:	2200      	movs	r2, #0
 8019464:	4621      	mov	r1, r4
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f7ff fe92 	bl	8019190 <tcp_output_alloc_header_common>
 801946c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801946e:	693b      	ldr	r3, [r7, #16]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d00c      	beq.n	801948e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019474:	7dfb      	ldrb	r3, [r7, #23]
 8019476:	2200      	movs	r2, #0
 8019478:	6939      	ldr	r1, [r7, #16]
 801947a:	68f8      	ldr	r0, [r7, #12]
 801947c:	f7ff ff38 	bl	80192f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019482:	683a      	ldr	r2, [r7, #0]
 8019484:	6939      	ldr	r1, [r7, #16]
 8019486:	68f8      	ldr	r0, [r7, #12]
 8019488:	f7ff ff72 	bl	8019370 <tcp_output_control_segment>
 801948c:	e000      	b.n	8019490 <tcp_rst+0x8c>
    return;
 801948e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019490:	371c      	adds	r7, #28
 8019492:	46bd      	mov	sp, r7
 8019494:	bd90      	pop	{r4, r7, pc}
 8019496:	bf00      	nop
 8019498:	0801f970 	.word	0x0801f970
 801949c:	08020178 	.word	0x08020178
 80194a0:	0801fa48 	.word	0x0801fa48
 80194a4:	08020194 	.word	0x08020194

080194a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80194a8:	b590      	push	{r4, r7, lr}
 80194aa:	b087      	sub	sp, #28
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80194b0:	2300      	movs	r3, #0
 80194b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80194b4:	2300      	movs	r3, #0
 80194b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d106      	bne.n	80194cc <tcp_send_empty_ack+0x24>
 80194be:	4b28      	ldr	r3, [pc, #160]	; (8019560 <tcp_send_empty_ack+0xb8>)
 80194c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80194c4:	4927      	ldr	r1, [pc, #156]	; (8019564 <tcp_send_empty_ack+0xbc>)
 80194c6:	4828      	ldr	r0, [pc, #160]	; (8019568 <tcp_send_empty_ack+0xc0>)
 80194c8:	f001 fb6c 	bl	801aba4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80194cc:	7dfb      	ldrb	r3, [r7, #23]
 80194ce:	009b      	lsls	r3, r3, #2
 80194d0:	b2db      	uxtb	r3, r3
 80194d2:	f003 0304 	and.w	r3, r3, #4
 80194d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80194d8:	7d7b      	ldrb	r3, [r7, #21]
 80194da:	b29c      	uxth	r4, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7f8 f99a 	bl	801181a <lwip_htonl>
 80194e6:	4603      	mov	r3, r0
 80194e8:	2200      	movs	r2, #0
 80194ea:	4621      	mov	r1, r4
 80194ec:	6878      	ldr	r0, [r7, #4]
 80194ee:	f7ff fec1 	bl	8019274 <tcp_output_alloc_header>
 80194f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194f4:	693b      	ldr	r3, [r7, #16]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d109      	bne.n	801950e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	8b5b      	ldrh	r3, [r3, #26]
 80194fe:	f043 0303 	orr.w	r3, r3, #3
 8019502:	b29a      	uxth	r2, r3
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019508:	f06f 0301 	mvn.w	r3, #1
 801950c:	e023      	b.n	8019556 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801950e:	7dbb      	ldrb	r3, [r7, #22]
 8019510:	7dfa      	ldrb	r2, [r7, #23]
 8019512:	6939      	ldr	r1, [r7, #16]
 8019514:	6878      	ldr	r0, [r7, #4]
 8019516:	f7ff feeb 	bl	80192f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801951a:	687a      	ldr	r2, [r7, #4]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	3304      	adds	r3, #4
 8019520:	6939      	ldr	r1, [r7, #16]
 8019522:	6878      	ldr	r0, [r7, #4]
 8019524:	f7ff ff24 	bl	8019370 <tcp_output_control_segment>
 8019528:	4603      	mov	r3, r0
 801952a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801952c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d007      	beq.n	8019544 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	8b5b      	ldrh	r3, [r3, #26]
 8019538:	f043 0303 	orr.w	r3, r3, #3
 801953c:	b29a      	uxth	r2, r3
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	835a      	strh	r2, [r3, #26]
 8019542:	e006      	b.n	8019552 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	8b5b      	ldrh	r3, [r3, #26]
 8019548:	f023 0303 	bic.w	r3, r3, #3
 801954c:	b29a      	uxth	r2, r3
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019552:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019556:	4618      	mov	r0, r3
 8019558:	371c      	adds	r7, #28
 801955a:	46bd      	mov	sp, r7
 801955c:	bd90      	pop	{r4, r7, pc}
 801955e:	bf00      	nop
 8019560:	0801f970 	.word	0x0801f970
 8019564:	080201b0 	.word	0x080201b0
 8019568:	0801fa48 	.word	0x0801fa48

0801956c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801956c:	b590      	push	{r4, r7, lr}
 801956e:	b087      	sub	sp, #28
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019574:	2300      	movs	r3, #0
 8019576:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d106      	bne.n	801958c <tcp_keepalive+0x20>
 801957e:	4b18      	ldr	r3, [pc, #96]	; (80195e0 <tcp_keepalive+0x74>)
 8019580:	f640 0224 	movw	r2, #2084	; 0x824
 8019584:	4917      	ldr	r1, [pc, #92]	; (80195e4 <tcp_keepalive+0x78>)
 8019586:	4818      	ldr	r0, [pc, #96]	; (80195e8 <tcp_keepalive+0x7c>)
 8019588:	f001 fb0c 	bl	801aba4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801958c:	7dfb      	ldrb	r3, [r7, #23]
 801958e:	b29c      	uxth	r4, r3
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019594:	3b01      	subs	r3, #1
 8019596:	4618      	mov	r0, r3
 8019598:	f7f8 f93f 	bl	801181a <lwip_htonl>
 801959c:	4603      	mov	r3, r0
 801959e:	2200      	movs	r2, #0
 80195a0:	4621      	mov	r1, r4
 80195a2:	6878      	ldr	r0, [r7, #4]
 80195a4:	f7ff fe66 	bl	8019274 <tcp_output_alloc_header>
 80195a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80195aa:	693b      	ldr	r3, [r7, #16]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d102      	bne.n	80195b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80195b0:	f04f 33ff 	mov.w	r3, #4294967295
 80195b4:	e010      	b.n	80195d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80195b6:	7dfb      	ldrb	r3, [r7, #23]
 80195b8:	2200      	movs	r2, #0
 80195ba:	6939      	ldr	r1, [r7, #16]
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f7ff fe97 	bl	80192f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80195c2:	687a      	ldr	r2, [r7, #4]
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	3304      	adds	r3, #4
 80195c8:	6939      	ldr	r1, [r7, #16]
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	f7ff fed0 	bl	8019370 <tcp_output_control_segment>
 80195d0:	4603      	mov	r3, r0
 80195d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80195d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80195d8:	4618      	mov	r0, r3
 80195da:	371c      	adds	r7, #28
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd90      	pop	{r4, r7, pc}
 80195e0:	0801f970 	.word	0x0801f970
 80195e4:	080201d0 	.word	0x080201d0
 80195e8:	0801fa48 	.word	0x0801fa48

080195ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80195ec:	b590      	push	{r4, r7, lr}
 80195ee:	b08b      	sub	sp, #44	; 0x2c
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80195f4:	2300      	movs	r3, #0
 80195f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d106      	bne.n	801960e <tcp_zero_window_probe+0x22>
 8019600:	4b4c      	ldr	r3, [pc, #304]	; (8019734 <tcp_zero_window_probe+0x148>)
 8019602:	f640 024f 	movw	r2, #2127	; 0x84f
 8019606:	494c      	ldr	r1, [pc, #304]	; (8019738 <tcp_zero_window_probe+0x14c>)
 8019608:	484c      	ldr	r0, [pc, #304]	; (801973c <tcp_zero_window_probe+0x150>)
 801960a:	f001 facb 	bl	801aba4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019612:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019614:	6a3b      	ldr	r3, [r7, #32]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d101      	bne.n	801961e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801961a:	2300      	movs	r3, #0
 801961c:	e086      	b.n	801972c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019624:	2bff      	cmp	r3, #255	; 0xff
 8019626:	d007      	beq.n	8019638 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801962e:	3301      	adds	r3, #1
 8019630:	b2da      	uxtb	r2, r3
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019638:	6a3b      	ldr	r3, [r7, #32]
 801963a:	68db      	ldr	r3, [r3, #12]
 801963c:	899b      	ldrh	r3, [r3, #12]
 801963e:	b29b      	uxth	r3, r3
 8019640:	4618      	mov	r0, r3
 8019642:	f7f8 f8d5 	bl	80117f0 <lwip_htons>
 8019646:	4603      	mov	r3, r0
 8019648:	b2db      	uxtb	r3, r3
 801964a:	f003 0301 	and.w	r3, r3, #1
 801964e:	2b00      	cmp	r3, #0
 8019650:	d005      	beq.n	801965e <tcp_zero_window_probe+0x72>
 8019652:	6a3b      	ldr	r3, [r7, #32]
 8019654:	891b      	ldrh	r3, [r3, #8]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d101      	bne.n	801965e <tcp_zero_window_probe+0x72>
 801965a:	2301      	movs	r3, #1
 801965c:	e000      	b.n	8019660 <tcp_zero_window_probe+0x74>
 801965e:	2300      	movs	r3, #0
 8019660:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019662:	7ffb      	ldrb	r3, [r7, #31]
 8019664:	2b00      	cmp	r3, #0
 8019666:	bf0c      	ite	eq
 8019668:	2301      	moveq	r3, #1
 801966a:	2300      	movne	r3, #0
 801966c:	b2db      	uxtb	r3, r3
 801966e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019674:	b299      	uxth	r1, r3
 8019676:	6a3b      	ldr	r3, [r7, #32]
 8019678:	68db      	ldr	r3, [r3, #12]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	8bba      	ldrh	r2, [r7, #28]
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f7ff fdf8 	bl	8019274 <tcp_output_alloc_header>
 8019684:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019686:	69bb      	ldr	r3, [r7, #24]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d102      	bne.n	8019692 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801968c:	f04f 33ff 	mov.w	r3, #4294967295
 8019690:	e04c      	b.n	801972c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019692:	69bb      	ldr	r3, [r7, #24]
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019698:	7ffb      	ldrb	r3, [r7, #31]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d011      	beq.n	80196c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801969e:	697b      	ldr	r3, [r7, #20]
 80196a0:	899b      	ldrh	r3, [r3, #12]
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	b21b      	sxth	r3, r3
 80196a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80196aa:	b21c      	sxth	r4, r3
 80196ac:	2011      	movs	r0, #17
 80196ae:	f7f8 f89f 	bl	80117f0 <lwip_htons>
 80196b2:	4603      	mov	r3, r0
 80196b4:	b21b      	sxth	r3, r3
 80196b6:	4323      	orrs	r3, r4
 80196b8:	b21b      	sxth	r3, r3
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	819a      	strh	r2, [r3, #12]
 80196c0:	e010      	b.n	80196e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80196c2:	69bb      	ldr	r3, [r7, #24]
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	3314      	adds	r3, #20
 80196c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80196ca:	6a3b      	ldr	r3, [r7, #32]
 80196cc:	6858      	ldr	r0, [r3, #4]
 80196ce:	6a3b      	ldr	r3, [r7, #32]
 80196d0:	685b      	ldr	r3, [r3, #4]
 80196d2:	891a      	ldrh	r2, [r3, #8]
 80196d4:	6a3b      	ldr	r3, [r7, #32]
 80196d6:	891b      	ldrh	r3, [r3, #8]
 80196d8:	1ad3      	subs	r3, r2, r3
 80196da:	b29b      	uxth	r3, r3
 80196dc:	2201      	movs	r2, #1
 80196de:	6939      	ldr	r1, [r7, #16]
 80196e0:	f7f9 ff26 	bl	8013530 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80196e4:	6a3b      	ldr	r3, [r7, #32]
 80196e6:	68db      	ldr	r3, [r3, #12]
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7f8 f895 	bl	801181a <lwip_htonl>
 80196f0:	4603      	mov	r3, r0
 80196f2:	3301      	adds	r3, #1
 80196f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	1ad3      	subs	r3, r2, r3
 80196fe:	2b00      	cmp	r3, #0
 8019700:	da02      	bge.n	8019708 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	68fa      	ldr	r2, [r7, #12]
 8019706:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801970c:	2200      	movs	r2, #0
 801970e:	69b9      	ldr	r1, [r7, #24]
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	f7ff fded 	bl	80192f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019716:	687a      	ldr	r2, [r7, #4]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	3304      	adds	r3, #4
 801971c:	69b9      	ldr	r1, [r7, #24]
 801971e:	6878      	ldr	r0, [r7, #4]
 8019720:	f7ff fe26 	bl	8019370 <tcp_output_control_segment>
 8019724:	4603      	mov	r3, r0
 8019726:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019728:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801972c:	4618      	mov	r0, r3
 801972e:	372c      	adds	r7, #44	; 0x2c
 8019730:	46bd      	mov	sp, r7
 8019732:	bd90      	pop	{r4, r7, pc}
 8019734:	0801f970 	.word	0x0801f970
 8019738:	080201ec 	.word	0x080201ec
 801973c:	0801fa48 	.word	0x0801fa48

08019740 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b082      	sub	sp, #8
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019748:	f7f9 ffe0 	bl	801370c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801974c:	4b0a      	ldr	r3, [pc, #40]	; (8019778 <tcpip_tcp_timer+0x38>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d103      	bne.n	801975c <tcpip_tcp_timer+0x1c>
 8019754:	4b09      	ldr	r3, [pc, #36]	; (801977c <tcpip_tcp_timer+0x3c>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d005      	beq.n	8019768 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801975c:	2200      	movs	r2, #0
 801975e:	4908      	ldr	r1, [pc, #32]	; (8019780 <tcpip_tcp_timer+0x40>)
 8019760:	20fa      	movs	r0, #250	; 0xfa
 8019762:	f000 f8f3 	bl	801994c <sys_timeout>
 8019766:	e003      	b.n	8019770 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019768:	4b06      	ldr	r3, [pc, #24]	; (8019784 <tcpip_tcp_timer+0x44>)
 801976a:	2200      	movs	r2, #0
 801976c:	601a      	str	r2, [r3, #0]
  }
}
 801976e:	bf00      	nop
 8019770:	bf00      	nop
 8019772:	3708      	adds	r7, #8
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}
 8019778:	2000c664 	.word	0x2000c664
 801977c:	2000c674 	.word	0x2000c674
 8019780:	08019741 	.word	0x08019741
 8019784:	20008610 	.word	0x20008610

08019788 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019788:	b580      	push	{r7, lr}
 801978a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801978c:	4b0a      	ldr	r3, [pc, #40]	; (80197b8 <tcp_timer_needed+0x30>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d10f      	bne.n	80197b4 <tcp_timer_needed+0x2c>
 8019794:	4b09      	ldr	r3, [pc, #36]	; (80197bc <tcp_timer_needed+0x34>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d103      	bne.n	80197a4 <tcp_timer_needed+0x1c>
 801979c:	4b08      	ldr	r3, [pc, #32]	; (80197c0 <tcp_timer_needed+0x38>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d007      	beq.n	80197b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80197a4:	4b04      	ldr	r3, [pc, #16]	; (80197b8 <tcp_timer_needed+0x30>)
 80197a6:	2201      	movs	r2, #1
 80197a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80197aa:	2200      	movs	r2, #0
 80197ac:	4905      	ldr	r1, [pc, #20]	; (80197c4 <tcp_timer_needed+0x3c>)
 80197ae:	20fa      	movs	r0, #250	; 0xfa
 80197b0:	f000 f8cc 	bl	801994c <sys_timeout>
  }
}
 80197b4:	bf00      	nop
 80197b6:	bd80      	pop	{r7, pc}
 80197b8:	20008610 	.word	0x20008610
 80197bc:	2000c664 	.word	0x2000c664
 80197c0:	2000c674 	.word	0x2000c674
 80197c4:	08019741 	.word	0x08019741

080197c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b086      	sub	sp, #24
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80197d4:	200a      	movs	r0, #10
 80197d6:	f7f8 fd4d 	bl	8012274 <memp_malloc>
 80197da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d109      	bne.n	80197f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80197e2:	693b      	ldr	r3, [r7, #16]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d151      	bne.n	801988c <sys_timeout_abs+0xc4>
 80197e8:	4b2a      	ldr	r3, [pc, #168]	; (8019894 <sys_timeout_abs+0xcc>)
 80197ea:	22be      	movs	r2, #190	; 0xbe
 80197ec:	492a      	ldr	r1, [pc, #168]	; (8019898 <sys_timeout_abs+0xd0>)
 80197ee:	482b      	ldr	r0, [pc, #172]	; (801989c <sys_timeout_abs+0xd4>)
 80197f0:	f001 f9d8 	bl	801aba4 <iprintf>
    return;
 80197f4:	e04a      	b.n	801988c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80197f6:	693b      	ldr	r3, [r7, #16]
 80197f8:	2200      	movs	r2, #0
 80197fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80197fc:	693b      	ldr	r3, [r7, #16]
 80197fe:	68ba      	ldr	r2, [r7, #8]
 8019800:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	687a      	ldr	r2, [r7, #4]
 8019806:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019808:	693b      	ldr	r3, [r7, #16]
 801980a:	68fa      	ldr	r2, [r7, #12]
 801980c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801980e:	4b24      	ldr	r3, [pc, #144]	; (80198a0 <sys_timeout_abs+0xd8>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d103      	bne.n	801981e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019816:	4a22      	ldr	r2, [pc, #136]	; (80198a0 <sys_timeout_abs+0xd8>)
 8019818:	693b      	ldr	r3, [r7, #16]
 801981a:	6013      	str	r3, [r2, #0]
    return;
 801981c:	e037      	b.n	801988e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801981e:	693b      	ldr	r3, [r7, #16]
 8019820:	685a      	ldr	r2, [r3, #4]
 8019822:	4b1f      	ldr	r3, [pc, #124]	; (80198a0 <sys_timeout_abs+0xd8>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	685b      	ldr	r3, [r3, #4]
 8019828:	1ad3      	subs	r3, r2, r3
 801982a:	0fdb      	lsrs	r3, r3, #31
 801982c:	f003 0301 	and.w	r3, r3, #1
 8019830:	b2db      	uxtb	r3, r3
 8019832:	2b00      	cmp	r3, #0
 8019834:	d007      	beq.n	8019846 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019836:	4b1a      	ldr	r3, [pc, #104]	; (80198a0 <sys_timeout_abs+0xd8>)
 8019838:	681a      	ldr	r2, [r3, #0]
 801983a:	693b      	ldr	r3, [r7, #16]
 801983c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801983e:	4a18      	ldr	r2, [pc, #96]	; (80198a0 <sys_timeout_abs+0xd8>)
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	6013      	str	r3, [r2, #0]
 8019844:	e023      	b.n	801988e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019846:	4b16      	ldr	r3, [pc, #88]	; (80198a0 <sys_timeout_abs+0xd8>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	617b      	str	r3, [r7, #20]
 801984c:	e01a      	b.n	8019884 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801984e:	697b      	ldr	r3, [r7, #20]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d00b      	beq.n	801986e <sys_timeout_abs+0xa6>
 8019856:	693b      	ldr	r3, [r7, #16]
 8019858:	685a      	ldr	r2, [r3, #4]
 801985a:	697b      	ldr	r3, [r7, #20]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	685b      	ldr	r3, [r3, #4]
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	0fdb      	lsrs	r3, r3, #31
 8019864:	f003 0301 	and.w	r3, r3, #1
 8019868:	b2db      	uxtb	r3, r3
 801986a:	2b00      	cmp	r3, #0
 801986c:	d007      	beq.n	801987e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801986e:	697b      	ldr	r3, [r7, #20]
 8019870:	681a      	ldr	r2, [r3, #0]
 8019872:	693b      	ldr	r3, [r7, #16]
 8019874:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	693a      	ldr	r2, [r7, #16]
 801987a:	601a      	str	r2, [r3, #0]
        break;
 801987c:	e007      	b.n	801988e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801987e:	697b      	ldr	r3, [r7, #20]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	617b      	str	r3, [r7, #20]
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d1e1      	bne.n	801984e <sys_timeout_abs+0x86>
 801988a:	e000      	b.n	801988e <sys_timeout_abs+0xc6>
    return;
 801988c:	bf00      	nop
      }
    }
  }
}
 801988e:	3718      	adds	r7, #24
 8019890:	46bd      	mov	sp, r7
 8019892:	bd80      	pop	{r7, pc}
 8019894:	08020210 	.word	0x08020210
 8019898:	080202c8 	.word	0x080202c8
 801989c:	08020308 	.word	0x08020308
 80198a0:	20008608 	.word	0x20008608

080198a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b086      	sub	sp, #24
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80198b0:	697b      	ldr	r3, [r7, #20]
 80198b2:	685b      	ldr	r3, [r3, #4]
 80198b4:	4798      	blx	r3

  now = sys_now();
 80198b6:	f7e7 f8d7 	bl	8000a68 <sys_now>
 80198ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	681a      	ldr	r2, [r3, #0]
 80198c0:	4b0f      	ldr	r3, [pc, #60]	; (8019900 <lwip_cyclic_timer+0x5c>)
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	4413      	add	r3, r2
 80198c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80198c8:	68fa      	ldr	r2, [r7, #12]
 80198ca:	693b      	ldr	r3, [r7, #16]
 80198cc:	1ad3      	subs	r3, r2, r3
 80198ce:	0fdb      	lsrs	r3, r3, #31
 80198d0:	f003 0301 	and.w	r3, r3, #1
 80198d4:	b2db      	uxtb	r3, r3
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d009      	beq.n	80198ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80198da:	697b      	ldr	r3, [r7, #20]
 80198dc:	681a      	ldr	r2, [r3, #0]
 80198de:	693b      	ldr	r3, [r7, #16]
 80198e0:	4413      	add	r3, r2
 80198e2:	687a      	ldr	r2, [r7, #4]
 80198e4:	4907      	ldr	r1, [pc, #28]	; (8019904 <lwip_cyclic_timer+0x60>)
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7ff ff6e 	bl	80197c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80198ec:	e004      	b.n	80198f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	4904      	ldr	r1, [pc, #16]	; (8019904 <lwip_cyclic_timer+0x60>)
 80198f2:	68f8      	ldr	r0, [r7, #12]
 80198f4:	f7ff ff68 	bl	80197c8 <sys_timeout_abs>
}
 80198f8:	bf00      	nop
 80198fa:	3718      	adds	r7, #24
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}
 8019900:	2000860c 	.word	0x2000860c
 8019904:	080198a5 	.word	0x080198a5

08019908 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b082      	sub	sp, #8
 801990c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801990e:	2301      	movs	r3, #1
 8019910:	607b      	str	r3, [r7, #4]
 8019912:	e00e      	b.n	8019932 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019914:	4a0b      	ldr	r2, [pc, #44]	; (8019944 <sys_timeouts_init+0x3c>)
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	00db      	lsls	r3, r3, #3
 8019920:	4a08      	ldr	r2, [pc, #32]	; (8019944 <sys_timeouts_init+0x3c>)
 8019922:	4413      	add	r3, r2
 8019924:	461a      	mov	r2, r3
 8019926:	4908      	ldr	r1, [pc, #32]	; (8019948 <sys_timeouts_init+0x40>)
 8019928:	f000 f810 	bl	801994c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	3301      	adds	r3, #1
 8019930:	607b      	str	r3, [r7, #4]
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	2b04      	cmp	r3, #4
 8019936:	d9ed      	bls.n	8019914 <sys_timeouts_init+0xc>
  }
}
 8019938:	bf00      	nop
 801993a:	bf00      	nop
 801993c:	3708      	adds	r7, #8
 801993e:	46bd      	mov	sp, r7
 8019940:	bd80      	pop	{r7, pc}
 8019942:	bf00      	nop
 8019944:	08021030 	.word	0x08021030
 8019948:	080198a5 	.word	0x080198a5

0801994c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b086      	sub	sp, #24
 8019950:	af00      	add	r7, sp, #0
 8019952:	60f8      	str	r0, [r7, #12]
 8019954:	60b9      	str	r1, [r7, #8]
 8019956:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801995e:	d306      	bcc.n	801996e <sys_timeout+0x22>
 8019960:	4b0a      	ldr	r3, [pc, #40]	; (801998c <sys_timeout+0x40>)
 8019962:	f240 1229 	movw	r2, #297	; 0x129
 8019966:	490a      	ldr	r1, [pc, #40]	; (8019990 <sys_timeout+0x44>)
 8019968:	480a      	ldr	r0, [pc, #40]	; (8019994 <sys_timeout+0x48>)
 801996a:	f001 f91b 	bl	801aba4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801996e:	f7e7 f87b 	bl	8000a68 <sys_now>
 8019972:	4602      	mov	r2, r0
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	4413      	add	r3, r2
 8019978:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801997a:	687a      	ldr	r2, [r7, #4]
 801997c:	68b9      	ldr	r1, [r7, #8]
 801997e:	6978      	ldr	r0, [r7, #20]
 8019980:	f7ff ff22 	bl	80197c8 <sys_timeout_abs>
#endif
}
 8019984:	bf00      	nop
 8019986:	3718      	adds	r7, #24
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}
 801998c:	08020210 	.word	0x08020210
 8019990:	08020330 	.word	0x08020330
 8019994:	08020308 	.word	0x08020308

08019998 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b084      	sub	sp, #16
 801999c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801999e:	f7e7 f863 	bl	8000a68 <sys_now>
 80199a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80199a4:	4b17      	ldr	r3, [pc, #92]	; (8019a04 <sys_check_timeouts+0x6c>)
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d022      	beq.n	80199f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80199b0:	68bb      	ldr	r3, [r7, #8]
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	68fa      	ldr	r2, [r7, #12]
 80199b6:	1ad3      	subs	r3, r2, r3
 80199b8:	0fdb      	lsrs	r3, r3, #31
 80199ba:	f003 0301 	and.w	r3, r3, #1
 80199be:	b2db      	uxtb	r3, r3
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d11a      	bne.n	80199fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	4a0e      	ldr	r2, [pc, #56]	; (8019a04 <sys_check_timeouts+0x6c>)
 80199ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	689b      	ldr	r3, [r3, #8]
 80199d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80199d2:	68bb      	ldr	r3, [r7, #8]
 80199d4:	68db      	ldr	r3, [r3, #12]
 80199d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	685b      	ldr	r3, [r3, #4]
 80199dc:	4a0a      	ldr	r2, [pc, #40]	; (8019a08 <sys_check_timeouts+0x70>)
 80199de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80199e0:	68b9      	ldr	r1, [r7, #8]
 80199e2:	200a      	movs	r0, #10
 80199e4:	f7f8 fcbc 	bl	8012360 <memp_free>
    if (handler != NULL) {
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d0da      	beq.n	80199a4 <sys_check_timeouts+0xc>
      handler(arg);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6838      	ldr	r0, [r7, #0]
 80199f2:	4798      	blx	r3
  do {
 80199f4:	e7d6      	b.n	80199a4 <sys_check_timeouts+0xc>
      return;
 80199f6:	bf00      	nop
 80199f8:	e000      	b.n	80199fc <sys_check_timeouts+0x64>
      return;
 80199fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80199fc:	3710      	adds	r7, #16
 80199fe:	46bd      	mov	sp, r7
 8019a00:	bd80      	pop	{r7, pc}
 8019a02:	bf00      	nop
 8019a04:	20008608 	.word	0x20008608
 8019a08:	2000860c 	.word	0x2000860c

08019a0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b082      	sub	sp, #8
 8019a10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019a12:	4b16      	ldr	r3, [pc, #88]	; (8019a6c <sys_timeouts_sleeptime+0x60>)
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d102      	bne.n	8019a20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a1e:	e020      	b.n	8019a62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019a20:	f7e7 f822 	bl	8000a68 <sys_now>
 8019a24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019a26:	4b11      	ldr	r3, [pc, #68]	; (8019a6c <sys_timeouts_sleeptime+0x60>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	685a      	ldr	r2, [r3, #4]
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	1ad3      	subs	r3, r2, r3
 8019a30:	0fdb      	lsrs	r3, r3, #31
 8019a32:	f003 0301 	and.w	r3, r3, #1
 8019a36:	b2db      	uxtb	r3, r3
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d001      	beq.n	8019a40 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	e010      	b.n	8019a62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019a40:	4b0a      	ldr	r3, [pc, #40]	; (8019a6c <sys_timeouts_sleeptime+0x60>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	685a      	ldr	r2, [r3, #4]
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	1ad3      	subs	r3, r2, r3
 8019a4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	da06      	bge.n	8019a60 <sys_timeouts_sleeptime+0x54>
 8019a52:	4b07      	ldr	r3, [pc, #28]	; (8019a70 <sys_timeouts_sleeptime+0x64>)
 8019a54:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019a58:	4906      	ldr	r1, [pc, #24]	; (8019a74 <sys_timeouts_sleeptime+0x68>)
 8019a5a:	4807      	ldr	r0, [pc, #28]	; (8019a78 <sys_timeouts_sleeptime+0x6c>)
 8019a5c:	f001 f8a2 	bl	801aba4 <iprintf>
    return ret;
 8019a60:	683b      	ldr	r3, [r7, #0]
  }
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3708      	adds	r7, #8
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}
 8019a6a:	bf00      	nop
 8019a6c:	20008608 	.word	0x20008608
 8019a70:	08020210 	.word	0x08020210
 8019a74:	08020368 	.word	0x08020368
 8019a78:	08020308 	.word	0x08020308

08019a7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019a80:	f001 f8a8 	bl	801abd4 <rand>
 8019a84:	4603      	mov	r3, r0
 8019a86:	b29b      	uxth	r3, r3
 8019a88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019a8c:	b29b      	uxth	r3, r3
 8019a8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019a92:	b29a      	uxth	r2, r3
 8019a94:	4b01      	ldr	r3, [pc, #4]	; (8019a9c <udp_init+0x20>)
 8019a96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019a98:	bf00      	nop
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	20000040 	.word	0x20000040

08019aa0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019aa0:	b480      	push	{r7}
 8019aa2:	b083      	sub	sp, #12
 8019aa4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019aaa:	4b17      	ldr	r3, [pc, #92]	; (8019b08 <udp_new_port+0x68>)
 8019aac:	881b      	ldrh	r3, [r3, #0]
 8019aae:	1c5a      	adds	r2, r3, #1
 8019ab0:	b291      	uxth	r1, r2
 8019ab2:	4a15      	ldr	r2, [pc, #84]	; (8019b08 <udp_new_port+0x68>)
 8019ab4:	8011      	strh	r1, [r2, #0]
 8019ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019aba:	4293      	cmp	r3, r2
 8019abc:	d103      	bne.n	8019ac6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019abe:	4b12      	ldr	r3, [pc, #72]	; (8019b08 <udp_new_port+0x68>)
 8019ac0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019ac4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019ac6:	4b11      	ldr	r3, [pc, #68]	; (8019b0c <udp_new_port+0x6c>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	603b      	str	r3, [r7, #0]
 8019acc:	e011      	b.n	8019af2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	8a5a      	ldrh	r2, [r3, #18]
 8019ad2:	4b0d      	ldr	r3, [pc, #52]	; (8019b08 <udp_new_port+0x68>)
 8019ad4:	881b      	ldrh	r3, [r3, #0]
 8019ad6:	429a      	cmp	r2, r3
 8019ad8:	d108      	bne.n	8019aec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019ada:	88fb      	ldrh	r3, [r7, #6]
 8019adc:	3301      	adds	r3, #1
 8019ade:	80fb      	strh	r3, [r7, #6]
 8019ae0:	88fb      	ldrh	r3, [r7, #6]
 8019ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019ae6:	d3e0      	bcc.n	8019aaa <udp_new_port+0xa>
        return 0;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	e007      	b.n	8019afc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019aec:	683b      	ldr	r3, [r7, #0]
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	603b      	str	r3, [r7, #0]
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d1ea      	bne.n	8019ace <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019af8:	4b03      	ldr	r3, [pc, #12]	; (8019b08 <udp_new_port+0x68>)
 8019afa:	881b      	ldrh	r3, [r3, #0]
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	370c      	adds	r7, #12
 8019b00:	46bd      	mov	sp, r7
 8019b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b06:	4770      	bx	lr
 8019b08:	20000040 	.word	0x20000040
 8019b0c:	2000c67c 	.word	0x2000c67c

08019b10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b084      	sub	sp, #16
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	60f8      	str	r0, [r7, #12]
 8019b18:	60b9      	str	r1, [r7, #8]
 8019b1a:	4613      	mov	r3, r2
 8019b1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d105      	bne.n	8019b30 <udp_input_local_match+0x20>
 8019b24:	4b27      	ldr	r3, [pc, #156]	; (8019bc4 <udp_input_local_match+0xb4>)
 8019b26:	2287      	movs	r2, #135	; 0x87
 8019b28:	4927      	ldr	r1, [pc, #156]	; (8019bc8 <udp_input_local_match+0xb8>)
 8019b2a:	4828      	ldr	r0, [pc, #160]	; (8019bcc <udp_input_local_match+0xbc>)
 8019b2c:	f001 f83a 	bl	801aba4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d105      	bne.n	8019b42 <udp_input_local_match+0x32>
 8019b36:	4b23      	ldr	r3, [pc, #140]	; (8019bc4 <udp_input_local_match+0xb4>)
 8019b38:	2288      	movs	r2, #136	; 0x88
 8019b3a:	4925      	ldr	r1, [pc, #148]	; (8019bd0 <udp_input_local_match+0xc0>)
 8019b3c:	4823      	ldr	r0, [pc, #140]	; (8019bcc <udp_input_local_match+0xbc>)
 8019b3e:	f001 f831 	bl	801aba4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	7a1b      	ldrb	r3, [r3, #8]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d00b      	beq.n	8019b62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	7a1a      	ldrb	r2, [r3, #8]
 8019b4e:	4b21      	ldr	r3, [pc, #132]	; (8019bd4 <udp_input_local_match+0xc4>)
 8019b50:	685b      	ldr	r3, [r3, #4]
 8019b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b56:	3301      	adds	r3, #1
 8019b58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019b5a:	429a      	cmp	r2, r3
 8019b5c:	d001      	beq.n	8019b62 <udp_input_local_match+0x52>
    return 0;
 8019b5e:	2300      	movs	r3, #0
 8019b60:	e02b      	b.n	8019bba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019b62:	79fb      	ldrb	r3, [r7, #7]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d018      	beq.n	8019b9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d013      	beq.n	8019b96 <udp_input_local_match+0x86>
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d00f      	beq.n	8019b96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019b76:	4b17      	ldr	r3, [pc, #92]	; (8019bd4 <udp_input_local_match+0xc4>)
 8019b78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b7e:	d00a      	beq.n	8019b96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681a      	ldr	r2, [r3, #0]
 8019b84:	4b13      	ldr	r3, [pc, #76]	; (8019bd4 <udp_input_local_match+0xc4>)
 8019b86:	695b      	ldr	r3, [r3, #20]
 8019b88:	405a      	eors	r2, r3
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	3308      	adds	r3, #8
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d110      	bne.n	8019bb8 <udp_input_local_match+0xa8>
          return 1;
 8019b96:	2301      	movs	r3, #1
 8019b98:	e00f      	b.n	8019bba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d009      	beq.n	8019bb4 <udp_input_local_match+0xa4>
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d005      	beq.n	8019bb4 <udp_input_local_match+0xa4>
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	681a      	ldr	r2, [r3, #0]
 8019bac:	4b09      	ldr	r3, [pc, #36]	; (8019bd4 <udp_input_local_match+0xc4>)
 8019bae:	695b      	ldr	r3, [r3, #20]
 8019bb0:	429a      	cmp	r2, r3
 8019bb2:	d101      	bne.n	8019bb8 <udp_input_local_match+0xa8>
        return 1;
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	e000      	b.n	8019bba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019bb8:	2300      	movs	r3, #0
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3710      	adds	r7, #16
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	0802037c 	.word	0x0802037c
 8019bc8:	08020430 	.word	0x08020430
 8019bcc:	08020454 	.word	0x08020454
 8019bd0:	0802047c 	.word	0x0802047c
 8019bd4:	2000889c 	.word	0x2000889c

08019bd8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019bd8:	b590      	push	{r4, r7, lr}
 8019bda:	b08d      	sub	sp, #52	; 0x34
 8019bdc:	af02      	add	r7, sp, #8
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019be2:	2300      	movs	r3, #0
 8019be4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d105      	bne.n	8019bf8 <udp_input+0x20>
 8019bec:	4b7c      	ldr	r3, [pc, #496]	; (8019de0 <udp_input+0x208>)
 8019bee:	22cf      	movs	r2, #207	; 0xcf
 8019bf0:	497c      	ldr	r1, [pc, #496]	; (8019de4 <udp_input+0x20c>)
 8019bf2:	487d      	ldr	r0, [pc, #500]	; (8019de8 <udp_input+0x210>)
 8019bf4:	f000 ffd6 	bl	801aba4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d105      	bne.n	8019c0a <udp_input+0x32>
 8019bfe:	4b78      	ldr	r3, [pc, #480]	; (8019de0 <udp_input+0x208>)
 8019c00:	22d0      	movs	r2, #208	; 0xd0
 8019c02:	497a      	ldr	r1, [pc, #488]	; (8019dec <udp_input+0x214>)
 8019c04:	4878      	ldr	r0, [pc, #480]	; (8019de8 <udp_input+0x210>)
 8019c06:	f000 ffcd 	bl	801aba4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	895b      	ldrh	r3, [r3, #10]
 8019c0e:	2b07      	cmp	r3, #7
 8019c10:	d803      	bhi.n	8019c1a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019c12:	6878      	ldr	r0, [r7, #4]
 8019c14:	f7f9 fa86 	bl	8013124 <pbuf_free>
    goto end;
 8019c18:	e0de      	b.n	8019dd8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	685b      	ldr	r3, [r3, #4]
 8019c1e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019c20:	4b73      	ldr	r3, [pc, #460]	; (8019df0 <udp_input+0x218>)
 8019c22:	695b      	ldr	r3, [r3, #20]
 8019c24:	4a72      	ldr	r2, [pc, #456]	; (8019df0 <udp_input+0x218>)
 8019c26:	6812      	ldr	r2, [r2, #0]
 8019c28:	4611      	mov	r1, r2
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7f6 ff66 	bl	8010afc <ip4_addr_isbroadcast_u32>
 8019c30:	4603      	mov	r3, r0
 8019c32:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	881b      	ldrh	r3, [r3, #0]
 8019c38:	b29b      	uxth	r3, r3
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f7f7 fdd8 	bl	80117f0 <lwip_htons>
 8019c40:	4603      	mov	r3, r0
 8019c42:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019c44:	697b      	ldr	r3, [r7, #20]
 8019c46:	885b      	ldrh	r3, [r3, #2]
 8019c48:	b29b      	uxth	r3, r3
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7f7 fdd0 	bl	80117f0 <lwip_htons>
 8019c50:	4603      	mov	r3, r0
 8019c52:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019c54:	2300      	movs	r3, #0
 8019c56:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019c58:	2300      	movs	r3, #0
 8019c5a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c60:	4b64      	ldr	r3, [pc, #400]	; (8019df4 <udp_input+0x21c>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	627b      	str	r3, [r7, #36]	; 0x24
 8019c66:	e054      	b.n	8019d12 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c6a:	8a5b      	ldrh	r3, [r3, #18]
 8019c6c:	89fa      	ldrh	r2, [r7, #14]
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d14a      	bne.n	8019d08 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019c72:	7cfb      	ldrb	r3, [r7, #19]
 8019c74:	461a      	mov	r2, r3
 8019c76:	6839      	ldr	r1, [r7, #0]
 8019c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c7a:	f7ff ff49 	bl	8019b10 <udp_input_local_match>
 8019c7e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d041      	beq.n	8019d08 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c86:	7c1b      	ldrb	r3, [r3, #16]
 8019c88:	f003 0304 	and.w	r3, r3, #4
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d11d      	bne.n	8019ccc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019c90:	69fb      	ldr	r3, [r7, #28]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d102      	bne.n	8019c9c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c98:	61fb      	str	r3, [r7, #28]
 8019c9a:	e017      	b.n	8019ccc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019c9c:	7cfb      	ldrb	r3, [r7, #19]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d014      	beq.n	8019ccc <udp_input+0xf4>
 8019ca2:	4b53      	ldr	r3, [pc, #332]	; (8019df0 <udp_input+0x218>)
 8019ca4:	695b      	ldr	r3, [r3, #20]
 8019ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019caa:	d10f      	bne.n	8019ccc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019cac:	69fb      	ldr	r3, [r7, #28]
 8019cae:	681a      	ldr	r2, [r3, #0]
 8019cb0:	683b      	ldr	r3, [r7, #0]
 8019cb2:	3304      	adds	r3, #4
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	429a      	cmp	r2, r3
 8019cb8:	d008      	beq.n	8019ccc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cbc:	681a      	ldr	r2, [r3, #0]
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	3304      	adds	r3, #4
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d101      	bne.n	8019ccc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cce:	8a9b      	ldrh	r3, [r3, #20]
 8019cd0:	8a3a      	ldrh	r2, [r7, #16]
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	d118      	bne.n	8019d08 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d005      	beq.n	8019cea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce0:	685a      	ldr	r2, [r3, #4]
 8019ce2:	4b43      	ldr	r3, [pc, #268]	; (8019df0 <udp_input+0x218>)
 8019ce4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019ce6:	429a      	cmp	r2, r3
 8019ce8:	d10e      	bne.n	8019d08 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019cea:	6a3b      	ldr	r3, [r7, #32]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d014      	beq.n	8019d1a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf2:	68da      	ldr	r2, [r3, #12]
 8019cf4:	6a3b      	ldr	r3, [r7, #32]
 8019cf6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019cf8:	4b3e      	ldr	r3, [pc, #248]	; (8019df4 <udp_input+0x21c>)
 8019cfa:	681a      	ldr	r2, [r3, #0]
 8019cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019d00:	4a3c      	ldr	r2, [pc, #240]	; (8019df4 <udp_input+0x21c>)
 8019d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d04:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019d06:	e008      	b.n	8019d1a <udp_input+0x142>
      }
    }

    prev = pcb;
 8019d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d0a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d0e:	68db      	ldr	r3, [r3, #12]
 8019d10:	627b      	str	r3, [r7, #36]	; 0x24
 8019d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d1a7      	bne.n	8019c68 <udp_input+0x90>
 8019d18:	e000      	b.n	8019d1c <udp_input+0x144>
        break;
 8019d1a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d101      	bne.n	8019d26 <udp_input+0x14e>
    pcb = uncon_pcb;
 8019d22:	69fb      	ldr	r3, [r7, #28]
 8019d24:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d002      	beq.n	8019d32 <udp_input+0x15a>
    for_us = 1;
 8019d2c:	2301      	movs	r3, #1
 8019d2e:	76fb      	strb	r3, [r7, #27]
 8019d30:	e00a      	b.n	8019d48 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	3304      	adds	r3, #4
 8019d36:	681a      	ldr	r2, [r3, #0]
 8019d38:	4b2d      	ldr	r3, [pc, #180]	; (8019df0 <udp_input+0x218>)
 8019d3a:	695b      	ldr	r3, [r3, #20]
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	bf0c      	ite	eq
 8019d40:	2301      	moveq	r3, #1
 8019d42:	2300      	movne	r3, #0
 8019d44:	b2db      	uxtb	r3, r3
 8019d46:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019d48:	7efb      	ldrb	r3, [r7, #27]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d041      	beq.n	8019dd2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019d4e:	2108      	movs	r1, #8
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f7f9 f92f 	bl	8012fb4 <pbuf_remove_header>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d00a      	beq.n	8019d72 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019d5c:	4b20      	ldr	r3, [pc, #128]	; (8019de0 <udp_input+0x208>)
 8019d5e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019d62:	4925      	ldr	r1, [pc, #148]	; (8019df8 <udp_input+0x220>)
 8019d64:	4820      	ldr	r0, [pc, #128]	; (8019de8 <udp_input+0x210>)
 8019d66:	f000 ff1d 	bl	801aba4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	f7f9 f9da 	bl	8013124 <pbuf_free>
      goto end;
 8019d70:	e032      	b.n	8019dd8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d012      	beq.n	8019d9e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d7a:	699b      	ldr	r3, [r3, #24]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d00a      	beq.n	8019d96 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d82:	699c      	ldr	r4, [r3, #24]
 8019d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d86:	69d8      	ldr	r0, [r3, #28]
 8019d88:	8a3b      	ldrh	r3, [r7, #16]
 8019d8a:	9300      	str	r3, [sp, #0]
 8019d8c:	4b1b      	ldr	r3, [pc, #108]	; (8019dfc <udp_input+0x224>)
 8019d8e:	687a      	ldr	r2, [r7, #4]
 8019d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d92:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019d94:	e021      	b.n	8019dda <udp_input+0x202>
        pbuf_free(p);
 8019d96:	6878      	ldr	r0, [r7, #4]
 8019d98:	f7f9 f9c4 	bl	8013124 <pbuf_free>
        goto end;
 8019d9c:	e01c      	b.n	8019dd8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019d9e:	7cfb      	ldrb	r3, [r7, #19]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d112      	bne.n	8019dca <udp_input+0x1f2>
 8019da4:	4b12      	ldr	r3, [pc, #72]	; (8019df0 <udp_input+0x218>)
 8019da6:	695b      	ldr	r3, [r3, #20]
 8019da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019dac:	2be0      	cmp	r3, #224	; 0xe0
 8019dae:	d00c      	beq.n	8019dca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019db0:	4b0f      	ldr	r3, [pc, #60]	; (8019df0 <udp_input+0x218>)
 8019db2:	899b      	ldrh	r3, [r3, #12]
 8019db4:	3308      	adds	r3, #8
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	b21b      	sxth	r3, r3
 8019dba:	4619      	mov	r1, r3
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	f7f9 f96c 	bl	801309a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019dc2:	2103      	movs	r1, #3
 8019dc4:	6878      	ldr	r0, [r7, #4]
 8019dc6:	f7f6 fb51 	bl	801046c <icmp_dest_unreach>
      pbuf_free(p);
 8019dca:	6878      	ldr	r0, [r7, #4]
 8019dcc:	f7f9 f9aa 	bl	8013124 <pbuf_free>
  return;
 8019dd0:	e003      	b.n	8019dda <udp_input+0x202>
    pbuf_free(p);
 8019dd2:	6878      	ldr	r0, [r7, #4]
 8019dd4:	f7f9 f9a6 	bl	8013124 <pbuf_free>
  return;
 8019dd8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019dda:	372c      	adds	r7, #44	; 0x2c
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd90      	pop	{r4, r7, pc}
 8019de0:	0802037c 	.word	0x0802037c
 8019de4:	080204a4 	.word	0x080204a4
 8019de8:	08020454 	.word	0x08020454
 8019dec:	080204bc 	.word	0x080204bc
 8019df0:	2000889c 	.word	0x2000889c
 8019df4:	2000c67c 	.word	0x2000c67c
 8019df8:	080204d8 	.word	0x080204d8
 8019dfc:	200088ac 	.word	0x200088ac

08019e00 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b082      	sub	sp, #8
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
 8019e08:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d109      	bne.n	8019e24 <udp_send+0x24>
 8019e10:	4b11      	ldr	r3, [pc, #68]	; (8019e58 <udp_send+0x58>)
 8019e12:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019e16:	4911      	ldr	r1, [pc, #68]	; (8019e5c <udp_send+0x5c>)
 8019e18:	4811      	ldr	r0, [pc, #68]	; (8019e60 <udp_send+0x60>)
 8019e1a:	f000 fec3 	bl	801aba4 <iprintf>
 8019e1e:	f06f 030f 	mvn.w	r3, #15
 8019e22:	e015      	b.n	8019e50 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d109      	bne.n	8019e3e <udp_send+0x3e>
 8019e2a:	4b0b      	ldr	r3, [pc, #44]	; (8019e58 <udp_send+0x58>)
 8019e2c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019e30:	490c      	ldr	r1, [pc, #48]	; (8019e64 <udp_send+0x64>)
 8019e32:	480b      	ldr	r0, [pc, #44]	; (8019e60 <udp_send+0x60>)
 8019e34:	f000 feb6 	bl	801aba4 <iprintf>
 8019e38:	f06f 030f 	mvn.w	r3, #15
 8019e3c:	e008      	b.n	8019e50 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	1d1a      	adds	r2, r3, #4
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	8a9b      	ldrh	r3, [r3, #20]
 8019e46:	6839      	ldr	r1, [r7, #0]
 8019e48:	6878      	ldr	r0, [r7, #4]
 8019e4a:	f000 f80d 	bl	8019e68 <udp_sendto>
 8019e4e:	4603      	mov	r3, r0
}
 8019e50:	4618      	mov	r0, r3
 8019e52:	3708      	adds	r7, #8
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd80      	pop	{r7, pc}
 8019e58:	0802037c 	.word	0x0802037c
 8019e5c:	080204f4 	.word	0x080204f4
 8019e60:	08020454 	.word	0x08020454
 8019e64:	0802050c 	.word	0x0802050c

08019e68 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b088      	sub	sp, #32
 8019e6c:	af02      	add	r7, sp, #8
 8019e6e:	60f8      	str	r0, [r7, #12]
 8019e70:	60b9      	str	r1, [r7, #8]
 8019e72:	607a      	str	r2, [r7, #4]
 8019e74:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d109      	bne.n	8019e90 <udp_sendto+0x28>
 8019e7c:	4b23      	ldr	r3, [pc, #140]	; (8019f0c <udp_sendto+0xa4>)
 8019e7e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019e82:	4923      	ldr	r1, [pc, #140]	; (8019f10 <udp_sendto+0xa8>)
 8019e84:	4823      	ldr	r0, [pc, #140]	; (8019f14 <udp_sendto+0xac>)
 8019e86:	f000 fe8d 	bl	801aba4 <iprintf>
 8019e8a:	f06f 030f 	mvn.w	r3, #15
 8019e8e:	e038      	b.n	8019f02 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d109      	bne.n	8019eaa <udp_sendto+0x42>
 8019e96:	4b1d      	ldr	r3, [pc, #116]	; (8019f0c <udp_sendto+0xa4>)
 8019e98:	f240 2219 	movw	r2, #537	; 0x219
 8019e9c:	491e      	ldr	r1, [pc, #120]	; (8019f18 <udp_sendto+0xb0>)
 8019e9e:	481d      	ldr	r0, [pc, #116]	; (8019f14 <udp_sendto+0xac>)
 8019ea0:	f000 fe80 	bl	801aba4 <iprintf>
 8019ea4:	f06f 030f 	mvn.w	r3, #15
 8019ea8:	e02b      	b.n	8019f02 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d109      	bne.n	8019ec4 <udp_sendto+0x5c>
 8019eb0:	4b16      	ldr	r3, [pc, #88]	; (8019f0c <udp_sendto+0xa4>)
 8019eb2:	f240 221a 	movw	r2, #538	; 0x21a
 8019eb6:	4919      	ldr	r1, [pc, #100]	; (8019f1c <udp_sendto+0xb4>)
 8019eb8:	4816      	ldr	r0, [pc, #88]	; (8019f14 <udp_sendto+0xac>)
 8019eba:	f000 fe73 	bl	801aba4 <iprintf>
 8019ebe:	f06f 030f 	mvn.w	r3, #15
 8019ec2:	e01e      	b.n	8019f02 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	7a1b      	ldrb	r3, [r3, #8]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d006      	beq.n	8019eda <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	7a1b      	ldrb	r3, [r3, #8]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f7f8 fd67 	bl	80129a4 <netif_get_by_index>
 8019ed6:	6178      	str	r0, [r7, #20]
 8019ed8:	e003      	b.n	8019ee2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f7f6 fb5a 	bl	8010594 <ip4_route>
 8019ee0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d102      	bne.n	8019eee <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019ee8:	f06f 0303 	mvn.w	r3, #3
 8019eec:	e009      	b.n	8019f02 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019eee:	887a      	ldrh	r2, [r7, #2]
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	9300      	str	r3, [sp, #0]
 8019ef4:	4613      	mov	r3, r2
 8019ef6:	687a      	ldr	r2, [r7, #4]
 8019ef8:	68b9      	ldr	r1, [r7, #8]
 8019efa:	68f8      	ldr	r0, [r7, #12]
 8019efc:	f000 f810 	bl	8019f20 <udp_sendto_if>
 8019f00:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	3718      	adds	r7, #24
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bd80      	pop	{r7, pc}
 8019f0a:	bf00      	nop
 8019f0c:	0802037c 	.word	0x0802037c
 8019f10:	08020524 	.word	0x08020524
 8019f14:	08020454 	.word	0x08020454
 8019f18:	0802053c 	.word	0x0802053c
 8019f1c:	08020558 	.word	0x08020558

08019f20 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b088      	sub	sp, #32
 8019f24:	af02      	add	r7, sp, #8
 8019f26:	60f8      	str	r0, [r7, #12]
 8019f28:	60b9      	str	r1, [r7, #8]
 8019f2a:	607a      	str	r2, [r7, #4]
 8019f2c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d109      	bne.n	8019f48 <udp_sendto_if+0x28>
 8019f34:	4b2e      	ldr	r3, [pc, #184]	; (8019ff0 <udp_sendto_if+0xd0>)
 8019f36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f3a:	492e      	ldr	r1, [pc, #184]	; (8019ff4 <udp_sendto_if+0xd4>)
 8019f3c:	482e      	ldr	r0, [pc, #184]	; (8019ff8 <udp_sendto_if+0xd8>)
 8019f3e:	f000 fe31 	bl	801aba4 <iprintf>
 8019f42:	f06f 030f 	mvn.w	r3, #15
 8019f46:	e04f      	b.n	8019fe8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d109      	bne.n	8019f62 <udp_sendto_if+0x42>
 8019f4e:	4b28      	ldr	r3, [pc, #160]	; (8019ff0 <udp_sendto_if+0xd0>)
 8019f50:	f240 2281 	movw	r2, #641	; 0x281
 8019f54:	4929      	ldr	r1, [pc, #164]	; (8019ffc <udp_sendto_if+0xdc>)
 8019f56:	4828      	ldr	r0, [pc, #160]	; (8019ff8 <udp_sendto_if+0xd8>)
 8019f58:	f000 fe24 	bl	801aba4 <iprintf>
 8019f5c:	f06f 030f 	mvn.w	r3, #15
 8019f60:	e042      	b.n	8019fe8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d109      	bne.n	8019f7c <udp_sendto_if+0x5c>
 8019f68:	4b21      	ldr	r3, [pc, #132]	; (8019ff0 <udp_sendto_if+0xd0>)
 8019f6a:	f240 2282 	movw	r2, #642	; 0x282
 8019f6e:	4924      	ldr	r1, [pc, #144]	; (801a000 <udp_sendto_if+0xe0>)
 8019f70:	4821      	ldr	r0, [pc, #132]	; (8019ff8 <udp_sendto_if+0xd8>)
 8019f72:	f000 fe17 	bl	801aba4 <iprintf>
 8019f76:	f06f 030f 	mvn.w	r3, #15
 8019f7a:	e035      	b.n	8019fe8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019f7c:	6a3b      	ldr	r3, [r7, #32]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d109      	bne.n	8019f96 <udp_sendto_if+0x76>
 8019f82:	4b1b      	ldr	r3, [pc, #108]	; (8019ff0 <udp_sendto_if+0xd0>)
 8019f84:	f240 2283 	movw	r2, #643	; 0x283
 8019f88:	491e      	ldr	r1, [pc, #120]	; (801a004 <udp_sendto_if+0xe4>)
 8019f8a:	481b      	ldr	r0, [pc, #108]	; (8019ff8 <udp_sendto_if+0xd8>)
 8019f8c:	f000 fe0a 	bl	801aba4 <iprintf>
 8019f90:	f06f 030f 	mvn.w	r3, #15
 8019f94:	e028      	b.n	8019fe8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d009      	beq.n	8019fb0 <udp_sendto_if+0x90>
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d005      	beq.n	8019fb0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019fac:	2be0      	cmp	r3, #224	; 0xe0
 8019fae:	d103      	bne.n	8019fb8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019fb0:	6a3b      	ldr	r3, [r7, #32]
 8019fb2:	3304      	adds	r3, #4
 8019fb4:	617b      	str	r3, [r7, #20]
 8019fb6:	e00b      	b.n	8019fd0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	681a      	ldr	r2, [r3, #0]
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	3304      	adds	r3, #4
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d002      	beq.n	8019fcc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019fc6:	f06f 0303 	mvn.w	r3, #3
 8019fca:	e00d      	b.n	8019fe8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019fd0:	887a      	ldrh	r2, [r7, #2]
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	9301      	str	r3, [sp, #4]
 8019fd6:	6a3b      	ldr	r3, [r7, #32]
 8019fd8:	9300      	str	r3, [sp, #0]
 8019fda:	4613      	mov	r3, r2
 8019fdc:	687a      	ldr	r2, [r7, #4]
 8019fde:	68b9      	ldr	r1, [r7, #8]
 8019fe0:	68f8      	ldr	r0, [r7, #12]
 8019fe2:	f000 f811 	bl	801a008 <udp_sendto_if_src>
 8019fe6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019fe8:	4618      	mov	r0, r3
 8019fea:	3718      	adds	r7, #24
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	0802037c 	.word	0x0802037c
 8019ff4:	08020574 	.word	0x08020574
 8019ff8:	08020454 	.word	0x08020454
 8019ffc:	08020590 	.word	0x08020590
 801a000:	080205ac 	.word	0x080205ac
 801a004:	080205cc 	.word	0x080205cc

0801a008 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b08c      	sub	sp, #48	; 0x30
 801a00c:	af04      	add	r7, sp, #16
 801a00e:	60f8      	str	r0, [r7, #12]
 801a010:	60b9      	str	r1, [r7, #8]
 801a012:	607a      	str	r2, [r7, #4]
 801a014:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d109      	bne.n	801a030 <udp_sendto_if_src+0x28>
 801a01c:	4b65      	ldr	r3, [pc, #404]	; (801a1b4 <udp_sendto_if_src+0x1ac>)
 801a01e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801a022:	4965      	ldr	r1, [pc, #404]	; (801a1b8 <udp_sendto_if_src+0x1b0>)
 801a024:	4865      	ldr	r0, [pc, #404]	; (801a1bc <udp_sendto_if_src+0x1b4>)
 801a026:	f000 fdbd 	bl	801aba4 <iprintf>
 801a02a:	f06f 030f 	mvn.w	r3, #15
 801a02e:	e0bc      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a030:	68bb      	ldr	r3, [r7, #8]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d109      	bne.n	801a04a <udp_sendto_if_src+0x42>
 801a036:	4b5f      	ldr	r3, [pc, #380]	; (801a1b4 <udp_sendto_if_src+0x1ac>)
 801a038:	f240 22d2 	movw	r2, #722	; 0x2d2
 801a03c:	4960      	ldr	r1, [pc, #384]	; (801a1c0 <udp_sendto_if_src+0x1b8>)
 801a03e:	485f      	ldr	r0, [pc, #380]	; (801a1bc <udp_sendto_if_src+0x1b4>)
 801a040:	f000 fdb0 	bl	801aba4 <iprintf>
 801a044:	f06f 030f 	mvn.w	r3, #15
 801a048:	e0af      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d109      	bne.n	801a064 <udp_sendto_if_src+0x5c>
 801a050:	4b58      	ldr	r3, [pc, #352]	; (801a1b4 <udp_sendto_if_src+0x1ac>)
 801a052:	f240 22d3 	movw	r2, #723	; 0x2d3
 801a056:	495b      	ldr	r1, [pc, #364]	; (801a1c4 <udp_sendto_if_src+0x1bc>)
 801a058:	4858      	ldr	r0, [pc, #352]	; (801a1bc <udp_sendto_if_src+0x1b4>)
 801a05a:	f000 fda3 	bl	801aba4 <iprintf>
 801a05e:	f06f 030f 	mvn.w	r3, #15
 801a062:	e0a2      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a066:	2b00      	cmp	r3, #0
 801a068:	d109      	bne.n	801a07e <udp_sendto_if_src+0x76>
 801a06a:	4b52      	ldr	r3, [pc, #328]	; (801a1b4 <udp_sendto_if_src+0x1ac>)
 801a06c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801a070:	4955      	ldr	r1, [pc, #340]	; (801a1c8 <udp_sendto_if_src+0x1c0>)
 801a072:	4852      	ldr	r0, [pc, #328]	; (801a1bc <udp_sendto_if_src+0x1b4>)
 801a074:	f000 fd96 	bl	801aba4 <iprintf>
 801a078:	f06f 030f 	mvn.w	r3, #15
 801a07c:	e095      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a080:	2b00      	cmp	r3, #0
 801a082:	d109      	bne.n	801a098 <udp_sendto_if_src+0x90>
 801a084:	4b4b      	ldr	r3, [pc, #300]	; (801a1b4 <udp_sendto_if_src+0x1ac>)
 801a086:	f240 22d5 	movw	r2, #725	; 0x2d5
 801a08a:	4950      	ldr	r1, [pc, #320]	; (801a1cc <udp_sendto_if_src+0x1c4>)
 801a08c:	484b      	ldr	r0, [pc, #300]	; (801a1bc <udp_sendto_if_src+0x1b4>)
 801a08e:	f000 fd89 	bl	801aba4 <iprintf>
 801a092:	f06f 030f 	mvn.w	r3, #15
 801a096:	e088      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	8a5b      	ldrh	r3, [r3, #18]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d10f      	bne.n	801a0c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a0a0:	68f9      	ldr	r1, [r7, #12]
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	8a5b      	ldrh	r3, [r3, #18]
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	68f8      	ldr	r0, [r7, #12]
 801a0aa:	f000 f893 	bl	801a1d4 <udp_bind>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a0b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d002      	beq.n	801a0c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a0ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a0be:	e074      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	891b      	ldrh	r3, [r3, #8]
 801a0c4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801a0c8:	4293      	cmp	r3, r2
 801a0ca:	d902      	bls.n	801a0d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a0cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a0d0:	e06b      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a0d2:	2108      	movs	r1, #8
 801a0d4:	68b8      	ldr	r0, [r7, #8]
 801a0d6:	f7f8 ff5d 	bl	8012f94 <pbuf_add_header>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d015      	beq.n	801a10c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a0e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a0e4:	2108      	movs	r1, #8
 801a0e6:	2022      	movs	r0, #34	; 0x22
 801a0e8:	f7f8 fd06 	bl	8012af8 <pbuf_alloc>
 801a0ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a0ee:	69fb      	ldr	r3, [r7, #28]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d102      	bne.n	801a0fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a0f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0f8:	e057      	b.n	801a1aa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a0fa:	68bb      	ldr	r3, [r7, #8]
 801a0fc:	891b      	ldrh	r3, [r3, #8]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d006      	beq.n	801a110 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a102:	68b9      	ldr	r1, [r7, #8]
 801a104:	69f8      	ldr	r0, [r7, #28]
 801a106:	f7f9 f931 	bl	801336c <pbuf_chain>
 801a10a:	e001      	b.n	801a110 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a110:	69fb      	ldr	r3, [r7, #28]
 801a112:	895b      	ldrh	r3, [r3, #10]
 801a114:	2b07      	cmp	r3, #7
 801a116:	d806      	bhi.n	801a126 <udp_sendto_if_src+0x11e>
 801a118:	4b26      	ldr	r3, [pc, #152]	; (801a1b4 <udp_sendto_if_src+0x1ac>)
 801a11a:	f240 320d 	movw	r2, #781	; 0x30d
 801a11e:	492c      	ldr	r1, [pc, #176]	; (801a1d0 <udp_sendto_if_src+0x1c8>)
 801a120:	4826      	ldr	r0, [pc, #152]	; (801a1bc <udp_sendto_if_src+0x1b4>)
 801a122:	f000 fd3f 	bl	801aba4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a126:	69fb      	ldr	r3, [r7, #28]
 801a128:	685b      	ldr	r3, [r3, #4]
 801a12a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	8a5b      	ldrh	r3, [r3, #18]
 801a130:	4618      	mov	r0, r3
 801a132:	f7f7 fb5d 	bl	80117f0 <lwip_htons>
 801a136:	4603      	mov	r3, r0
 801a138:	461a      	mov	r2, r3
 801a13a:	697b      	ldr	r3, [r7, #20]
 801a13c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a13e:	887b      	ldrh	r3, [r7, #2]
 801a140:	4618      	mov	r0, r3
 801a142:	f7f7 fb55 	bl	80117f0 <lwip_htons>
 801a146:	4603      	mov	r3, r0
 801a148:	461a      	mov	r2, r3
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	2200      	movs	r2, #0
 801a152:	719a      	strb	r2, [r3, #6]
 801a154:	2200      	movs	r2, #0
 801a156:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a158:	69fb      	ldr	r3, [r7, #28]
 801a15a:	891b      	ldrh	r3, [r3, #8]
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7f7 fb47 	bl	80117f0 <lwip_htons>
 801a162:	4603      	mov	r3, r0
 801a164:	461a      	mov	r2, r3
 801a166:	697b      	ldr	r3, [r7, #20]
 801a168:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a16a:	2311      	movs	r3, #17
 801a16c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	7adb      	ldrb	r3, [r3, #11]
 801a172:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	7a9b      	ldrb	r3, [r3, #10]
 801a178:	7cb9      	ldrb	r1, [r7, #18]
 801a17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a17c:	9202      	str	r2, [sp, #8]
 801a17e:	7cfa      	ldrb	r2, [r7, #19]
 801a180:	9201      	str	r2, [sp, #4]
 801a182:	9300      	str	r3, [sp, #0]
 801a184:	460b      	mov	r3, r1
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a18a:	69f8      	ldr	r0, [r7, #28]
 801a18c:	f7f6 fc08 	bl	80109a0 <ip4_output_if_src>
 801a190:	4603      	mov	r3, r0
 801a192:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a194:	69fa      	ldr	r2, [r7, #28]
 801a196:	68bb      	ldr	r3, [r7, #8]
 801a198:	429a      	cmp	r2, r3
 801a19a:	d004      	beq.n	801a1a6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a19c:	69f8      	ldr	r0, [r7, #28]
 801a19e:	f7f8 ffc1 	bl	8013124 <pbuf_free>
    q = NULL;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a1a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3720      	adds	r7, #32
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
 801a1b2:	bf00      	nop
 801a1b4:	0802037c 	.word	0x0802037c
 801a1b8:	080205ec 	.word	0x080205ec
 801a1bc:	08020454 	.word	0x08020454
 801a1c0:	0802060c 	.word	0x0802060c
 801a1c4:	0802062c 	.word	0x0802062c
 801a1c8:	08020650 	.word	0x08020650
 801a1cc:	08020674 	.word	0x08020674
 801a1d0:	08020698 	.word	0x08020698

0801a1d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b086      	sub	sp, #24
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	60f8      	str	r0, [r7, #12]
 801a1dc:	60b9      	str	r1, [r7, #8]
 801a1de:	4613      	mov	r3, r2
 801a1e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d101      	bne.n	801a1ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a1e8:	4b39      	ldr	r3, [pc, #228]	; (801a2d0 <udp_bind+0xfc>)
 801a1ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d109      	bne.n	801a206 <udp_bind+0x32>
 801a1f2:	4b38      	ldr	r3, [pc, #224]	; (801a2d4 <udp_bind+0x100>)
 801a1f4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801a1f8:	4937      	ldr	r1, [pc, #220]	; (801a2d8 <udp_bind+0x104>)
 801a1fa:	4838      	ldr	r0, [pc, #224]	; (801a2dc <udp_bind+0x108>)
 801a1fc:	f000 fcd2 	bl	801aba4 <iprintf>
 801a200:	f06f 030f 	mvn.w	r3, #15
 801a204:	e060      	b.n	801a2c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a206:	2300      	movs	r3, #0
 801a208:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a20a:	4b35      	ldr	r3, [pc, #212]	; (801a2e0 <udp_bind+0x10c>)
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	617b      	str	r3, [r7, #20]
 801a210:	e009      	b.n	801a226 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a212:	68fa      	ldr	r2, [r7, #12]
 801a214:	697b      	ldr	r3, [r7, #20]
 801a216:	429a      	cmp	r2, r3
 801a218:	d102      	bne.n	801a220 <udp_bind+0x4c>
      rebind = 1;
 801a21a:	2301      	movs	r3, #1
 801a21c:	74fb      	strb	r3, [r7, #19]
      break;
 801a21e:	e005      	b.n	801a22c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a220:	697b      	ldr	r3, [r7, #20]
 801a222:	68db      	ldr	r3, [r3, #12]
 801a224:	617b      	str	r3, [r7, #20]
 801a226:	697b      	ldr	r3, [r7, #20]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d1f2      	bne.n	801a212 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a22c:	88fb      	ldrh	r3, [r7, #6]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d109      	bne.n	801a246 <udp_bind+0x72>
    port = udp_new_port();
 801a232:	f7ff fc35 	bl	8019aa0 <udp_new_port>
 801a236:	4603      	mov	r3, r0
 801a238:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a23a:	88fb      	ldrh	r3, [r7, #6]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d12c      	bne.n	801a29a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a240:	f06f 0307 	mvn.w	r3, #7
 801a244:	e040      	b.n	801a2c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a246:	4b26      	ldr	r3, [pc, #152]	; (801a2e0 <udp_bind+0x10c>)
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	617b      	str	r3, [r7, #20]
 801a24c:	e022      	b.n	801a294 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a24e:	68fa      	ldr	r2, [r7, #12]
 801a250:	697b      	ldr	r3, [r7, #20]
 801a252:	429a      	cmp	r2, r3
 801a254:	d01b      	beq.n	801a28e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a256:	697b      	ldr	r3, [r7, #20]
 801a258:	8a5b      	ldrh	r3, [r3, #18]
 801a25a:	88fa      	ldrh	r2, [r7, #6]
 801a25c:	429a      	cmp	r2, r3
 801a25e:	d116      	bne.n	801a28e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a260:	697b      	ldr	r3, [r7, #20]
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	68bb      	ldr	r3, [r7, #8]
 801a266:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a268:	429a      	cmp	r2, r3
 801a26a:	d00d      	beq.n	801a288 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d00a      	beq.n	801a288 <udp_bind+0xb4>
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d006      	beq.n	801a288 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a27a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d003      	beq.n	801a288 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a280:	697b      	ldr	r3, [r7, #20]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d102      	bne.n	801a28e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a288:	f06f 0307 	mvn.w	r3, #7
 801a28c:	e01c      	b.n	801a2c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a28e:	697b      	ldr	r3, [r7, #20]
 801a290:	68db      	ldr	r3, [r3, #12]
 801a292:	617b      	str	r3, [r7, #20]
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d1d9      	bne.n	801a24e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a29a:	68bb      	ldr	r3, [r7, #8]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d002      	beq.n	801a2a6 <udp_bind+0xd2>
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	e000      	b.n	801a2a8 <udp_bind+0xd4>
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	68fa      	ldr	r2, [r7, #12]
 801a2aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	88fa      	ldrh	r2, [r7, #6]
 801a2b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a2b2:	7cfb      	ldrb	r3, [r7, #19]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d106      	bne.n	801a2c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a2b8:	4b09      	ldr	r3, [pc, #36]	; (801a2e0 <udp_bind+0x10c>)
 801a2ba:	681a      	ldr	r2, [r3, #0]
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a2c0:	4a07      	ldr	r2, [pc, #28]	; (801a2e0 <udp_bind+0x10c>)
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a2c6:	2300      	movs	r3, #0
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	3718      	adds	r7, #24
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	bd80      	pop	{r7, pc}
 801a2d0:	08020f30 	.word	0x08020f30
 801a2d4:	0802037c 	.word	0x0802037c
 801a2d8:	080206c8 	.word	0x080206c8
 801a2dc:	08020454 	.word	0x08020454
 801a2e0:	2000c67c 	.word	0x2000c67c

0801a2e4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b086      	sub	sp, #24
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	60f8      	str	r0, [r7, #12]
 801a2ec:	60b9      	str	r1, [r7, #8]
 801a2ee:	4613      	mov	r3, r2
 801a2f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d109      	bne.n	801a30c <udp_connect+0x28>
 801a2f8:	4b2c      	ldr	r3, [pc, #176]	; (801a3ac <udp_connect+0xc8>)
 801a2fa:	f240 4235 	movw	r2, #1077	; 0x435
 801a2fe:	492c      	ldr	r1, [pc, #176]	; (801a3b0 <udp_connect+0xcc>)
 801a300:	482c      	ldr	r0, [pc, #176]	; (801a3b4 <udp_connect+0xd0>)
 801a302:	f000 fc4f 	bl	801aba4 <iprintf>
 801a306:	f06f 030f 	mvn.w	r3, #15
 801a30a:	e04b      	b.n	801a3a4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d109      	bne.n	801a326 <udp_connect+0x42>
 801a312:	4b26      	ldr	r3, [pc, #152]	; (801a3ac <udp_connect+0xc8>)
 801a314:	f240 4236 	movw	r2, #1078	; 0x436
 801a318:	4927      	ldr	r1, [pc, #156]	; (801a3b8 <udp_connect+0xd4>)
 801a31a:	4826      	ldr	r0, [pc, #152]	; (801a3b4 <udp_connect+0xd0>)
 801a31c:	f000 fc42 	bl	801aba4 <iprintf>
 801a320:	f06f 030f 	mvn.w	r3, #15
 801a324:	e03e      	b.n	801a3a4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	8a5b      	ldrh	r3, [r3, #18]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d10f      	bne.n	801a34e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a32e:	68f9      	ldr	r1, [r7, #12]
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	8a5b      	ldrh	r3, [r3, #18]
 801a334:	461a      	mov	r2, r3
 801a336:	68f8      	ldr	r0, [r7, #12]
 801a338:	f7ff ff4c 	bl	801a1d4 <udp_bind>
 801a33c:	4603      	mov	r3, r0
 801a33e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801a340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d002      	beq.n	801a34e <udp_connect+0x6a>
      return err;
 801a348:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a34c:	e02a      	b.n	801a3a4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801a34e:	68bb      	ldr	r3, [r7, #8]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d002      	beq.n	801a35a <udp_connect+0x76>
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	e000      	b.n	801a35c <udp_connect+0x78>
 801a35a:	2300      	movs	r3, #0
 801a35c:	68fa      	ldr	r2, [r7, #12]
 801a35e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	88fa      	ldrh	r2, [r7, #6]
 801a364:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	7c1b      	ldrb	r3, [r3, #16]
 801a36a:	f043 0304 	orr.w	r3, r3, #4
 801a36e:	b2da      	uxtb	r2, r3
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a374:	4b11      	ldr	r3, [pc, #68]	; (801a3bc <udp_connect+0xd8>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	617b      	str	r3, [r7, #20]
 801a37a:	e008      	b.n	801a38e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801a37c:	68fa      	ldr	r2, [r7, #12]
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	429a      	cmp	r2, r3
 801a382:	d101      	bne.n	801a388 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801a384:	2300      	movs	r3, #0
 801a386:	e00d      	b.n	801a3a4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a388:	697b      	ldr	r3, [r7, #20]
 801a38a:	68db      	ldr	r3, [r3, #12]
 801a38c:	617b      	str	r3, [r7, #20]
 801a38e:	697b      	ldr	r3, [r7, #20]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d1f3      	bne.n	801a37c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801a394:	4b09      	ldr	r3, [pc, #36]	; (801a3bc <udp_connect+0xd8>)
 801a396:	681a      	ldr	r2, [r3, #0]
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801a39c:	4a07      	ldr	r2, [pc, #28]	; (801a3bc <udp_connect+0xd8>)
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801a3a2:	2300      	movs	r3, #0
}
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	3718      	adds	r7, #24
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd80      	pop	{r7, pc}
 801a3ac:	0802037c 	.word	0x0802037c
 801a3b0:	080206e0 	.word	0x080206e0
 801a3b4:	08020454 	.word	0x08020454
 801a3b8:	080206fc 	.word	0x080206fc
 801a3bc:	2000c67c 	.word	0x2000c67c

0801a3c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b084      	sub	sp, #16
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	60f8      	str	r0, [r7, #12]
 801a3c8:	60b9      	str	r1, [r7, #8]
 801a3ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d107      	bne.n	801a3e2 <udp_recv+0x22>
 801a3d2:	4b08      	ldr	r3, [pc, #32]	; (801a3f4 <udp_recv+0x34>)
 801a3d4:	f240 428a 	movw	r2, #1162	; 0x48a
 801a3d8:	4907      	ldr	r1, [pc, #28]	; (801a3f8 <udp_recv+0x38>)
 801a3da:	4808      	ldr	r0, [pc, #32]	; (801a3fc <udp_recv+0x3c>)
 801a3dc:	f000 fbe2 	bl	801aba4 <iprintf>
 801a3e0:	e005      	b.n	801a3ee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	68ba      	ldr	r2, [r7, #8]
 801a3e6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	687a      	ldr	r2, [r7, #4]
 801a3ec:	61da      	str	r2, [r3, #28]
}
 801a3ee:	3710      	adds	r7, #16
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}
 801a3f4:	0802037c 	.word	0x0802037c
 801a3f8:	08020734 	.word	0x08020734
 801a3fc:	08020454 	.word	0x08020454

0801a400 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b084      	sub	sp, #16
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d107      	bne.n	801a41e <udp_remove+0x1e>
 801a40e:	4b19      	ldr	r3, [pc, #100]	; (801a474 <udp_remove+0x74>)
 801a410:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a414:	4918      	ldr	r1, [pc, #96]	; (801a478 <udp_remove+0x78>)
 801a416:	4819      	ldr	r0, [pc, #100]	; (801a47c <udp_remove+0x7c>)
 801a418:	f000 fbc4 	bl	801aba4 <iprintf>
 801a41c:	e026      	b.n	801a46c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a41e:	4b18      	ldr	r3, [pc, #96]	; (801a480 <udp_remove+0x80>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	687a      	ldr	r2, [r7, #4]
 801a424:	429a      	cmp	r2, r3
 801a426:	d105      	bne.n	801a434 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a428:	4b15      	ldr	r3, [pc, #84]	; (801a480 <udp_remove+0x80>)
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	68db      	ldr	r3, [r3, #12]
 801a42e:	4a14      	ldr	r2, [pc, #80]	; (801a480 <udp_remove+0x80>)
 801a430:	6013      	str	r3, [r2, #0]
 801a432:	e017      	b.n	801a464 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a434:	4b12      	ldr	r3, [pc, #72]	; (801a480 <udp_remove+0x80>)
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	60fb      	str	r3, [r7, #12]
 801a43a:	e010      	b.n	801a45e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	68db      	ldr	r3, [r3, #12]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d009      	beq.n	801a458 <udp_remove+0x58>
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	68db      	ldr	r3, [r3, #12]
 801a448:	687a      	ldr	r2, [r7, #4]
 801a44a:	429a      	cmp	r2, r3
 801a44c:	d104      	bne.n	801a458 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	68da      	ldr	r2, [r3, #12]
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	60da      	str	r2, [r3, #12]
        break;
 801a456:	e005      	b.n	801a464 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	68db      	ldr	r3, [r3, #12]
 801a45c:	60fb      	str	r3, [r7, #12]
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d1eb      	bne.n	801a43c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a464:	6879      	ldr	r1, [r7, #4]
 801a466:	2000      	movs	r0, #0
 801a468:	f7f7 ff7a 	bl	8012360 <memp_free>
}
 801a46c:	3710      	adds	r7, #16
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}
 801a472:	bf00      	nop
 801a474:	0802037c 	.word	0x0802037c
 801a478:	0802074c 	.word	0x0802074c
 801a47c:	08020454 	.word	0x08020454
 801a480:	2000c67c 	.word	0x2000c67c

0801a484 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b082      	sub	sp, #8
 801a488:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a48a:	2000      	movs	r0, #0
 801a48c:	f7f7 fef2 	bl	8012274 <memp_malloc>
 801a490:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d007      	beq.n	801a4a8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a498:	2220      	movs	r2, #32
 801a49a:	2100      	movs	r1, #0
 801a49c:	6878      	ldr	r0, [r7, #4]
 801a49e:	f000 fb79 	bl	801ab94 <memset>
    pcb->ttl = UDP_TTL;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	22ff      	movs	r2, #255	; 0xff
 801a4a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a4a8:	687b      	ldr	r3, [r7, #4]
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3708      	adds	r7, #8
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}

0801a4b2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a4b2:	b580      	push	{r7, lr}
 801a4b4:	b084      	sub	sp, #16
 801a4b6:	af00      	add	r7, sp, #0
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a4bc:	f7ff ffe2 	bl	801a484 <udp_new>
 801a4c0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	3710      	adds	r7, #16
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}

0801a4cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a4cc:	b480      	push	{r7}
 801a4ce:	b085      	sub	sp, #20
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
 801a4d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d01e      	beq.n	801a51a <udp_netif_ip_addr_changed+0x4e>
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d01a      	beq.n	801a51a <udp_netif_ip_addr_changed+0x4e>
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d017      	beq.n	801a51a <udp_netif_ip_addr_changed+0x4e>
 801a4ea:	683b      	ldr	r3, [r7, #0]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d013      	beq.n	801a51a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a4f2:	4b0d      	ldr	r3, [pc, #52]	; (801a528 <udp_netif_ip_addr_changed+0x5c>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	60fb      	str	r3, [r7, #12]
 801a4f8:	e00c      	b.n	801a514 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	681a      	ldr	r2, [r3, #0]
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	429a      	cmp	r2, r3
 801a504:	d103      	bne.n	801a50e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	681a      	ldr	r2, [r3, #0]
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	68db      	ldr	r3, [r3, #12]
 801a512:	60fb      	str	r3, [r7, #12]
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d1ef      	bne.n	801a4fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a51a:	bf00      	nop
 801a51c:	3714      	adds	r7, #20
 801a51e:	46bd      	mov	sp, r7
 801a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a524:	4770      	bx	lr
 801a526:	bf00      	nop
 801a528:	2000c67c 	.word	0x2000c67c

0801a52c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b086      	sub	sp, #24
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
 801a534:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a536:	230e      	movs	r3, #14
 801a538:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	895b      	ldrh	r3, [r3, #10]
 801a53e:	2b0e      	cmp	r3, #14
 801a540:	d96e      	bls.n	801a620 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	7bdb      	ldrb	r3, [r3, #15]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d106      	bne.n	801a558 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a54a:	683b      	ldr	r3, [r7, #0]
 801a54c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a550:	3301      	adds	r3, #1
 801a552:	b2da      	uxtb	r2, r3
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	685b      	ldr	r3, [r3, #4]
 801a55c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a55e:	693b      	ldr	r3, [r7, #16]
 801a560:	7b1a      	ldrb	r2, [r3, #12]
 801a562:	7b5b      	ldrb	r3, [r3, #13]
 801a564:	021b      	lsls	r3, r3, #8
 801a566:	4313      	orrs	r3, r2
 801a568:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a56a:	693b      	ldr	r3, [r7, #16]
 801a56c:	781b      	ldrb	r3, [r3, #0]
 801a56e:	f003 0301 	and.w	r3, r3, #1
 801a572:	2b00      	cmp	r3, #0
 801a574:	d023      	beq.n	801a5be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a576:	693b      	ldr	r3, [r7, #16]
 801a578:	781b      	ldrb	r3, [r3, #0]
 801a57a:	2b01      	cmp	r3, #1
 801a57c:	d10f      	bne.n	801a59e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a57e:	693b      	ldr	r3, [r7, #16]
 801a580:	785b      	ldrb	r3, [r3, #1]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d11b      	bne.n	801a5be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a58a:	2b5e      	cmp	r3, #94	; 0x5e
 801a58c:	d117      	bne.n	801a5be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	7b5b      	ldrb	r3, [r3, #13]
 801a592:	f043 0310 	orr.w	r3, r3, #16
 801a596:	b2da      	uxtb	r2, r3
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	735a      	strb	r2, [r3, #13]
 801a59c:	e00f      	b.n	801a5be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a59e:	693b      	ldr	r3, [r7, #16]
 801a5a0:	2206      	movs	r2, #6
 801a5a2:	4928      	ldr	r1, [pc, #160]	; (801a644 <ethernet_input+0x118>)
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f000 fabf 	bl	801ab28 <memcmp>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d106      	bne.n	801a5be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	7b5b      	ldrb	r3, [r3, #13]
 801a5b4:	f043 0308 	orr.w	r3, r3, #8
 801a5b8:	b2da      	uxtb	r2, r3
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a5be:	89fb      	ldrh	r3, [r7, #14]
 801a5c0:	2b08      	cmp	r3, #8
 801a5c2:	d003      	beq.n	801a5cc <ethernet_input+0xa0>
 801a5c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a5c8:	d014      	beq.n	801a5f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a5ca:	e032      	b.n	801a632 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a5d2:	f003 0308 	and.w	r3, r3, #8
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d024      	beq.n	801a624 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a5da:	8afb      	ldrh	r3, [r7, #22]
 801a5dc:	4619      	mov	r1, r3
 801a5de:	6878      	ldr	r0, [r7, #4]
 801a5e0:	f7f8 fce8 	bl	8012fb4 <pbuf_remove_header>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d11e      	bne.n	801a628 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a5ea:	6839      	ldr	r1, [r7, #0]
 801a5ec:	6878      	ldr	r0, [r7, #4]
 801a5ee:	f7f6 f86b 	bl	80106c8 <ip4_input>
      break;
 801a5f2:	e013      	b.n	801a61c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a5fa:	f003 0308 	and.w	r3, r3, #8
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d014      	beq.n	801a62c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a602:	8afb      	ldrh	r3, [r7, #22]
 801a604:	4619      	mov	r1, r3
 801a606:	6878      	ldr	r0, [r7, #4]
 801a608:	f7f8 fcd4 	bl	8012fb4 <pbuf_remove_header>
 801a60c:	4603      	mov	r3, r0
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d10e      	bne.n	801a630 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a612:	6839      	ldr	r1, [r7, #0]
 801a614:	6878      	ldr	r0, [r7, #4]
 801a616:	f7f5 f9eb 	bl	800f9f0 <etharp_input>
      break;
 801a61a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a61c:	2300      	movs	r3, #0
 801a61e:	e00c      	b.n	801a63a <ethernet_input+0x10e>
    goto free_and_return;
 801a620:	bf00      	nop
 801a622:	e006      	b.n	801a632 <ethernet_input+0x106>
        goto free_and_return;
 801a624:	bf00      	nop
 801a626:	e004      	b.n	801a632 <ethernet_input+0x106>
        goto free_and_return;
 801a628:	bf00      	nop
 801a62a:	e002      	b.n	801a632 <ethernet_input+0x106>
        goto free_and_return;
 801a62c:	bf00      	nop
 801a62e:	e000      	b.n	801a632 <ethernet_input+0x106>
        goto free_and_return;
 801a630:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a632:	6878      	ldr	r0, [r7, #4]
 801a634:	f7f8 fd76 	bl	8013124 <pbuf_free>
  return ERR_OK;
 801a638:	2300      	movs	r3, #0
}
 801a63a:	4618      	mov	r0, r3
 801a63c:	3718      	adds	r7, #24
 801a63e:	46bd      	mov	sp, r7
 801a640:	bd80      	pop	{r7, pc}
 801a642:	bf00      	nop
 801a644:	08021058 	.word	0x08021058

0801a648 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a648:	b580      	push	{r7, lr}
 801a64a:	b086      	sub	sp, #24
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	60f8      	str	r0, [r7, #12]
 801a650:	60b9      	str	r1, [r7, #8]
 801a652:	607a      	str	r2, [r7, #4]
 801a654:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a656:	8c3b      	ldrh	r3, [r7, #32]
 801a658:	4618      	mov	r0, r3
 801a65a:	f7f7 f8c9 	bl	80117f0 <lwip_htons>
 801a65e:	4603      	mov	r3, r0
 801a660:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a662:	210e      	movs	r1, #14
 801a664:	68b8      	ldr	r0, [r7, #8]
 801a666:	f7f8 fc95 	bl	8012f94 <pbuf_add_header>
 801a66a:	4603      	mov	r3, r0
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d125      	bne.n	801a6bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a670:	68bb      	ldr	r3, [r7, #8]
 801a672:	685b      	ldr	r3, [r3, #4]
 801a674:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a676:	693b      	ldr	r3, [r7, #16]
 801a678:	8afa      	ldrh	r2, [r7, #22]
 801a67a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a67c:	693b      	ldr	r3, [r7, #16]
 801a67e:	2206      	movs	r2, #6
 801a680:	6839      	ldr	r1, [r7, #0]
 801a682:	4618      	mov	r0, r3
 801a684:	f000 fa5e 	bl	801ab44 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a688:	693b      	ldr	r3, [r7, #16]
 801a68a:	3306      	adds	r3, #6
 801a68c:	2206      	movs	r2, #6
 801a68e:	6879      	ldr	r1, [r7, #4]
 801a690:	4618      	mov	r0, r3
 801a692:	f000 fa57 	bl	801ab44 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a69c:	2b06      	cmp	r3, #6
 801a69e:	d006      	beq.n	801a6ae <ethernet_output+0x66>
 801a6a0:	4b0a      	ldr	r3, [pc, #40]	; (801a6cc <ethernet_output+0x84>)
 801a6a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a6a6:	490a      	ldr	r1, [pc, #40]	; (801a6d0 <ethernet_output+0x88>)
 801a6a8:	480a      	ldr	r0, [pc, #40]	; (801a6d4 <ethernet_output+0x8c>)
 801a6aa:	f000 fa7b 	bl	801aba4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	699b      	ldr	r3, [r3, #24]
 801a6b2:	68b9      	ldr	r1, [r7, #8]
 801a6b4:	68f8      	ldr	r0, [r7, #12]
 801a6b6:	4798      	blx	r3
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	e002      	b.n	801a6c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a6bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a6be:	f06f 0301 	mvn.w	r3, #1
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	3718      	adds	r7, #24
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	bd80      	pop	{r7, pc}
 801a6ca:	bf00      	nop
 801a6cc:	08020764 	.word	0x08020764
 801a6d0:	0802081c 	.word	0x0802081c
 801a6d4:	08020850 	.word	0x08020850

0801a6d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b082      	sub	sp, #8
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	2104      	movs	r1, #4
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f7ee fbe1 	bl	8008eb0 <osMessageQueueNew>
 801a6ee:	4602      	mov	r2, r0
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d102      	bne.n	801a702 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a6fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a700:	e000      	b.n	801a704 <sys_mbox_new+0x2c>

  return ERR_OK;
 801a702:	2300      	movs	r3, #0
}
 801a704:	4618      	mov	r0, r3
 801a706:	3708      	adds	r7, #8
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd80      	pop	{r7, pc}

0801a70c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b082      	sub	sp, #8
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	4618      	mov	r0, r3
 801a71a:	f7ee fcfb 	bl	8009114 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	4618      	mov	r0, r3
 801a724:	f7ee fd16 	bl	8009154 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a728:	bf00      	nop
 801a72a:	3708      	adds	r7, #8
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bd80      	pop	{r7, pc}

0801a730 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
 801a738:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	6818      	ldr	r0, [r3, #0]
 801a73e:	4639      	mov	r1, r7
 801a740:	2300      	movs	r3, #0
 801a742:	2200      	movs	r2, #0
 801a744:	f7ee fc28 	bl	8008f98 <osMessageQueuePut>
 801a748:	4603      	mov	r3, r0
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d102      	bne.n	801a754 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a74e:	2300      	movs	r3, #0
 801a750:	73fb      	strb	r3, [r7, #15]
 801a752:	e001      	b.n	801a758 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a754:	23ff      	movs	r3, #255	; 0xff
 801a756:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a75c:	4618      	mov	r0, r3
 801a75e:	3710      	adds	r7, #16
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}

0801a764 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b086      	sub	sp, #24
 801a768:	af00      	add	r7, sp, #0
 801a76a:	60f8      	str	r0, [r7, #12]
 801a76c:	60b9      	str	r1, [r7, #8]
 801a76e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a770:	f7ee f85c 	bl	800882c <osKernelGetTickCount>
 801a774:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d013      	beq.n	801a7a4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	6818      	ldr	r0, [r3, #0]
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	2200      	movs	r2, #0
 801a784:	68b9      	ldr	r1, [r7, #8]
 801a786:	f7ee fc67 	bl	8009058 <osMessageQueueGet>
 801a78a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a78c:	693b      	ldr	r3, [r7, #16]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d105      	bne.n	801a79e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a792:	f7ee f84b 	bl	800882c <osKernelGetTickCount>
 801a796:	4602      	mov	r2, r0
 801a798:	697b      	ldr	r3, [r7, #20]
 801a79a:	1ad3      	subs	r3, r2, r3
 801a79c:	e00f      	b.n	801a7be <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a79e:	f04f 33ff 	mov.w	r3, #4294967295
 801a7a2:	e00c      	b.n	801a7be <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	6818      	ldr	r0, [r3, #0]
 801a7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	68b9      	ldr	r1, [r7, #8]
 801a7b0:	f7ee fc52 	bl	8009058 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a7b4:	f7ee f83a 	bl	800882c <osKernelGetTickCount>
 801a7b8:	4602      	mov	r2, r0
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a7be:	4618      	mov	r0, r3
 801a7c0:	3718      	adds	r7, #24
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bd80      	pop	{r7, pc}

0801a7c6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a7c6:	b580      	push	{r7, lr}
 801a7c8:	b082      	sub	sp, #8
 801a7ca:	af00      	add	r7, sp, #0
 801a7cc:	6078      	str	r0, [r7, #4]
 801a7ce:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	6818      	ldr	r0, [r3, #0]
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	6839      	ldr	r1, [r7, #0]
 801a7da:	f7ee fc3d 	bl	8009058 <osMessageQueueGet>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d101      	bne.n	801a7e8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	e001      	b.n	801a7ec <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a7e8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	3708      	adds	r7, #8
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd80      	pop	{r7, pc}

0801a7f4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a7f4:	b480      	push	{r7}
 801a7f6:	b083      	sub	sp, #12
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d101      	bne.n	801a808 <sys_mbox_valid+0x14>
    return 0;
 801a804:	2300      	movs	r3, #0
 801a806:	e000      	b.n	801a80a <sys_mbox_valid+0x16>
  else
    return 1;
 801a808:	2301      	movs	r3, #1
}
 801a80a:	4618      	mov	r0, r3
 801a80c:	370c      	adds	r7, #12
 801a80e:	46bd      	mov	sp, r7
 801a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a814:	4770      	bx	lr

0801a816 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a816:	b480      	push	{r7}
 801a818:	b083      	sub	sp, #12
 801a81a:	af00      	add	r7, sp, #0
 801a81c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	2200      	movs	r2, #0
 801a822:	601a      	str	r2, [r3, #0]
}
 801a824:	bf00      	nop
 801a826:	370c      	adds	r7, #12
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr

0801a830 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b082      	sub	sp, #8
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	460b      	mov	r3, r1
 801a83a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801a83c:	78fb      	ldrb	r3, [r7, #3]
 801a83e:	2200      	movs	r2, #0
 801a840:	4619      	mov	r1, r3
 801a842:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a846:	f7ee f9ef 	bl	8008c28 <osSemaphoreNew>
 801a84a:	4602      	mov	r2, r0
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d102      	bne.n	801a85e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a858:	f04f 33ff 	mov.w	r3, #4294967295
 801a85c:	e009      	b.n	801a872 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801a85e:	78fb      	ldrb	r3, [r7, #3]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d105      	bne.n	801a870 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	2100      	movs	r1, #0
 801a86a:	4618      	mov	r0, r3
 801a86c:	f7ee fa66 	bl	8008d3c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a870:	2300      	movs	r3, #0
}
 801a872:	4618      	mov	r0, r3
 801a874:	3708      	adds	r7, #8
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}

0801a87a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a87a:	b580      	push	{r7, lr}
 801a87c:	b084      	sub	sp, #16
 801a87e:	af00      	add	r7, sp, #0
 801a880:	6078      	str	r0, [r7, #4]
 801a882:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801a884:	f7ed ffd2 	bl	800882c <osKernelGetTickCount>
 801a888:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d011      	beq.n	801a8b4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	6839      	ldr	r1, [r7, #0]
 801a896:	4618      	mov	r0, r3
 801a898:	f7ee fa50 	bl	8008d3c <osSemaphoreAcquire>
 801a89c:	4603      	mov	r3, r0
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d105      	bne.n	801a8ae <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801a8a2:	f7ed ffc3 	bl	800882c <osKernelGetTickCount>
 801a8a6:	4602      	mov	r2, r0
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	1ad3      	subs	r3, r2, r3
 801a8ac:	e012      	b.n	801a8d4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a8ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a8b2:	e00f      	b.n	801a8d4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801a8b4:	bf00      	nop
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	f04f 31ff 	mov.w	r1, #4294967295
 801a8be:	4618      	mov	r0, r3
 801a8c0:	f7ee fa3c 	bl	8008d3c <osSemaphoreAcquire>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d1f5      	bne.n	801a8b6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801a8ca:	f7ed ffaf 	bl	800882c <osKernelGetTickCount>
 801a8ce:	4602      	mov	r2, r0
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	3710      	adds	r7, #16
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}

0801a8dc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b082      	sub	sp, #8
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f7ee fa79 	bl	8008de0 <osSemaphoreRelease>
}
 801a8ee:	bf00      	nop
 801a8f0:	3708      	adds	r7, #8
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}

0801a8f6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a8f6:	b580      	push	{r7, lr}
 801a8f8:	b082      	sub	sp, #8
 801a8fa:	af00      	add	r7, sp, #0
 801a8fc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	4618      	mov	r0, r3
 801a904:	f7ee fab0 	bl	8008e68 <osSemaphoreDelete>
}
 801a908:	bf00      	nop
 801a90a:	3708      	adds	r7, #8
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd80      	pop	{r7, pc}

0801a910 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a910:	b480      	push	{r7}
 801a912:	b083      	sub	sp, #12
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d101      	bne.n	801a924 <sys_sem_valid+0x14>
    return 0;
 801a920:	2300      	movs	r3, #0
 801a922:	e000      	b.n	801a926 <sys_sem_valid+0x16>
  else
    return 1;
 801a924:	2301      	movs	r3, #1
}
 801a926:	4618      	mov	r0, r3
 801a928:	370c      	adds	r7, #12
 801a92a:	46bd      	mov	sp, r7
 801a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a930:	4770      	bx	lr

0801a932 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a932:	b480      	push	{r7}
 801a934:	b083      	sub	sp, #12
 801a936:	af00      	add	r7, sp, #0
 801a938:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2200      	movs	r2, #0
 801a93e:	601a      	str	r2, [r3, #0]
}
 801a940:	bf00      	nop
 801a942:	370c      	adds	r7, #12
 801a944:	46bd      	mov	sp, r7
 801a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94a:	4770      	bx	lr

0801a94c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a950:	2000      	movs	r0, #0
 801a952:	f7ee f85b 	bl	8008a0c <osMutexNew>
 801a956:	4603      	mov	r3, r0
 801a958:	4a01      	ldr	r2, [pc, #4]	; (801a960 <sys_init+0x14>)
 801a95a:	6013      	str	r3, [r2, #0]
#endif
}
 801a95c:	bf00      	nop
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	2000c684 	.word	0x2000c684

0801a964 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a96c:	2000      	movs	r0, #0
 801a96e:	f7ee f84d 	bl	8008a0c <osMutexNew>
 801a972:	4602      	mov	r2, r0
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d102      	bne.n	801a986 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a980:	f04f 33ff 	mov.w	r3, #4294967295
 801a984:	e000      	b.n	801a988 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a986:	2300      	movs	r3, #0
}
 801a988:	4618      	mov	r0, r3
 801a98a:	3708      	adds	r7, #8
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bd80      	pop	{r7, pc}

0801a990 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b082      	sub	sp, #8
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	f04f 31ff 	mov.w	r1, #4294967295
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f7ee f8b9 	bl	8008b18 <osMutexAcquire>
#endif
}
 801a9a6:	bf00      	nop
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}

0801a9ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a9ae:	b580      	push	{r7, lr}
 801a9b0:	b082      	sub	sp, #8
 801a9b2:	af00      	add	r7, sp, #0
 801a9b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7ee f8f7 	bl	8008bae <osMutexRelease>
}
 801a9c0:	bf00      	nop
 801a9c2:	3708      	adds	r7, #8
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}

0801a9c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b08e      	sub	sp, #56	; 0x38
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	60f8      	str	r0, [r7, #12]
 801a9d0:	60b9      	str	r1, [r7, #8]
 801a9d2:	607a      	str	r2, [r7, #4]
 801a9d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a9d6:	f107 0314 	add.w	r3, r7, #20
 801a9da:	2224      	movs	r2, #36	; 0x24
 801a9dc:	2100      	movs	r1, #0
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f000 f8d8 	bl	801ab94 <memset>
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	617b      	str	r3, [r7, #20]
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a9f0:	f107 0314 	add.w	r3, r7, #20
 801a9f4:	461a      	mov	r2, r3
 801a9f6:	6879      	ldr	r1, [r7, #4]
 801a9f8:	68b8      	ldr	r0, [r7, #8]
 801a9fa:	f7ed ff2c 	bl	8008856 <osThreadNew>
 801a9fe:	4603      	mov	r3, r0
#endif
}
 801aa00:	4618      	mov	r0, r3
 801aa02:	3738      	adds	r7, #56	; 0x38
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801aa0c:	4b04      	ldr	r3, [pc, #16]	; (801aa20 <sys_arch_protect+0x18>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f04f 31ff 	mov.w	r1, #4294967295
 801aa14:	4618      	mov	r0, r3
 801aa16:	f7ee f87f 	bl	8008b18 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801aa1a:	2301      	movs	r3, #1
}
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	2000c684 	.word	0x2000c684

0801aa24 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801aa2c:	4b04      	ldr	r3, [pc, #16]	; (801aa40 <sys_arch_unprotect+0x1c>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7ee f8bc 	bl	8008bae <osMutexRelease>
}
 801aa36:	bf00      	nop
 801aa38:	3708      	adds	r7, #8
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
 801aa3e:	bf00      	nop
 801aa40:	2000c684 	.word	0x2000c684

0801aa44 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b084      	sub	sp, #16
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d002      	beq.n	801aa5a <fs_open+0x16>
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d102      	bne.n	801aa60 <fs_open+0x1c>
    return ERR_ARG;
 801aa5a:	f06f 030f 	mvn.w	r3, #15
 801aa5e:	e028      	b.n	801aab2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801aa60:	4b16      	ldr	r3, [pc, #88]	; (801aabc <fs_open+0x78>)
 801aa62:	60fb      	str	r3, [r7, #12]
 801aa64:	e020      	b.n	801aaa8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	685b      	ldr	r3, [r3, #4]
 801aa6a:	4619      	mov	r1, r3
 801aa6c:	6838      	ldr	r0, [r7, #0]
 801aa6e:	f7e5 fc4f 	bl	8000310 <strcmp>
 801aa72:	4603      	mov	r3, r0
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d114      	bne.n	801aaa2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	689a      	ldr	r2, [r3, #8]
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	68da      	ldr	r2, [r3, #12]
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	68da      	ldr	r2, [r3, #12]
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	2200      	movs	r2, #0
 801aa94:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	7c1a      	ldrb	r2, [r3, #16]
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	e007      	b.n	801aab2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	60fb      	str	r3, [r7, #12]
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d1db      	bne.n	801aa66 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801aaae:	f06f 0305 	mvn.w	r3, #5
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3710      	adds	r7, #16
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop
 801aabc:	0803110c 	.word	0x0803110c

0801aac0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 801aac0:	b480      	push	{r7}
 801aac2:	b083      	sub	sp, #12
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801aac8:	bf00      	nop
 801aaca:	370c      	adds	r7, #12
 801aacc:	46bd      	mov	sp, r7
 801aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad2:	4770      	bx	lr

0801aad4 <__errno>:
 801aad4:	4b01      	ldr	r3, [pc, #4]	; (801aadc <__errno+0x8>)
 801aad6:	6818      	ldr	r0, [r3, #0]
 801aad8:	4770      	bx	lr
 801aada:	bf00      	nop
 801aadc:	20000044 	.word	0x20000044

0801aae0 <__libc_init_array>:
 801aae0:	b570      	push	{r4, r5, r6, lr}
 801aae2:	4d0d      	ldr	r5, [pc, #52]	; (801ab18 <__libc_init_array+0x38>)
 801aae4:	4c0d      	ldr	r4, [pc, #52]	; (801ab1c <__libc_init_array+0x3c>)
 801aae6:	1b64      	subs	r4, r4, r5
 801aae8:	10a4      	asrs	r4, r4, #2
 801aaea:	2600      	movs	r6, #0
 801aaec:	42a6      	cmp	r6, r4
 801aaee:	d109      	bne.n	801ab04 <__libc_init_array+0x24>
 801aaf0:	4d0b      	ldr	r5, [pc, #44]	; (801ab20 <__libc_init_array+0x40>)
 801aaf2:	4c0c      	ldr	r4, [pc, #48]	; (801ab24 <__libc_init_array+0x44>)
 801aaf4:	f001 fa44 	bl	801bf80 <_init>
 801aaf8:	1b64      	subs	r4, r4, r5
 801aafa:	10a4      	asrs	r4, r4, #2
 801aafc:	2600      	movs	r6, #0
 801aafe:	42a6      	cmp	r6, r4
 801ab00:	d105      	bne.n	801ab0e <__libc_init_array+0x2e>
 801ab02:	bd70      	pop	{r4, r5, r6, pc}
 801ab04:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab08:	4798      	blx	r3
 801ab0a:	3601      	adds	r6, #1
 801ab0c:	e7ee      	b.n	801aaec <__libc_init_array+0xc>
 801ab0e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab12:	4798      	blx	r3
 801ab14:	3601      	adds	r6, #1
 801ab16:	e7f2      	b.n	801aafe <__libc_init_array+0x1e>
 801ab18:	0803126c 	.word	0x0803126c
 801ab1c:	0803126c 	.word	0x0803126c
 801ab20:	0803126c 	.word	0x0803126c
 801ab24:	08031270 	.word	0x08031270

0801ab28 <memcmp>:
 801ab28:	b530      	push	{r4, r5, lr}
 801ab2a:	3901      	subs	r1, #1
 801ab2c:	2400      	movs	r4, #0
 801ab2e:	42a2      	cmp	r2, r4
 801ab30:	d101      	bne.n	801ab36 <memcmp+0xe>
 801ab32:	2000      	movs	r0, #0
 801ab34:	e005      	b.n	801ab42 <memcmp+0x1a>
 801ab36:	5d03      	ldrb	r3, [r0, r4]
 801ab38:	3401      	adds	r4, #1
 801ab3a:	5d0d      	ldrb	r5, [r1, r4]
 801ab3c:	42ab      	cmp	r3, r5
 801ab3e:	d0f6      	beq.n	801ab2e <memcmp+0x6>
 801ab40:	1b58      	subs	r0, r3, r5
 801ab42:	bd30      	pop	{r4, r5, pc}

0801ab44 <memcpy>:
 801ab44:	440a      	add	r2, r1
 801ab46:	4291      	cmp	r1, r2
 801ab48:	f100 33ff 	add.w	r3, r0, #4294967295
 801ab4c:	d100      	bne.n	801ab50 <memcpy+0xc>
 801ab4e:	4770      	bx	lr
 801ab50:	b510      	push	{r4, lr}
 801ab52:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab56:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab5a:	4291      	cmp	r1, r2
 801ab5c:	d1f9      	bne.n	801ab52 <memcpy+0xe>
 801ab5e:	bd10      	pop	{r4, pc}

0801ab60 <memmove>:
 801ab60:	4288      	cmp	r0, r1
 801ab62:	b510      	push	{r4, lr}
 801ab64:	eb01 0402 	add.w	r4, r1, r2
 801ab68:	d902      	bls.n	801ab70 <memmove+0x10>
 801ab6a:	4284      	cmp	r4, r0
 801ab6c:	4623      	mov	r3, r4
 801ab6e:	d807      	bhi.n	801ab80 <memmove+0x20>
 801ab70:	1e43      	subs	r3, r0, #1
 801ab72:	42a1      	cmp	r1, r4
 801ab74:	d008      	beq.n	801ab88 <memmove+0x28>
 801ab76:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab7e:	e7f8      	b.n	801ab72 <memmove+0x12>
 801ab80:	4402      	add	r2, r0
 801ab82:	4601      	mov	r1, r0
 801ab84:	428a      	cmp	r2, r1
 801ab86:	d100      	bne.n	801ab8a <memmove+0x2a>
 801ab88:	bd10      	pop	{r4, pc}
 801ab8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab92:	e7f7      	b.n	801ab84 <memmove+0x24>

0801ab94 <memset>:
 801ab94:	4402      	add	r2, r0
 801ab96:	4603      	mov	r3, r0
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	d100      	bne.n	801ab9e <memset+0xa>
 801ab9c:	4770      	bx	lr
 801ab9e:	f803 1b01 	strb.w	r1, [r3], #1
 801aba2:	e7f9      	b.n	801ab98 <memset+0x4>

0801aba4 <iprintf>:
 801aba4:	b40f      	push	{r0, r1, r2, r3}
 801aba6:	4b0a      	ldr	r3, [pc, #40]	; (801abd0 <iprintf+0x2c>)
 801aba8:	b513      	push	{r0, r1, r4, lr}
 801abaa:	681c      	ldr	r4, [r3, #0]
 801abac:	b124      	cbz	r4, 801abb8 <iprintf+0x14>
 801abae:	69a3      	ldr	r3, [r4, #24]
 801abb0:	b913      	cbnz	r3, 801abb8 <iprintf+0x14>
 801abb2:	4620      	mov	r0, r4
 801abb4:	f000 f90e 	bl	801add4 <__sinit>
 801abb8:	ab05      	add	r3, sp, #20
 801abba:	9a04      	ldr	r2, [sp, #16]
 801abbc:	68a1      	ldr	r1, [r4, #8]
 801abbe:	9301      	str	r3, [sp, #4]
 801abc0:	4620      	mov	r0, r4
 801abc2:	f000 fbf1 	bl	801b3a8 <_vfiprintf_r>
 801abc6:	b002      	add	sp, #8
 801abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abcc:	b004      	add	sp, #16
 801abce:	4770      	bx	lr
 801abd0:	20000044 	.word	0x20000044

0801abd4 <rand>:
 801abd4:	4b17      	ldr	r3, [pc, #92]	; (801ac34 <rand+0x60>)
 801abd6:	b510      	push	{r4, lr}
 801abd8:	681c      	ldr	r4, [r3, #0]
 801abda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801abdc:	b9b3      	cbnz	r3, 801ac0c <rand+0x38>
 801abde:	2018      	movs	r0, #24
 801abe0:	f000 f9aa 	bl	801af38 <malloc>
 801abe4:	63a0      	str	r0, [r4, #56]	; 0x38
 801abe6:	b928      	cbnz	r0, 801abf4 <rand+0x20>
 801abe8:	4602      	mov	r2, r0
 801abea:	4b13      	ldr	r3, [pc, #76]	; (801ac38 <rand+0x64>)
 801abec:	4813      	ldr	r0, [pc, #76]	; (801ac3c <rand+0x68>)
 801abee:	214e      	movs	r1, #78	; 0x4e
 801abf0:	f000 f87a 	bl	801ace8 <__assert_func>
 801abf4:	4a12      	ldr	r2, [pc, #72]	; (801ac40 <rand+0x6c>)
 801abf6:	4b13      	ldr	r3, [pc, #76]	; (801ac44 <rand+0x70>)
 801abf8:	e9c0 2300 	strd	r2, r3, [r0]
 801abfc:	4b12      	ldr	r3, [pc, #72]	; (801ac48 <rand+0x74>)
 801abfe:	6083      	str	r3, [r0, #8]
 801ac00:	230b      	movs	r3, #11
 801ac02:	8183      	strh	r3, [r0, #12]
 801ac04:	2201      	movs	r2, #1
 801ac06:	2300      	movs	r3, #0
 801ac08:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ac0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ac0e:	480f      	ldr	r0, [pc, #60]	; (801ac4c <rand+0x78>)
 801ac10:	690a      	ldr	r2, [r1, #16]
 801ac12:	694b      	ldr	r3, [r1, #20]
 801ac14:	4c0e      	ldr	r4, [pc, #56]	; (801ac50 <rand+0x7c>)
 801ac16:	4350      	muls	r0, r2
 801ac18:	fb04 0003 	mla	r0, r4, r3, r0
 801ac1c:	fba2 3404 	umull	r3, r4, r2, r4
 801ac20:	1c5a      	adds	r2, r3, #1
 801ac22:	4404      	add	r4, r0
 801ac24:	f144 0000 	adc.w	r0, r4, #0
 801ac28:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ac2c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ac30:	bd10      	pop	{r4, pc}
 801ac32:	bf00      	nop
 801ac34:	20000044 	.word	0x20000044
 801ac38:	08031124 	.word	0x08031124
 801ac3c:	0803113b 	.word	0x0803113b
 801ac40:	abcd330e 	.word	0xabcd330e
 801ac44:	e66d1234 	.word	0xe66d1234
 801ac48:	0005deec 	.word	0x0005deec
 801ac4c:	5851f42d 	.word	0x5851f42d
 801ac50:	4c957f2d 	.word	0x4c957f2d

0801ac54 <siprintf>:
 801ac54:	b40e      	push	{r1, r2, r3}
 801ac56:	b500      	push	{lr}
 801ac58:	b09c      	sub	sp, #112	; 0x70
 801ac5a:	ab1d      	add	r3, sp, #116	; 0x74
 801ac5c:	9002      	str	r0, [sp, #8]
 801ac5e:	9006      	str	r0, [sp, #24]
 801ac60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ac64:	4809      	ldr	r0, [pc, #36]	; (801ac8c <siprintf+0x38>)
 801ac66:	9107      	str	r1, [sp, #28]
 801ac68:	9104      	str	r1, [sp, #16]
 801ac6a:	4909      	ldr	r1, [pc, #36]	; (801ac90 <siprintf+0x3c>)
 801ac6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac70:	9105      	str	r1, [sp, #20]
 801ac72:	6800      	ldr	r0, [r0, #0]
 801ac74:	9301      	str	r3, [sp, #4]
 801ac76:	a902      	add	r1, sp, #8
 801ac78:	f000 fa6c 	bl	801b154 <_svfiprintf_r>
 801ac7c:	9b02      	ldr	r3, [sp, #8]
 801ac7e:	2200      	movs	r2, #0
 801ac80:	701a      	strb	r2, [r3, #0]
 801ac82:	b01c      	add	sp, #112	; 0x70
 801ac84:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac88:	b003      	add	sp, #12
 801ac8a:	4770      	bx	lr
 801ac8c:	20000044 	.word	0x20000044
 801ac90:	ffff0208 	.word	0xffff0208

0801ac94 <strcat>:
 801ac94:	b510      	push	{r4, lr}
 801ac96:	4602      	mov	r2, r0
 801ac98:	7814      	ldrb	r4, [r2, #0]
 801ac9a:	4613      	mov	r3, r2
 801ac9c:	3201      	adds	r2, #1
 801ac9e:	2c00      	cmp	r4, #0
 801aca0:	d1fa      	bne.n	801ac98 <strcat+0x4>
 801aca2:	3b01      	subs	r3, #1
 801aca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aca8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801acac:	2a00      	cmp	r2, #0
 801acae:	d1f9      	bne.n	801aca4 <strcat+0x10>
 801acb0:	bd10      	pop	{r4, pc}

0801acb2 <strcpy>:
 801acb2:	4603      	mov	r3, r0
 801acb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acb8:	f803 2b01 	strb.w	r2, [r3], #1
 801acbc:	2a00      	cmp	r2, #0
 801acbe:	d1f9      	bne.n	801acb4 <strcpy+0x2>
 801acc0:	4770      	bx	lr

0801acc2 <strncmp>:
 801acc2:	b510      	push	{r4, lr}
 801acc4:	b16a      	cbz	r2, 801ace2 <strncmp+0x20>
 801acc6:	3901      	subs	r1, #1
 801acc8:	1884      	adds	r4, r0, r2
 801acca:	f810 3b01 	ldrb.w	r3, [r0], #1
 801acce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801acd2:	4293      	cmp	r3, r2
 801acd4:	d103      	bne.n	801acde <strncmp+0x1c>
 801acd6:	42a0      	cmp	r0, r4
 801acd8:	d001      	beq.n	801acde <strncmp+0x1c>
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d1f5      	bne.n	801acca <strncmp+0x8>
 801acde:	1a98      	subs	r0, r3, r2
 801ace0:	bd10      	pop	{r4, pc}
 801ace2:	4610      	mov	r0, r2
 801ace4:	e7fc      	b.n	801ace0 <strncmp+0x1e>
	...

0801ace8 <__assert_func>:
 801ace8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801acea:	4614      	mov	r4, r2
 801acec:	461a      	mov	r2, r3
 801acee:	4b09      	ldr	r3, [pc, #36]	; (801ad14 <__assert_func+0x2c>)
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	4605      	mov	r5, r0
 801acf4:	68d8      	ldr	r0, [r3, #12]
 801acf6:	b14c      	cbz	r4, 801ad0c <__assert_func+0x24>
 801acf8:	4b07      	ldr	r3, [pc, #28]	; (801ad18 <__assert_func+0x30>)
 801acfa:	9100      	str	r1, [sp, #0]
 801acfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad00:	4906      	ldr	r1, [pc, #24]	; (801ad1c <__assert_func+0x34>)
 801ad02:	462b      	mov	r3, r5
 801ad04:	f000 f8e4 	bl	801aed0 <fiprintf>
 801ad08:	f000 ff38 	bl	801bb7c <abort>
 801ad0c:	4b04      	ldr	r3, [pc, #16]	; (801ad20 <__assert_func+0x38>)
 801ad0e:	461c      	mov	r4, r3
 801ad10:	e7f3      	b.n	801acfa <__assert_func+0x12>
 801ad12:	bf00      	nop
 801ad14:	20000044 	.word	0x20000044
 801ad18:	0803119a 	.word	0x0803119a
 801ad1c:	080311a7 	.word	0x080311a7
 801ad20:	080311d5 	.word	0x080311d5

0801ad24 <std>:
 801ad24:	2300      	movs	r3, #0
 801ad26:	b510      	push	{r4, lr}
 801ad28:	4604      	mov	r4, r0
 801ad2a:	e9c0 3300 	strd	r3, r3, [r0]
 801ad2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ad32:	6083      	str	r3, [r0, #8]
 801ad34:	8181      	strh	r1, [r0, #12]
 801ad36:	6643      	str	r3, [r0, #100]	; 0x64
 801ad38:	81c2      	strh	r2, [r0, #14]
 801ad3a:	6183      	str	r3, [r0, #24]
 801ad3c:	4619      	mov	r1, r3
 801ad3e:	2208      	movs	r2, #8
 801ad40:	305c      	adds	r0, #92	; 0x5c
 801ad42:	f7ff ff27 	bl	801ab94 <memset>
 801ad46:	4b05      	ldr	r3, [pc, #20]	; (801ad5c <std+0x38>)
 801ad48:	6263      	str	r3, [r4, #36]	; 0x24
 801ad4a:	4b05      	ldr	r3, [pc, #20]	; (801ad60 <std+0x3c>)
 801ad4c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ad4e:	4b05      	ldr	r3, [pc, #20]	; (801ad64 <std+0x40>)
 801ad50:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ad52:	4b05      	ldr	r3, [pc, #20]	; (801ad68 <std+0x44>)
 801ad54:	6224      	str	r4, [r4, #32]
 801ad56:	6323      	str	r3, [r4, #48]	; 0x30
 801ad58:	bd10      	pop	{r4, pc}
 801ad5a:	bf00      	nop
 801ad5c:	0801b951 	.word	0x0801b951
 801ad60:	0801b973 	.word	0x0801b973
 801ad64:	0801b9ab 	.word	0x0801b9ab
 801ad68:	0801b9cf 	.word	0x0801b9cf

0801ad6c <_cleanup_r>:
 801ad6c:	4901      	ldr	r1, [pc, #4]	; (801ad74 <_cleanup_r+0x8>)
 801ad6e:	f000 b8c1 	b.w	801aef4 <_fwalk_reent>
 801ad72:	bf00      	nop
 801ad74:	0801bcb9 	.word	0x0801bcb9

0801ad78 <__sfmoreglue>:
 801ad78:	b570      	push	{r4, r5, r6, lr}
 801ad7a:	1e4a      	subs	r2, r1, #1
 801ad7c:	2568      	movs	r5, #104	; 0x68
 801ad7e:	4355      	muls	r5, r2
 801ad80:	460e      	mov	r6, r1
 801ad82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ad86:	f000 f92f 	bl	801afe8 <_malloc_r>
 801ad8a:	4604      	mov	r4, r0
 801ad8c:	b140      	cbz	r0, 801ada0 <__sfmoreglue+0x28>
 801ad8e:	2100      	movs	r1, #0
 801ad90:	e9c0 1600 	strd	r1, r6, [r0]
 801ad94:	300c      	adds	r0, #12
 801ad96:	60a0      	str	r0, [r4, #8]
 801ad98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ad9c:	f7ff fefa 	bl	801ab94 <memset>
 801ada0:	4620      	mov	r0, r4
 801ada2:	bd70      	pop	{r4, r5, r6, pc}

0801ada4 <__sfp_lock_acquire>:
 801ada4:	4801      	ldr	r0, [pc, #4]	; (801adac <__sfp_lock_acquire+0x8>)
 801ada6:	f000 b8c5 	b.w	801af34 <__retarget_lock_acquire_recursive>
 801adaa:	bf00      	nop
 801adac:	2000c690 	.word	0x2000c690

0801adb0 <__sfp_lock_release>:
 801adb0:	4801      	ldr	r0, [pc, #4]	; (801adb8 <__sfp_lock_release+0x8>)
 801adb2:	f000 b8c0 	b.w	801af36 <__retarget_lock_release_recursive>
 801adb6:	bf00      	nop
 801adb8:	2000c690 	.word	0x2000c690

0801adbc <__sinit_lock_acquire>:
 801adbc:	4801      	ldr	r0, [pc, #4]	; (801adc4 <__sinit_lock_acquire+0x8>)
 801adbe:	f000 b8b9 	b.w	801af34 <__retarget_lock_acquire_recursive>
 801adc2:	bf00      	nop
 801adc4:	2000c68b 	.word	0x2000c68b

0801adc8 <__sinit_lock_release>:
 801adc8:	4801      	ldr	r0, [pc, #4]	; (801add0 <__sinit_lock_release+0x8>)
 801adca:	f000 b8b4 	b.w	801af36 <__retarget_lock_release_recursive>
 801adce:	bf00      	nop
 801add0:	2000c68b 	.word	0x2000c68b

0801add4 <__sinit>:
 801add4:	b510      	push	{r4, lr}
 801add6:	4604      	mov	r4, r0
 801add8:	f7ff fff0 	bl	801adbc <__sinit_lock_acquire>
 801addc:	69a3      	ldr	r3, [r4, #24]
 801adde:	b11b      	cbz	r3, 801ade8 <__sinit+0x14>
 801ade0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ade4:	f7ff bff0 	b.w	801adc8 <__sinit_lock_release>
 801ade8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801adec:	6523      	str	r3, [r4, #80]	; 0x50
 801adee:	4b13      	ldr	r3, [pc, #76]	; (801ae3c <__sinit+0x68>)
 801adf0:	4a13      	ldr	r2, [pc, #76]	; (801ae40 <__sinit+0x6c>)
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	62a2      	str	r2, [r4, #40]	; 0x28
 801adf6:	42a3      	cmp	r3, r4
 801adf8:	bf04      	itt	eq
 801adfa:	2301      	moveq	r3, #1
 801adfc:	61a3      	streq	r3, [r4, #24]
 801adfe:	4620      	mov	r0, r4
 801ae00:	f000 f820 	bl	801ae44 <__sfp>
 801ae04:	6060      	str	r0, [r4, #4]
 801ae06:	4620      	mov	r0, r4
 801ae08:	f000 f81c 	bl	801ae44 <__sfp>
 801ae0c:	60a0      	str	r0, [r4, #8]
 801ae0e:	4620      	mov	r0, r4
 801ae10:	f000 f818 	bl	801ae44 <__sfp>
 801ae14:	2200      	movs	r2, #0
 801ae16:	60e0      	str	r0, [r4, #12]
 801ae18:	2104      	movs	r1, #4
 801ae1a:	6860      	ldr	r0, [r4, #4]
 801ae1c:	f7ff ff82 	bl	801ad24 <std>
 801ae20:	68a0      	ldr	r0, [r4, #8]
 801ae22:	2201      	movs	r2, #1
 801ae24:	2109      	movs	r1, #9
 801ae26:	f7ff ff7d 	bl	801ad24 <std>
 801ae2a:	68e0      	ldr	r0, [r4, #12]
 801ae2c:	2202      	movs	r2, #2
 801ae2e:	2112      	movs	r1, #18
 801ae30:	f7ff ff78 	bl	801ad24 <std>
 801ae34:	2301      	movs	r3, #1
 801ae36:	61a3      	str	r3, [r4, #24]
 801ae38:	e7d2      	b.n	801ade0 <__sinit+0xc>
 801ae3a:	bf00      	nop
 801ae3c:	08031120 	.word	0x08031120
 801ae40:	0801ad6d 	.word	0x0801ad6d

0801ae44 <__sfp>:
 801ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae46:	4607      	mov	r7, r0
 801ae48:	f7ff ffac 	bl	801ada4 <__sfp_lock_acquire>
 801ae4c:	4b1e      	ldr	r3, [pc, #120]	; (801aec8 <__sfp+0x84>)
 801ae4e:	681e      	ldr	r6, [r3, #0]
 801ae50:	69b3      	ldr	r3, [r6, #24]
 801ae52:	b913      	cbnz	r3, 801ae5a <__sfp+0x16>
 801ae54:	4630      	mov	r0, r6
 801ae56:	f7ff ffbd 	bl	801add4 <__sinit>
 801ae5a:	3648      	adds	r6, #72	; 0x48
 801ae5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ae60:	3b01      	subs	r3, #1
 801ae62:	d503      	bpl.n	801ae6c <__sfp+0x28>
 801ae64:	6833      	ldr	r3, [r6, #0]
 801ae66:	b30b      	cbz	r3, 801aeac <__sfp+0x68>
 801ae68:	6836      	ldr	r6, [r6, #0]
 801ae6a:	e7f7      	b.n	801ae5c <__sfp+0x18>
 801ae6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ae70:	b9d5      	cbnz	r5, 801aea8 <__sfp+0x64>
 801ae72:	4b16      	ldr	r3, [pc, #88]	; (801aecc <__sfp+0x88>)
 801ae74:	60e3      	str	r3, [r4, #12]
 801ae76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ae7a:	6665      	str	r5, [r4, #100]	; 0x64
 801ae7c:	f000 f859 	bl	801af32 <__retarget_lock_init_recursive>
 801ae80:	f7ff ff96 	bl	801adb0 <__sfp_lock_release>
 801ae84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ae88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ae8c:	6025      	str	r5, [r4, #0]
 801ae8e:	61a5      	str	r5, [r4, #24]
 801ae90:	2208      	movs	r2, #8
 801ae92:	4629      	mov	r1, r5
 801ae94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ae98:	f7ff fe7c 	bl	801ab94 <memset>
 801ae9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aea4:	4620      	mov	r0, r4
 801aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aea8:	3468      	adds	r4, #104	; 0x68
 801aeaa:	e7d9      	b.n	801ae60 <__sfp+0x1c>
 801aeac:	2104      	movs	r1, #4
 801aeae:	4638      	mov	r0, r7
 801aeb0:	f7ff ff62 	bl	801ad78 <__sfmoreglue>
 801aeb4:	4604      	mov	r4, r0
 801aeb6:	6030      	str	r0, [r6, #0]
 801aeb8:	2800      	cmp	r0, #0
 801aeba:	d1d5      	bne.n	801ae68 <__sfp+0x24>
 801aebc:	f7ff ff78 	bl	801adb0 <__sfp_lock_release>
 801aec0:	230c      	movs	r3, #12
 801aec2:	603b      	str	r3, [r7, #0]
 801aec4:	e7ee      	b.n	801aea4 <__sfp+0x60>
 801aec6:	bf00      	nop
 801aec8:	08031120 	.word	0x08031120
 801aecc:	ffff0001 	.word	0xffff0001

0801aed0 <fiprintf>:
 801aed0:	b40e      	push	{r1, r2, r3}
 801aed2:	b503      	push	{r0, r1, lr}
 801aed4:	4601      	mov	r1, r0
 801aed6:	ab03      	add	r3, sp, #12
 801aed8:	4805      	ldr	r0, [pc, #20]	; (801aef0 <fiprintf+0x20>)
 801aeda:	f853 2b04 	ldr.w	r2, [r3], #4
 801aede:	6800      	ldr	r0, [r0, #0]
 801aee0:	9301      	str	r3, [sp, #4]
 801aee2:	f000 fa61 	bl	801b3a8 <_vfiprintf_r>
 801aee6:	b002      	add	sp, #8
 801aee8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aeec:	b003      	add	sp, #12
 801aeee:	4770      	bx	lr
 801aef0:	20000044 	.word	0x20000044

0801aef4 <_fwalk_reent>:
 801aef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aef8:	4606      	mov	r6, r0
 801aefa:	4688      	mov	r8, r1
 801aefc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801af00:	2700      	movs	r7, #0
 801af02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af06:	f1b9 0901 	subs.w	r9, r9, #1
 801af0a:	d505      	bpl.n	801af18 <_fwalk_reent+0x24>
 801af0c:	6824      	ldr	r4, [r4, #0]
 801af0e:	2c00      	cmp	r4, #0
 801af10:	d1f7      	bne.n	801af02 <_fwalk_reent+0xe>
 801af12:	4638      	mov	r0, r7
 801af14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af18:	89ab      	ldrh	r3, [r5, #12]
 801af1a:	2b01      	cmp	r3, #1
 801af1c:	d907      	bls.n	801af2e <_fwalk_reent+0x3a>
 801af1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af22:	3301      	adds	r3, #1
 801af24:	d003      	beq.n	801af2e <_fwalk_reent+0x3a>
 801af26:	4629      	mov	r1, r5
 801af28:	4630      	mov	r0, r6
 801af2a:	47c0      	blx	r8
 801af2c:	4307      	orrs	r7, r0
 801af2e:	3568      	adds	r5, #104	; 0x68
 801af30:	e7e9      	b.n	801af06 <_fwalk_reent+0x12>

0801af32 <__retarget_lock_init_recursive>:
 801af32:	4770      	bx	lr

0801af34 <__retarget_lock_acquire_recursive>:
 801af34:	4770      	bx	lr

0801af36 <__retarget_lock_release_recursive>:
 801af36:	4770      	bx	lr

0801af38 <malloc>:
 801af38:	4b02      	ldr	r3, [pc, #8]	; (801af44 <malloc+0xc>)
 801af3a:	4601      	mov	r1, r0
 801af3c:	6818      	ldr	r0, [r3, #0]
 801af3e:	f000 b853 	b.w	801afe8 <_malloc_r>
 801af42:	bf00      	nop
 801af44:	20000044 	.word	0x20000044

0801af48 <_free_r>:
 801af48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af4a:	2900      	cmp	r1, #0
 801af4c:	d048      	beq.n	801afe0 <_free_r+0x98>
 801af4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af52:	9001      	str	r0, [sp, #4]
 801af54:	2b00      	cmp	r3, #0
 801af56:	f1a1 0404 	sub.w	r4, r1, #4
 801af5a:	bfb8      	it	lt
 801af5c:	18e4      	addlt	r4, r4, r3
 801af5e:	f000 ff5d 	bl	801be1c <__malloc_lock>
 801af62:	4a20      	ldr	r2, [pc, #128]	; (801afe4 <_free_r+0x9c>)
 801af64:	9801      	ldr	r0, [sp, #4]
 801af66:	6813      	ldr	r3, [r2, #0]
 801af68:	4615      	mov	r5, r2
 801af6a:	b933      	cbnz	r3, 801af7a <_free_r+0x32>
 801af6c:	6063      	str	r3, [r4, #4]
 801af6e:	6014      	str	r4, [r2, #0]
 801af70:	b003      	add	sp, #12
 801af72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801af76:	f000 bf57 	b.w	801be28 <__malloc_unlock>
 801af7a:	42a3      	cmp	r3, r4
 801af7c:	d90b      	bls.n	801af96 <_free_r+0x4e>
 801af7e:	6821      	ldr	r1, [r4, #0]
 801af80:	1862      	adds	r2, r4, r1
 801af82:	4293      	cmp	r3, r2
 801af84:	bf04      	itt	eq
 801af86:	681a      	ldreq	r2, [r3, #0]
 801af88:	685b      	ldreq	r3, [r3, #4]
 801af8a:	6063      	str	r3, [r4, #4]
 801af8c:	bf04      	itt	eq
 801af8e:	1852      	addeq	r2, r2, r1
 801af90:	6022      	streq	r2, [r4, #0]
 801af92:	602c      	str	r4, [r5, #0]
 801af94:	e7ec      	b.n	801af70 <_free_r+0x28>
 801af96:	461a      	mov	r2, r3
 801af98:	685b      	ldr	r3, [r3, #4]
 801af9a:	b10b      	cbz	r3, 801afa0 <_free_r+0x58>
 801af9c:	42a3      	cmp	r3, r4
 801af9e:	d9fa      	bls.n	801af96 <_free_r+0x4e>
 801afa0:	6811      	ldr	r1, [r2, #0]
 801afa2:	1855      	adds	r5, r2, r1
 801afa4:	42a5      	cmp	r5, r4
 801afa6:	d10b      	bne.n	801afc0 <_free_r+0x78>
 801afa8:	6824      	ldr	r4, [r4, #0]
 801afaa:	4421      	add	r1, r4
 801afac:	1854      	adds	r4, r2, r1
 801afae:	42a3      	cmp	r3, r4
 801afb0:	6011      	str	r1, [r2, #0]
 801afb2:	d1dd      	bne.n	801af70 <_free_r+0x28>
 801afb4:	681c      	ldr	r4, [r3, #0]
 801afb6:	685b      	ldr	r3, [r3, #4]
 801afb8:	6053      	str	r3, [r2, #4]
 801afba:	4421      	add	r1, r4
 801afbc:	6011      	str	r1, [r2, #0]
 801afbe:	e7d7      	b.n	801af70 <_free_r+0x28>
 801afc0:	d902      	bls.n	801afc8 <_free_r+0x80>
 801afc2:	230c      	movs	r3, #12
 801afc4:	6003      	str	r3, [r0, #0]
 801afc6:	e7d3      	b.n	801af70 <_free_r+0x28>
 801afc8:	6825      	ldr	r5, [r4, #0]
 801afca:	1961      	adds	r1, r4, r5
 801afcc:	428b      	cmp	r3, r1
 801afce:	bf04      	itt	eq
 801afd0:	6819      	ldreq	r1, [r3, #0]
 801afd2:	685b      	ldreq	r3, [r3, #4]
 801afd4:	6063      	str	r3, [r4, #4]
 801afd6:	bf04      	itt	eq
 801afd8:	1949      	addeq	r1, r1, r5
 801afda:	6021      	streq	r1, [r4, #0]
 801afdc:	6054      	str	r4, [r2, #4]
 801afde:	e7c7      	b.n	801af70 <_free_r+0x28>
 801afe0:	b003      	add	sp, #12
 801afe2:	bd30      	pop	{r4, r5, pc}
 801afe4:	20008614 	.word	0x20008614

0801afe8 <_malloc_r>:
 801afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afea:	1ccd      	adds	r5, r1, #3
 801afec:	f025 0503 	bic.w	r5, r5, #3
 801aff0:	3508      	adds	r5, #8
 801aff2:	2d0c      	cmp	r5, #12
 801aff4:	bf38      	it	cc
 801aff6:	250c      	movcc	r5, #12
 801aff8:	2d00      	cmp	r5, #0
 801affa:	4606      	mov	r6, r0
 801affc:	db01      	blt.n	801b002 <_malloc_r+0x1a>
 801affe:	42a9      	cmp	r1, r5
 801b000:	d903      	bls.n	801b00a <_malloc_r+0x22>
 801b002:	230c      	movs	r3, #12
 801b004:	6033      	str	r3, [r6, #0]
 801b006:	2000      	movs	r0, #0
 801b008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b00a:	f000 ff07 	bl	801be1c <__malloc_lock>
 801b00e:	4921      	ldr	r1, [pc, #132]	; (801b094 <_malloc_r+0xac>)
 801b010:	680a      	ldr	r2, [r1, #0]
 801b012:	4614      	mov	r4, r2
 801b014:	b99c      	cbnz	r4, 801b03e <_malloc_r+0x56>
 801b016:	4f20      	ldr	r7, [pc, #128]	; (801b098 <_malloc_r+0xb0>)
 801b018:	683b      	ldr	r3, [r7, #0]
 801b01a:	b923      	cbnz	r3, 801b026 <_malloc_r+0x3e>
 801b01c:	4621      	mov	r1, r4
 801b01e:	4630      	mov	r0, r6
 801b020:	f000 fc86 	bl	801b930 <_sbrk_r>
 801b024:	6038      	str	r0, [r7, #0]
 801b026:	4629      	mov	r1, r5
 801b028:	4630      	mov	r0, r6
 801b02a:	f000 fc81 	bl	801b930 <_sbrk_r>
 801b02e:	1c43      	adds	r3, r0, #1
 801b030:	d123      	bne.n	801b07a <_malloc_r+0x92>
 801b032:	230c      	movs	r3, #12
 801b034:	6033      	str	r3, [r6, #0]
 801b036:	4630      	mov	r0, r6
 801b038:	f000 fef6 	bl	801be28 <__malloc_unlock>
 801b03c:	e7e3      	b.n	801b006 <_malloc_r+0x1e>
 801b03e:	6823      	ldr	r3, [r4, #0]
 801b040:	1b5b      	subs	r3, r3, r5
 801b042:	d417      	bmi.n	801b074 <_malloc_r+0x8c>
 801b044:	2b0b      	cmp	r3, #11
 801b046:	d903      	bls.n	801b050 <_malloc_r+0x68>
 801b048:	6023      	str	r3, [r4, #0]
 801b04a:	441c      	add	r4, r3
 801b04c:	6025      	str	r5, [r4, #0]
 801b04e:	e004      	b.n	801b05a <_malloc_r+0x72>
 801b050:	6863      	ldr	r3, [r4, #4]
 801b052:	42a2      	cmp	r2, r4
 801b054:	bf0c      	ite	eq
 801b056:	600b      	streq	r3, [r1, #0]
 801b058:	6053      	strne	r3, [r2, #4]
 801b05a:	4630      	mov	r0, r6
 801b05c:	f000 fee4 	bl	801be28 <__malloc_unlock>
 801b060:	f104 000b 	add.w	r0, r4, #11
 801b064:	1d23      	adds	r3, r4, #4
 801b066:	f020 0007 	bic.w	r0, r0, #7
 801b06a:	1ac2      	subs	r2, r0, r3
 801b06c:	d0cc      	beq.n	801b008 <_malloc_r+0x20>
 801b06e:	1a1b      	subs	r3, r3, r0
 801b070:	50a3      	str	r3, [r4, r2]
 801b072:	e7c9      	b.n	801b008 <_malloc_r+0x20>
 801b074:	4622      	mov	r2, r4
 801b076:	6864      	ldr	r4, [r4, #4]
 801b078:	e7cc      	b.n	801b014 <_malloc_r+0x2c>
 801b07a:	1cc4      	adds	r4, r0, #3
 801b07c:	f024 0403 	bic.w	r4, r4, #3
 801b080:	42a0      	cmp	r0, r4
 801b082:	d0e3      	beq.n	801b04c <_malloc_r+0x64>
 801b084:	1a21      	subs	r1, r4, r0
 801b086:	4630      	mov	r0, r6
 801b088:	f000 fc52 	bl	801b930 <_sbrk_r>
 801b08c:	3001      	adds	r0, #1
 801b08e:	d1dd      	bne.n	801b04c <_malloc_r+0x64>
 801b090:	e7cf      	b.n	801b032 <_malloc_r+0x4a>
 801b092:	bf00      	nop
 801b094:	20008614 	.word	0x20008614
 801b098:	20008618 	.word	0x20008618

0801b09c <__ssputs_r>:
 801b09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0a0:	688e      	ldr	r6, [r1, #8]
 801b0a2:	429e      	cmp	r6, r3
 801b0a4:	4682      	mov	sl, r0
 801b0a6:	460c      	mov	r4, r1
 801b0a8:	4690      	mov	r8, r2
 801b0aa:	461f      	mov	r7, r3
 801b0ac:	d838      	bhi.n	801b120 <__ssputs_r+0x84>
 801b0ae:	898a      	ldrh	r2, [r1, #12]
 801b0b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b0b4:	d032      	beq.n	801b11c <__ssputs_r+0x80>
 801b0b6:	6825      	ldr	r5, [r4, #0]
 801b0b8:	6909      	ldr	r1, [r1, #16]
 801b0ba:	eba5 0901 	sub.w	r9, r5, r1
 801b0be:	6965      	ldr	r5, [r4, #20]
 801b0c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	444b      	add	r3, r9
 801b0cc:	106d      	asrs	r5, r5, #1
 801b0ce:	429d      	cmp	r5, r3
 801b0d0:	bf38      	it	cc
 801b0d2:	461d      	movcc	r5, r3
 801b0d4:	0553      	lsls	r3, r2, #21
 801b0d6:	d531      	bpl.n	801b13c <__ssputs_r+0xa0>
 801b0d8:	4629      	mov	r1, r5
 801b0da:	f7ff ff85 	bl	801afe8 <_malloc_r>
 801b0de:	4606      	mov	r6, r0
 801b0e0:	b950      	cbnz	r0, 801b0f8 <__ssputs_r+0x5c>
 801b0e2:	230c      	movs	r3, #12
 801b0e4:	f8ca 3000 	str.w	r3, [sl]
 801b0e8:	89a3      	ldrh	r3, [r4, #12]
 801b0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0ee:	81a3      	strh	r3, [r4, #12]
 801b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0f8:	6921      	ldr	r1, [r4, #16]
 801b0fa:	464a      	mov	r2, r9
 801b0fc:	f7ff fd22 	bl	801ab44 <memcpy>
 801b100:	89a3      	ldrh	r3, [r4, #12]
 801b102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b10a:	81a3      	strh	r3, [r4, #12]
 801b10c:	6126      	str	r6, [r4, #16]
 801b10e:	6165      	str	r5, [r4, #20]
 801b110:	444e      	add	r6, r9
 801b112:	eba5 0509 	sub.w	r5, r5, r9
 801b116:	6026      	str	r6, [r4, #0]
 801b118:	60a5      	str	r5, [r4, #8]
 801b11a:	463e      	mov	r6, r7
 801b11c:	42be      	cmp	r6, r7
 801b11e:	d900      	bls.n	801b122 <__ssputs_r+0x86>
 801b120:	463e      	mov	r6, r7
 801b122:	4632      	mov	r2, r6
 801b124:	6820      	ldr	r0, [r4, #0]
 801b126:	4641      	mov	r1, r8
 801b128:	f7ff fd1a 	bl	801ab60 <memmove>
 801b12c:	68a3      	ldr	r3, [r4, #8]
 801b12e:	6822      	ldr	r2, [r4, #0]
 801b130:	1b9b      	subs	r3, r3, r6
 801b132:	4432      	add	r2, r6
 801b134:	60a3      	str	r3, [r4, #8]
 801b136:	6022      	str	r2, [r4, #0]
 801b138:	2000      	movs	r0, #0
 801b13a:	e7db      	b.n	801b0f4 <__ssputs_r+0x58>
 801b13c:	462a      	mov	r2, r5
 801b13e:	f000 fe79 	bl	801be34 <_realloc_r>
 801b142:	4606      	mov	r6, r0
 801b144:	2800      	cmp	r0, #0
 801b146:	d1e1      	bne.n	801b10c <__ssputs_r+0x70>
 801b148:	6921      	ldr	r1, [r4, #16]
 801b14a:	4650      	mov	r0, sl
 801b14c:	f7ff fefc 	bl	801af48 <_free_r>
 801b150:	e7c7      	b.n	801b0e2 <__ssputs_r+0x46>
	...

0801b154 <_svfiprintf_r>:
 801b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b158:	4698      	mov	r8, r3
 801b15a:	898b      	ldrh	r3, [r1, #12]
 801b15c:	061b      	lsls	r3, r3, #24
 801b15e:	b09d      	sub	sp, #116	; 0x74
 801b160:	4607      	mov	r7, r0
 801b162:	460d      	mov	r5, r1
 801b164:	4614      	mov	r4, r2
 801b166:	d50e      	bpl.n	801b186 <_svfiprintf_r+0x32>
 801b168:	690b      	ldr	r3, [r1, #16]
 801b16a:	b963      	cbnz	r3, 801b186 <_svfiprintf_r+0x32>
 801b16c:	2140      	movs	r1, #64	; 0x40
 801b16e:	f7ff ff3b 	bl	801afe8 <_malloc_r>
 801b172:	6028      	str	r0, [r5, #0]
 801b174:	6128      	str	r0, [r5, #16]
 801b176:	b920      	cbnz	r0, 801b182 <_svfiprintf_r+0x2e>
 801b178:	230c      	movs	r3, #12
 801b17a:	603b      	str	r3, [r7, #0]
 801b17c:	f04f 30ff 	mov.w	r0, #4294967295
 801b180:	e0d1      	b.n	801b326 <_svfiprintf_r+0x1d2>
 801b182:	2340      	movs	r3, #64	; 0x40
 801b184:	616b      	str	r3, [r5, #20]
 801b186:	2300      	movs	r3, #0
 801b188:	9309      	str	r3, [sp, #36]	; 0x24
 801b18a:	2320      	movs	r3, #32
 801b18c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b190:	f8cd 800c 	str.w	r8, [sp, #12]
 801b194:	2330      	movs	r3, #48	; 0x30
 801b196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b340 <_svfiprintf_r+0x1ec>
 801b19a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b19e:	f04f 0901 	mov.w	r9, #1
 801b1a2:	4623      	mov	r3, r4
 801b1a4:	469a      	mov	sl, r3
 801b1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1aa:	b10a      	cbz	r2, 801b1b0 <_svfiprintf_r+0x5c>
 801b1ac:	2a25      	cmp	r2, #37	; 0x25
 801b1ae:	d1f9      	bne.n	801b1a4 <_svfiprintf_r+0x50>
 801b1b0:	ebba 0b04 	subs.w	fp, sl, r4
 801b1b4:	d00b      	beq.n	801b1ce <_svfiprintf_r+0x7a>
 801b1b6:	465b      	mov	r3, fp
 801b1b8:	4622      	mov	r2, r4
 801b1ba:	4629      	mov	r1, r5
 801b1bc:	4638      	mov	r0, r7
 801b1be:	f7ff ff6d 	bl	801b09c <__ssputs_r>
 801b1c2:	3001      	adds	r0, #1
 801b1c4:	f000 80aa 	beq.w	801b31c <_svfiprintf_r+0x1c8>
 801b1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1ca:	445a      	add	r2, fp
 801b1cc:	9209      	str	r2, [sp, #36]	; 0x24
 801b1ce:	f89a 3000 	ldrb.w	r3, [sl]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	f000 80a2 	beq.w	801b31c <_svfiprintf_r+0x1c8>
 801b1d8:	2300      	movs	r3, #0
 801b1da:	f04f 32ff 	mov.w	r2, #4294967295
 801b1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1e2:	f10a 0a01 	add.w	sl, sl, #1
 801b1e6:	9304      	str	r3, [sp, #16]
 801b1e8:	9307      	str	r3, [sp, #28]
 801b1ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b1ee:	931a      	str	r3, [sp, #104]	; 0x68
 801b1f0:	4654      	mov	r4, sl
 801b1f2:	2205      	movs	r2, #5
 801b1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1f8:	4851      	ldr	r0, [pc, #324]	; (801b340 <_svfiprintf_r+0x1ec>)
 801b1fa:	f7e5 f8a1 	bl	8000340 <memchr>
 801b1fe:	9a04      	ldr	r2, [sp, #16]
 801b200:	b9d8      	cbnz	r0, 801b23a <_svfiprintf_r+0xe6>
 801b202:	06d0      	lsls	r0, r2, #27
 801b204:	bf44      	itt	mi
 801b206:	2320      	movmi	r3, #32
 801b208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b20c:	0711      	lsls	r1, r2, #28
 801b20e:	bf44      	itt	mi
 801b210:	232b      	movmi	r3, #43	; 0x2b
 801b212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b216:	f89a 3000 	ldrb.w	r3, [sl]
 801b21a:	2b2a      	cmp	r3, #42	; 0x2a
 801b21c:	d015      	beq.n	801b24a <_svfiprintf_r+0xf6>
 801b21e:	9a07      	ldr	r2, [sp, #28]
 801b220:	4654      	mov	r4, sl
 801b222:	2000      	movs	r0, #0
 801b224:	f04f 0c0a 	mov.w	ip, #10
 801b228:	4621      	mov	r1, r4
 801b22a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b22e:	3b30      	subs	r3, #48	; 0x30
 801b230:	2b09      	cmp	r3, #9
 801b232:	d94e      	bls.n	801b2d2 <_svfiprintf_r+0x17e>
 801b234:	b1b0      	cbz	r0, 801b264 <_svfiprintf_r+0x110>
 801b236:	9207      	str	r2, [sp, #28]
 801b238:	e014      	b.n	801b264 <_svfiprintf_r+0x110>
 801b23a:	eba0 0308 	sub.w	r3, r0, r8
 801b23e:	fa09 f303 	lsl.w	r3, r9, r3
 801b242:	4313      	orrs	r3, r2
 801b244:	9304      	str	r3, [sp, #16]
 801b246:	46a2      	mov	sl, r4
 801b248:	e7d2      	b.n	801b1f0 <_svfiprintf_r+0x9c>
 801b24a:	9b03      	ldr	r3, [sp, #12]
 801b24c:	1d19      	adds	r1, r3, #4
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	9103      	str	r1, [sp, #12]
 801b252:	2b00      	cmp	r3, #0
 801b254:	bfbb      	ittet	lt
 801b256:	425b      	neglt	r3, r3
 801b258:	f042 0202 	orrlt.w	r2, r2, #2
 801b25c:	9307      	strge	r3, [sp, #28]
 801b25e:	9307      	strlt	r3, [sp, #28]
 801b260:	bfb8      	it	lt
 801b262:	9204      	strlt	r2, [sp, #16]
 801b264:	7823      	ldrb	r3, [r4, #0]
 801b266:	2b2e      	cmp	r3, #46	; 0x2e
 801b268:	d10c      	bne.n	801b284 <_svfiprintf_r+0x130>
 801b26a:	7863      	ldrb	r3, [r4, #1]
 801b26c:	2b2a      	cmp	r3, #42	; 0x2a
 801b26e:	d135      	bne.n	801b2dc <_svfiprintf_r+0x188>
 801b270:	9b03      	ldr	r3, [sp, #12]
 801b272:	1d1a      	adds	r2, r3, #4
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	9203      	str	r2, [sp, #12]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	bfb8      	it	lt
 801b27c:	f04f 33ff 	movlt.w	r3, #4294967295
 801b280:	3402      	adds	r4, #2
 801b282:	9305      	str	r3, [sp, #20]
 801b284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b350 <_svfiprintf_r+0x1fc>
 801b288:	7821      	ldrb	r1, [r4, #0]
 801b28a:	2203      	movs	r2, #3
 801b28c:	4650      	mov	r0, sl
 801b28e:	f7e5 f857 	bl	8000340 <memchr>
 801b292:	b140      	cbz	r0, 801b2a6 <_svfiprintf_r+0x152>
 801b294:	2340      	movs	r3, #64	; 0x40
 801b296:	eba0 000a 	sub.w	r0, r0, sl
 801b29a:	fa03 f000 	lsl.w	r0, r3, r0
 801b29e:	9b04      	ldr	r3, [sp, #16]
 801b2a0:	4303      	orrs	r3, r0
 801b2a2:	3401      	adds	r4, #1
 801b2a4:	9304      	str	r3, [sp, #16]
 801b2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2aa:	4826      	ldr	r0, [pc, #152]	; (801b344 <_svfiprintf_r+0x1f0>)
 801b2ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b2b0:	2206      	movs	r2, #6
 801b2b2:	f7e5 f845 	bl	8000340 <memchr>
 801b2b6:	2800      	cmp	r0, #0
 801b2b8:	d038      	beq.n	801b32c <_svfiprintf_r+0x1d8>
 801b2ba:	4b23      	ldr	r3, [pc, #140]	; (801b348 <_svfiprintf_r+0x1f4>)
 801b2bc:	bb1b      	cbnz	r3, 801b306 <_svfiprintf_r+0x1b2>
 801b2be:	9b03      	ldr	r3, [sp, #12]
 801b2c0:	3307      	adds	r3, #7
 801b2c2:	f023 0307 	bic.w	r3, r3, #7
 801b2c6:	3308      	adds	r3, #8
 801b2c8:	9303      	str	r3, [sp, #12]
 801b2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2cc:	4433      	add	r3, r6
 801b2ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b2d0:	e767      	b.n	801b1a2 <_svfiprintf_r+0x4e>
 801b2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2d6:	460c      	mov	r4, r1
 801b2d8:	2001      	movs	r0, #1
 801b2da:	e7a5      	b.n	801b228 <_svfiprintf_r+0xd4>
 801b2dc:	2300      	movs	r3, #0
 801b2de:	3401      	adds	r4, #1
 801b2e0:	9305      	str	r3, [sp, #20]
 801b2e2:	4619      	mov	r1, r3
 801b2e4:	f04f 0c0a 	mov.w	ip, #10
 801b2e8:	4620      	mov	r0, r4
 801b2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2ee:	3a30      	subs	r2, #48	; 0x30
 801b2f0:	2a09      	cmp	r2, #9
 801b2f2:	d903      	bls.n	801b2fc <_svfiprintf_r+0x1a8>
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d0c5      	beq.n	801b284 <_svfiprintf_r+0x130>
 801b2f8:	9105      	str	r1, [sp, #20]
 801b2fa:	e7c3      	b.n	801b284 <_svfiprintf_r+0x130>
 801b2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801b300:	4604      	mov	r4, r0
 801b302:	2301      	movs	r3, #1
 801b304:	e7f0      	b.n	801b2e8 <_svfiprintf_r+0x194>
 801b306:	ab03      	add	r3, sp, #12
 801b308:	9300      	str	r3, [sp, #0]
 801b30a:	462a      	mov	r2, r5
 801b30c:	4b0f      	ldr	r3, [pc, #60]	; (801b34c <_svfiprintf_r+0x1f8>)
 801b30e:	a904      	add	r1, sp, #16
 801b310:	4638      	mov	r0, r7
 801b312:	f3af 8000 	nop.w
 801b316:	1c42      	adds	r2, r0, #1
 801b318:	4606      	mov	r6, r0
 801b31a:	d1d6      	bne.n	801b2ca <_svfiprintf_r+0x176>
 801b31c:	89ab      	ldrh	r3, [r5, #12]
 801b31e:	065b      	lsls	r3, r3, #25
 801b320:	f53f af2c 	bmi.w	801b17c <_svfiprintf_r+0x28>
 801b324:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b326:	b01d      	add	sp, #116	; 0x74
 801b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b32c:	ab03      	add	r3, sp, #12
 801b32e:	9300      	str	r3, [sp, #0]
 801b330:	462a      	mov	r2, r5
 801b332:	4b06      	ldr	r3, [pc, #24]	; (801b34c <_svfiprintf_r+0x1f8>)
 801b334:	a904      	add	r1, sp, #16
 801b336:	4638      	mov	r0, r7
 801b338:	f000 f9d4 	bl	801b6e4 <_printf_i>
 801b33c:	e7eb      	b.n	801b316 <_svfiprintf_r+0x1c2>
 801b33e:	bf00      	nop
 801b340:	08031238 	.word	0x08031238
 801b344:	08031242 	.word	0x08031242
 801b348:	00000000 	.word	0x00000000
 801b34c:	0801b09d 	.word	0x0801b09d
 801b350:	0803123e 	.word	0x0803123e

0801b354 <__sfputc_r>:
 801b354:	6893      	ldr	r3, [r2, #8]
 801b356:	3b01      	subs	r3, #1
 801b358:	2b00      	cmp	r3, #0
 801b35a:	b410      	push	{r4}
 801b35c:	6093      	str	r3, [r2, #8]
 801b35e:	da08      	bge.n	801b372 <__sfputc_r+0x1e>
 801b360:	6994      	ldr	r4, [r2, #24]
 801b362:	42a3      	cmp	r3, r4
 801b364:	db01      	blt.n	801b36a <__sfputc_r+0x16>
 801b366:	290a      	cmp	r1, #10
 801b368:	d103      	bne.n	801b372 <__sfputc_r+0x1e>
 801b36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b36e:	f000 bb33 	b.w	801b9d8 <__swbuf_r>
 801b372:	6813      	ldr	r3, [r2, #0]
 801b374:	1c58      	adds	r0, r3, #1
 801b376:	6010      	str	r0, [r2, #0]
 801b378:	7019      	strb	r1, [r3, #0]
 801b37a:	4608      	mov	r0, r1
 801b37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b380:	4770      	bx	lr

0801b382 <__sfputs_r>:
 801b382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b384:	4606      	mov	r6, r0
 801b386:	460f      	mov	r7, r1
 801b388:	4614      	mov	r4, r2
 801b38a:	18d5      	adds	r5, r2, r3
 801b38c:	42ac      	cmp	r4, r5
 801b38e:	d101      	bne.n	801b394 <__sfputs_r+0x12>
 801b390:	2000      	movs	r0, #0
 801b392:	e007      	b.n	801b3a4 <__sfputs_r+0x22>
 801b394:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b398:	463a      	mov	r2, r7
 801b39a:	4630      	mov	r0, r6
 801b39c:	f7ff ffda 	bl	801b354 <__sfputc_r>
 801b3a0:	1c43      	adds	r3, r0, #1
 801b3a2:	d1f3      	bne.n	801b38c <__sfputs_r+0xa>
 801b3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b3a8 <_vfiprintf_r>:
 801b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ac:	460d      	mov	r5, r1
 801b3ae:	b09d      	sub	sp, #116	; 0x74
 801b3b0:	4614      	mov	r4, r2
 801b3b2:	4698      	mov	r8, r3
 801b3b4:	4606      	mov	r6, r0
 801b3b6:	b118      	cbz	r0, 801b3c0 <_vfiprintf_r+0x18>
 801b3b8:	6983      	ldr	r3, [r0, #24]
 801b3ba:	b90b      	cbnz	r3, 801b3c0 <_vfiprintf_r+0x18>
 801b3bc:	f7ff fd0a 	bl	801add4 <__sinit>
 801b3c0:	4b89      	ldr	r3, [pc, #548]	; (801b5e8 <_vfiprintf_r+0x240>)
 801b3c2:	429d      	cmp	r5, r3
 801b3c4:	d11b      	bne.n	801b3fe <_vfiprintf_r+0x56>
 801b3c6:	6875      	ldr	r5, [r6, #4]
 801b3c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b3ca:	07d9      	lsls	r1, r3, #31
 801b3cc:	d405      	bmi.n	801b3da <_vfiprintf_r+0x32>
 801b3ce:	89ab      	ldrh	r3, [r5, #12]
 801b3d0:	059a      	lsls	r2, r3, #22
 801b3d2:	d402      	bmi.n	801b3da <_vfiprintf_r+0x32>
 801b3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3d6:	f7ff fdad 	bl	801af34 <__retarget_lock_acquire_recursive>
 801b3da:	89ab      	ldrh	r3, [r5, #12]
 801b3dc:	071b      	lsls	r3, r3, #28
 801b3de:	d501      	bpl.n	801b3e4 <_vfiprintf_r+0x3c>
 801b3e0:	692b      	ldr	r3, [r5, #16]
 801b3e2:	b9eb      	cbnz	r3, 801b420 <_vfiprintf_r+0x78>
 801b3e4:	4629      	mov	r1, r5
 801b3e6:	4630      	mov	r0, r6
 801b3e8:	f000 fb5a 	bl	801baa0 <__swsetup_r>
 801b3ec:	b1c0      	cbz	r0, 801b420 <_vfiprintf_r+0x78>
 801b3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b3f0:	07dc      	lsls	r4, r3, #31
 801b3f2:	d50e      	bpl.n	801b412 <_vfiprintf_r+0x6a>
 801b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3f8:	b01d      	add	sp, #116	; 0x74
 801b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3fe:	4b7b      	ldr	r3, [pc, #492]	; (801b5ec <_vfiprintf_r+0x244>)
 801b400:	429d      	cmp	r5, r3
 801b402:	d101      	bne.n	801b408 <_vfiprintf_r+0x60>
 801b404:	68b5      	ldr	r5, [r6, #8]
 801b406:	e7df      	b.n	801b3c8 <_vfiprintf_r+0x20>
 801b408:	4b79      	ldr	r3, [pc, #484]	; (801b5f0 <_vfiprintf_r+0x248>)
 801b40a:	429d      	cmp	r5, r3
 801b40c:	bf08      	it	eq
 801b40e:	68f5      	ldreq	r5, [r6, #12]
 801b410:	e7da      	b.n	801b3c8 <_vfiprintf_r+0x20>
 801b412:	89ab      	ldrh	r3, [r5, #12]
 801b414:	0598      	lsls	r0, r3, #22
 801b416:	d4ed      	bmi.n	801b3f4 <_vfiprintf_r+0x4c>
 801b418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b41a:	f7ff fd8c 	bl	801af36 <__retarget_lock_release_recursive>
 801b41e:	e7e9      	b.n	801b3f4 <_vfiprintf_r+0x4c>
 801b420:	2300      	movs	r3, #0
 801b422:	9309      	str	r3, [sp, #36]	; 0x24
 801b424:	2320      	movs	r3, #32
 801b426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b42a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b42e:	2330      	movs	r3, #48	; 0x30
 801b430:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b5f4 <_vfiprintf_r+0x24c>
 801b434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b438:	f04f 0901 	mov.w	r9, #1
 801b43c:	4623      	mov	r3, r4
 801b43e:	469a      	mov	sl, r3
 801b440:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b444:	b10a      	cbz	r2, 801b44a <_vfiprintf_r+0xa2>
 801b446:	2a25      	cmp	r2, #37	; 0x25
 801b448:	d1f9      	bne.n	801b43e <_vfiprintf_r+0x96>
 801b44a:	ebba 0b04 	subs.w	fp, sl, r4
 801b44e:	d00b      	beq.n	801b468 <_vfiprintf_r+0xc0>
 801b450:	465b      	mov	r3, fp
 801b452:	4622      	mov	r2, r4
 801b454:	4629      	mov	r1, r5
 801b456:	4630      	mov	r0, r6
 801b458:	f7ff ff93 	bl	801b382 <__sfputs_r>
 801b45c:	3001      	adds	r0, #1
 801b45e:	f000 80aa 	beq.w	801b5b6 <_vfiprintf_r+0x20e>
 801b462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b464:	445a      	add	r2, fp
 801b466:	9209      	str	r2, [sp, #36]	; 0x24
 801b468:	f89a 3000 	ldrb.w	r3, [sl]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	f000 80a2 	beq.w	801b5b6 <_vfiprintf_r+0x20e>
 801b472:	2300      	movs	r3, #0
 801b474:	f04f 32ff 	mov.w	r2, #4294967295
 801b478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b47c:	f10a 0a01 	add.w	sl, sl, #1
 801b480:	9304      	str	r3, [sp, #16]
 801b482:	9307      	str	r3, [sp, #28]
 801b484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b488:	931a      	str	r3, [sp, #104]	; 0x68
 801b48a:	4654      	mov	r4, sl
 801b48c:	2205      	movs	r2, #5
 801b48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b492:	4858      	ldr	r0, [pc, #352]	; (801b5f4 <_vfiprintf_r+0x24c>)
 801b494:	f7e4 ff54 	bl	8000340 <memchr>
 801b498:	9a04      	ldr	r2, [sp, #16]
 801b49a:	b9d8      	cbnz	r0, 801b4d4 <_vfiprintf_r+0x12c>
 801b49c:	06d1      	lsls	r1, r2, #27
 801b49e:	bf44      	itt	mi
 801b4a0:	2320      	movmi	r3, #32
 801b4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b4a6:	0713      	lsls	r3, r2, #28
 801b4a8:	bf44      	itt	mi
 801b4aa:	232b      	movmi	r3, #43	; 0x2b
 801b4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b4b0:	f89a 3000 	ldrb.w	r3, [sl]
 801b4b4:	2b2a      	cmp	r3, #42	; 0x2a
 801b4b6:	d015      	beq.n	801b4e4 <_vfiprintf_r+0x13c>
 801b4b8:	9a07      	ldr	r2, [sp, #28]
 801b4ba:	4654      	mov	r4, sl
 801b4bc:	2000      	movs	r0, #0
 801b4be:	f04f 0c0a 	mov.w	ip, #10
 801b4c2:	4621      	mov	r1, r4
 801b4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b4c8:	3b30      	subs	r3, #48	; 0x30
 801b4ca:	2b09      	cmp	r3, #9
 801b4cc:	d94e      	bls.n	801b56c <_vfiprintf_r+0x1c4>
 801b4ce:	b1b0      	cbz	r0, 801b4fe <_vfiprintf_r+0x156>
 801b4d0:	9207      	str	r2, [sp, #28]
 801b4d2:	e014      	b.n	801b4fe <_vfiprintf_r+0x156>
 801b4d4:	eba0 0308 	sub.w	r3, r0, r8
 801b4d8:	fa09 f303 	lsl.w	r3, r9, r3
 801b4dc:	4313      	orrs	r3, r2
 801b4de:	9304      	str	r3, [sp, #16]
 801b4e0:	46a2      	mov	sl, r4
 801b4e2:	e7d2      	b.n	801b48a <_vfiprintf_r+0xe2>
 801b4e4:	9b03      	ldr	r3, [sp, #12]
 801b4e6:	1d19      	adds	r1, r3, #4
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	9103      	str	r1, [sp, #12]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	bfbb      	ittet	lt
 801b4f0:	425b      	neglt	r3, r3
 801b4f2:	f042 0202 	orrlt.w	r2, r2, #2
 801b4f6:	9307      	strge	r3, [sp, #28]
 801b4f8:	9307      	strlt	r3, [sp, #28]
 801b4fa:	bfb8      	it	lt
 801b4fc:	9204      	strlt	r2, [sp, #16]
 801b4fe:	7823      	ldrb	r3, [r4, #0]
 801b500:	2b2e      	cmp	r3, #46	; 0x2e
 801b502:	d10c      	bne.n	801b51e <_vfiprintf_r+0x176>
 801b504:	7863      	ldrb	r3, [r4, #1]
 801b506:	2b2a      	cmp	r3, #42	; 0x2a
 801b508:	d135      	bne.n	801b576 <_vfiprintf_r+0x1ce>
 801b50a:	9b03      	ldr	r3, [sp, #12]
 801b50c:	1d1a      	adds	r2, r3, #4
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	9203      	str	r2, [sp, #12]
 801b512:	2b00      	cmp	r3, #0
 801b514:	bfb8      	it	lt
 801b516:	f04f 33ff 	movlt.w	r3, #4294967295
 801b51a:	3402      	adds	r4, #2
 801b51c:	9305      	str	r3, [sp, #20]
 801b51e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b604 <_vfiprintf_r+0x25c>
 801b522:	7821      	ldrb	r1, [r4, #0]
 801b524:	2203      	movs	r2, #3
 801b526:	4650      	mov	r0, sl
 801b528:	f7e4 ff0a 	bl	8000340 <memchr>
 801b52c:	b140      	cbz	r0, 801b540 <_vfiprintf_r+0x198>
 801b52e:	2340      	movs	r3, #64	; 0x40
 801b530:	eba0 000a 	sub.w	r0, r0, sl
 801b534:	fa03 f000 	lsl.w	r0, r3, r0
 801b538:	9b04      	ldr	r3, [sp, #16]
 801b53a:	4303      	orrs	r3, r0
 801b53c:	3401      	adds	r4, #1
 801b53e:	9304      	str	r3, [sp, #16]
 801b540:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b544:	482c      	ldr	r0, [pc, #176]	; (801b5f8 <_vfiprintf_r+0x250>)
 801b546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b54a:	2206      	movs	r2, #6
 801b54c:	f7e4 fef8 	bl	8000340 <memchr>
 801b550:	2800      	cmp	r0, #0
 801b552:	d03f      	beq.n	801b5d4 <_vfiprintf_r+0x22c>
 801b554:	4b29      	ldr	r3, [pc, #164]	; (801b5fc <_vfiprintf_r+0x254>)
 801b556:	bb1b      	cbnz	r3, 801b5a0 <_vfiprintf_r+0x1f8>
 801b558:	9b03      	ldr	r3, [sp, #12]
 801b55a:	3307      	adds	r3, #7
 801b55c:	f023 0307 	bic.w	r3, r3, #7
 801b560:	3308      	adds	r3, #8
 801b562:	9303      	str	r3, [sp, #12]
 801b564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b566:	443b      	add	r3, r7
 801b568:	9309      	str	r3, [sp, #36]	; 0x24
 801b56a:	e767      	b.n	801b43c <_vfiprintf_r+0x94>
 801b56c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b570:	460c      	mov	r4, r1
 801b572:	2001      	movs	r0, #1
 801b574:	e7a5      	b.n	801b4c2 <_vfiprintf_r+0x11a>
 801b576:	2300      	movs	r3, #0
 801b578:	3401      	adds	r4, #1
 801b57a:	9305      	str	r3, [sp, #20]
 801b57c:	4619      	mov	r1, r3
 801b57e:	f04f 0c0a 	mov.w	ip, #10
 801b582:	4620      	mov	r0, r4
 801b584:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b588:	3a30      	subs	r2, #48	; 0x30
 801b58a:	2a09      	cmp	r2, #9
 801b58c:	d903      	bls.n	801b596 <_vfiprintf_r+0x1ee>
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d0c5      	beq.n	801b51e <_vfiprintf_r+0x176>
 801b592:	9105      	str	r1, [sp, #20]
 801b594:	e7c3      	b.n	801b51e <_vfiprintf_r+0x176>
 801b596:	fb0c 2101 	mla	r1, ip, r1, r2
 801b59a:	4604      	mov	r4, r0
 801b59c:	2301      	movs	r3, #1
 801b59e:	e7f0      	b.n	801b582 <_vfiprintf_r+0x1da>
 801b5a0:	ab03      	add	r3, sp, #12
 801b5a2:	9300      	str	r3, [sp, #0]
 801b5a4:	462a      	mov	r2, r5
 801b5a6:	4b16      	ldr	r3, [pc, #88]	; (801b600 <_vfiprintf_r+0x258>)
 801b5a8:	a904      	add	r1, sp, #16
 801b5aa:	4630      	mov	r0, r6
 801b5ac:	f3af 8000 	nop.w
 801b5b0:	4607      	mov	r7, r0
 801b5b2:	1c78      	adds	r0, r7, #1
 801b5b4:	d1d6      	bne.n	801b564 <_vfiprintf_r+0x1bc>
 801b5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b5b8:	07d9      	lsls	r1, r3, #31
 801b5ba:	d405      	bmi.n	801b5c8 <_vfiprintf_r+0x220>
 801b5bc:	89ab      	ldrh	r3, [r5, #12]
 801b5be:	059a      	lsls	r2, r3, #22
 801b5c0:	d402      	bmi.n	801b5c8 <_vfiprintf_r+0x220>
 801b5c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b5c4:	f7ff fcb7 	bl	801af36 <__retarget_lock_release_recursive>
 801b5c8:	89ab      	ldrh	r3, [r5, #12]
 801b5ca:	065b      	lsls	r3, r3, #25
 801b5cc:	f53f af12 	bmi.w	801b3f4 <_vfiprintf_r+0x4c>
 801b5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b5d2:	e711      	b.n	801b3f8 <_vfiprintf_r+0x50>
 801b5d4:	ab03      	add	r3, sp, #12
 801b5d6:	9300      	str	r3, [sp, #0]
 801b5d8:	462a      	mov	r2, r5
 801b5da:	4b09      	ldr	r3, [pc, #36]	; (801b600 <_vfiprintf_r+0x258>)
 801b5dc:	a904      	add	r1, sp, #16
 801b5de:	4630      	mov	r0, r6
 801b5e0:	f000 f880 	bl	801b6e4 <_printf_i>
 801b5e4:	e7e4      	b.n	801b5b0 <_vfiprintf_r+0x208>
 801b5e6:	bf00      	nop
 801b5e8:	080311f8 	.word	0x080311f8
 801b5ec:	08031218 	.word	0x08031218
 801b5f0:	080311d8 	.word	0x080311d8
 801b5f4:	08031238 	.word	0x08031238
 801b5f8:	08031242 	.word	0x08031242
 801b5fc:	00000000 	.word	0x00000000
 801b600:	0801b383 	.word	0x0801b383
 801b604:	0803123e 	.word	0x0803123e

0801b608 <_printf_common>:
 801b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b60c:	4616      	mov	r6, r2
 801b60e:	4699      	mov	r9, r3
 801b610:	688a      	ldr	r2, [r1, #8]
 801b612:	690b      	ldr	r3, [r1, #16]
 801b614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b618:	4293      	cmp	r3, r2
 801b61a:	bfb8      	it	lt
 801b61c:	4613      	movlt	r3, r2
 801b61e:	6033      	str	r3, [r6, #0]
 801b620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b624:	4607      	mov	r7, r0
 801b626:	460c      	mov	r4, r1
 801b628:	b10a      	cbz	r2, 801b62e <_printf_common+0x26>
 801b62a:	3301      	adds	r3, #1
 801b62c:	6033      	str	r3, [r6, #0]
 801b62e:	6823      	ldr	r3, [r4, #0]
 801b630:	0699      	lsls	r1, r3, #26
 801b632:	bf42      	ittt	mi
 801b634:	6833      	ldrmi	r3, [r6, #0]
 801b636:	3302      	addmi	r3, #2
 801b638:	6033      	strmi	r3, [r6, #0]
 801b63a:	6825      	ldr	r5, [r4, #0]
 801b63c:	f015 0506 	ands.w	r5, r5, #6
 801b640:	d106      	bne.n	801b650 <_printf_common+0x48>
 801b642:	f104 0a19 	add.w	sl, r4, #25
 801b646:	68e3      	ldr	r3, [r4, #12]
 801b648:	6832      	ldr	r2, [r6, #0]
 801b64a:	1a9b      	subs	r3, r3, r2
 801b64c:	42ab      	cmp	r3, r5
 801b64e:	dc26      	bgt.n	801b69e <_printf_common+0x96>
 801b650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b654:	1e13      	subs	r3, r2, #0
 801b656:	6822      	ldr	r2, [r4, #0]
 801b658:	bf18      	it	ne
 801b65a:	2301      	movne	r3, #1
 801b65c:	0692      	lsls	r2, r2, #26
 801b65e:	d42b      	bmi.n	801b6b8 <_printf_common+0xb0>
 801b660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b664:	4649      	mov	r1, r9
 801b666:	4638      	mov	r0, r7
 801b668:	47c0      	blx	r8
 801b66a:	3001      	adds	r0, #1
 801b66c:	d01e      	beq.n	801b6ac <_printf_common+0xa4>
 801b66e:	6823      	ldr	r3, [r4, #0]
 801b670:	68e5      	ldr	r5, [r4, #12]
 801b672:	6832      	ldr	r2, [r6, #0]
 801b674:	f003 0306 	and.w	r3, r3, #6
 801b678:	2b04      	cmp	r3, #4
 801b67a:	bf08      	it	eq
 801b67c:	1aad      	subeq	r5, r5, r2
 801b67e:	68a3      	ldr	r3, [r4, #8]
 801b680:	6922      	ldr	r2, [r4, #16]
 801b682:	bf0c      	ite	eq
 801b684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b688:	2500      	movne	r5, #0
 801b68a:	4293      	cmp	r3, r2
 801b68c:	bfc4      	itt	gt
 801b68e:	1a9b      	subgt	r3, r3, r2
 801b690:	18ed      	addgt	r5, r5, r3
 801b692:	2600      	movs	r6, #0
 801b694:	341a      	adds	r4, #26
 801b696:	42b5      	cmp	r5, r6
 801b698:	d11a      	bne.n	801b6d0 <_printf_common+0xc8>
 801b69a:	2000      	movs	r0, #0
 801b69c:	e008      	b.n	801b6b0 <_printf_common+0xa8>
 801b69e:	2301      	movs	r3, #1
 801b6a0:	4652      	mov	r2, sl
 801b6a2:	4649      	mov	r1, r9
 801b6a4:	4638      	mov	r0, r7
 801b6a6:	47c0      	blx	r8
 801b6a8:	3001      	adds	r0, #1
 801b6aa:	d103      	bne.n	801b6b4 <_printf_common+0xac>
 801b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6b4:	3501      	adds	r5, #1
 801b6b6:	e7c6      	b.n	801b646 <_printf_common+0x3e>
 801b6b8:	18e1      	adds	r1, r4, r3
 801b6ba:	1c5a      	adds	r2, r3, #1
 801b6bc:	2030      	movs	r0, #48	; 0x30
 801b6be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b6c2:	4422      	add	r2, r4
 801b6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b6c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b6cc:	3302      	adds	r3, #2
 801b6ce:	e7c7      	b.n	801b660 <_printf_common+0x58>
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	4622      	mov	r2, r4
 801b6d4:	4649      	mov	r1, r9
 801b6d6:	4638      	mov	r0, r7
 801b6d8:	47c0      	blx	r8
 801b6da:	3001      	adds	r0, #1
 801b6dc:	d0e6      	beq.n	801b6ac <_printf_common+0xa4>
 801b6de:	3601      	adds	r6, #1
 801b6e0:	e7d9      	b.n	801b696 <_printf_common+0x8e>
	...

0801b6e4 <_printf_i>:
 801b6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6e8:	460c      	mov	r4, r1
 801b6ea:	4691      	mov	r9, r2
 801b6ec:	7e27      	ldrb	r7, [r4, #24]
 801b6ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b6f0:	2f78      	cmp	r7, #120	; 0x78
 801b6f2:	4680      	mov	r8, r0
 801b6f4:	469a      	mov	sl, r3
 801b6f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6fa:	d807      	bhi.n	801b70c <_printf_i+0x28>
 801b6fc:	2f62      	cmp	r7, #98	; 0x62
 801b6fe:	d80a      	bhi.n	801b716 <_printf_i+0x32>
 801b700:	2f00      	cmp	r7, #0
 801b702:	f000 80d8 	beq.w	801b8b6 <_printf_i+0x1d2>
 801b706:	2f58      	cmp	r7, #88	; 0x58
 801b708:	f000 80a3 	beq.w	801b852 <_printf_i+0x16e>
 801b70c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b714:	e03a      	b.n	801b78c <_printf_i+0xa8>
 801b716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b71a:	2b15      	cmp	r3, #21
 801b71c:	d8f6      	bhi.n	801b70c <_printf_i+0x28>
 801b71e:	a001      	add	r0, pc, #4	; (adr r0, 801b724 <_printf_i+0x40>)
 801b720:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b724:	0801b77d 	.word	0x0801b77d
 801b728:	0801b791 	.word	0x0801b791
 801b72c:	0801b70d 	.word	0x0801b70d
 801b730:	0801b70d 	.word	0x0801b70d
 801b734:	0801b70d 	.word	0x0801b70d
 801b738:	0801b70d 	.word	0x0801b70d
 801b73c:	0801b791 	.word	0x0801b791
 801b740:	0801b70d 	.word	0x0801b70d
 801b744:	0801b70d 	.word	0x0801b70d
 801b748:	0801b70d 	.word	0x0801b70d
 801b74c:	0801b70d 	.word	0x0801b70d
 801b750:	0801b89d 	.word	0x0801b89d
 801b754:	0801b7c1 	.word	0x0801b7c1
 801b758:	0801b87f 	.word	0x0801b87f
 801b75c:	0801b70d 	.word	0x0801b70d
 801b760:	0801b70d 	.word	0x0801b70d
 801b764:	0801b8bf 	.word	0x0801b8bf
 801b768:	0801b70d 	.word	0x0801b70d
 801b76c:	0801b7c1 	.word	0x0801b7c1
 801b770:	0801b70d 	.word	0x0801b70d
 801b774:	0801b70d 	.word	0x0801b70d
 801b778:	0801b887 	.word	0x0801b887
 801b77c:	680b      	ldr	r3, [r1, #0]
 801b77e:	1d1a      	adds	r2, r3, #4
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	600a      	str	r2, [r1, #0]
 801b784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b78c:	2301      	movs	r3, #1
 801b78e:	e0a3      	b.n	801b8d8 <_printf_i+0x1f4>
 801b790:	6825      	ldr	r5, [r4, #0]
 801b792:	6808      	ldr	r0, [r1, #0]
 801b794:	062e      	lsls	r6, r5, #24
 801b796:	f100 0304 	add.w	r3, r0, #4
 801b79a:	d50a      	bpl.n	801b7b2 <_printf_i+0xce>
 801b79c:	6805      	ldr	r5, [r0, #0]
 801b79e:	600b      	str	r3, [r1, #0]
 801b7a0:	2d00      	cmp	r5, #0
 801b7a2:	da03      	bge.n	801b7ac <_printf_i+0xc8>
 801b7a4:	232d      	movs	r3, #45	; 0x2d
 801b7a6:	426d      	negs	r5, r5
 801b7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7ac:	485e      	ldr	r0, [pc, #376]	; (801b928 <_printf_i+0x244>)
 801b7ae:	230a      	movs	r3, #10
 801b7b0:	e019      	b.n	801b7e6 <_printf_i+0x102>
 801b7b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b7b6:	6805      	ldr	r5, [r0, #0]
 801b7b8:	600b      	str	r3, [r1, #0]
 801b7ba:	bf18      	it	ne
 801b7bc:	b22d      	sxthne	r5, r5
 801b7be:	e7ef      	b.n	801b7a0 <_printf_i+0xbc>
 801b7c0:	680b      	ldr	r3, [r1, #0]
 801b7c2:	6825      	ldr	r5, [r4, #0]
 801b7c4:	1d18      	adds	r0, r3, #4
 801b7c6:	6008      	str	r0, [r1, #0]
 801b7c8:	0628      	lsls	r0, r5, #24
 801b7ca:	d501      	bpl.n	801b7d0 <_printf_i+0xec>
 801b7cc:	681d      	ldr	r5, [r3, #0]
 801b7ce:	e002      	b.n	801b7d6 <_printf_i+0xf2>
 801b7d0:	0669      	lsls	r1, r5, #25
 801b7d2:	d5fb      	bpl.n	801b7cc <_printf_i+0xe8>
 801b7d4:	881d      	ldrh	r5, [r3, #0]
 801b7d6:	4854      	ldr	r0, [pc, #336]	; (801b928 <_printf_i+0x244>)
 801b7d8:	2f6f      	cmp	r7, #111	; 0x6f
 801b7da:	bf0c      	ite	eq
 801b7dc:	2308      	moveq	r3, #8
 801b7de:	230a      	movne	r3, #10
 801b7e0:	2100      	movs	r1, #0
 801b7e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b7e6:	6866      	ldr	r6, [r4, #4]
 801b7e8:	60a6      	str	r6, [r4, #8]
 801b7ea:	2e00      	cmp	r6, #0
 801b7ec:	bfa2      	ittt	ge
 801b7ee:	6821      	ldrge	r1, [r4, #0]
 801b7f0:	f021 0104 	bicge.w	r1, r1, #4
 801b7f4:	6021      	strge	r1, [r4, #0]
 801b7f6:	b90d      	cbnz	r5, 801b7fc <_printf_i+0x118>
 801b7f8:	2e00      	cmp	r6, #0
 801b7fa:	d04d      	beq.n	801b898 <_printf_i+0x1b4>
 801b7fc:	4616      	mov	r6, r2
 801b7fe:	fbb5 f1f3 	udiv	r1, r5, r3
 801b802:	fb03 5711 	mls	r7, r3, r1, r5
 801b806:	5dc7      	ldrb	r7, [r0, r7]
 801b808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b80c:	462f      	mov	r7, r5
 801b80e:	42bb      	cmp	r3, r7
 801b810:	460d      	mov	r5, r1
 801b812:	d9f4      	bls.n	801b7fe <_printf_i+0x11a>
 801b814:	2b08      	cmp	r3, #8
 801b816:	d10b      	bne.n	801b830 <_printf_i+0x14c>
 801b818:	6823      	ldr	r3, [r4, #0]
 801b81a:	07df      	lsls	r7, r3, #31
 801b81c:	d508      	bpl.n	801b830 <_printf_i+0x14c>
 801b81e:	6923      	ldr	r3, [r4, #16]
 801b820:	6861      	ldr	r1, [r4, #4]
 801b822:	4299      	cmp	r1, r3
 801b824:	bfde      	ittt	le
 801b826:	2330      	movle	r3, #48	; 0x30
 801b828:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b82c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b830:	1b92      	subs	r2, r2, r6
 801b832:	6122      	str	r2, [r4, #16]
 801b834:	f8cd a000 	str.w	sl, [sp]
 801b838:	464b      	mov	r3, r9
 801b83a:	aa03      	add	r2, sp, #12
 801b83c:	4621      	mov	r1, r4
 801b83e:	4640      	mov	r0, r8
 801b840:	f7ff fee2 	bl	801b608 <_printf_common>
 801b844:	3001      	adds	r0, #1
 801b846:	d14c      	bne.n	801b8e2 <_printf_i+0x1fe>
 801b848:	f04f 30ff 	mov.w	r0, #4294967295
 801b84c:	b004      	add	sp, #16
 801b84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b852:	4835      	ldr	r0, [pc, #212]	; (801b928 <_printf_i+0x244>)
 801b854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b858:	6823      	ldr	r3, [r4, #0]
 801b85a:	680e      	ldr	r6, [r1, #0]
 801b85c:	061f      	lsls	r7, r3, #24
 801b85e:	f856 5b04 	ldr.w	r5, [r6], #4
 801b862:	600e      	str	r6, [r1, #0]
 801b864:	d514      	bpl.n	801b890 <_printf_i+0x1ac>
 801b866:	07d9      	lsls	r1, r3, #31
 801b868:	bf44      	itt	mi
 801b86a:	f043 0320 	orrmi.w	r3, r3, #32
 801b86e:	6023      	strmi	r3, [r4, #0]
 801b870:	b91d      	cbnz	r5, 801b87a <_printf_i+0x196>
 801b872:	6823      	ldr	r3, [r4, #0]
 801b874:	f023 0320 	bic.w	r3, r3, #32
 801b878:	6023      	str	r3, [r4, #0]
 801b87a:	2310      	movs	r3, #16
 801b87c:	e7b0      	b.n	801b7e0 <_printf_i+0xfc>
 801b87e:	6823      	ldr	r3, [r4, #0]
 801b880:	f043 0320 	orr.w	r3, r3, #32
 801b884:	6023      	str	r3, [r4, #0]
 801b886:	2378      	movs	r3, #120	; 0x78
 801b888:	4828      	ldr	r0, [pc, #160]	; (801b92c <_printf_i+0x248>)
 801b88a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b88e:	e7e3      	b.n	801b858 <_printf_i+0x174>
 801b890:	065e      	lsls	r6, r3, #25
 801b892:	bf48      	it	mi
 801b894:	b2ad      	uxthmi	r5, r5
 801b896:	e7e6      	b.n	801b866 <_printf_i+0x182>
 801b898:	4616      	mov	r6, r2
 801b89a:	e7bb      	b.n	801b814 <_printf_i+0x130>
 801b89c:	680b      	ldr	r3, [r1, #0]
 801b89e:	6826      	ldr	r6, [r4, #0]
 801b8a0:	6960      	ldr	r0, [r4, #20]
 801b8a2:	1d1d      	adds	r5, r3, #4
 801b8a4:	600d      	str	r5, [r1, #0]
 801b8a6:	0635      	lsls	r5, r6, #24
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	d501      	bpl.n	801b8b0 <_printf_i+0x1cc>
 801b8ac:	6018      	str	r0, [r3, #0]
 801b8ae:	e002      	b.n	801b8b6 <_printf_i+0x1d2>
 801b8b0:	0671      	lsls	r1, r6, #25
 801b8b2:	d5fb      	bpl.n	801b8ac <_printf_i+0x1c8>
 801b8b4:	8018      	strh	r0, [r3, #0]
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	6123      	str	r3, [r4, #16]
 801b8ba:	4616      	mov	r6, r2
 801b8bc:	e7ba      	b.n	801b834 <_printf_i+0x150>
 801b8be:	680b      	ldr	r3, [r1, #0]
 801b8c0:	1d1a      	adds	r2, r3, #4
 801b8c2:	600a      	str	r2, [r1, #0]
 801b8c4:	681e      	ldr	r6, [r3, #0]
 801b8c6:	6862      	ldr	r2, [r4, #4]
 801b8c8:	2100      	movs	r1, #0
 801b8ca:	4630      	mov	r0, r6
 801b8cc:	f7e4 fd38 	bl	8000340 <memchr>
 801b8d0:	b108      	cbz	r0, 801b8d6 <_printf_i+0x1f2>
 801b8d2:	1b80      	subs	r0, r0, r6
 801b8d4:	6060      	str	r0, [r4, #4]
 801b8d6:	6863      	ldr	r3, [r4, #4]
 801b8d8:	6123      	str	r3, [r4, #16]
 801b8da:	2300      	movs	r3, #0
 801b8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8e0:	e7a8      	b.n	801b834 <_printf_i+0x150>
 801b8e2:	6923      	ldr	r3, [r4, #16]
 801b8e4:	4632      	mov	r2, r6
 801b8e6:	4649      	mov	r1, r9
 801b8e8:	4640      	mov	r0, r8
 801b8ea:	47d0      	blx	sl
 801b8ec:	3001      	adds	r0, #1
 801b8ee:	d0ab      	beq.n	801b848 <_printf_i+0x164>
 801b8f0:	6823      	ldr	r3, [r4, #0]
 801b8f2:	079b      	lsls	r3, r3, #30
 801b8f4:	d413      	bmi.n	801b91e <_printf_i+0x23a>
 801b8f6:	68e0      	ldr	r0, [r4, #12]
 801b8f8:	9b03      	ldr	r3, [sp, #12]
 801b8fa:	4298      	cmp	r0, r3
 801b8fc:	bfb8      	it	lt
 801b8fe:	4618      	movlt	r0, r3
 801b900:	e7a4      	b.n	801b84c <_printf_i+0x168>
 801b902:	2301      	movs	r3, #1
 801b904:	4632      	mov	r2, r6
 801b906:	4649      	mov	r1, r9
 801b908:	4640      	mov	r0, r8
 801b90a:	47d0      	blx	sl
 801b90c:	3001      	adds	r0, #1
 801b90e:	d09b      	beq.n	801b848 <_printf_i+0x164>
 801b910:	3501      	adds	r5, #1
 801b912:	68e3      	ldr	r3, [r4, #12]
 801b914:	9903      	ldr	r1, [sp, #12]
 801b916:	1a5b      	subs	r3, r3, r1
 801b918:	42ab      	cmp	r3, r5
 801b91a:	dcf2      	bgt.n	801b902 <_printf_i+0x21e>
 801b91c:	e7eb      	b.n	801b8f6 <_printf_i+0x212>
 801b91e:	2500      	movs	r5, #0
 801b920:	f104 0619 	add.w	r6, r4, #25
 801b924:	e7f5      	b.n	801b912 <_printf_i+0x22e>
 801b926:	bf00      	nop
 801b928:	08031249 	.word	0x08031249
 801b92c:	0803125a 	.word	0x0803125a

0801b930 <_sbrk_r>:
 801b930:	b538      	push	{r3, r4, r5, lr}
 801b932:	4d06      	ldr	r5, [pc, #24]	; (801b94c <_sbrk_r+0x1c>)
 801b934:	2300      	movs	r3, #0
 801b936:	4604      	mov	r4, r0
 801b938:	4608      	mov	r0, r1
 801b93a:	602b      	str	r3, [r5, #0]
 801b93c:	f7e5 ff5c 	bl	80017f8 <_sbrk>
 801b940:	1c43      	adds	r3, r0, #1
 801b942:	d102      	bne.n	801b94a <_sbrk_r+0x1a>
 801b944:	682b      	ldr	r3, [r5, #0]
 801b946:	b103      	cbz	r3, 801b94a <_sbrk_r+0x1a>
 801b948:	6023      	str	r3, [r4, #0]
 801b94a:	bd38      	pop	{r3, r4, r5, pc}
 801b94c:	2000c680 	.word	0x2000c680

0801b950 <__sread>:
 801b950:	b510      	push	{r4, lr}
 801b952:	460c      	mov	r4, r1
 801b954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b958:	f000 fa92 	bl	801be80 <_read_r>
 801b95c:	2800      	cmp	r0, #0
 801b95e:	bfab      	itete	ge
 801b960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b962:	89a3      	ldrhlt	r3, [r4, #12]
 801b964:	181b      	addge	r3, r3, r0
 801b966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b96a:	bfac      	ite	ge
 801b96c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b96e:	81a3      	strhlt	r3, [r4, #12]
 801b970:	bd10      	pop	{r4, pc}

0801b972 <__swrite>:
 801b972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b976:	461f      	mov	r7, r3
 801b978:	898b      	ldrh	r3, [r1, #12]
 801b97a:	05db      	lsls	r3, r3, #23
 801b97c:	4605      	mov	r5, r0
 801b97e:	460c      	mov	r4, r1
 801b980:	4616      	mov	r6, r2
 801b982:	d505      	bpl.n	801b990 <__swrite+0x1e>
 801b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b988:	2302      	movs	r3, #2
 801b98a:	2200      	movs	r2, #0
 801b98c:	f000 f9d0 	bl	801bd30 <_lseek_r>
 801b990:	89a3      	ldrh	r3, [r4, #12]
 801b992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b99a:	81a3      	strh	r3, [r4, #12]
 801b99c:	4632      	mov	r2, r6
 801b99e:	463b      	mov	r3, r7
 801b9a0:	4628      	mov	r0, r5
 801b9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9a6:	f000 b869 	b.w	801ba7c <_write_r>

0801b9aa <__sseek>:
 801b9aa:	b510      	push	{r4, lr}
 801b9ac:	460c      	mov	r4, r1
 801b9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9b2:	f000 f9bd 	bl	801bd30 <_lseek_r>
 801b9b6:	1c43      	adds	r3, r0, #1
 801b9b8:	89a3      	ldrh	r3, [r4, #12]
 801b9ba:	bf15      	itete	ne
 801b9bc:	6560      	strne	r0, [r4, #84]	; 0x54
 801b9be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b9c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b9c6:	81a3      	strheq	r3, [r4, #12]
 801b9c8:	bf18      	it	ne
 801b9ca:	81a3      	strhne	r3, [r4, #12]
 801b9cc:	bd10      	pop	{r4, pc}

0801b9ce <__sclose>:
 801b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9d2:	f000 b8db 	b.w	801bb8c <_close_r>
	...

0801b9d8 <__swbuf_r>:
 801b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9da:	460e      	mov	r6, r1
 801b9dc:	4614      	mov	r4, r2
 801b9de:	4605      	mov	r5, r0
 801b9e0:	b118      	cbz	r0, 801b9ea <__swbuf_r+0x12>
 801b9e2:	6983      	ldr	r3, [r0, #24]
 801b9e4:	b90b      	cbnz	r3, 801b9ea <__swbuf_r+0x12>
 801b9e6:	f7ff f9f5 	bl	801add4 <__sinit>
 801b9ea:	4b21      	ldr	r3, [pc, #132]	; (801ba70 <__swbuf_r+0x98>)
 801b9ec:	429c      	cmp	r4, r3
 801b9ee:	d12b      	bne.n	801ba48 <__swbuf_r+0x70>
 801b9f0:	686c      	ldr	r4, [r5, #4]
 801b9f2:	69a3      	ldr	r3, [r4, #24]
 801b9f4:	60a3      	str	r3, [r4, #8]
 801b9f6:	89a3      	ldrh	r3, [r4, #12]
 801b9f8:	071a      	lsls	r2, r3, #28
 801b9fa:	d52f      	bpl.n	801ba5c <__swbuf_r+0x84>
 801b9fc:	6923      	ldr	r3, [r4, #16]
 801b9fe:	b36b      	cbz	r3, 801ba5c <__swbuf_r+0x84>
 801ba00:	6923      	ldr	r3, [r4, #16]
 801ba02:	6820      	ldr	r0, [r4, #0]
 801ba04:	1ac0      	subs	r0, r0, r3
 801ba06:	6963      	ldr	r3, [r4, #20]
 801ba08:	b2f6      	uxtb	r6, r6
 801ba0a:	4283      	cmp	r3, r0
 801ba0c:	4637      	mov	r7, r6
 801ba0e:	dc04      	bgt.n	801ba1a <__swbuf_r+0x42>
 801ba10:	4621      	mov	r1, r4
 801ba12:	4628      	mov	r0, r5
 801ba14:	f000 f950 	bl	801bcb8 <_fflush_r>
 801ba18:	bb30      	cbnz	r0, 801ba68 <__swbuf_r+0x90>
 801ba1a:	68a3      	ldr	r3, [r4, #8]
 801ba1c:	3b01      	subs	r3, #1
 801ba1e:	60a3      	str	r3, [r4, #8]
 801ba20:	6823      	ldr	r3, [r4, #0]
 801ba22:	1c5a      	adds	r2, r3, #1
 801ba24:	6022      	str	r2, [r4, #0]
 801ba26:	701e      	strb	r6, [r3, #0]
 801ba28:	6963      	ldr	r3, [r4, #20]
 801ba2a:	3001      	adds	r0, #1
 801ba2c:	4283      	cmp	r3, r0
 801ba2e:	d004      	beq.n	801ba3a <__swbuf_r+0x62>
 801ba30:	89a3      	ldrh	r3, [r4, #12]
 801ba32:	07db      	lsls	r3, r3, #31
 801ba34:	d506      	bpl.n	801ba44 <__swbuf_r+0x6c>
 801ba36:	2e0a      	cmp	r6, #10
 801ba38:	d104      	bne.n	801ba44 <__swbuf_r+0x6c>
 801ba3a:	4621      	mov	r1, r4
 801ba3c:	4628      	mov	r0, r5
 801ba3e:	f000 f93b 	bl	801bcb8 <_fflush_r>
 801ba42:	b988      	cbnz	r0, 801ba68 <__swbuf_r+0x90>
 801ba44:	4638      	mov	r0, r7
 801ba46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba48:	4b0a      	ldr	r3, [pc, #40]	; (801ba74 <__swbuf_r+0x9c>)
 801ba4a:	429c      	cmp	r4, r3
 801ba4c:	d101      	bne.n	801ba52 <__swbuf_r+0x7a>
 801ba4e:	68ac      	ldr	r4, [r5, #8]
 801ba50:	e7cf      	b.n	801b9f2 <__swbuf_r+0x1a>
 801ba52:	4b09      	ldr	r3, [pc, #36]	; (801ba78 <__swbuf_r+0xa0>)
 801ba54:	429c      	cmp	r4, r3
 801ba56:	bf08      	it	eq
 801ba58:	68ec      	ldreq	r4, [r5, #12]
 801ba5a:	e7ca      	b.n	801b9f2 <__swbuf_r+0x1a>
 801ba5c:	4621      	mov	r1, r4
 801ba5e:	4628      	mov	r0, r5
 801ba60:	f000 f81e 	bl	801baa0 <__swsetup_r>
 801ba64:	2800      	cmp	r0, #0
 801ba66:	d0cb      	beq.n	801ba00 <__swbuf_r+0x28>
 801ba68:	f04f 37ff 	mov.w	r7, #4294967295
 801ba6c:	e7ea      	b.n	801ba44 <__swbuf_r+0x6c>
 801ba6e:	bf00      	nop
 801ba70:	080311f8 	.word	0x080311f8
 801ba74:	08031218 	.word	0x08031218
 801ba78:	080311d8 	.word	0x080311d8

0801ba7c <_write_r>:
 801ba7c:	b538      	push	{r3, r4, r5, lr}
 801ba7e:	4d07      	ldr	r5, [pc, #28]	; (801ba9c <_write_r+0x20>)
 801ba80:	4604      	mov	r4, r0
 801ba82:	4608      	mov	r0, r1
 801ba84:	4611      	mov	r1, r2
 801ba86:	2200      	movs	r2, #0
 801ba88:	602a      	str	r2, [r5, #0]
 801ba8a:	461a      	mov	r2, r3
 801ba8c:	f7e5 fe63 	bl	8001756 <_write>
 801ba90:	1c43      	adds	r3, r0, #1
 801ba92:	d102      	bne.n	801ba9a <_write_r+0x1e>
 801ba94:	682b      	ldr	r3, [r5, #0]
 801ba96:	b103      	cbz	r3, 801ba9a <_write_r+0x1e>
 801ba98:	6023      	str	r3, [r4, #0]
 801ba9a:	bd38      	pop	{r3, r4, r5, pc}
 801ba9c:	2000c680 	.word	0x2000c680

0801baa0 <__swsetup_r>:
 801baa0:	4b32      	ldr	r3, [pc, #200]	; (801bb6c <__swsetup_r+0xcc>)
 801baa2:	b570      	push	{r4, r5, r6, lr}
 801baa4:	681d      	ldr	r5, [r3, #0]
 801baa6:	4606      	mov	r6, r0
 801baa8:	460c      	mov	r4, r1
 801baaa:	b125      	cbz	r5, 801bab6 <__swsetup_r+0x16>
 801baac:	69ab      	ldr	r3, [r5, #24]
 801baae:	b913      	cbnz	r3, 801bab6 <__swsetup_r+0x16>
 801bab0:	4628      	mov	r0, r5
 801bab2:	f7ff f98f 	bl	801add4 <__sinit>
 801bab6:	4b2e      	ldr	r3, [pc, #184]	; (801bb70 <__swsetup_r+0xd0>)
 801bab8:	429c      	cmp	r4, r3
 801baba:	d10f      	bne.n	801badc <__swsetup_r+0x3c>
 801babc:	686c      	ldr	r4, [r5, #4]
 801babe:	89a3      	ldrh	r3, [r4, #12]
 801bac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bac4:	0719      	lsls	r1, r3, #28
 801bac6:	d42c      	bmi.n	801bb22 <__swsetup_r+0x82>
 801bac8:	06dd      	lsls	r5, r3, #27
 801baca:	d411      	bmi.n	801baf0 <__swsetup_r+0x50>
 801bacc:	2309      	movs	r3, #9
 801bace:	6033      	str	r3, [r6, #0]
 801bad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bad4:	81a3      	strh	r3, [r4, #12]
 801bad6:	f04f 30ff 	mov.w	r0, #4294967295
 801bada:	e03e      	b.n	801bb5a <__swsetup_r+0xba>
 801badc:	4b25      	ldr	r3, [pc, #148]	; (801bb74 <__swsetup_r+0xd4>)
 801bade:	429c      	cmp	r4, r3
 801bae0:	d101      	bne.n	801bae6 <__swsetup_r+0x46>
 801bae2:	68ac      	ldr	r4, [r5, #8]
 801bae4:	e7eb      	b.n	801babe <__swsetup_r+0x1e>
 801bae6:	4b24      	ldr	r3, [pc, #144]	; (801bb78 <__swsetup_r+0xd8>)
 801bae8:	429c      	cmp	r4, r3
 801baea:	bf08      	it	eq
 801baec:	68ec      	ldreq	r4, [r5, #12]
 801baee:	e7e6      	b.n	801babe <__swsetup_r+0x1e>
 801baf0:	0758      	lsls	r0, r3, #29
 801baf2:	d512      	bpl.n	801bb1a <__swsetup_r+0x7a>
 801baf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801baf6:	b141      	cbz	r1, 801bb0a <__swsetup_r+0x6a>
 801baf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bafc:	4299      	cmp	r1, r3
 801bafe:	d002      	beq.n	801bb06 <__swsetup_r+0x66>
 801bb00:	4630      	mov	r0, r6
 801bb02:	f7ff fa21 	bl	801af48 <_free_r>
 801bb06:	2300      	movs	r3, #0
 801bb08:	6363      	str	r3, [r4, #52]	; 0x34
 801bb0a:	89a3      	ldrh	r3, [r4, #12]
 801bb0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bb10:	81a3      	strh	r3, [r4, #12]
 801bb12:	2300      	movs	r3, #0
 801bb14:	6063      	str	r3, [r4, #4]
 801bb16:	6923      	ldr	r3, [r4, #16]
 801bb18:	6023      	str	r3, [r4, #0]
 801bb1a:	89a3      	ldrh	r3, [r4, #12]
 801bb1c:	f043 0308 	orr.w	r3, r3, #8
 801bb20:	81a3      	strh	r3, [r4, #12]
 801bb22:	6923      	ldr	r3, [r4, #16]
 801bb24:	b94b      	cbnz	r3, 801bb3a <__swsetup_r+0x9a>
 801bb26:	89a3      	ldrh	r3, [r4, #12]
 801bb28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bb2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb30:	d003      	beq.n	801bb3a <__swsetup_r+0x9a>
 801bb32:	4621      	mov	r1, r4
 801bb34:	4630      	mov	r0, r6
 801bb36:	f000 f931 	bl	801bd9c <__smakebuf_r>
 801bb3a:	89a0      	ldrh	r0, [r4, #12]
 801bb3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb40:	f010 0301 	ands.w	r3, r0, #1
 801bb44:	d00a      	beq.n	801bb5c <__swsetup_r+0xbc>
 801bb46:	2300      	movs	r3, #0
 801bb48:	60a3      	str	r3, [r4, #8]
 801bb4a:	6963      	ldr	r3, [r4, #20]
 801bb4c:	425b      	negs	r3, r3
 801bb4e:	61a3      	str	r3, [r4, #24]
 801bb50:	6923      	ldr	r3, [r4, #16]
 801bb52:	b943      	cbnz	r3, 801bb66 <__swsetup_r+0xc6>
 801bb54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bb58:	d1ba      	bne.n	801bad0 <__swsetup_r+0x30>
 801bb5a:	bd70      	pop	{r4, r5, r6, pc}
 801bb5c:	0781      	lsls	r1, r0, #30
 801bb5e:	bf58      	it	pl
 801bb60:	6963      	ldrpl	r3, [r4, #20]
 801bb62:	60a3      	str	r3, [r4, #8]
 801bb64:	e7f4      	b.n	801bb50 <__swsetup_r+0xb0>
 801bb66:	2000      	movs	r0, #0
 801bb68:	e7f7      	b.n	801bb5a <__swsetup_r+0xba>
 801bb6a:	bf00      	nop
 801bb6c:	20000044 	.word	0x20000044
 801bb70:	080311f8 	.word	0x080311f8
 801bb74:	08031218 	.word	0x08031218
 801bb78:	080311d8 	.word	0x080311d8

0801bb7c <abort>:
 801bb7c:	b508      	push	{r3, lr}
 801bb7e:	2006      	movs	r0, #6
 801bb80:	f000 f9b8 	bl	801bef4 <raise>
 801bb84:	2001      	movs	r0, #1
 801bb86:	f7e5 fdbf 	bl	8001708 <_exit>
	...

0801bb8c <_close_r>:
 801bb8c:	b538      	push	{r3, r4, r5, lr}
 801bb8e:	4d06      	ldr	r5, [pc, #24]	; (801bba8 <_close_r+0x1c>)
 801bb90:	2300      	movs	r3, #0
 801bb92:	4604      	mov	r4, r0
 801bb94:	4608      	mov	r0, r1
 801bb96:	602b      	str	r3, [r5, #0]
 801bb98:	f7e5 fdf9 	bl	800178e <_close>
 801bb9c:	1c43      	adds	r3, r0, #1
 801bb9e:	d102      	bne.n	801bba6 <_close_r+0x1a>
 801bba0:	682b      	ldr	r3, [r5, #0]
 801bba2:	b103      	cbz	r3, 801bba6 <_close_r+0x1a>
 801bba4:	6023      	str	r3, [r4, #0]
 801bba6:	bd38      	pop	{r3, r4, r5, pc}
 801bba8:	2000c680 	.word	0x2000c680

0801bbac <__sflush_r>:
 801bbac:	898a      	ldrh	r2, [r1, #12]
 801bbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbb2:	4605      	mov	r5, r0
 801bbb4:	0710      	lsls	r0, r2, #28
 801bbb6:	460c      	mov	r4, r1
 801bbb8:	d458      	bmi.n	801bc6c <__sflush_r+0xc0>
 801bbba:	684b      	ldr	r3, [r1, #4]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	dc05      	bgt.n	801bbcc <__sflush_r+0x20>
 801bbc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	dc02      	bgt.n	801bbcc <__sflush_r+0x20>
 801bbc6:	2000      	movs	r0, #0
 801bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bbce:	2e00      	cmp	r6, #0
 801bbd0:	d0f9      	beq.n	801bbc6 <__sflush_r+0x1a>
 801bbd2:	2300      	movs	r3, #0
 801bbd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bbd8:	682f      	ldr	r7, [r5, #0]
 801bbda:	602b      	str	r3, [r5, #0]
 801bbdc:	d032      	beq.n	801bc44 <__sflush_r+0x98>
 801bbde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bbe0:	89a3      	ldrh	r3, [r4, #12]
 801bbe2:	075a      	lsls	r2, r3, #29
 801bbe4:	d505      	bpl.n	801bbf2 <__sflush_r+0x46>
 801bbe6:	6863      	ldr	r3, [r4, #4]
 801bbe8:	1ac0      	subs	r0, r0, r3
 801bbea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bbec:	b10b      	cbz	r3, 801bbf2 <__sflush_r+0x46>
 801bbee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bbf0:	1ac0      	subs	r0, r0, r3
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	4602      	mov	r2, r0
 801bbf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bbf8:	6a21      	ldr	r1, [r4, #32]
 801bbfa:	4628      	mov	r0, r5
 801bbfc:	47b0      	blx	r6
 801bbfe:	1c43      	adds	r3, r0, #1
 801bc00:	89a3      	ldrh	r3, [r4, #12]
 801bc02:	d106      	bne.n	801bc12 <__sflush_r+0x66>
 801bc04:	6829      	ldr	r1, [r5, #0]
 801bc06:	291d      	cmp	r1, #29
 801bc08:	d82c      	bhi.n	801bc64 <__sflush_r+0xb8>
 801bc0a:	4a2a      	ldr	r2, [pc, #168]	; (801bcb4 <__sflush_r+0x108>)
 801bc0c:	40ca      	lsrs	r2, r1
 801bc0e:	07d6      	lsls	r6, r2, #31
 801bc10:	d528      	bpl.n	801bc64 <__sflush_r+0xb8>
 801bc12:	2200      	movs	r2, #0
 801bc14:	6062      	str	r2, [r4, #4]
 801bc16:	04d9      	lsls	r1, r3, #19
 801bc18:	6922      	ldr	r2, [r4, #16]
 801bc1a:	6022      	str	r2, [r4, #0]
 801bc1c:	d504      	bpl.n	801bc28 <__sflush_r+0x7c>
 801bc1e:	1c42      	adds	r2, r0, #1
 801bc20:	d101      	bne.n	801bc26 <__sflush_r+0x7a>
 801bc22:	682b      	ldr	r3, [r5, #0]
 801bc24:	b903      	cbnz	r3, 801bc28 <__sflush_r+0x7c>
 801bc26:	6560      	str	r0, [r4, #84]	; 0x54
 801bc28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc2a:	602f      	str	r7, [r5, #0]
 801bc2c:	2900      	cmp	r1, #0
 801bc2e:	d0ca      	beq.n	801bbc6 <__sflush_r+0x1a>
 801bc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc34:	4299      	cmp	r1, r3
 801bc36:	d002      	beq.n	801bc3e <__sflush_r+0x92>
 801bc38:	4628      	mov	r0, r5
 801bc3a:	f7ff f985 	bl	801af48 <_free_r>
 801bc3e:	2000      	movs	r0, #0
 801bc40:	6360      	str	r0, [r4, #52]	; 0x34
 801bc42:	e7c1      	b.n	801bbc8 <__sflush_r+0x1c>
 801bc44:	6a21      	ldr	r1, [r4, #32]
 801bc46:	2301      	movs	r3, #1
 801bc48:	4628      	mov	r0, r5
 801bc4a:	47b0      	blx	r6
 801bc4c:	1c41      	adds	r1, r0, #1
 801bc4e:	d1c7      	bne.n	801bbe0 <__sflush_r+0x34>
 801bc50:	682b      	ldr	r3, [r5, #0]
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d0c4      	beq.n	801bbe0 <__sflush_r+0x34>
 801bc56:	2b1d      	cmp	r3, #29
 801bc58:	d001      	beq.n	801bc5e <__sflush_r+0xb2>
 801bc5a:	2b16      	cmp	r3, #22
 801bc5c:	d101      	bne.n	801bc62 <__sflush_r+0xb6>
 801bc5e:	602f      	str	r7, [r5, #0]
 801bc60:	e7b1      	b.n	801bbc6 <__sflush_r+0x1a>
 801bc62:	89a3      	ldrh	r3, [r4, #12]
 801bc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc68:	81a3      	strh	r3, [r4, #12]
 801bc6a:	e7ad      	b.n	801bbc8 <__sflush_r+0x1c>
 801bc6c:	690f      	ldr	r7, [r1, #16]
 801bc6e:	2f00      	cmp	r7, #0
 801bc70:	d0a9      	beq.n	801bbc6 <__sflush_r+0x1a>
 801bc72:	0793      	lsls	r3, r2, #30
 801bc74:	680e      	ldr	r6, [r1, #0]
 801bc76:	bf08      	it	eq
 801bc78:	694b      	ldreq	r3, [r1, #20]
 801bc7a:	600f      	str	r7, [r1, #0]
 801bc7c:	bf18      	it	ne
 801bc7e:	2300      	movne	r3, #0
 801bc80:	eba6 0807 	sub.w	r8, r6, r7
 801bc84:	608b      	str	r3, [r1, #8]
 801bc86:	f1b8 0f00 	cmp.w	r8, #0
 801bc8a:	dd9c      	ble.n	801bbc6 <__sflush_r+0x1a>
 801bc8c:	6a21      	ldr	r1, [r4, #32]
 801bc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc90:	4643      	mov	r3, r8
 801bc92:	463a      	mov	r2, r7
 801bc94:	4628      	mov	r0, r5
 801bc96:	47b0      	blx	r6
 801bc98:	2800      	cmp	r0, #0
 801bc9a:	dc06      	bgt.n	801bcaa <__sflush_r+0xfe>
 801bc9c:	89a3      	ldrh	r3, [r4, #12]
 801bc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bca2:	81a3      	strh	r3, [r4, #12]
 801bca4:	f04f 30ff 	mov.w	r0, #4294967295
 801bca8:	e78e      	b.n	801bbc8 <__sflush_r+0x1c>
 801bcaa:	4407      	add	r7, r0
 801bcac:	eba8 0800 	sub.w	r8, r8, r0
 801bcb0:	e7e9      	b.n	801bc86 <__sflush_r+0xda>
 801bcb2:	bf00      	nop
 801bcb4:	20400001 	.word	0x20400001

0801bcb8 <_fflush_r>:
 801bcb8:	b538      	push	{r3, r4, r5, lr}
 801bcba:	690b      	ldr	r3, [r1, #16]
 801bcbc:	4605      	mov	r5, r0
 801bcbe:	460c      	mov	r4, r1
 801bcc0:	b913      	cbnz	r3, 801bcc8 <_fflush_r+0x10>
 801bcc2:	2500      	movs	r5, #0
 801bcc4:	4628      	mov	r0, r5
 801bcc6:	bd38      	pop	{r3, r4, r5, pc}
 801bcc8:	b118      	cbz	r0, 801bcd2 <_fflush_r+0x1a>
 801bcca:	6983      	ldr	r3, [r0, #24]
 801bccc:	b90b      	cbnz	r3, 801bcd2 <_fflush_r+0x1a>
 801bcce:	f7ff f881 	bl	801add4 <__sinit>
 801bcd2:	4b14      	ldr	r3, [pc, #80]	; (801bd24 <_fflush_r+0x6c>)
 801bcd4:	429c      	cmp	r4, r3
 801bcd6:	d11b      	bne.n	801bd10 <_fflush_r+0x58>
 801bcd8:	686c      	ldr	r4, [r5, #4]
 801bcda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d0ef      	beq.n	801bcc2 <_fflush_r+0xa>
 801bce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bce4:	07d0      	lsls	r0, r2, #31
 801bce6:	d404      	bmi.n	801bcf2 <_fflush_r+0x3a>
 801bce8:	0599      	lsls	r1, r3, #22
 801bcea:	d402      	bmi.n	801bcf2 <_fflush_r+0x3a>
 801bcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcee:	f7ff f921 	bl	801af34 <__retarget_lock_acquire_recursive>
 801bcf2:	4628      	mov	r0, r5
 801bcf4:	4621      	mov	r1, r4
 801bcf6:	f7ff ff59 	bl	801bbac <__sflush_r>
 801bcfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bcfc:	07da      	lsls	r2, r3, #31
 801bcfe:	4605      	mov	r5, r0
 801bd00:	d4e0      	bmi.n	801bcc4 <_fflush_r+0xc>
 801bd02:	89a3      	ldrh	r3, [r4, #12]
 801bd04:	059b      	lsls	r3, r3, #22
 801bd06:	d4dd      	bmi.n	801bcc4 <_fflush_r+0xc>
 801bd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd0a:	f7ff f914 	bl	801af36 <__retarget_lock_release_recursive>
 801bd0e:	e7d9      	b.n	801bcc4 <_fflush_r+0xc>
 801bd10:	4b05      	ldr	r3, [pc, #20]	; (801bd28 <_fflush_r+0x70>)
 801bd12:	429c      	cmp	r4, r3
 801bd14:	d101      	bne.n	801bd1a <_fflush_r+0x62>
 801bd16:	68ac      	ldr	r4, [r5, #8]
 801bd18:	e7df      	b.n	801bcda <_fflush_r+0x22>
 801bd1a:	4b04      	ldr	r3, [pc, #16]	; (801bd2c <_fflush_r+0x74>)
 801bd1c:	429c      	cmp	r4, r3
 801bd1e:	bf08      	it	eq
 801bd20:	68ec      	ldreq	r4, [r5, #12]
 801bd22:	e7da      	b.n	801bcda <_fflush_r+0x22>
 801bd24:	080311f8 	.word	0x080311f8
 801bd28:	08031218 	.word	0x08031218
 801bd2c:	080311d8 	.word	0x080311d8

0801bd30 <_lseek_r>:
 801bd30:	b538      	push	{r3, r4, r5, lr}
 801bd32:	4d07      	ldr	r5, [pc, #28]	; (801bd50 <_lseek_r+0x20>)
 801bd34:	4604      	mov	r4, r0
 801bd36:	4608      	mov	r0, r1
 801bd38:	4611      	mov	r1, r2
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	602a      	str	r2, [r5, #0]
 801bd3e:	461a      	mov	r2, r3
 801bd40:	f7e5 fd4c 	bl	80017dc <_lseek>
 801bd44:	1c43      	adds	r3, r0, #1
 801bd46:	d102      	bne.n	801bd4e <_lseek_r+0x1e>
 801bd48:	682b      	ldr	r3, [r5, #0]
 801bd4a:	b103      	cbz	r3, 801bd4e <_lseek_r+0x1e>
 801bd4c:	6023      	str	r3, [r4, #0]
 801bd4e:	bd38      	pop	{r3, r4, r5, pc}
 801bd50:	2000c680 	.word	0x2000c680

0801bd54 <__swhatbuf_r>:
 801bd54:	b570      	push	{r4, r5, r6, lr}
 801bd56:	460e      	mov	r6, r1
 801bd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd5c:	2900      	cmp	r1, #0
 801bd5e:	b096      	sub	sp, #88	; 0x58
 801bd60:	4614      	mov	r4, r2
 801bd62:	461d      	mov	r5, r3
 801bd64:	da07      	bge.n	801bd76 <__swhatbuf_r+0x22>
 801bd66:	2300      	movs	r3, #0
 801bd68:	602b      	str	r3, [r5, #0]
 801bd6a:	89b3      	ldrh	r3, [r6, #12]
 801bd6c:	061a      	lsls	r2, r3, #24
 801bd6e:	d410      	bmi.n	801bd92 <__swhatbuf_r+0x3e>
 801bd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd74:	e00e      	b.n	801bd94 <__swhatbuf_r+0x40>
 801bd76:	466a      	mov	r2, sp
 801bd78:	f000 f8d8 	bl	801bf2c <_fstat_r>
 801bd7c:	2800      	cmp	r0, #0
 801bd7e:	dbf2      	blt.n	801bd66 <__swhatbuf_r+0x12>
 801bd80:	9a01      	ldr	r2, [sp, #4]
 801bd82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bd86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bd8a:	425a      	negs	r2, r3
 801bd8c:	415a      	adcs	r2, r3
 801bd8e:	602a      	str	r2, [r5, #0]
 801bd90:	e7ee      	b.n	801bd70 <__swhatbuf_r+0x1c>
 801bd92:	2340      	movs	r3, #64	; 0x40
 801bd94:	2000      	movs	r0, #0
 801bd96:	6023      	str	r3, [r4, #0]
 801bd98:	b016      	add	sp, #88	; 0x58
 801bd9a:	bd70      	pop	{r4, r5, r6, pc}

0801bd9c <__smakebuf_r>:
 801bd9c:	898b      	ldrh	r3, [r1, #12]
 801bd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bda0:	079d      	lsls	r5, r3, #30
 801bda2:	4606      	mov	r6, r0
 801bda4:	460c      	mov	r4, r1
 801bda6:	d507      	bpl.n	801bdb8 <__smakebuf_r+0x1c>
 801bda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bdac:	6023      	str	r3, [r4, #0]
 801bdae:	6123      	str	r3, [r4, #16]
 801bdb0:	2301      	movs	r3, #1
 801bdb2:	6163      	str	r3, [r4, #20]
 801bdb4:	b002      	add	sp, #8
 801bdb6:	bd70      	pop	{r4, r5, r6, pc}
 801bdb8:	ab01      	add	r3, sp, #4
 801bdba:	466a      	mov	r2, sp
 801bdbc:	f7ff ffca 	bl	801bd54 <__swhatbuf_r>
 801bdc0:	9900      	ldr	r1, [sp, #0]
 801bdc2:	4605      	mov	r5, r0
 801bdc4:	4630      	mov	r0, r6
 801bdc6:	f7ff f90f 	bl	801afe8 <_malloc_r>
 801bdca:	b948      	cbnz	r0, 801bde0 <__smakebuf_r+0x44>
 801bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdd0:	059a      	lsls	r2, r3, #22
 801bdd2:	d4ef      	bmi.n	801bdb4 <__smakebuf_r+0x18>
 801bdd4:	f023 0303 	bic.w	r3, r3, #3
 801bdd8:	f043 0302 	orr.w	r3, r3, #2
 801bddc:	81a3      	strh	r3, [r4, #12]
 801bdde:	e7e3      	b.n	801bda8 <__smakebuf_r+0xc>
 801bde0:	4b0d      	ldr	r3, [pc, #52]	; (801be18 <__smakebuf_r+0x7c>)
 801bde2:	62b3      	str	r3, [r6, #40]	; 0x28
 801bde4:	89a3      	ldrh	r3, [r4, #12]
 801bde6:	6020      	str	r0, [r4, #0]
 801bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bdec:	81a3      	strh	r3, [r4, #12]
 801bdee:	9b00      	ldr	r3, [sp, #0]
 801bdf0:	6163      	str	r3, [r4, #20]
 801bdf2:	9b01      	ldr	r3, [sp, #4]
 801bdf4:	6120      	str	r0, [r4, #16]
 801bdf6:	b15b      	cbz	r3, 801be10 <__smakebuf_r+0x74>
 801bdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bdfc:	4630      	mov	r0, r6
 801bdfe:	f000 f8a7 	bl	801bf50 <_isatty_r>
 801be02:	b128      	cbz	r0, 801be10 <__smakebuf_r+0x74>
 801be04:	89a3      	ldrh	r3, [r4, #12]
 801be06:	f023 0303 	bic.w	r3, r3, #3
 801be0a:	f043 0301 	orr.w	r3, r3, #1
 801be0e:	81a3      	strh	r3, [r4, #12]
 801be10:	89a0      	ldrh	r0, [r4, #12]
 801be12:	4305      	orrs	r5, r0
 801be14:	81a5      	strh	r5, [r4, #12]
 801be16:	e7cd      	b.n	801bdb4 <__smakebuf_r+0x18>
 801be18:	0801ad6d 	.word	0x0801ad6d

0801be1c <__malloc_lock>:
 801be1c:	4801      	ldr	r0, [pc, #4]	; (801be24 <__malloc_lock+0x8>)
 801be1e:	f7ff b889 	b.w	801af34 <__retarget_lock_acquire_recursive>
 801be22:	bf00      	nop
 801be24:	2000c68c 	.word	0x2000c68c

0801be28 <__malloc_unlock>:
 801be28:	4801      	ldr	r0, [pc, #4]	; (801be30 <__malloc_unlock+0x8>)
 801be2a:	f7ff b884 	b.w	801af36 <__retarget_lock_release_recursive>
 801be2e:	bf00      	nop
 801be30:	2000c68c 	.word	0x2000c68c

0801be34 <_realloc_r>:
 801be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be36:	4607      	mov	r7, r0
 801be38:	4614      	mov	r4, r2
 801be3a:	460e      	mov	r6, r1
 801be3c:	b921      	cbnz	r1, 801be48 <_realloc_r+0x14>
 801be3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801be42:	4611      	mov	r1, r2
 801be44:	f7ff b8d0 	b.w	801afe8 <_malloc_r>
 801be48:	b922      	cbnz	r2, 801be54 <_realloc_r+0x20>
 801be4a:	f7ff f87d 	bl	801af48 <_free_r>
 801be4e:	4625      	mov	r5, r4
 801be50:	4628      	mov	r0, r5
 801be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be54:	f000 f88c 	bl	801bf70 <_malloc_usable_size_r>
 801be58:	42a0      	cmp	r0, r4
 801be5a:	d20f      	bcs.n	801be7c <_realloc_r+0x48>
 801be5c:	4621      	mov	r1, r4
 801be5e:	4638      	mov	r0, r7
 801be60:	f7ff f8c2 	bl	801afe8 <_malloc_r>
 801be64:	4605      	mov	r5, r0
 801be66:	2800      	cmp	r0, #0
 801be68:	d0f2      	beq.n	801be50 <_realloc_r+0x1c>
 801be6a:	4631      	mov	r1, r6
 801be6c:	4622      	mov	r2, r4
 801be6e:	f7fe fe69 	bl	801ab44 <memcpy>
 801be72:	4631      	mov	r1, r6
 801be74:	4638      	mov	r0, r7
 801be76:	f7ff f867 	bl	801af48 <_free_r>
 801be7a:	e7e9      	b.n	801be50 <_realloc_r+0x1c>
 801be7c:	4635      	mov	r5, r6
 801be7e:	e7e7      	b.n	801be50 <_realloc_r+0x1c>

0801be80 <_read_r>:
 801be80:	b538      	push	{r3, r4, r5, lr}
 801be82:	4d07      	ldr	r5, [pc, #28]	; (801bea0 <_read_r+0x20>)
 801be84:	4604      	mov	r4, r0
 801be86:	4608      	mov	r0, r1
 801be88:	4611      	mov	r1, r2
 801be8a:	2200      	movs	r2, #0
 801be8c:	602a      	str	r2, [r5, #0]
 801be8e:	461a      	mov	r2, r3
 801be90:	f7e5 fc44 	bl	800171c <_read>
 801be94:	1c43      	adds	r3, r0, #1
 801be96:	d102      	bne.n	801be9e <_read_r+0x1e>
 801be98:	682b      	ldr	r3, [r5, #0]
 801be9a:	b103      	cbz	r3, 801be9e <_read_r+0x1e>
 801be9c:	6023      	str	r3, [r4, #0]
 801be9e:	bd38      	pop	{r3, r4, r5, pc}
 801bea0:	2000c680 	.word	0x2000c680

0801bea4 <_raise_r>:
 801bea4:	291f      	cmp	r1, #31
 801bea6:	b538      	push	{r3, r4, r5, lr}
 801bea8:	4604      	mov	r4, r0
 801beaa:	460d      	mov	r5, r1
 801beac:	d904      	bls.n	801beb8 <_raise_r+0x14>
 801beae:	2316      	movs	r3, #22
 801beb0:	6003      	str	r3, [r0, #0]
 801beb2:	f04f 30ff 	mov.w	r0, #4294967295
 801beb6:	bd38      	pop	{r3, r4, r5, pc}
 801beb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801beba:	b112      	cbz	r2, 801bec2 <_raise_r+0x1e>
 801bebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bec0:	b94b      	cbnz	r3, 801bed6 <_raise_r+0x32>
 801bec2:	4620      	mov	r0, r4
 801bec4:	f000 f830 	bl	801bf28 <_getpid_r>
 801bec8:	462a      	mov	r2, r5
 801beca:	4601      	mov	r1, r0
 801becc:	4620      	mov	r0, r4
 801bece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bed2:	f000 b817 	b.w	801bf04 <_kill_r>
 801bed6:	2b01      	cmp	r3, #1
 801bed8:	d00a      	beq.n	801bef0 <_raise_r+0x4c>
 801beda:	1c59      	adds	r1, r3, #1
 801bedc:	d103      	bne.n	801bee6 <_raise_r+0x42>
 801bede:	2316      	movs	r3, #22
 801bee0:	6003      	str	r3, [r0, #0]
 801bee2:	2001      	movs	r0, #1
 801bee4:	e7e7      	b.n	801beb6 <_raise_r+0x12>
 801bee6:	2400      	movs	r4, #0
 801bee8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801beec:	4628      	mov	r0, r5
 801beee:	4798      	blx	r3
 801bef0:	2000      	movs	r0, #0
 801bef2:	e7e0      	b.n	801beb6 <_raise_r+0x12>

0801bef4 <raise>:
 801bef4:	4b02      	ldr	r3, [pc, #8]	; (801bf00 <raise+0xc>)
 801bef6:	4601      	mov	r1, r0
 801bef8:	6818      	ldr	r0, [r3, #0]
 801befa:	f7ff bfd3 	b.w	801bea4 <_raise_r>
 801befe:	bf00      	nop
 801bf00:	20000044 	.word	0x20000044

0801bf04 <_kill_r>:
 801bf04:	b538      	push	{r3, r4, r5, lr}
 801bf06:	4d07      	ldr	r5, [pc, #28]	; (801bf24 <_kill_r+0x20>)
 801bf08:	2300      	movs	r3, #0
 801bf0a:	4604      	mov	r4, r0
 801bf0c:	4608      	mov	r0, r1
 801bf0e:	4611      	mov	r1, r2
 801bf10:	602b      	str	r3, [r5, #0]
 801bf12:	f7e5 fbe9 	bl	80016e8 <_kill>
 801bf16:	1c43      	adds	r3, r0, #1
 801bf18:	d102      	bne.n	801bf20 <_kill_r+0x1c>
 801bf1a:	682b      	ldr	r3, [r5, #0]
 801bf1c:	b103      	cbz	r3, 801bf20 <_kill_r+0x1c>
 801bf1e:	6023      	str	r3, [r4, #0]
 801bf20:	bd38      	pop	{r3, r4, r5, pc}
 801bf22:	bf00      	nop
 801bf24:	2000c680 	.word	0x2000c680

0801bf28 <_getpid_r>:
 801bf28:	f7e5 bbd6 	b.w	80016d8 <_getpid>

0801bf2c <_fstat_r>:
 801bf2c:	b538      	push	{r3, r4, r5, lr}
 801bf2e:	4d07      	ldr	r5, [pc, #28]	; (801bf4c <_fstat_r+0x20>)
 801bf30:	2300      	movs	r3, #0
 801bf32:	4604      	mov	r4, r0
 801bf34:	4608      	mov	r0, r1
 801bf36:	4611      	mov	r1, r2
 801bf38:	602b      	str	r3, [r5, #0]
 801bf3a:	f7e5 fc34 	bl	80017a6 <_fstat>
 801bf3e:	1c43      	adds	r3, r0, #1
 801bf40:	d102      	bne.n	801bf48 <_fstat_r+0x1c>
 801bf42:	682b      	ldr	r3, [r5, #0]
 801bf44:	b103      	cbz	r3, 801bf48 <_fstat_r+0x1c>
 801bf46:	6023      	str	r3, [r4, #0]
 801bf48:	bd38      	pop	{r3, r4, r5, pc}
 801bf4a:	bf00      	nop
 801bf4c:	2000c680 	.word	0x2000c680

0801bf50 <_isatty_r>:
 801bf50:	b538      	push	{r3, r4, r5, lr}
 801bf52:	4d06      	ldr	r5, [pc, #24]	; (801bf6c <_isatty_r+0x1c>)
 801bf54:	2300      	movs	r3, #0
 801bf56:	4604      	mov	r4, r0
 801bf58:	4608      	mov	r0, r1
 801bf5a:	602b      	str	r3, [r5, #0]
 801bf5c:	f7e5 fc33 	bl	80017c6 <_isatty>
 801bf60:	1c43      	adds	r3, r0, #1
 801bf62:	d102      	bne.n	801bf6a <_isatty_r+0x1a>
 801bf64:	682b      	ldr	r3, [r5, #0]
 801bf66:	b103      	cbz	r3, 801bf6a <_isatty_r+0x1a>
 801bf68:	6023      	str	r3, [r4, #0]
 801bf6a:	bd38      	pop	{r3, r4, r5, pc}
 801bf6c:	2000c680 	.word	0x2000c680

0801bf70 <_malloc_usable_size_r>:
 801bf70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf74:	1f18      	subs	r0, r3, #4
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	bfbc      	itt	lt
 801bf7a:	580b      	ldrlt	r3, [r1, r0]
 801bf7c:	18c0      	addlt	r0, r0, r3
 801bf7e:	4770      	bx	lr

0801bf80 <_init>:
 801bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf82:	bf00      	nop
 801bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf86:	bc08      	pop	{r3}
 801bf88:	469e      	mov	lr, r3
 801bf8a:	4770      	bx	lr

0801bf8c <_fini>:
 801bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf8e:	bf00      	nop
 801bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf92:	bc08      	pop	{r3}
 801bf94:	469e      	mov	lr, r3
 801bf96:	4770      	bx	lr
