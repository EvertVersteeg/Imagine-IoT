
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c4  080036c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036cc  080036cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080036e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080036e0  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074ad  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000160a  00000000  00000000  000274e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000790  00000000  00000000  00028af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  00029280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016032  00000000  00000000  00029948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000759f  00000000  00000000  0003f97a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c5fe  00000000  00000000  00046f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d8  00000000  00000000  000d3594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800363c 	.word	0x0800363c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800363c 	.word	0x0800363c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(GPIOA,myled,GPIO_PIN_SET);
 800060c:	23a0      	movs	r3, #160	; 0xa0
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	2201      	movs	r2, #1
 8000612:	2120      	movs	r1, #32
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fd3f 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800061a:	20c8      	movs	r0, #200	; 0xc8
 800061c:	f000 faec 	bl	8000bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,myled,GPIO_PIN_RESET);
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fd35 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f000 fae2 	bl	8000bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,myled,GPIO_PIN_SET);
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2201      	movs	r2, #1
 800063a:	2120      	movs	r1, #32
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fd2b 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000642:	20c8      	movs	r0, #200	; 0xc8
 8000644:	f000 fad8 	bl	8000bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,myled,GPIO_PIN_RESET);
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fd21 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f000 face 	bl	8000bf8 <HAL_Delay>
	HAL_Delay(400);
 800065c:	23c8      	movs	r3, #200	; 0xc8
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fac9 	bl	8000bf8 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fa43 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f805 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f8b1 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000672:	f000 f861 	bl	8000738 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x6e>

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b0a1      	sub	sp, #132	; 0x84
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2448      	movs	r4, #72	; 0x48
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 ffcf 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	2338      	movs	r3, #56	; 0x38
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	0018      	movs	r0, r3
 8000694:	2310      	movs	r3, #16
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f002 ffc7 	bl	800362c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2334      	movs	r3, #52	; 0x34
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 ffc0 	bl	800362c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fd0f 	bl	80010d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2240      	movs	r2, #64	; 0x40
 80006ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fd47 	bl	800116c <HAL_RCC_OscConfig>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f93d 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	2138      	movs	r1, #56	; 0x38
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2207      	movs	r2, #7
 80006ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2100      	movs	r1, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f851 	bl	80017ac <HAL_RCC_ClockConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f927 	bl	8000960 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	0018      	movs	r0, r3
 8000722:	f001 f9ed 	bl	8001b00 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800072a:	f000 f919 	bl	8000960 <Error_Handler>
  }
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b021      	add	sp, #132	; 0x84
 8000734:	bd90      	pop	{r4, r7, pc}
	...

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_USART2_UART_Init+0x94>)
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_USART2_UART_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000744:	22e1      	movs	r2, #225	; 0xe1
 8000746:	0252      	lsls	r2, r2, #9
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_USART2_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_USART2_UART_Init+0x94>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_USART2_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART2_UART_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fb74 	bl	8001e70 <HAL_UART_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 f8e8 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x94>)
 8000792:	2100      	movs	r1, #0
 8000794:	0018      	movs	r0, r3
 8000796:	f002 fe39 	bl	800340c <HAL_UARTEx_SetTxFifoThreshold>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800079e:	f000 f8df 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_USART2_UART_Init+0x94>)
 80007a4:	2100      	movs	r1, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fe70 	bl	800348c <HAL_UARTEx_SetRxFifoThreshold>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f8d6 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x94>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fdee 	bl	8003398 <HAL_UARTEx_DisableFifoMode>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007c0:	f000 f8ce 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	20000028 	.word	0x20000028
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	2414      	movs	r4, #20
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2314      	movs	r3, #20
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f002 ff21 	bl	800362c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b54      	ldr	r3, [pc, #336]	; (800093c <MX_GPIO_Init+0x168>)
 80007ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x168>)
 80007f0:	2104      	movs	r1, #4
 80007f2:	430a      	orrs	r2, r1
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
 80007f6:	4b51      	ldr	r3, [pc, #324]	; (800093c <MX_GPIO_Init+0x168>)
 80007f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fa:	2204      	movs	r2, #4
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	4b4e      	ldr	r3, [pc, #312]	; (800093c <MX_GPIO_Init+0x168>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000806:	4b4d      	ldr	r3, [pc, #308]	; (800093c <MX_GPIO_Init+0x168>)
 8000808:	2120      	movs	r1, #32
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <MX_GPIO_Init+0x168>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000812:	2220      	movs	r2, #32
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b48      	ldr	r3, [pc, #288]	; (800093c <MX_GPIO_Init+0x168>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b47      	ldr	r3, [pc, #284]	; (800093c <MX_GPIO_Init+0x168>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b45      	ldr	r3, [pc, #276]	; (800093c <MX_GPIO_Init+0x168>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b42      	ldr	r3, [pc, #264]	; (800093c <MX_GPIO_Init+0x168>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b41      	ldr	r3, [pc, #260]	; (800093c <MX_GPIO_Init+0x168>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b3f      	ldr	r3, [pc, #252]	; (800093c <MX_GPIO_Init+0x168>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b3c      	ldr	r3, [pc, #240]	; (800093c <MX_GPIO_Init+0x168>)
 800084c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084e:	4b3b      	ldr	r3, [pc, #236]	; (800093c <MX_GPIO_Init+0x168>)
 8000850:	2108      	movs	r1, #8
 8000852:	430a      	orrs	r2, r1
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_GPIO_Init+0x168>)
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	2208      	movs	r2, #8
 800085c:	4013      	ands	r3, r2
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fc14 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1
 8000870:	193b      	adds	r3, r7, r4
 8000872:	4a33      	ldr	r2, [pc, #204]	; (8000940 <MX_GPIO_Init+0x16c>)
 8000874:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2203      	movs	r2, #3
 800087a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	193b      	adds	r3, r7, r4
 8000884:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <MX_GPIO_Init+0x170>)
 8000886:	0019      	movs	r1, r3
 8000888:	0010      	movs	r0, r2
 800088a:	f000 faa1 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2206      	movs	r2, #6
 8000892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2203      	movs	r2, #3
 8000898:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a29      	ldr	r2, [pc, #164]	; (8000948 <MX_GPIO_Init+0x174>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fa92 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	4a27      	ldr	r2, [pc, #156]	; (800094c <MX_GPIO_Init+0x178>)
 80008b0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2203      	movs	r2, #3
 80008b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	193a      	adds	r2, r7, r4
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fa82 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = myled;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2220      	movs	r2, #32
 80008d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008e4:	193a      	adds	r2, r7, r4
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fa6f 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	4a16      	ldr	r2, [pc, #88]	; (8000950 <MX_GPIO_Init+0x17c>)
 80008f8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2203      	movs	r2, #3
 80008fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	000c      	movs	r4, r1
 8000908:	187b      	adds	r3, r7, r1
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_GPIO_Init+0x180>)
 800090c:	0019      	movs	r1, r3
 800090e:	0010      	movs	r0, r2
 8000910:	f000 fa5e 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 8000914:	0021      	movs	r1, r4
 8000916:	187b      	adds	r3, r7, r1
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <MX_GPIO_Init+0x184>)
 800091a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2203      	movs	r2, #3
 8000920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	187b      	adds	r3, r7, r1
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <MX_GPIO_Init+0x188>)
 800092c:	0019      	movs	r1, r3
 800092e:	0010      	movs	r0, r2
 8000930:	f000 fa4e 	bl	8000dd0 <HAL_GPIO_Init>

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b00b      	add	sp, #44	; 0x2c
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	00001fff 	.word	0x00001fff
 8000944:	50000800 	.word	0x50000800
 8000948:	50001400 	.word	0x50001400
 800094c:	00009fd3 	.word	0x00009fd3
 8000950:	0000ffdf 	.word	0x0000ffdf
 8000954:	50000400 	.word	0x50000400
 8000958:	0000035f 	.word	0x0000035f
 800095c:	50000c00 	.word	0x50000c00

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_MspInit+0x4c>)
 8000974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	2101      	movs	r1, #1
 800097a:	430a      	orrs	r2, r1
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x4c>)
 800098c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x4c>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0549      	lsls	r1, r1, #21
 8000994:	430a      	orrs	r2, r1
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_MspInit+0x4c>)
 800099a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	055b      	lsls	r3, r3, #21
 80009a0:	4013      	ands	r3, r2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f946 	bl	8000c3c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2314      	movs	r3, #20
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 fe2c 	bl	800362c <memset>
  if(huart->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <HAL_UART_MspInit+0x8c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d130      	bne.n	8000a40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x90>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0x90>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x90>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a12:	2114      	movs	r1, #20
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2201      	movs	r2, #1
 8000a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	187a      	adds	r2, r7, r1
 8000a34:	23a0      	movs	r3, #160	; 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f9c8 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b00a      	add	sp, #40	; 0x28
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f8a4 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <SystemInit+0x14>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	0512      	lsls	r2, r2, #20
 8000a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000aa0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopForever+0xa>)
  ldr r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2]
 8000abc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abe:	3204      	adds	r2, #4

08000ac0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopForever+0x16>)
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac6:	f7ff ffdd 	bl	8000a84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000aca:	f002 fd8b 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fd9b 	bl	8000608 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   r0, =_estack
 8000ad4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000ad8:	080036d4 	.word	0x080036d4
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000ae8:	200000b8 	.word	0x200000b8

08000aec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_COMP_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_Init+0x3c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_Init+0x3c>)
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	0049      	lsls	r1, r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f810 	bl	8000b30 <HAL_InitTick>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e001      	b.n	8000b20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff ff26 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40022000 	.word	0x40022000

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_InitTick+0x88>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d02b      	beq.n	8000ba0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_InitTick+0x8c>)
 8000b4a:	681c      	ldr	r4, [r3, #0]
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_InitTick+0x88>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	0019      	movs	r1, r3
 8000b52:	23fa      	movs	r3, #250	; 0xfa
 8000b54:	0098      	lsls	r0, r3, #2
 8000b56:	f7ff fad5 	bl	8000104 <__udivsi3>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0020      	movs	r0, r4
 8000b60:	f7ff fad0 	bl	8000104 <__udivsi3>
 8000b64:	0003      	movs	r3, r0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f925 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d112      	bne.n	8000b96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d80a      	bhi.n	8000b8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f904 	bl	8000d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_InitTick+0x90>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e00d      	b.n	8000ba8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e008      	b.n	8000ba8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e003      	b.n	8000ba8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	781b      	ldrb	r3, [r3, #0]
}
 8000bae:	0018      	movs	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b005      	add	sp, #20
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_IncTick+0x18>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	18d2      	adds	r2, r2, r3
 8000bd2:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_IncTick+0x18>)
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000b4 	.word	0x200000b4
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	200000b4 	.word	0x200000b4

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff fff0 	bl	8000be4 <HAL_GetTick>
 8000c04:	0003      	movs	r3, r0
 8000c06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	d004      	beq.n	8000c1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_Delay+0x40>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	f7ff ffe1 	bl	8000be4 <HAL_GetTick>
 8000c22:	0002      	movs	r2, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d8f7      	bhi.n	8000c1e <HAL_Delay+0x26>
  {
  }
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40010000 	.word	0x40010000
 8000c64:	fffff9ff 	.word	0xfffff9ff

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7c:	d828      	bhi.n	8000cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	33c0      	adds	r3, #192	; 0xc0
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	589b      	ldr	r3, [r3, r2]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	; 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	; 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	33c0      	adds	r3, #192	; 0xc0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cce:	e031      	b.n	8000d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	230f      	movs	r3, #15
 8000cda:	400b      	ands	r3, r1
 8000cdc:	3b08      	subs	r3, #8
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	; 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	001c      	movs	r4, r3
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	3b08      	subs	r3, #8
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	3306      	adds	r3, #6
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18c3      	adds	r3, r0, r3
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <SysTick_Config+0x40>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d901      	bls.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e010      	b.n	8000d7c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <SysTick_Config+0x44>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	2301      	movs	r3, #1
 8000d64:	425b      	negs	r3, r3
 8000d66:	2103      	movs	r1, #3
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff7d 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SysTick_Config+0x44>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x44>)
 8000d76:	2207      	movs	r2, #7
 8000d78:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	00ffffff 	.word	0x00ffffff
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	210f      	movs	r1, #15
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	1c02      	adds	r2, r0, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ffbf 	bl	8000d44 <SysTick_Config>
 8000dc6:	0003      	movs	r3, r0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e147      	b.n	8001070 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x28>
 8000df6:	e138      	b.n	800106a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x38>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b12      	cmp	r3, #18
 8000e06:	d123      	bne.n	8000e50 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	58d3      	ldr	r3, [r2, r3]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2207      	movs	r2, #7
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2107      	movs	r1, #7
 8000e34:	400b      	ands	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	6939      	ldr	r1, [r7, #16]
 8000e4e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_GPIO_Init+0xd4>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	43da      	mvns	r2, r3
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	055b      	lsls	r3, r3, #21
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x174>
 8000f42:	e092      	b.n	800106a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f44:	4a50      	ldr	r2, [pc, #320]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3318      	adds	r3, #24
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	589b      	ldr	r3, [r3, r2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	23a0      	movs	r3, #160	; 0xa0
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1ca>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a45      	ldr	r2, [pc, #276]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1c6>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a44      	ldr	r2, [pc, #272]	; (8001090 <HAL_GPIO_Init+0x2c0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1c2>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a43      	ldr	r2, [pc, #268]	; (8001094 <HAL_GPIO_Init+0x2c4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1be>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x1cc>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x1cc>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x1cc>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x1cc>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	00d2      	lsls	r2, r2, #3
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fac:	4936      	ldr	r1, [pc, #216]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fba:	4a33      	ldr	r2, [pc, #204]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	58d3      	ldr	r3, [r2, r3]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe0:	4929      	ldr	r1, [pc, #164]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8000fea:	2384      	movs	r3, #132	; 0x84
 8000fec:	58d3      	ldr	r3, [r2, r3]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	029b      	lsls	r3, r3, #10
 8001002:	4013      	ands	r3, r2
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800100e:	491e      	ldr	r1, [pc, #120]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8001010:	2284      	movs	r2, #132	; 0x84
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	035b      	lsls	r3, r3, #13
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	039b      	lsls	r3, r3, #14
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	40da      	lsrs	r2, r3
 8001078:	1e13      	subs	r3, r2, #0
 800107a:	d000      	beq.n	800107e <HAL_GPIO_Init+0x2ae>
 800107c:	e6b0      	b.n	8000de0 <HAL_GPIO_Init+0x10>
  }
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b006      	add	sp, #24
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40021800 	.word	0x40021800
 800108c:	50000400 	.word	0x50000400
 8001090:	50000800 	.word	0x50000800
 8001094:	50000c00 	.word	0x50000c00

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	0008      	movs	r0, r1
 80010a2:	0011      	movs	r1, r2
 80010a4:	1cbb      	adds	r3, r7, #2
 80010a6:	1c02      	adds	r2, r0, #0
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	1c7b      	adds	r3, r7, #1
 80010ac:	1c0a      	adds	r2, r1, #0
 80010ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b0:	1c7b      	adds	r3, r7, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b8:	1cbb      	adds	r3, r7, #2
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c2:	1cbb      	adds	r3, r7, #2
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d11f      	bne.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	0013      	movs	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	189b      	adds	r3, r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4912      	ldr	r1, [pc, #72]	; (8001150 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001106:	0018      	movs	r0, r3
 8001108:	f7fe fffc 	bl	8000104 <__udivsi3>
 800110c:	0003      	movs	r3, r0
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001112:	e008      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e001      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e009      	b.n	800113a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	401a      	ands	r2, r3
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	429a      	cmp	r2, r3
 8001136:	d0ed      	beq.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40007000 	.word	0x40007000
 8001148:	fffff9ff 	.word	0xfffff9ff
 800114c:	20000000 	.word	0x20000000
 8001150:	000f4240 	.word	0x000f4240

08001154 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <LL_RCC_GetAPB1Prescaler+0x14>)
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	23e0      	movs	r3, #224	; 0xe0
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	4013      	ands	r3, r2
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e304      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x1e>
 8001188:	e07c      	b.n	8001284 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118a:	4bc3      	ldr	r3, [pc, #780]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2238      	movs	r2, #56	; 0x38
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001194:	4bc0      	ldr	r3, [pc, #768]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2203      	movs	r2, #3
 800119a:	4013      	ands	r3, r2
 800119c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x3e>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_OscConfig+0x44>
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d10b      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4bb9      	ldr	r3, [pc, #740]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d062      	beq.n	8001282 <HAL_RCC_OscConfig+0x116>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d15e      	bne.n	8001282 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e2df      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	025b      	lsls	r3, r3, #9
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x78>
 80011d4:	4bb0      	ldr	r3, [pc, #704]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4baf      	ldr	r3, [pc, #700]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	0249      	lsls	r1, r1, #9
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e020      	b.n	8001226 <HAL_RCC_OscConfig+0xba>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	23a0      	movs	r3, #160	; 0xa0
 80011ea:	02db      	lsls	r3, r3, #11
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10e      	bne.n	800120e <HAL_RCC_OscConfig+0xa2>
 80011f0:	4ba9      	ldr	r3, [pc, #676]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4ba8      	ldr	r3, [pc, #672]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	02c9      	lsls	r1, r1, #11
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4ba6      	ldr	r3, [pc, #664]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4ba5      	ldr	r3, [pc, #660]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0249      	lsls	r1, r1, #9
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e00b      	b.n	8001226 <HAL_RCC_OscConfig+0xba>
 800120e:	4ba2      	ldr	r3, [pc, #648]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001214:	49a1      	ldr	r1, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x330>)
 8001216:	400a      	ands	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	4b9f      	ldr	r3, [pc, #636]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b9e      	ldr	r3, [pc, #632]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001220:	499f      	ldr	r1, [pc, #636]	; (80014a0 <HAL_RCC_OscConfig+0x334>)
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d014      	beq.n	8001258 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fcd9 	bl	8000be4 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcd4 	bl	8000be4 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e29e      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800124a:	4b93      	ldr	r3, [pc, #588]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	029b      	lsls	r3, r3, #10
 8001252:	4013      	ands	r3, r2
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0xcc>
 8001256:	e015      	b.n	8001284 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fcc4 	bl	8000be4 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001262:	f7ff fcbf 	bl	8000be4 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e289      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	4013      	ands	r3, r2
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0xf6>
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d100      	bne.n	8001290 <HAL_RCC_OscConfig+0x124>
 800128e:	e099      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001290:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2238      	movs	r2, #56	; 0x38
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129a:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x144>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d002      	beq.n	80012b6 <HAL_RCC_OscConfig+0x14a>
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d135      	bne.n	8001322 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b6:	4b78      	ldr	r3, [pc, #480]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x162>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e25c      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a74      	ldr	r2, [pc, #464]	; (80014a4 <HAL_RCC_OscConfig+0x338>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	021a      	lsls	r2, r3, #8
 80012de:	4b6e      	ldr	r3, [pc, #440]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d112      	bne.n	8001310 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x33c>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012fe:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0adb      	lsrs	r3, r3, #11
 8001304:	2207      	movs	r2, #7
 8001306:	4013      	ands	r3, r2
 8001308:	4a68      	ldr	r2, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x340>)
 800130a:	40da      	lsrs	r2, r3
 800130c:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x344>)
 800130e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x348>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff fc0b 	bl	8000b30 <HAL_InitTick>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d051      	beq.n	80013c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e232      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800132a:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x33c>)
 8001330:	4013      	ands	r3, r2
 8001332:	0019      	movs	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	0049      	lsls	r1, r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc4a 	bl	8000be4 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc45 	bl	8000be4 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e20f      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4013      	ands	r3, r2
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_RCC_OscConfig+0x338>)
 800137a:	4013      	ands	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	021a      	lsls	r2, r3, #8
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	e01b      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001392:	4949      	ldr	r1, [pc, #292]	; (80014b8 <HAL_RCC_OscConfig+0x34c>)
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fc24 	bl	8000be4 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc1f 	bl	8000be4 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1e9      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4013      	ands	r3, r2
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x236>
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2208      	movs	r2, #8
 80013ca:	4013      	ands	r3, r2
 80013cc:	d047      	beq.n	800145e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2238      	movs	r2, #56	; 0x38
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	d10a      	bne.n	80013f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d03c      	beq.n	800145e <HAL_RCC_OscConfig+0x2f2>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d138      	bne.n	800145e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e1cb      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d019      	beq.n	800142c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	2101      	movs	r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbee 	bl	8000be4 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fbe9 	bl	8000be4 <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1b3      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d0f1      	beq.n	800140e <HAL_RCC_OscConfig+0x2a2>
 800142a:	e018      	b.n	800145e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800142e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fbd4 	bl	8000be4 <HAL_GetTick>
 800143c:	0003      	movs	r3, r0
 800143e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fbcf 	bl	8000be4 <HAL_GetTick>
 8001446:	0002      	movs	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e199      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001458:	2202      	movs	r2, #2
 800145a:	4013      	ands	r3, r2
 800145c:	d1f1      	bne.n	8001442 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2204      	movs	r2, #4
 8001464:	4013      	ands	r3, r2
 8001466:	d100      	bne.n	800146a <HAL_RCC_OscConfig+0x2fe>
 8001468:	e0c6      	b.n	80015f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	231f      	movs	r3, #31
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2238      	movs	r2, #56	; 0x38
 8001478:	4013      	ands	r3, r2
 800147a:	2b20      	cmp	r3, #32
 800147c:	d11e      	bne.n	80014bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d100      	bne.n	800148a <HAL_RCC_OscConfig+0x31e>
 8001488:	e0b6      	b.n	80015f8 <HAL_RCC_OscConfig+0x48c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d000      	beq.n	8001494 <HAL_RCC_OscConfig+0x328>
 8001492:	e0b1      	b.n	80015f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e177      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
 8001498:	40021000 	.word	0x40021000
 800149c:	fffeffff 	.word	0xfffeffff
 80014a0:	fffbffff 	.word	0xfffbffff
 80014a4:	ffff80ff 	.word	0xffff80ff
 80014a8:	ffffc7ff 	.word	0xffffc7ff
 80014ac:	00f42400 	.word	0x00f42400
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004
 80014b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014bc:	4bb4      	ldr	r3, [pc, #720]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80014be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	055b      	lsls	r3, r3, #21
 80014c4:	4013      	ands	r3, r2
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x360>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x362>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d011      	beq.n	80014f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4baf      	ldr	r3, [pc, #700]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80014d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d6:	4bae      	ldr	r3, [pc, #696]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0549      	lsls	r1, r1, #21
 80014dc:	430a      	orrs	r2, r1
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e0:	4bab      	ldr	r3, [pc, #684]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80014e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	055b      	lsls	r3, r3, #21
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014ee:	231f      	movs	r3, #31
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f6:	4ba7      	ldr	r3, [pc, #668]	; (8001794 <HAL_RCC_OscConfig+0x628>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	d11a      	bne.n	8001538 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001502:	4ba4      	ldr	r3, [pc, #656]	; (8001794 <HAL_RCC_OscConfig+0x628>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4ba3      	ldr	r3, [pc, #652]	; (8001794 <HAL_RCC_OscConfig+0x628>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0049      	lsls	r1, r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb68 	bl	8000be4 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff fb63 	bl	8000be4 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e12d      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152c:	4b99      	ldr	r3, [pc, #612]	; (8001794 <HAL_RCC_OscConfig+0x628>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x3e2>
 8001540:	4b93      	ldr	r3, [pc, #588]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	65da      	str	r2, [r3, #92]	; 0x5c
 800154c:	e01c      	b.n	8001588 <HAL_RCC_OscConfig+0x41c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x404>
 8001556:	4b8e      	ldr	r3, [pc, #568]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800155a:	4b8d      	ldr	r3, [pc, #564]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 800155c:	2104      	movs	r1, #4
 800155e:	430a      	orrs	r2, r1
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c
 8001562:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001564:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001566:	4b8a      	ldr	r3, [pc, #552]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001568:	2101      	movs	r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	65da      	str	r2, [r3, #92]	; 0x5c
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0x41c>
 8001570:	4b87      	ldr	r3, [pc, #540]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001574:	4b86      	ldr	r3, [pc, #536]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	65da      	str	r2, [r3, #92]	; 0x5c
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 800157e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001580:	4b83      	ldr	r3, [pc, #524]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001582:	2104      	movs	r1, #4
 8001584:	438a      	bics	r2, r1
 8001586:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb28 	bl	8000be4 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001598:	e009      	b.n	80015ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb23 	bl	8000be4 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a7c      	ldr	r2, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x62c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0ec      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x42e>
 80015b8:	e013      	b.n	80015e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb13 	bl	8000be4 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb0e 	bl	8000be4 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x62c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0d7      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d8:	4b6d      	ldr	r3, [pc, #436]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015e2:	231f      	movs	r3, #31
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80015ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f0:	4b67      	ldr	r3, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80015f2:	496a      	ldr	r1, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x630>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x496>
 8001600:	e0c1      	b.n	8001786 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2238      	movs	r2, #56	; 0x38
 8001608:	4013      	ands	r3, r2
 800160a:	2b10      	cmp	r3, #16
 800160c:	d100      	bne.n	8001610 <HAL_RCC_OscConfig+0x4a4>
 800160e:	e081      	b.n	8001714 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d156      	bne.n	80016c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 800161e:	4960      	ldr	r1, [pc, #384]	; (80017a0 <HAL_RCC_OscConfig+0x634>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fade 	bl	8000be4 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fad9 	bl	8000be4 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0a3      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	049b      	lsls	r3, r3, #18
 8001648:	4013      	ands	r3, r2
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_RCC_OscConfig+0x638>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	431a      	orrs	r2, r3
 800167a:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 800167c:	430a      	orrs	r2, r1
 800167e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0449      	lsls	r1, r1, #17
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0549      	lsls	r1, r1, #21
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff faa2 	bl	8000be4 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fa9d 	bl	8000be4 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e067      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	049b      	lsls	r3, r3, #18
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x53a>
 80016c4:	e05f      	b.n	8001786 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016cc:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x634>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016d8:	2103      	movs	r1, #3
 80016da:	438a      	bics	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 80016e4:	4930      	ldr	r1, [pc, #192]	; (80017a8 <HAL_RCC_OscConfig+0x63c>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fa7b 	bl	8000be4 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa76 	bl	8000be4 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e040      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	049b      	lsls	r3, r3, #18
 800170e:	4013      	ands	r3, r2
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x588>
 8001712:	e038      	b.n	8001786 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e033      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x624>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2203      	movs	r2, #3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	429a      	cmp	r2, r3
 8001732:	d126      	bne.n	8001782 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2270      	movs	r2, #112	; 0x70
 8001738:	401a      	ands	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d11f      	bne.n	8001782 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	23fe      	movs	r3, #254	; 0xfe
 8001746:	01db      	lsls	r3, r3, #7
 8001748:	401a      	ands	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d116      	bne.n	8001782 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	23f8      	movs	r3, #248	; 0xf8
 8001758:	039b      	lsls	r3, r3, #14
 800175a:	401a      	ands	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d10e      	bne.n	8001782 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	23e0      	movs	r3, #224	; 0xe0
 8001768:	051b      	lsls	r3, r3, #20
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	0f5b      	lsrs	r3, r3, #29
 8001778:	075a      	lsls	r2, r3, #29
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b008      	add	sp, #32
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40007000 	.word	0x40007000
 8001798:	00001388 	.word	0x00001388
 800179c:	efffffff 	.word	0xefffffff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	11c1808c 	.word	0x11c1808c
 80017a8:	eefeffff 	.word	0xeefeffff

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0e9      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2207      	movs	r2, #7
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d91e      	bls.n	800180c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2207      	movs	r2, #7
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	4b70      	ldr	r3, [pc, #448]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa00 	bl	8000be4 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f9fb 	bl	8000be4 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a6a      	ldr	r2, [pc, #424]	; (80019a0 <HAL_RCC_ClockConfig+0x1f4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0ca      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2207      	movs	r2, #7
 8001804:	4013      	ands	r3, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d1ee      	bne.n	80017ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d015      	beq.n	8001842 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d006      	beq.n	800182e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001820:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	21e0      	movs	r1, #224	; 0xe0
 8001828:	01c9      	lsls	r1, r1, #7
 800182a:	430a      	orrs	r2, r1
 800182c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4a5d      	ldr	r2, [pc, #372]	; (80019a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001834:	4013      	ands	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d057      	beq.n	80018fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d12b      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e097      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d107      	bne.n	800187c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	049b      	lsls	r3, r3, #18
 8001874:	4013      	ands	r3, r2
 8001876:	d11f      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e08b      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d107      	bne.n	8001894 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4013      	ands	r3, r2
 800188e:	d113      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e07f      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d106      	bne.n	80018aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e074      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e06d      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2207      	movs	r2, #7
 80018be:	4393      	bics	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018cc:	f7ff f98a 	bl	8000be4 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f985 	bl	8000be4 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_RCC_ClockConfig+0x1f4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e054      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2238      	movs	r2, #56	; 0x38
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1ec      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2207      	movs	r2, #7
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d21e      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2207      	movs	r2, #7
 8001910:	4393      	bics	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800191c:	f7ff f962 	bl	8000be4 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001924:	e009      	b.n	800193a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	f7ff f95d 	bl	8000be4 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e02c      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_RCC_ClockConfig+0x1f0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2207      	movs	r2, #7
 8001940:	4013      	ands	r3, r2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2204      	movs	r2, #4
 800194e:	4013      	ands	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_RCC_ClockConfig+0x200>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001966:	f000 f829 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800196a:	0001      	movs	r1, r0
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_RCC_ClockConfig+0x1f8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	220f      	movs	r2, #15
 8001974:	401a      	ands	r2, r3
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x204>)
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	58d3      	ldr	r3, [r2, r3]
 800197c:	221f      	movs	r2, #31
 800197e:	4013      	ands	r3, r2
 8001980:	000a      	movs	r2, r1
 8001982:	40da      	lsrs	r2, r3
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x208>)
 8001986:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_ClockConfig+0x20c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff f8cf 	bl	8000b30 <HAL_InitTick>
 8001992:	0003      	movs	r3, r0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40022000 	.word	0x40022000
 80019a0:	00001388 	.word	0x00001388
 80019a4:	40021000 	.word	0x40021000
 80019a8:	fffff0ff 	.word	0xfffff0ff
 80019ac:	ffff8fff 	.word	0xffff8fff
 80019b0:	08003664 	.word	0x08003664
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2238      	movs	r2, #56	; 0x38
 80019c8:	4013      	ands	r3, r2
 80019ca:	d10f      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019cc:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0adb      	lsrs	r3, r3, #11
 80019d2:	2207      	movs	r2, #7
 80019d4:	4013      	ands	r3, r2
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	0013      	movs	r3, r2
 80019dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	4835      	ldr	r0, [pc, #212]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019e2:	f7fe fb8f 	bl	8000104 <__udivsi3>
 80019e6:	0003      	movs	r3, r0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	e05d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2238      	movs	r2, #56	; 0x38
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_GetSysClockFreq+0x100>)
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	e054      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019fe:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2238      	movs	r2, #56	; 0x38
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d138      	bne.n	8001a7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d10d      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	4824      	ldr	r0, [pc, #144]	; (8001abc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a2c:	f7fe fb6a 	bl	8000104 <__udivsi3>
 8001a30:	0003      	movs	r3, r0
 8001a32:	0019      	movs	r1, r3
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	227f      	movs	r2, #127	; 0x7f
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	434b      	muls	r3, r1
 8001a40:	617b      	str	r3, [r7, #20]
        break;
 8001a42:	e00d      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	481c      	ldr	r0, [pc, #112]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a48:	f7fe fb5c 	bl	8000104 <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	227f      	movs	r2, #127	; 0x7f
 8001a58:	4013      	ands	r3, r2
 8001a5a:	434b      	muls	r3, r1
 8001a5c:	617b      	str	r3, [r7, #20]
        break;
 8001a5e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0f5b      	lsrs	r3, r3, #29
 8001a66:	2207      	movs	r2, #7
 8001a68:	4013      	ands	r3, r2
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	6978      	ldr	r0, [r7, #20]
 8001a72:	f7fe fb47 	bl	8000104 <__udivsi3>
 8001a76:	0003      	movs	r3, r0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e015      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2238      	movs	r2, #56	; 0x38
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d103      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2238      	movs	r2, #56	; 0x38
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b18      	cmp	r3, #24
 8001a9a:	d103      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a9c:	23fa      	movs	r3, #250	; 0xfa
 8001a9e:	01db      	lsls	r3, r3, #7
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e001      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001aa8:	693b      	ldr	r3, [r7, #16]
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b006      	add	sp, #24
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b5b0      	push	{r4, r5, r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	0004      	movs	r4, r0
 8001ade:	f7ff fb39 	bl	8001154 <LL_RCC_GetAPB1Prescaler>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	0b1a      	lsrs	r2, r3, #12
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	58d3      	ldr	r3, [r2, r3]
 8001aec:	221f      	movs	r2, #31
 8001aee:	4013      	ands	r3, r2
 8001af0:	40dc      	lsrs	r4, r3
 8001af2:	0023      	movs	r3, r4
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	080036a4 	.word	0x080036a4

08001b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b08:	2313      	movs	r3, #19
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b10:	2312      	movs	r3, #18
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	4013      	ands	r3, r2
 8001b22:	d100      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b24:	e0a4      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2311      	movs	r3, #17
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4bc3      	ldr	r3, [pc, #780]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	055b      	lsls	r3, r3, #21
 8001b36:	4013      	ands	r3, r2
 8001b38:	d111      	bne.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4bc0      	ldr	r3, [pc, #768]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3e:	4bbf      	ldr	r3, [pc, #764]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0549      	lsls	r1, r1, #21
 8001b44:	430a      	orrs	r2, r1
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b48:	4bbc      	ldr	r3, [pc, #752]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	055b      	lsls	r3, r3, #21
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2311      	movs	r3, #17
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b5e:	4bb8      	ldr	r3, [pc, #736]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4bb7      	ldr	r3, [pc, #732]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0049      	lsls	r1, r1, #1
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f83a 	bl	8000be4 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b74:	e00b      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff f835 	bl	8000be4 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d904      	bls.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001b84:	2313      	movs	r3, #19
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2203      	movs	r2, #3
 8001b8a:	701a      	strb	r2, [r3, #0]
        break;
 8001b8c:	e005      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b8e:	4bac      	ldr	r3, [pc, #688]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0ed      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001b9a:	2313      	movs	r3, #19
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d154      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ba4:	4ba5      	ldr	r3, [pc, #660]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d014      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bc0:	4b9e      	ldr	r3, [pc, #632]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	4a9f      	ldr	r2, [pc, #636]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bca:	4b9c      	ldr	r3, [pc, #624]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bce:	4b9b      	ldr	r3, [pc, #620]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	0249      	lsls	r1, r1, #9
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bd8:	4b98      	ldr	r3, [pc, #608]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bdc:	4b97      	ldr	r3, [pc, #604]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bde:	499a      	ldr	r1, [pc, #616]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001be4:	4b95      	ldr	r3, [pc, #596]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fff7 	bl	8000be4 <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	e00c      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7fe fff2 	bl	8000be4 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4a91      	ldr	r2, [pc, #580]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d904      	bls.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001c0c:	2313      	movs	r3, #19
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2203      	movs	r2, #3
 8001c12:	701a      	strb	r2, [r3, #0]
            break;
 8001c14:	e004      	b.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d0ed      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001c20:	2313      	movs	r3, #19
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c2a:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2e:	4a85      	ldr	r2, [pc, #532]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c38:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c3e:	e00c      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c40:	2312      	movs	r3, #18
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2213      	movs	r2, #19
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	e005      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2213      	movs	r2, #19
 8001c54:	18ba      	adds	r2, r7, r2
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c5a:	2311      	movs	r3, #17
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c68:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c6a:	4979      	ldr	r1, [pc, #484]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4013      	ands	r3, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c7a:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	2203      	movs	r2, #3
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cf6:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	4013      	ands	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d14:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	01db      	lsls	r3, r3, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	d015      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d34:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	0899      	lsrs	r1, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d106      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0249      	lsls	r1, r1, #9
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	031b      	lsls	r3, r3, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	2240      	movs	r2, #64	; 0x40
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	039b      	lsls	r3, r3, #14
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d016      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	4a34      	ldr	r2, [pc, #208]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	03db      	lsls	r3, r3, #15
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d106      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0449      	lsls	r1, r1, #17
 8001db6:	430a      	orrs	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	03db      	lsls	r3, r3, #15
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	045b      	lsls	r3, r3, #17
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d106      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	0449      	lsls	r1, r1, #17
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d016      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0249      	lsls	r1, r1, #9
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40007000 	.word	0x40007000
 8001e44:	fffffcff 	.word	0xfffffcff
 8001e48:	fffeffff 	.word	0xfffeffff
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	efffffff 	.word	0xefffffff
 8001e54:	fffff3ff 	.word	0xfffff3ff
 8001e58:	fff3ffff 	.word	0xfff3ffff
 8001e5c:	ffcfffff 	.word	0xffcfffff
 8001e60:	ffffcfff 	.word	0xffffcfff
 8001e64:	ffbfffff 	.word	0xffbfffff
 8001e68:	feffffff 	.word	0xfeffffff
 8001e6c:	ffff3fff 	.word	0xffff3fff

08001e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e046      	b.n	8001f10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	589b      	ldr	r3, [r3, r2]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	227c      	movs	r2, #124	; 0x7c
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7fe fd90 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	2124      	movs	r1, #36	; 0x24
 8001ea2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f830 	bl	8001f1c <UART_SetConfig>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e024      	b.n	8001f10 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f001 f917 	bl	8003104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	490d      	ldr	r1, [pc, #52]	; (8001f18 <HAL_UART_Init+0xa8>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	212a      	movs	r1, #42	; 0x2a
 8001ef2:	438a      	bics	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f001 f9af 	bl	800326c <UART_CheckIdleState>
 8001f0e:	0003      	movs	r3, r0
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	ffffb7ff 	.word	0xffffb7ff

08001f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b0a1      	sub	sp, #132	; 0x84
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f28:	231b      	movs	r3, #27
 8001f2a:	2258      	movs	r2, #88	; 0x58
 8001f2c:	18ba      	adds	r2, r7, r2
 8001f2e:	18d2      	adds	r2, r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8001f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f56:	4313      	orrs	r3, r2
 8001f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4bba      	ldr	r3, [pc, #744]	; (800224c <UART_SetConfig+0x330>)
 8001f62:	401a      	ands	r2, r3
 8001f64:	0011      	movs	r1, r2
 8001f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4bb6      	ldr	r3, [pc, #728]	; (8002250 <UART_SetConfig+0x334>)
 8001f78:	401a      	ands	r2, r3
 8001f7a:	0010      	movs	r0, r2
 8001f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7e:	68d9      	ldr	r1, [r3, #12]
 8001f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	0003      	movs	r3, r0
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4baf      	ldr	r3, [pc, #700]	; (8002254 <UART_SetConfig+0x338>)
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d004      	beq.n	8001fa4 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4bab      	ldr	r3, [pc, #684]	; (8002258 <UART_SetConfig+0x33c>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	0011      	movs	r1, r2
 8001fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	439a      	bics	r2, r3
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	0003      	movs	r3, r0
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4ba0      	ldr	r3, [pc, #640]	; (800225c <UART_SetConfig+0x340>)
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d12f      	bne.n	800203e <UART_SetConfig+0x122>
 8001fde:	4ba0      	ldr	r3, [pc, #640]	; (8002260 <UART_SetConfig+0x344>)
 8001fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d013      	beq.n	8002012 <UART_SetConfig+0xf6>
 8001fea:	d304      	bcc.n	8001ff6 <UART_SetConfig+0xda>
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d009      	beq.n	8002004 <UART_SetConfig+0xe8>
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d015      	beq.n	8002020 <UART_SetConfig+0x104>
 8001ff4:	e01b      	b.n	800202e <UART_SetConfig+0x112>
 8001ff6:	2323      	movs	r3, #35	; 0x23
 8001ff8:	2258      	movs	r2, #88	; 0x58
 8001ffa:	18ba      	adds	r2, r7, r2
 8001ffc:	18d2      	adds	r2, r2, r3
 8001ffe:	2300      	movs	r3, #0
 8002000:	7013      	strb	r3, [r2, #0]
 8002002:	e0b4      	b.n	800216e <UART_SetConfig+0x252>
 8002004:	2323      	movs	r3, #35	; 0x23
 8002006:	2258      	movs	r2, #88	; 0x58
 8002008:	18ba      	adds	r2, r7, r2
 800200a:	18d2      	adds	r2, r2, r3
 800200c:	2302      	movs	r3, #2
 800200e:	7013      	strb	r3, [r2, #0]
 8002010:	e0ad      	b.n	800216e <UART_SetConfig+0x252>
 8002012:	2323      	movs	r3, #35	; 0x23
 8002014:	2258      	movs	r2, #88	; 0x58
 8002016:	18ba      	adds	r2, r7, r2
 8002018:	18d2      	adds	r2, r2, r3
 800201a:	2304      	movs	r3, #4
 800201c:	7013      	strb	r3, [r2, #0]
 800201e:	e0a6      	b.n	800216e <UART_SetConfig+0x252>
 8002020:	2323      	movs	r3, #35	; 0x23
 8002022:	2258      	movs	r2, #88	; 0x58
 8002024:	18ba      	adds	r2, r7, r2
 8002026:	18d2      	adds	r2, r2, r3
 8002028:	2308      	movs	r3, #8
 800202a:	7013      	strb	r3, [r2, #0]
 800202c:	e09f      	b.n	800216e <UART_SetConfig+0x252>
 800202e:	2323      	movs	r3, #35	; 0x23
 8002030:	2258      	movs	r2, #88	; 0x58
 8002032:	18ba      	adds	r2, r7, r2
 8002034:	18d2      	adds	r2, r2, r3
 8002036:	2310      	movs	r3, #16
 8002038:	7013      	strb	r3, [r2, #0]
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	e097      	b.n	800216e <UART_SetConfig+0x252>
 800203e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b88      	ldr	r3, [pc, #544]	; (8002264 <UART_SetConfig+0x348>)
 8002044:	429a      	cmp	r2, r3
 8002046:	d132      	bne.n	80020ae <UART_SetConfig+0x192>
 8002048:	4b85      	ldr	r3, [pc, #532]	; (8002260 <UART_SetConfig+0x344>)
 800204a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800204c:	230c      	movs	r3, #12
 800204e:	4013      	ands	r3, r2
 8002050:	2b04      	cmp	r3, #4
 8002052:	d016      	beq.n	8002082 <UART_SetConfig+0x166>
 8002054:	d802      	bhi.n	800205c <UART_SetConfig+0x140>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <UART_SetConfig+0x14a>
 800205a:	e020      	b.n	800209e <UART_SetConfig+0x182>
 800205c:	2b08      	cmp	r3, #8
 800205e:	d009      	beq.n	8002074 <UART_SetConfig+0x158>
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d015      	beq.n	8002090 <UART_SetConfig+0x174>
 8002064:	e01b      	b.n	800209e <UART_SetConfig+0x182>
 8002066:	2323      	movs	r3, #35	; 0x23
 8002068:	2258      	movs	r2, #88	; 0x58
 800206a:	18ba      	adds	r2, r7, r2
 800206c:	18d2      	adds	r2, r2, r3
 800206e:	2300      	movs	r3, #0
 8002070:	7013      	strb	r3, [r2, #0]
 8002072:	e07c      	b.n	800216e <UART_SetConfig+0x252>
 8002074:	2323      	movs	r3, #35	; 0x23
 8002076:	2258      	movs	r2, #88	; 0x58
 8002078:	18ba      	adds	r2, r7, r2
 800207a:	18d2      	adds	r2, r2, r3
 800207c:	2302      	movs	r3, #2
 800207e:	7013      	strb	r3, [r2, #0]
 8002080:	e075      	b.n	800216e <UART_SetConfig+0x252>
 8002082:	2323      	movs	r3, #35	; 0x23
 8002084:	2258      	movs	r2, #88	; 0x58
 8002086:	18ba      	adds	r2, r7, r2
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	2304      	movs	r3, #4
 800208c:	7013      	strb	r3, [r2, #0]
 800208e:	e06e      	b.n	800216e <UART_SetConfig+0x252>
 8002090:	2323      	movs	r3, #35	; 0x23
 8002092:	2258      	movs	r2, #88	; 0x58
 8002094:	18ba      	adds	r2, r7, r2
 8002096:	18d2      	adds	r2, r2, r3
 8002098:	2308      	movs	r3, #8
 800209a:	7013      	strb	r3, [r2, #0]
 800209c:	e067      	b.n	800216e <UART_SetConfig+0x252>
 800209e:	2323      	movs	r3, #35	; 0x23
 80020a0:	2258      	movs	r2, #88	; 0x58
 80020a2:	18ba      	adds	r2, r7, r2
 80020a4:	18d2      	adds	r2, r2, r3
 80020a6:	2310      	movs	r3, #16
 80020a8:	7013      	strb	r3, [r2, #0]
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	e05f      	b.n	800216e <UART_SetConfig+0x252>
 80020ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <UART_SetConfig+0x34c>)
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <UART_SetConfig+0x1aa>
 80020b8:	2323      	movs	r3, #35	; 0x23
 80020ba:	2258      	movs	r2, #88	; 0x58
 80020bc:	18ba      	adds	r2, r7, r2
 80020be:	18d2      	adds	r2, r2, r3
 80020c0:	2300      	movs	r3, #0
 80020c2:	7013      	strb	r3, [r2, #0]
 80020c4:	e053      	b.n	800216e <UART_SetConfig+0x252>
 80020c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <UART_SetConfig+0x350>)
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <UART_SetConfig+0x1c2>
 80020d0:	2323      	movs	r3, #35	; 0x23
 80020d2:	2258      	movs	r2, #88	; 0x58
 80020d4:	18ba      	adds	r2, r7, r2
 80020d6:	18d2      	adds	r2, r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	7013      	strb	r3, [r2, #0]
 80020dc:	e047      	b.n	800216e <UART_SetConfig+0x252>
 80020de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <UART_SetConfig+0x338>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d13c      	bne.n	8002162 <UART_SetConfig+0x246>
 80020e8:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <UART_SetConfig+0x344>)
 80020ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	401a      	ands	r2, r3
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d01d      	beq.n	8002136 <UART_SetConfig+0x21a>
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	429a      	cmp	r2, r3
 8002100:	d802      	bhi.n	8002108 <UART_SetConfig+0x1ec>
 8002102:	2a00      	cmp	r2, #0
 8002104:	d009      	beq.n	800211a <UART_SetConfig+0x1fe>
 8002106:	e024      	b.n	8002152 <UART_SetConfig+0x236>
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	429a      	cmp	r2, r3
 800210e:	d00b      	beq.n	8002128 <UART_SetConfig+0x20c>
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	429a      	cmp	r2, r3
 8002116:	d015      	beq.n	8002144 <UART_SetConfig+0x228>
 8002118:	e01b      	b.n	8002152 <UART_SetConfig+0x236>
 800211a:	2323      	movs	r3, #35	; 0x23
 800211c:	2258      	movs	r2, #88	; 0x58
 800211e:	18ba      	adds	r2, r7, r2
 8002120:	18d2      	adds	r2, r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	7013      	strb	r3, [r2, #0]
 8002126:	e022      	b.n	800216e <UART_SetConfig+0x252>
 8002128:	2323      	movs	r3, #35	; 0x23
 800212a:	2258      	movs	r2, #88	; 0x58
 800212c:	18ba      	adds	r2, r7, r2
 800212e:	18d2      	adds	r2, r2, r3
 8002130:	2302      	movs	r3, #2
 8002132:	7013      	strb	r3, [r2, #0]
 8002134:	e01b      	b.n	800216e <UART_SetConfig+0x252>
 8002136:	2323      	movs	r3, #35	; 0x23
 8002138:	2258      	movs	r2, #88	; 0x58
 800213a:	18ba      	adds	r2, r7, r2
 800213c:	18d2      	adds	r2, r2, r3
 800213e:	2304      	movs	r3, #4
 8002140:	7013      	strb	r3, [r2, #0]
 8002142:	e014      	b.n	800216e <UART_SetConfig+0x252>
 8002144:	2323      	movs	r3, #35	; 0x23
 8002146:	2258      	movs	r2, #88	; 0x58
 8002148:	18ba      	adds	r2, r7, r2
 800214a:	18d2      	adds	r2, r2, r3
 800214c:	2308      	movs	r3, #8
 800214e:	7013      	strb	r3, [r2, #0]
 8002150:	e00d      	b.n	800216e <UART_SetConfig+0x252>
 8002152:	2323      	movs	r3, #35	; 0x23
 8002154:	2258      	movs	r2, #88	; 0x58
 8002156:	18ba      	adds	r2, r7, r2
 8002158:	18d2      	adds	r2, r2, r3
 800215a:	2310      	movs	r3, #16
 800215c:	7013      	strb	r3, [r2, #0]
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	e005      	b.n	800216e <UART_SetConfig+0x252>
 8002162:	2323      	movs	r3, #35	; 0x23
 8002164:	2258      	movs	r2, #88	; 0x58
 8002166:	18ba      	adds	r2, r7, r2
 8002168:	18d2      	adds	r2, r2, r3
 800216a:	2310      	movs	r3, #16
 800216c:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800216e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <UART_SetConfig+0x338>)
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <UART_SetConfig+0x260>
 8002178:	f000 fbd0 	bl	800291c <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800217c:	2323      	movs	r3, #35	; 0x23
 800217e:	2258      	movs	r2, #88	; 0x58
 8002180:	4694      	mov	ip, r2
 8002182:	44bc      	add	ip, r7
 8002184:	4463      	add	r3, ip
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d100      	bne.n	800218e <UART_SetConfig+0x272>
 800218c:	e070      	b.n	8002270 <UART_SetConfig+0x354>
 800218e:	dc02      	bgt.n	8002196 <UART_SetConfig+0x27a>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <UART_SetConfig+0x288>
 8002194:	e15f      	b.n	8002456 <UART_SetConfig+0x53a>
 8002196:	2b04      	cmp	r3, #4
 8002198:	d100      	bne.n	800219c <UART_SetConfig+0x280>
 800219a:	e0b4      	b.n	8002306 <UART_SetConfig+0x3ea>
 800219c:	2b08      	cmp	r3, #8
 800219e:	d100      	bne.n	80021a2 <UART_SetConfig+0x286>
 80021a0:	e105      	b.n	80023ae <UART_SetConfig+0x492>
 80021a2:	e158      	b.n	8002456 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80021a4:	f7ff fc96 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 80021a8:	0002      	movs	r2, r0
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d044      	beq.n	800223c <UART_SetConfig+0x320>
 80021b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d03e      	beq.n	8002238 <UART_SetConfig+0x31c>
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d038      	beq.n	8002234 <UART_SetConfig+0x318>
 80021c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d032      	beq.n	8002230 <UART_SetConfig+0x314>
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d02c      	beq.n	800222c <UART_SetConfig+0x310>
 80021d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d026      	beq.n	8002228 <UART_SetConfig+0x30c>
 80021da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d020      	beq.n	8002224 <UART_SetConfig+0x308>
 80021e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	d01a      	beq.n	8002220 <UART_SetConfig+0x304>
 80021ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d014      	beq.n	800221c <UART_SetConfig+0x300>
 80021f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	d00e      	beq.n	8002218 <UART_SetConfig+0x2fc>
 80021fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d008      	beq.n	8002214 <UART_SetConfig+0x2f8>
 8002202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b0b      	cmp	r3, #11
 8002208:	d102      	bne.n	8002210 <UART_SetConfig+0x2f4>
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	e016      	b.n	800223e <UART_SetConfig+0x322>
 8002210:	2301      	movs	r3, #1
 8002212:	e014      	b.n	800223e <UART_SetConfig+0x322>
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	e012      	b.n	800223e <UART_SetConfig+0x322>
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	e010      	b.n	800223e <UART_SetConfig+0x322>
 800221c:	2320      	movs	r3, #32
 800221e:	e00e      	b.n	800223e <UART_SetConfig+0x322>
 8002220:	2310      	movs	r3, #16
 8002222:	e00c      	b.n	800223e <UART_SetConfig+0x322>
 8002224:	230c      	movs	r3, #12
 8002226:	e00a      	b.n	800223e <UART_SetConfig+0x322>
 8002228:	230a      	movs	r3, #10
 800222a:	e008      	b.n	800223e <UART_SetConfig+0x322>
 800222c:	2308      	movs	r3, #8
 800222e:	e006      	b.n	800223e <UART_SetConfig+0x322>
 8002230:	2306      	movs	r3, #6
 8002232:	e004      	b.n	800223e <UART_SetConfig+0x322>
 8002234:	2304      	movs	r3, #4
 8002236:	e002      	b.n	800223e <UART_SetConfig+0x322>
 8002238:	2302      	movs	r3, #2
 800223a:	e000      	b.n	800223e <UART_SetConfig+0x322>
 800223c:	2301      	movs	r3, #1
 800223e:	0019      	movs	r1, r3
 8002240:	0010      	movs	r0, r2
 8002242:	f7fd ff5f 	bl	8000104 <__udivsi3>
 8002246:	0003      	movs	r3, r0
 8002248:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800224a:	e10b      	b.n	8002464 <UART_SetConfig+0x548>
 800224c:	cfff69f3 	.word	0xcfff69f3
 8002250:	ffffcfff 	.word	0xffffcfff
 8002254:	40008000 	.word	0x40008000
 8002258:	11fff4ff 	.word	0x11fff4ff
 800225c:	40013800 	.word	0x40013800
 8002260:	40021000 	.word	0x40021000
 8002264:	40004400 	.word	0x40004400
 8002268:	40004800 	.word	0x40004800
 800226c:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <UART_SetConfig+0x3e4>
 8002278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b01      	cmp	r3, #1
 800227e:	d03d      	beq.n	80022fc <UART_SetConfig+0x3e0>
 8002280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b02      	cmp	r3, #2
 8002286:	d037      	beq.n	80022f8 <UART_SetConfig+0x3dc>
 8002288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b03      	cmp	r3, #3
 800228e:	d031      	beq.n	80022f4 <UART_SetConfig+0x3d8>
 8002290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2b04      	cmp	r3, #4
 8002296:	d02b      	beq.n	80022f0 <UART_SetConfig+0x3d4>
 8002298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b05      	cmp	r3, #5
 800229e:	d025      	beq.n	80022ec <UART_SetConfig+0x3d0>
 80022a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	d01f      	beq.n	80022e8 <UART_SetConfig+0x3cc>
 80022a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d019      	beq.n	80022e4 <UART_SetConfig+0x3c8>
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d013      	beq.n	80022e0 <UART_SetConfig+0x3c4>
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2b09      	cmp	r3, #9
 80022be:	d00d      	beq.n	80022dc <UART_SetConfig+0x3c0>
 80022c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2b0a      	cmp	r3, #10
 80022c6:	d007      	beq.n	80022d8 <UART_SetConfig+0x3bc>
 80022c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2b0b      	cmp	r3, #11
 80022ce:	d101      	bne.n	80022d4 <UART_SetConfig+0x3b8>
 80022d0:	4bab      	ldr	r3, [pc, #684]	; (8002580 <UART_SetConfig+0x664>)
 80022d2:	e016      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022d4:	4bab      	ldr	r3, [pc, #684]	; (8002584 <UART_SetConfig+0x668>)
 80022d6:	e014      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022d8:	4bab      	ldr	r3, [pc, #684]	; (8002588 <UART_SetConfig+0x66c>)
 80022da:	e012      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022dc:	4bab      	ldr	r3, [pc, #684]	; (800258c <UART_SetConfig+0x670>)
 80022de:	e010      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022e0:	4bab      	ldr	r3, [pc, #684]	; (8002590 <UART_SetConfig+0x674>)
 80022e2:	e00e      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022e4:	4bab      	ldr	r3, [pc, #684]	; (8002594 <UART_SetConfig+0x678>)
 80022e6:	e00c      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022e8:	4bab      	ldr	r3, [pc, #684]	; (8002598 <UART_SetConfig+0x67c>)
 80022ea:	e00a      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022ec:	4bab      	ldr	r3, [pc, #684]	; (800259c <UART_SetConfig+0x680>)
 80022ee:	e008      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022f0:	4bab      	ldr	r3, [pc, #684]	; (80025a0 <UART_SetConfig+0x684>)
 80022f2:	e006      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022f4:	4bab      	ldr	r3, [pc, #684]	; (80025a4 <UART_SetConfig+0x688>)
 80022f6:	e004      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022f8:	4bab      	ldr	r3, [pc, #684]	; (80025a8 <UART_SetConfig+0x68c>)
 80022fa:	e002      	b.n	8002302 <UART_SetConfig+0x3e6>
 80022fc:	4bab      	ldr	r3, [pc, #684]	; (80025ac <UART_SetConfig+0x690>)
 80022fe:	e000      	b.n	8002302 <UART_SetConfig+0x3e6>
 8002300:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <UART_SetConfig+0x668>)
 8002302:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002304:	e0ae      	b.n	8002464 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002306:	f7ff fb59 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800230a:	0002      	movs	r2, r0
 800230c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d044      	beq.n	800239e <UART_SetConfig+0x482>
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d03e      	beq.n	800239a <UART_SetConfig+0x47e>
 800231c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b02      	cmp	r3, #2
 8002322:	d038      	beq.n	8002396 <UART_SetConfig+0x47a>
 8002324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2b03      	cmp	r3, #3
 800232a:	d032      	beq.n	8002392 <UART_SetConfig+0x476>
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2b04      	cmp	r3, #4
 8002332:	d02c      	beq.n	800238e <UART_SetConfig+0x472>
 8002334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b05      	cmp	r3, #5
 800233a:	d026      	beq.n	800238a <UART_SetConfig+0x46e>
 800233c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b06      	cmp	r3, #6
 8002342:	d020      	beq.n	8002386 <UART_SetConfig+0x46a>
 8002344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	2b07      	cmp	r3, #7
 800234a:	d01a      	beq.n	8002382 <UART_SetConfig+0x466>
 800234c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b08      	cmp	r3, #8
 8002352:	d014      	beq.n	800237e <UART_SetConfig+0x462>
 8002354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2b09      	cmp	r3, #9
 800235a:	d00e      	beq.n	800237a <UART_SetConfig+0x45e>
 800235c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b0a      	cmp	r3, #10
 8002362:	d008      	beq.n	8002376 <UART_SetConfig+0x45a>
 8002364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2b0b      	cmp	r3, #11
 800236a:	d102      	bne.n	8002372 <UART_SetConfig+0x456>
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	e016      	b.n	80023a0 <UART_SetConfig+0x484>
 8002372:	2301      	movs	r3, #1
 8002374:	e014      	b.n	80023a0 <UART_SetConfig+0x484>
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	e012      	b.n	80023a0 <UART_SetConfig+0x484>
 800237a:	2340      	movs	r3, #64	; 0x40
 800237c:	e010      	b.n	80023a0 <UART_SetConfig+0x484>
 800237e:	2320      	movs	r3, #32
 8002380:	e00e      	b.n	80023a0 <UART_SetConfig+0x484>
 8002382:	2310      	movs	r3, #16
 8002384:	e00c      	b.n	80023a0 <UART_SetConfig+0x484>
 8002386:	230c      	movs	r3, #12
 8002388:	e00a      	b.n	80023a0 <UART_SetConfig+0x484>
 800238a:	230a      	movs	r3, #10
 800238c:	e008      	b.n	80023a0 <UART_SetConfig+0x484>
 800238e:	2308      	movs	r3, #8
 8002390:	e006      	b.n	80023a0 <UART_SetConfig+0x484>
 8002392:	2306      	movs	r3, #6
 8002394:	e004      	b.n	80023a0 <UART_SetConfig+0x484>
 8002396:	2304      	movs	r3, #4
 8002398:	e002      	b.n	80023a0 <UART_SetConfig+0x484>
 800239a:	2302      	movs	r3, #2
 800239c:	e000      	b.n	80023a0 <UART_SetConfig+0x484>
 800239e:	2301      	movs	r3, #1
 80023a0:	0019      	movs	r1, r3
 80023a2:	0010      	movs	r0, r2
 80023a4:	f7fd feae 	bl	8000104 <__udivsi3>
 80023a8:	0003      	movs	r3, r0
 80023aa:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80023ac:	e05a      	b.n	8002464 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d04b      	beq.n	800244e <UART_SetConfig+0x532>
 80023b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d044      	beq.n	8002448 <UART_SetConfig+0x52c>
 80023be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d03d      	beq.n	8002442 <UART_SetConfig+0x526>
 80023c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d037      	beq.n	800243e <UART_SetConfig+0x522>
 80023ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d030      	beq.n	8002438 <UART_SetConfig+0x51c>
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d02a      	beq.n	8002434 <UART_SetConfig+0x518>
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d024      	beq.n	8002430 <UART_SetConfig+0x514>
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	d01d      	beq.n	800242a <UART_SetConfig+0x50e>
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d016      	beq.n	8002424 <UART_SetConfig+0x508>
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	2b09      	cmp	r3, #9
 80023fc:	d00f      	beq.n	800241e <UART_SetConfig+0x502>
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b0a      	cmp	r3, #10
 8002404:	d008      	beq.n	8002418 <UART_SetConfig+0x4fc>
 8002406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2b0b      	cmp	r3, #11
 800240c:	d101      	bne.n	8002412 <UART_SetConfig+0x4f6>
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	e01f      	b.n	8002452 <UART_SetConfig+0x536>
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	e01c      	b.n	8002452 <UART_SetConfig+0x536>
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	e019      	b.n	8002452 <UART_SetConfig+0x536>
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	e016      	b.n	8002452 <UART_SetConfig+0x536>
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	e013      	b.n	8002452 <UART_SetConfig+0x536>
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	e010      	b.n	8002452 <UART_SetConfig+0x536>
 8002430:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <UART_SetConfig+0x694>)
 8002432:	e00e      	b.n	8002452 <UART_SetConfig+0x536>
 8002434:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <UART_SetConfig+0x698>)
 8002436:	e00c      	b.n	8002452 <UART_SetConfig+0x536>
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	015b      	lsls	r3, r3, #5
 800243c:	e009      	b.n	8002452 <UART_SetConfig+0x536>
 800243e:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <UART_SetConfig+0x69c>)
 8002440:	e007      	b.n	8002452 <UART_SetConfig+0x536>
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	e004      	b.n	8002452 <UART_SetConfig+0x536>
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	01db      	lsls	r3, r3, #7
 800244c:	e001      	b.n	8002452 <UART_SetConfig+0x536>
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002454:	e006      	b.n	8002464 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002456:	231b      	movs	r3, #27
 8002458:	2258      	movs	r2, #88	; 0x58
 800245a:	18ba      	adds	r2, r7, r2
 800245c:	18d2      	adds	r2, r2, r3
 800245e:	2301      	movs	r3, #1
 8002460:	7013      	strb	r3, [r2, #0]
        break;
 8002462:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <UART_SetConfig+0x552>
 800246a:	f000 fe12 	bl	8003092 <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	0013      	movs	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	189a      	adds	r2, r3, r2
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	4293      	cmp	r3, r2
 800247c:	d305      	bcc.n	800248a <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	4293      	cmp	r3, r2
 8002488:	d908      	bls.n	800249c <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 800248a:	231b      	movs	r3, #27
 800248c:	2258      	movs	r2, #88	; 0x58
 800248e:	4694      	mov	ip, r2
 8002490:	44bc      	add	ip, r7
 8002492:	4463      	add	r3, ip
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	f000 fdfb 	bl	8003092 <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 800249c:	2323      	movs	r3, #35	; 0x23
 800249e:	2258      	movs	r2, #88	; 0x58
 80024a0:	4694      	mov	ip, r2
 80024a2:	44bc      	add	ip, r7
 80024a4:	4463      	add	r3, ip
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d100      	bne.n	80024ae <UART_SetConfig+0x592>
 80024ac:	e0ab      	b.n	8002606 <UART_SetConfig+0x6ea>
 80024ae:	dc02      	bgt.n	80024b6 <UART_SetConfig+0x59a>
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <UART_SetConfig+0x5a8>
 80024b4:	e213      	b.n	80028de <UART_SetConfig+0x9c2>
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d100      	bne.n	80024bc <UART_SetConfig+0x5a0>
 80024ba:	e111      	b.n	80026e0 <UART_SetConfig+0x7c4>
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d100      	bne.n	80024c2 <UART_SetConfig+0x5a6>
 80024c0:	e196      	b.n	80027f0 <UART_SetConfig+0x8d4>
 80024c2:	e20c      	b.n	80028de <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80024c4:	f7ff fb06 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 80024c8:	0003      	movs	r3, r0
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80024d0:	2300      	movs	r3, #0
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d100      	bne.n	80024de <UART_SetConfig+0x5c2>
 80024dc:	e06e      	b.n	80025bc <UART_SetConfig+0x6a0>
 80024de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d049      	beq.n	800257a <UART_SetConfig+0x65e>
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d042      	beq.n	8002574 <UART_SetConfig+0x658>
 80024ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d03b      	beq.n	800256e <UART_SetConfig+0x652>
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d034      	beq.n	8002568 <UART_SetConfig+0x64c>
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	2b05      	cmp	r3, #5
 8002504:	d02d      	beq.n	8002562 <UART_SetConfig+0x646>
 8002506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b06      	cmp	r3, #6
 800250c:	d026      	beq.n	800255c <UART_SetConfig+0x640>
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b07      	cmp	r3, #7
 8002514:	d01f      	beq.n	8002556 <UART_SetConfig+0x63a>
 8002516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b08      	cmp	r3, #8
 800251c:	d018      	beq.n	8002550 <UART_SetConfig+0x634>
 800251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2b09      	cmp	r3, #9
 8002524:	d011      	beq.n	800254a <UART_SetConfig+0x62e>
 8002526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d00a      	beq.n	8002544 <UART_SetConfig+0x628>
 800252e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	2b0b      	cmp	r3, #11
 8002534:	d103      	bne.n	800253e <UART_SetConfig+0x622>
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2400      	movs	r4, #0
 800253c:	e040      	b.n	80025c0 <UART_SetConfig+0x6a4>
 800253e:	2301      	movs	r3, #1
 8002540:	2400      	movs	r4, #0
 8002542:	e03d      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	2400      	movs	r4, #0
 8002548:	e03a      	b.n	80025c0 <UART_SetConfig+0x6a4>
 800254a:	2340      	movs	r3, #64	; 0x40
 800254c:	2400      	movs	r4, #0
 800254e:	e037      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002550:	2320      	movs	r3, #32
 8002552:	2400      	movs	r4, #0
 8002554:	e034      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002556:	2310      	movs	r3, #16
 8002558:	2400      	movs	r4, #0
 800255a:	e031      	b.n	80025c0 <UART_SetConfig+0x6a4>
 800255c:	230c      	movs	r3, #12
 800255e:	2400      	movs	r4, #0
 8002560:	e02e      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002562:	230a      	movs	r3, #10
 8002564:	2400      	movs	r4, #0
 8002566:	e02b      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002568:	2308      	movs	r3, #8
 800256a:	2400      	movs	r4, #0
 800256c:	e028      	b.n	80025c0 <UART_SetConfig+0x6a4>
 800256e:	2306      	movs	r3, #6
 8002570:	2400      	movs	r4, #0
 8002572:	e025      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002574:	2304      	movs	r3, #4
 8002576:	2400      	movs	r4, #0
 8002578:	e022      	b.n	80025c0 <UART_SetConfig+0x6a4>
 800257a:	2302      	movs	r3, #2
 800257c:	2400      	movs	r4, #0
 800257e:	e01f      	b.n	80025c0 <UART_SetConfig+0x6a4>
 8002580:	0000f424 	.word	0x0000f424
 8002584:	00f42400 	.word	0x00f42400
 8002588:	0001e848 	.word	0x0001e848
 800258c:	0003d090 	.word	0x0003d090
 8002590:	0007a120 	.word	0x0007a120
 8002594:	000f4240 	.word	0x000f4240
 8002598:	00145855 	.word	0x00145855
 800259c:	00186a00 	.word	0x00186a00
 80025a0:	001e8480 	.word	0x001e8480
 80025a4:	0028b0aa 	.word	0x0028b0aa
 80025a8:	003d0900 	.word	0x003d0900
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	00000aaa 	.word	0x00000aaa
 80025b4:	00000ccc 	.word	0x00000ccc
 80025b8:	00001555 	.word	0x00001555
 80025bc:	2301      	movs	r3, #1
 80025be:	2400      	movs	r4, #0
 80025c0:	001a      	movs	r2, r3
 80025c2:	0023      	movs	r3, r4
 80025c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80025c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025c8:	f7fd ff12 	bl	80003f0 <__aeabi_uldivmod>
 80025cc:	0003      	movs	r3, r0
 80025ce:	000c      	movs	r4, r1
 80025d0:	0e1a      	lsrs	r2, r3, #24
 80025d2:	0226      	lsls	r6, r4, #8
 80025d4:	4316      	orrs	r6, r2
 80025d6:	021d      	lsls	r5, r3, #8
 80025d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	643b      	str	r3, [r7, #64]	; 0x40
 80025e0:	2300      	movs	r3, #0
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80025e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80025e8:	1940      	adds	r0, r0, r5
 80025ea:	4171      	adcs	r1, r6
 80025ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025f2:	2300      	movs	r3, #0
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	f7fd fef9 	bl	80003f0 <__aeabi_uldivmod>
 80025fe:	0003      	movs	r3, r0
 8002600:	000c      	movs	r4, r1
 8002602:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8002604:	e173      	b.n	80028ee <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04f      	beq.n	80026ae <UART_SetConfig+0x792>
 800260e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b01      	cmp	r3, #1
 8002614:	d048      	beq.n	80026a8 <UART_SetConfig+0x78c>
 8002616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b02      	cmp	r3, #2
 800261c:	d041      	beq.n	80026a2 <UART_SetConfig+0x786>
 800261e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b03      	cmp	r3, #3
 8002624:	d03a      	beq.n	800269c <UART_SetConfig+0x780>
 8002626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b04      	cmp	r3, #4
 800262c:	d033      	beq.n	8002696 <UART_SetConfig+0x77a>
 800262e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b05      	cmp	r3, #5
 8002634:	d02c      	beq.n	8002690 <UART_SetConfig+0x774>
 8002636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b06      	cmp	r3, #6
 800263c:	d025      	beq.n	800268a <UART_SetConfig+0x76e>
 800263e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2b07      	cmp	r3, #7
 8002644:	d01e      	beq.n	8002684 <UART_SetConfig+0x768>
 8002646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b08      	cmp	r3, #8
 800264c:	d017      	beq.n	800267e <UART_SetConfig+0x762>
 800264e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b09      	cmp	r3, #9
 8002654:	d010      	beq.n	8002678 <UART_SetConfig+0x75c>
 8002656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d009      	beq.n	8002672 <UART_SetConfig+0x756>
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b0b      	cmp	r3, #11
 8002664:	d102      	bne.n	800266c <UART_SetConfig+0x750>
 8002666:	4bbb      	ldr	r3, [pc, #748]	; (8002954 <UART_SetConfig+0xa38>)
 8002668:	2400      	movs	r4, #0
 800266a:	e022      	b.n	80026b2 <UART_SetConfig+0x796>
 800266c:	4bba      	ldr	r3, [pc, #744]	; (8002958 <UART_SetConfig+0xa3c>)
 800266e:	2400      	movs	r4, #0
 8002670:	e01f      	b.n	80026b2 <UART_SetConfig+0x796>
 8002672:	4bba      	ldr	r3, [pc, #744]	; (800295c <UART_SetConfig+0xa40>)
 8002674:	2400      	movs	r4, #0
 8002676:	e01c      	b.n	80026b2 <UART_SetConfig+0x796>
 8002678:	4bb9      	ldr	r3, [pc, #740]	; (8002960 <UART_SetConfig+0xa44>)
 800267a:	2400      	movs	r4, #0
 800267c:	e019      	b.n	80026b2 <UART_SetConfig+0x796>
 800267e:	4bb9      	ldr	r3, [pc, #740]	; (8002964 <UART_SetConfig+0xa48>)
 8002680:	2400      	movs	r4, #0
 8002682:	e016      	b.n	80026b2 <UART_SetConfig+0x796>
 8002684:	4bb8      	ldr	r3, [pc, #736]	; (8002968 <UART_SetConfig+0xa4c>)
 8002686:	2400      	movs	r4, #0
 8002688:	e013      	b.n	80026b2 <UART_SetConfig+0x796>
 800268a:	4bb8      	ldr	r3, [pc, #736]	; (800296c <UART_SetConfig+0xa50>)
 800268c:	2400      	movs	r4, #0
 800268e:	e010      	b.n	80026b2 <UART_SetConfig+0x796>
 8002690:	4bb7      	ldr	r3, [pc, #732]	; (8002970 <UART_SetConfig+0xa54>)
 8002692:	2400      	movs	r4, #0
 8002694:	e00d      	b.n	80026b2 <UART_SetConfig+0x796>
 8002696:	4bb7      	ldr	r3, [pc, #732]	; (8002974 <UART_SetConfig+0xa58>)
 8002698:	2400      	movs	r4, #0
 800269a:	e00a      	b.n	80026b2 <UART_SetConfig+0x796>
 800269c:	4bb6      	ldr	r3, [pc, #728]	; (8002978 <UART_SetConfig+0xa5c>)
 800269e:	2400      	movs	r4, #0
 80026a0:	e007      	b.n	80026b2 <UART_SetConfig+0x796>
 80026a2:	4bb6      	ldr	r3, [pc, #728]	; (800297c <UART_SetConfig+0xa60>)
 80026a4:	2400      	movs	r4, #0
 80026a6:	e004      	b.n	80026b2 <UART_SetConfig+0x796>
 80026a8:	4bb5      	ldr	r3, [pc, #724]	; (8002980 <UART_SetConfig+0xa64>)
 80026aa:	2400      	movs	r4, #0
 80026ac:	e001      	b.n	80026b2 <UART_SetConfig+0x796>
 80026ae:	4baa      	ldr	r3, [pc, #680]	; (8002958 <UART_SetConfig+0xa3c>)
 80026b0:	2400      	movs	r4, #0
 80026b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026b4:	6852      	ldr	r2, [r2, #4]
 80026b6:	0852      	lsrs	r2, r2, #1
 80026b8:	633a      	str	r2, [r7, #48]	; 0x30
 80026ba:	2200      	movs	r2, #0
 80026bc:	637a      	str	r2, [r7, #52]	; 0x34
 80026be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026c2:	18c0      	adds	r0, r0, r3
 80026c4:	4161      	adcs	r1, r4
 80026c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	f7fd fe8c 	bl	80003f0 <__aeabi_uldivmod>
 80026d8:	0003      	movs	r3, r0
 80026da:	000c      	movs	r4, r1
 80026dc:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80026de:	e106      	b.n	80028ee <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80026e0:	f7ff f96c 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 80026e4:	0003      	movs	r3, r0
 80026e6:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d050      	beq.n	800279a <UART_SetConfig+0x87e>
 80026f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d049      	beq.n	8002794 <UART_SetConfig+0x878>
 8002700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2b02      	cmp	r3, #2
 8002706:	d042      	beq.n	800278e <UART_SetConfig+0x872>
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b03      	cmp	r3, #3
 800270e:	d03b      	beq.n	8002788 <UART_SetConfig+0x86c>
 8002710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b04      	cmp	r3, #4
 8002716:	d034      	beq.n	8002782 <UART_SetConfig+0x866>
 8002718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b05      	cmp	r3, #5
 800271e:	d02d      	beq.n	800277c <UART_SetConfig+0x860>
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b06      	cmp	r3, #6
 8002726:	d026      	beq.n	8002776 <UART_SetConfig+0x85a>
 8002728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b07      	cmp	r3, #7
 800272e:	d01f      	beq.n	8002770 <UART_SetConfig+0x854>
 8002730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	2b08      	cmp	r3, #8
 8002736:	d018      	beq.n	800276a <UART_SetConfig+0x84e>
 8002738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b09      	cmp	r3, #9
 800273e:	d011      	beq.n	8002764 <UART_SetConfig+0x848>
 8002740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b0a      	cmp	r3, #10
 8002746:	d00a      	beq.n	800275e <UART_SetConfig+0x842>
 8002748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b0b      	cmp	r3, #11
 800274e:	d103      	bne.n	8002758 <UART_SetConfig+0x83c>
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2400      	movs	r4, #0
 8002756:	e022      	b.n	800279e <UART_SetConfig+0x882>
 8002758:	2301      	movs	r3, #1
 800275a:	2400      	movs	r4, #0
 800275c:	e01f      	b.n	800279e <UART_SetConfig+0x882>
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	2400      	movs	r4, #0
 8002762:	e01c      	b.n	800279e <UART_SetConfig+0x882>
 8002764:	2340      	movs	r3, #64	; 0x40
 8002766:	2400      	movs	r4, #0
 8002768:	e019      	b.n	800279e <UART_SetConfig+0x882>
 800276a:	2320      	movs	r3, #32
 800276c:	2400      	movs	r4, #0
 800276e:	e016      	b.n	800279e <UART_SetConfig+0x882>
 8002770:	2310      	movs	r3, #16
 8002772:	2400      	movs	r4, #0
 8002774:	e013      	b.n	800279e <UART_SetConfig+0x882>
 8002776:	230c      	movs	r3, #12
 8002778:	2400      	movs	r4, #0
 800277a:	e010      	b.n	800279e <UART_SetConfig+0x882>
 800277c:	230a      	movs	r3, #10
 800277e:	2400      	movs	r4, #0
 8002780:	e00d      	b.n	800279e <UART_SetConfig+0x882>
 8002782:	2308      	movs	r3, #8
 8002784:	2400      	movs	r4, #0
 8002786:	e00a      	b.n	800279e <UART_SetConfig+0x882>
 8002788:	2306      	movs	r3, #6
 800278a:	2400      	movs	r4, #0
 800278c:	e007      	b.n	800279e <UART_SetConfig+0x882>
 800278e:	2304      	movs	r3, #4
 8002790:	2400      	movs	r4, #0
 8002792:	e004      	b.n	800279e <UART_SetConfig+0x882>
 8002794:	2302      	movs	r3, #2
 8002796:	2400      	movs	r4, #0
 8002798:	e001      	b.n	800279e <UART_SetConfig+0x882>
 800279a:	2301      	movs	r3, #1
 800279c:	2400      	movs	r4, #0
 800279e:	001a      	movs	r2, r3
 80027a0:	0023      	movs	r3, r4
 80027a2:	6a38      	ldr	r0, [r7, #32]
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	f7fd fe23 	bl	80003f0 <__aeabi_uldivmod>
 80027aa:	0003      	movs	r3, r0
 80027ac:	000c      	movs	r4, r1
 80027ae:	0e1a      	lsrs	r2, r3, #24
 80027b0:	0221      	lsls	r1, r4, #8
 80027b2:	6579      	str	r1, [r7, #84]	; 0x54
 80027b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027b6:	4311      	orrs	r1, r2
 80027b8:	6579      	str	r1, [r7, #84]	; 0x54
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	653b      	str	r3, [r7, #80]	; 0x50
 80027be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80027cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	69fc      	ldr	r4, [r7, #28]
 80027d2:	18c0      	adds	r0, r0, r3
 80027d4:	4161      	adcs	r1, r4
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f7fd fe04 	bl	80003f0 <__aeabi_uldivmod>
 80027e8:	0003      	movs	r3, r0
 80027ea:	000c      	movs	r4, r1
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80027ee:	e07e      	b.n	80028ee <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d058      	beq.n	80028aa <UART_SetConfig+0x98e>
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d050      	beq.n	80028a2 <UART_SetConfig+0x986>
 8002800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2b02      	cmp	r3, #2
 8002806:	d048      	beq.n	800289a <UART_SetConfig+0x97e>
 8002808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2b03      	cmp	r3, #3
 800280e:	d041      	beq.n	8002894 <UART_SetConfig+0x978>
 8002810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b04      	cmp	r3, #4
 8002816:	d039      	beq.n	800288c <UART_SetConfig+0x970>
 8002818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b05      	cmp	r3, #5
 800281e:	d032      	beq.n	8002886 <UART_SetConfig+0x96a>
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2b06      	cmp	r3, #6
 8002826:	d02b      	beq.n	8002880 <UART_SetConfig+0x964>
 8002828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b07      	cmp	r3, #7
 800282e:	d023      	beq.n	8002878 <UART_SetConfig+0x95c>
 8002830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b08      	cmp	r3, #8
 8002836:	d01b      	beq.n	8002870 <UART_SetConfig+0x954>
 8002838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b09      	cmp	r3, #9
 800283e:	d013      	beq.n	8002868 <UART_SetConfig+0x94c>
 8002840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2b0a      	cmp	r3, #10
 8002846:	d00b      	beq.n	8002860 <UART_SetConfig+0x944>
 8002848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2b0b      	cmp	r3, #11
 800284e:	d103      	bne.n	8002858 <UART_SetConfig+0x93c>
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	2400      	movs	r4, #0
 8002856:	e02b      	b.n	80028b0 <UART_SetConfig+0x994>
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	2400      	movs	r4, #0
 800285e:	e027      	b.n	80028b0 <UART_SetConfig+0x994>
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	2400      	movs	r4, #0
 8002866:	e023      	b.n	80028b0 <UART_SetConfig+0x994>
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	2400      	movs	r4, #0
 800286e:	e01f      	b.n	80028b0 <UART_SetConfig+0x994>
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	02db      	lsls	r3, r3, #11
 8002874:	2400      	movs	r4, #0
 8002876:	e01b      	b.n	80028b0 <UART_SetConfig+0x994>
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	2400      	movs	r4, #0
 800287e:	e017      	b.n	80028b0 <UART_SetConfig+0x994>
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <UART_SetConfig+0xa68>)
 8002882:	2400      	movs	r4, #0
 8002884:	e014      	b.n	80028b0 <UART_SetConfig+0x994>
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <UART_SetConfig+0xa6c>)
 8002888:	2400      	movs	r4, #0
 800288a:	e011      	b.n	80028b0 <UART_SetConfig+0x994>
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	035b      	lsls	r3, r3, #13
 8002890:	2400      	movs	r4, #0
 8002892:	e00d      	b.n	80028b0 <UART_SetConfig+0x994>
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <UART_SetConfig+0xa70>)
 8002896:	2400      	movs	r4, #0
 8002898:	e00a      	b.n	80028b0 <UART_SetConfig+0x994>
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	039b      	lsls	r3, r3, #14
 800289e:	2400      	movs	r4, #0
 80028a0:	e006      	b.n	80028b0 <UART_SetConfig+0x994>
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	03db      	lsls	r3, r3, #15
 80028a6:	2400      	movs	r4, #0
 80028a8:	e002      	b.n	80028b0 <UART_SetConfig+0x994>
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	2400      	movs	r4, #0
 80028b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	0852      	lsrs	r2, r2, #1
 80028b6:	60ba      	str	r2, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	68b8      	ldr	r0, [r7, #8]
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	18c0      	adds	r0, r0, r3
 80028c2:	4161      	adcs	r1, r4
 80028c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f7fd fd8d 	bl	80003f0 <__aeabi_uldivmod>
 80028d6:	0003      	movs	r3, r0
 80028d8:	000c      	movs	r4, r1
 80028da:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80028dc:	e007      	b.n	80028ee <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 80028de:	231b      	movs	r3, #27
 80028e0:	2258      	movs	r2, #88	; 0x58
 80028e2:	4694      	mov	ip, r2
 80028e4:	44bc      	add	ip, r7
 80028e6:	4463      	add	r3, ip
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
            break;
 80028ec:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <UART_SetConfig+0xa74>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d909      	bls.n	800290a <UART_SetConfig+0x9ee>
 80028f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <UART_SetConfig+0xa78>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d805      	bhi.n	800290a <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 80028fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	f000 fbc4 	bl	8003092 <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 800290a:	231b      	movs	r3, #27
 800290c:	2258      	movs	r2, #88	; 0x58
 800290e:	4694      	mov	ip, r2
 8002910:	44bc      	add	ip, r7
 8002912:	4463      	add	r3, ip
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	f000 fbbb 	bl	8003092 <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	429a      	cmp	r2, r3
 8002926:	d000      	beq.n	800292a <UART_SetConfig+0xa0e>
 8002928:	e1e6      	b.n	8002cf8 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 800292a:	2323      	movs	r3, #35	; 0x23
 800292c:	2258      	movs	r2, #88	; 0x58
 800292e:	4694      	mov	ip, r2
 8002930:	44bc      	add	ip, r7
 8002932:	4463      	add	r3, ip
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d100      	bne.n	800293c <UART_SetConfig+0xa20>
 800293a:	e08f      	b.n	8002a5c <UART_SetConfig+0xb40>
 800293c:	dc02      	bgt.n	8002944 <UART_SetConfig+0xa28>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02a      	beq.n	8002998 <UART_SetConfig+0xa7c>
 8002942:	e1a5      	b.n	8002c90 <UART_SetConfig+0xd74>
 8002944:	2b04      	cmp	r3, #4
 8002946:	d100      	bne.n	800294a <UART_SetConfig+0xa2e>
 8002948:	e0df      	b.n	8002b0a <UART_SetConfig+0xbee>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d100      	bne.n	8002950 <UART_SetConfig+0xa34>
 800294e:	e13e      	b.n	8002bce <UART_SetConfig+0xcb2>
 8002950:	e19e      	b.n	8002c90 <UART_SetConfig+0xd74>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	00f42400 	.word	0x00f42400
 8002958:	f4240000 	.word	0xf4240000
 800295c:	01e84800 	.word	0x01e84800
 8002960:	03d09000 	.word	0x03d09000
 8002964:	07a12000 	.word	0x07a12000
 8002968:	0f424000 	.word	0x0f424000
 800296c:	14585500 	.word	0x14585500
 8002970:	186a0000 	.word	0x186a0000
 8002974:	1e848000 	.word	0x1e848000
 8002978:	28b0aa00 	.word	0x28b0aa00
 800297c:	3d090000 	.word	0x3d090000
 8002980:	7a120000 	.word	0x7a120000
 8002984:	000aaa00 	.word	0x000aaa00
 8002988:	000ccc00 	.word	0x000ccc00
 800298c:	00155500 	.word	0x00155500
 8002990:	000002ff 	.word	0x000002ff
 8002994:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002998:	f7ff f89c 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 800299c:	0003      	movs	r3, r0
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d044      	beq.n	8002a32 <UART_SetConfig+0xb16>
 80029a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d03e      	beq.n	8002a2e <UART_SetConfig+0xb12>
 80029b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d038      	beq.n	8002a2a <UART_SetConfig+0xb0e>
 80029b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d032      	beq.n	8002a26 <UART_SetConfig+0xb0a>
 80029c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d02c      	beq.n	8002a22 <UART_SetConfig+0xb06>
 80029c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d026      	beq.n	8002a1e <UART_SetConfig+0xb02>
 80029d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d020      	beq.n	8002a1a <UART_SetConfig+0xafe>
 80029d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b07      	cmp	r3, #7
 80029de:	d01a      	beq.n	8002a16 <UART_SetConfig+0xafa>
 80029e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d014      	beq.n	8002a12 <UART_SetConfig+0xaf6>
 80029e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d00e      	beq.n	8002a0e <UART_SetConfig+0xaf2>
 80029f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b0a      	cmp	r3, #10
 80029f6:	d008      	beq.n	8002a0a <UART_SetConfig+0xaee>
 80029f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b0b      	cmp	r3, #11
 80029fe:	d102      	bne.n	8002a06 <UART_SetConfig+0xaea>
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	e016      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e014      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	e012      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a0e:	2340      	movs	r3, #64	; 0x40
 8002a10:	e010      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a12:	2320      	movs	r3, #32
 8002a14:	e00e      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a16:	2310      	movs	r3, #16
 8002a18:	e00c      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	e00a      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a1e:	230a      	movs	r3, #10
 8002a20:	e008      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a22:	2308      	movs	r3, #8
 8002a24:	e006      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e004      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e002      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e000      	b.n	8002a34 <UART_SetConfig+0xb18>
 8002a32:	2301      	movs	r3, #1
 8002a34:	0019      	movs	r1, r3
 8002a36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a38:	f7fd fb64 	bl	8000104 <__udivsi3>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	005a      	lsls	r2, r3, #1
 8002a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	18d2      	adds	r2, r2, r3
 8002a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	0010      	movs	r0, r2
 8002a50:	f7fd fb58 	bl	8000104 <__udivsi3>
 8002a54:	0003      	movs	r3, r0
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002a5a:	e121      	b.n	8002ca0 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <UART_SetConfig+0xbd0>
 8002a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d03d      	beq.n	8002ae8 <UART_SetConfig+0xbcc>
 8002a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d037      	beq.n	8002ae4 <UART_SetConfig+0xbc8>
 8002a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d031      	beq.n	8002ae0 <UART_SetConfig+0xbc4>
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d02b      	beq.n	8002adc <UART_SetConfig+0xbc0>
 8002a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d025      	beq.n	8002ad8 <UART_SetConfig+0xbbc>
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d01f      	beq.n	8002ad4 <UART_SetConfig+0xbb8>
 8002a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	d019      	beq.n	8002ad0 <UART_SetConfig+0xbb4>
 8002a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d013      	beq.n	8002acc <UART_SetConfig+0xbb0>
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d00d      	beq.n	8002ac8 <UART_SetConfig+0xbac>
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b0a      	cmp	r3, #10
 8002ab2:	d007      	beq.n	8002ac4 <UART_SetConfig+0xba8>
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b0b      	cmp	r3, #11
 8002aba:	d101      	bne.n	8002ac0 <UART_SetConfig+0xba4>
 8002abc:	4bba      	ldr	r3, [pc, #744]	; (8002da8 <UART_SetConfig+0xe8c>)
 8002abe:	e016      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ac0:	4bba      	ldr	r3, [pc, #744]	; (8002dac <UART_SetConfig+0xe90>)
 8002ac2:	e014      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ac4:	4bba      	ldr	r3, [pc, #744]	; (8002db0 <UART_SetConfig+0xe94>)
 8002ac6:	e012      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ac8:	4bba      	ldr	r3, [pc, #744]	; (8002db4 <UART_SetConfig+0xe98>)
 8002aca:	e010      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002acc:	4bba      	ldr	r3, [pc, #744]	; (8002db8 <UART_SetConfig+0xe9c>)
 8002ace:	e00e      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ad0:	4bba      	ldr	r3, [pc, #744]	; (8002dbc <UART_SetConfig+0xea0>)
 8002ad2:	e00c      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ad4:	4bba      	ldr	r3, [pc, #744]	; (8002dc0 <UART_SetConfig+0xea4>)
 8002ad6:	e00a      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ad8:	4bba      	ldr	r3, [pc, #744]	; (8002dc4 <UART_SetConfig+0xea8>)
 8002ada:	e008      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002adc:	4bba      	ldr	r3, [pc, #744]	; (8002dc8 <UART_SetConfig+0xeac>)
 8002ade:	e006      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ae0:	4bba      	ldr	r3, [pc, #744]	; (8002dcc <UART_SetConfig+0xeb0>)
 8002ae2:	e004      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ae4:	4bba      	ldr	r3, [pc, #744]	; (8002dd0 <UART_SetConfig+0xeb4>)
 8002ae6:	e002      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002ae8:	4bba      	ldr	r3, [pc, #744]	; (8002dd4 <UART_SetConfig+0xeb8>)
 8002aea:	e000      	b.n	8002aee <UART_SetConfig+0xbd2>
 8002aec:	4baf      	ldr	r3, [pc, #700]	; (8002dac <UART_SetConfig+0xe90>)
 8002aee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002af0:	6852      	ldr	r2, [r2, #4]
 8002af2:	0852      	lsrs	r2, r2, #1
 8002af4:	189a      	adds	r2, r3, r2
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f7fd fb01 	bl	8000104 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002b08:	e0ca      	b.n	8002ca0 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0a:	f7fe ff57 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <UART_SetConfig+0xc88>
 8002b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d03e      	beq.n	8002ba0 <UART_SetConfig+0xc84>
 8002b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d038      	beq.n	8002b9c <UART_SetConfig+0xc80>
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d032      	beq.n	8002b98 <UART_SetConfig+0xc7c>
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d02c      	beq.n	8002b94 <UART_SetConfig+0xc78>
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d026      	beq.n	8002b90 <UART_SetConfig+0xc74>
 8002b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d020      	beq.n	8002b8c <UART_SetConfig+0xc70>
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b07      	cmp	r3, #7
 8002b50:	d01a      	beq.n	8002b88 <UART_SetConfig+0xc6c>
 8002b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d014      	beq.n	8002b84 <UART_SetConfig+0xc68>
 8002b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	d00e      	beq.n	8002b80 <UART_SetConfig+0xc64>
 8002b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b0a      	cmp	r3, #10
 8002b68:	d008      	beq.n	8002b7c <UART_SetConfig+0xc60>
 8002b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b0b      	cmp	r3, #11
 8002b70:	d102      	bne.n	8002b78 <UART_SetConfig+0xc5c>
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	e016      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e014      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	e012      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b80:	2340      	movs	r3, #64	; 0x40
 8002b82:	e010      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b84:	2320      	movs	r3, #32
 8002b86:	e00e      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	e00c      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b8c:	230c      	movs	r3, #12
 8002b8e:	e00a      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b90:	230a      	movs	r3, #10
 8002b92:	e008      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b94:	2308      	movs	r3, #8
 8002b96:	e006      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b98:	2306      	movs	r3, #6
 8002b9a:	e004      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	e002      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e000      	b.n	8002ba6 <UART_SetConfig+0xc8a>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002baa:	f7fd faab 	bl	8000104 <__udivsi3>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	005a      	lsls	r2, r3, #1
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	18d2      	adds	r2, r2, r3
 8002bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	f7fd fa9f 	bl	8000104 <__udivsi3>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002bcc:	e068      	b.n	8002ca0 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04c      	beq.n	8002c70 <UART_SetConfig+0xd54>
 8002bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d045      	beq.n	8002c6a <UART_SetConfig+0xd4e>
 8002bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d03e      	beq.n	8002c64 <UART_SetConfig+0xd48>
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d038      	beq.n	8002c60 <UART_SetConfig+0xd44>
 8002bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d031      	beq.n	8002c5a <UART_SetConfig+0xd3e>
 8002bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d02b      	beq.n	8002c56 <UART_SetConfig+0xd3a>
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d025      	beq.n	8002c52 <UART_SetConfig+0xd36>
 8002c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	d01e      	beq.n	8002c4c <UART_SetConfig+0xd30>
 8002c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d017      	beq.n	8002c46 <UART_SetConfig+0xd2a>
 8002c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b09      	cmp	r3, #9
 8002c1c:	d010      	beq.n	8002c40 <UART_SetConfig+0xd24>
 8002c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d009      	beq.n	8002c3a <UART_SetConfig+0xd1e>
 8002c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b0b      	cmp	r3, #11
 8002c2c:	d102      	bne.n	8002c34 <UART_SetConfig+0xd18>
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	e01f      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	025b      	lsls	r3, r3, #9
 8002c38:	e01c      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	e019      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	e016      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	e013      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	e010      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <UART_SetConfig+0xebc>)
 8002c54:	e00e      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <UART_SetConfig+0xec0>)
 8002c58:	e00c      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	e009      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c60:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <UART_SetConfig+0xec4>)
 8002c62:	e007      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	e004      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	e001      	b.n	8002c74 <UART_SetConfig+0xd58>
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	0852      	lsrs	r2, r2, #1
 8002c7a:	189a      	adds	r2, r3, r2
 8002c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f7fd fa3e 	bl	8000104 <__udivsi3>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002c8e:	e007      	b.n	8002ca0 <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8002c90:	231b      	movs	r3, #27
 8002c92:	2258      	movs	r2, #88	; 0x58
 8002c94:	4694      	mov	ip, r2
 8002c96:	44bc      	add	ip, r7
 8002c98:	4463      	add	r3, ip
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
        break;
 8002c9e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d920      	bls.n	8002ce8 <UART_SetConfig+0xdcc>
 8002ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	; (8002de4 <UART_SetConfig+0xec8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d81c      	bhi.n	8002ce8 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	200e      	movs	r0, #14
 8002cb4:	2458      	movs	r4, #88	; 0x58
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	181b      	adds	r3, r3, r0
 8002cba:	210f      	movs	r1, #15
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b299      	uxth	r1, r3
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	181b      	adds	r3, r3, r0
 8002cd0:	193a      	adds	r2, r7, r4
 8002cd2:	1812      	adds	r2, r2, r0
 8002cd4:	8812      	ldrh	r2, [r2, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	193a      	adds	r2, r7, r4
 8002ce0:	1812      	adds	r2, r2, r0
 8002ce2:	8812      	ldrh	r2, [r2, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	e1d4      	b.n	8003092 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8002ce8:	231b      	movs	r3, #27
 8002cea:	2258      	movs	r2, #88	; 0x58
 8002cec:	4694      	mov	ip, r2
 8002cee:	44bc      	add	ip, r7
 8002cf0:	4463      	add	r3, ip
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e1cc      	b.n	8003092 <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8002cf8:	2323      	movs	r3, #35	; 0x23
 8002cfa:	2258      	movs	r2, #88	; 0x58
 8002cfc:	4694      	mov	ip, r2
 8002cfe:	44bc      	add	ip, r7
 8002d00:	4463      	add	r3, ip
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d100      	bne.n	8002d0a <UART_SetConfig+0xdee>
 8002d08:	e08f      	b.n	8002e2a <UART_SetConfig+0xf0e>
 8002d0a:	dc02      	bgt.n	8002d12 <UART_SetConfig+0xdf6>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <UART_SetConfig+0xe04>
 8002d10:	e1a4      	b.n	800305c <UART_SetConfig+0x1140>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d100      	bne.n	8002d18 <UART_SetConfig+0xdfc>
 8002d16:	e0df      	b.n	8002ed8 <UART_SetConfig+0xfbc>
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d100      	bne.n	8002d1e <UART_SetConfig+0xe02>
 8002d1c:	e13e      	b.n	8002f9c <UART_SetConfig+0x1080>
 8002d1e:	e19d      	b.n	800305c <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7fe fed8 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8002d24:	0003      	movs	r3, r0
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d100      	bne.n	8002d32 <UART_SetConfig+0xe16>
 8002d30:	e066      	b.n	8002e00 <UART_SetConfig+0xee4>
 8002d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d100      	bne.n	8002d3c <UART_SetConfig+0xe20>
 8002d3a:	e05f      	b.n	8002dfc <UART_SetConfig+0xee0>
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d059      	beq.n	8002df8 <UART_SetConfig+0xedc>
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d053      	beq.n	8002df4 <UART_SetConfig+0xed8>
 8002d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d04d      	beq.n	8002df0 <UART_SetConfig+0xed4>
 8002d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d047      	beq.n	8002dec <UART_SetConfig+0xed0>
 8002d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d041      	beq.n	8002de8 <UART_SetConfig+0xecc>
 8002d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	d01a      	beq.n	8002da2 <UART_SetConfig+0xe86>
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d014      	beq.n	8002d9e <UART_SetConfig+0xe82>
 8002d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	d00e      	beq.n	8002d9a <UART_SetConfig+0xe7e>
 8002d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d008      	beq.n	8002d96 <UART_SetConfig+0xe7a>
 8002d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b0b      	cmp	r3, #11
 8002d8a:	d102      	bne.n	8002d92 <UART_SetConfig+0xe76>
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	e037      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e035      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	e033      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	e031      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e02f      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002da2:	2310      	movs	r3, #16
 8002da4:	e02d      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	0001e848 	.word	0x0001e848
 8002dac:	01e84800 	.word	0x01e84800
 8002db0:	0003d090 	.word	0x0003d090
 8002db4:	0007a120 	.word	0x0007a120
 8002db8:	000f4240 	.word	0x000f4240
 8002dbc:	001e8480 	.word	0x001e8480
 8002dc0:	0028b0aa 	.word	0x0028b0aa
 8002dc4:	0030d400 	.word	0x0030d400
 8002dc8:	003d0900 	.word	0x003d0900
 8002dcc:	00516154 	.word	0x00516154
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	00001554 	.word	0x00001554
 8002ddc:	00001998 	.word	0x00001998
 8002de0:	00002aaa 	.word	0x00002aaa
 8002de4:	0000ffff 	.word	0x0000ffff
 8002de8:	230c      	movs	r3, #12
 8002dea:	e00a      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002dec:	230a      	movs	r3, #10
 8002dee:	e008      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002df0:	2308      	movs	r3, #8
 8002df2:	e006      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002df4:	2306      	movs	r3, #6
 8002df6:	e004      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e002      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e000      	b.n	8002e02 <UART_SetConfig+0xee6>
 8002e00:	2301      	movs	r3, #1
 8002e02:	0019      	movs	r1, r3
 8002e04:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e06:	f7fd f97d 	bl	8000104 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	18d2      	adds	r2, r2, r3
 8002e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	0010      	movs	r0, r2
 8002e1e:	f7fd f971 	bl	8000104 <__udivsi3>
 8002e22:	0003      	movs	r3, r0
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002e28:	e120      	b.n	800306c <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d043      	beq.n	8002eba <UART_SetConfig+0xf9e>
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d03d      	beq.n	8002eb6 <UART_SetConfig+0xf9a>
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d037      	beq.n	8002eb2 <UART_SetConfig+0xf96>
 8002e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d031      	beq.n	8002eae <UART_SetConfig+0xf92>
 8002e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d02b      	beq.n	8002eaa <UART_SetConfig+0xf8e>
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d025      	beq.n	8002ea6 <UART_SetConfig+0xf8a>
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d01f      	beq.n	8002ea2 <UART_SetConfig+0xf86>
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d019      	beq.n	8002e9e <UART_SetConfig+0xf82>
 8002e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d013      	beq.n	8002e9a <UART_SetConfig+0xf7e>
 8002e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	d00d      	beq.n	8002e96 <UART_SetConfig+0xf7a>
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d007      	beq.n	8002e92 <UART_SetConfig+0xf76>
 8002e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b0b      	cmp	r3, #11
 8002e88:	d101      	bne.n	8002e8e <UART_SetConfig+0xf72>
 8002e8a:	4b8e      	ldr	r3, [pc, #568]	; (80030c4 <UART_SetConfig+0x11a8>)
 8002e8c:	e016      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002e8e:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <UART_SetConfig+0x11ac>)
 8002e90:	e014      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002e92:	4b8e      	ldr	r3, [pc, #568]	; (80030cc <UART_SetConfig+0x11b0>)
 8002e94:	e012      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002e96:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <UART_SetConfig+0x11b4>)
 8002e98:	e010      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002e9a:	4b8e      	ldr	r3, [pc, #568]	; (80030d4 <UART_SetConfig+0x11b8>)
 8002e9c:	e00e      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002e9e:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <UART_SetConfig+0x11bc>)
 8002ea0:	e00c      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002ea2:	4b8e      	ldr	r3, [pc, #568]	; (80030dc <UART_SetConfig+0x11c0>)
 8002ea4:	e00a      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002ea6:	4b8e      	ldr	r3, [pc, #568]	; (80030e0 <UART_SetConfig+0x11c4>)
 8002ea8:	e008      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002eaa:	4b8e      	ldr	r3, [pc, #568]	; (80030e4 <UART_SetConfig+0x11c8>)
 8002eac:	e006      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002eae:	4b8e      	ldr	r3, [pc, #568]	; (80030e8 <UART_SetConfig+0x11cc>)
 8002eb0:	e004      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002eb2:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <UART_SetConfig+0x11d0>)
 8002eb4:	e002      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <UART_SetConfig+0x11d4>)
 8002eb8:	e000      	b.n	8002ebc <UART_SetConfig+0xfa0>
 8002eba:	4b83      	ldr	r3, [pc, #524]	; (80030c8 <UART_SetConfig+0x11ac>)
 8002ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ebe:	6852      	ldr	r2, [r2, #4]
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	189a      	adds	r2, r3, r2
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	0010      	movs	r0, r2
 8002ecc:	f7fd f91a 	bl	8000104 <__udivsi3>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002ed6:	e0c9      	b.n	800306c <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed8:	f7fe fd70 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8002edc:	0003      	movs	r3, r0
 8002ede:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d044      	beq.n	8002f72 <UART_SetConfig+0x1056>
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d03e      	beq.n	8002f6e <UART_SetConfig+0x1052>
 8002ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d038      	beq.n	8002f6a <UART_SetConfig+0x104e>
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d032      	beq.n	8002f66 <UART_SetConfig+0x104a>
 8002f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d02c      	beq.n	8002f62 <UART_SetConfig+0x1046>
 8002f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d026      	beq.n	8002f5e <UART_SetConfig+0x1042>
 8002f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d020      	beq.n	8002f5a <UART_SetConfig+0x103e>
 8002f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d01a      	beq.n	8002f56 <UART_SetConfig+0x103a>
 8002f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d014      	beq.n	8002f52 <UART_SetConfig+0x1036>
 8002f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d00e      	beq.n	8002f4e <UART_SetConfig+0x1032>
 8002f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b0a      	cmp	r3, #10
 8002f36:	d008      	beq.n	8002f4a <UART_SetConfig+0x102e>
 8002f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b0b      	cmp	r3, #11
 8002f3e:	d102      	bne.n	8002f46 <UART_SetConfig+0x102a>
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	e016      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e014      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	e012      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	e010      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f52:	2320      	movs	r3, #32
 8002f54:	e00e      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f56:	2310      	movs	r3, #16
 8002f58:	e00c      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	e00a      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f5e:	230a      	movs	r3, #10
 8002f60:	e008      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f62:	2308      	movs	r3, #8
 8002f64:	e006      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f66:	2306      	movs	r3, #6
 8002f68:	e004      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e002      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e000      	b.n	8002f74 <UART_SetConfig+0x1058>
 8002f72:	2301      	movs	r3, #1
 8002f74:	0019      	movs	r1, r3
 8002f76:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002f78:	f7fd f8c4 	bl	8000104 <__udivsi3>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	001a      	movs	r2, r3
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	18d2      	adds	r2, r2, r3
 8002f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	0010      	movs	r0, r2
 8002f90:	f7fd f8b8 	bl	8000104 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8002f9a:	e067      	b.n	800306c <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d04b      	beq.n	800303c <UART_SetConfig+0x1120>
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d044      	beq.n	8003036 <UART_SetConfig+0x111a>
 8002fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d03d      	beq.n	8003030 <UART_SetConfig+0x1114>
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d037      	beq.n	800302c <UART_SetConfig+0x1110>
 8002fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d030      	beq.n	8003026 <UART_SetConfig+0x110a>
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d02a      	beq.n	8003022 <UART_SetConfig+0x1106>
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d024      	beq.n	800301e <UART_SetConfig+0x1102>
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d01d      	beq.n	8003018 <UART_SetConfig+0x10fc>
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d016      	beq.n	8003012 <UART_SetConfig+0x10f6>
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d00f      	beq.n	800300c <UART_SetConfig+0x10f0>
 8002fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b0a      	cmp	r3, #10
 8002ff2:	d008      	beq.n	8003006 <UART_SetConfig+0x10ea>
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b0b      	cmp	r3, #11
 8002ffa:	d101      	bne.n	8003000 <UART_SetConfig+0x10e4>
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	e01f      	b.n	8003040 <UART_SetConfig+0x1124>
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	e01c      	b.n	8003040 <UART_SetConfig+0x1124>
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	e019      	b.n	8003040 <UART_SetConfig+0x1124>
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	e016      	b.n	8003040 <UART_SetConfig+0x1124>
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	e013      	b.n	8003040 <UART_SetConfig+0x1124>
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	e010      	b.n	8003040 <UART_SetConfig+0x1124>
 800301e:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <UART_SetConfig+0x11d8>)
 8003020:	e00e      	b.n	8003040 <UART_SetConfig+0x1124>
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <UART_SetConfig+0x11dc>)
 8003024:	e00c      	b.n	8003040 <UART_SetConfig+0x1124>
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	e009      	b.n	8003040 <UART_SetConfig+0x1124>
 800302c:	4b33      	ldr	r3, [pc, #204]	; (80030fc <UART_SetConfig+0x11e0>)
 800302e:	e007      	b.n	8003040 <UART_SetConfig+0x1124>
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	019b      	lsls	r3, r3, #6
 8003034:	e004      	b.n	8003040 <UART_SetConfig+0x1124>
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	01db      	lsls	r3, r3, #7
 800303a:	e001      	b.n	8003040 <UART_SetConfig+0x1124>
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003042:	6852      	ldr	r2, [r2, #4]
 8003044:	0852      	lsrs	r2, r2, #1
 8003046:	189a      	adds	r2, r3, r2
 8003048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f7fd f858 	bl	8000104 <__udivsi3>
 8003054:	0003      	movs	r3, r0
 8003056:	b29b      	uxth	r3, r3
 8003058:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800305a:	e007      	b.n	800306c <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 800305c:	231b      	movs	r3, #27
 800305e:	2258      	movs	r2, #88	; 0x58
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
        break;
 800306a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d908      	bls.n	8003084 <UART_SetConfig+0x1168>
 8003072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <UART_SetConfig+0x11e4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d804      	bhi.n	8003084 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 800307a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	e006      	b.n	8003092 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8003084:	231b      	movs	r3, #27
 8003086:	2258      	movs	r2, #88	; 0x58
 8003088:	4694      	mov	ip, r2
 800308a:	44bc      	add	ip, r7
 800308c:	4463      	add	r3, ip
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003094:	226a      	movs	r2, #106	; 0x6a
 8003096:	2101      	movs	r1, #1
 8003098:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800309a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800309c:	2268      	movs	r2, #104	; 0x68
 800309e:	2101      	movs	r1, #1
 80030a0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	2200      	movs	r2, #0
 80030a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80030a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030aa:	2200      	movs	r2, #0
 80030ac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80030ae:	231b      	movs	r3, #27
 80030b0:	2258      	movs	r2, #88	; 0x58
 80030b2:	4694      	mov	ip, r2
 80030b4:	44bc      	add	ip, r7
 80030b6:	4463      	add	r3, ip
 80030b8:	781b      	ldrb	r3, [r3, #0]
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b021      	add	sp, #132	; 0x84
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	0000f424 	.word	0x0000f424
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	0001e848 	.word	0x0001e848
 80030d0:	0003d090 	.word	0x0003d090
 80030d4:	0007a120 	.word	0x0007a120
 80030d8:	000f4240 	.word	0x000f4240
 80030dc:	00145855 	.word	0x00145855
 80030e0:	00186a00 	.word	0x00186a00
 80030e4:	001e8480 	.word	0x001e8480
 80030e8:	0028b0aa 	.word	0x0028b0aa
 80030ec:	003d0900 	.word	0x003d0900
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	00000aaa 	.word	0x00000aaa
 80030f8:	00000ccc 	.word	0x00000ccc
 80030fc:	00001555 	.word	0x00001555
 8003100:	0000ffff 	.word	0x0000ffff

08003104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	2201      	movs	r2, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d00b      	beq.n	800312e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <UART_AdvFeatureConfig+0x144>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	2202      	movs	r2, #2
 8003134:	4013      	ands	r3, r2
 8003136:	d00b      	beq.n	8003150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a43      	ldr	r2, [pc, #268]	; (800324c <UART_AdvFeatureConfig+0x148>)
 8003140:	4013      	ands	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	2204      	movs	r2, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d00b      	beq.n	8003172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <UART_AdvFeatureConfig+0x14c>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	2208      	movs	r2, #8
 8003178:	4013      	ands	r3, r2
 800317a:	d00b      	beq.n	8003194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a34      	ldr	r2, [pc, #208]	; (8003254 <UART_AdvFeatureConfig+0x150>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	2210      	movs	r2, #16
 800319a:	4013      	ands	r3, r2
 800319c:	d00b      	beq.n	80031b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <UART_AdvFeatureConfig+0x154>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2220      	movs	r2, #32
 80031bc:	4013      	ands	r3, r2
 80031be:	d00b      	beq.n	80031d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4a25      	ldr	r2, [pc, #148]	; (800325c <UART_AdvFeatureConfig+0x158>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	4013      	ands	r3, r2
 80031e0:	d01d      	beq.n	800321e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <UART_AdvFeatureConfig+0x15c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	035b      	lsls	r3, r3, #13
 8003202:	429a      	cmp	r2, r3
 8003204:	d10b      	bne.n	800321e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <UART_AdvFeatureConfig+0x160>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	4013      	ands	r3, r2
 8003226:	d00b      	beq.n	8003240 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <UART_AdvFeatureConfig+0x164>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  }
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	fffdffff 	.word	0xfffdffff
 800324c:	fffeffff 	.word	0xfffeffff
 8003250:	fffbffff 	.word	0xfffbffff
 8003254:	ffff7fff 	.word	0xffff7fff
 8003258:	ffffefff 	.word	0xffffefff
 800325c:	ffffdfff 	.word	0xffffdfff
 8003260:	ffefffff 	.word	0xffefffff
 8003264:	ff9fffff 	.word	0xff9fffff
 8003268:	fff7ffff 	.word	0xfff7ffff

0800326c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af02      	add	r7, sp, #8
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2288      	movs	r2, #136	; 0x88
 8003278:	2100      	movs	r1, #0
 800327a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800327c:	f7fd fcb2 	bl	8000be4 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	2b08      	cmp	r3, #8
 8003290:	d10d      	bne.n	80032ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	0399      	lsls	r1, r3, #14
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <UART_CheckIdleState+0x90>)
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	0013      	movs	r3, r2
 80032a0:	2200      	movs	r2, #0
 80032a2:	f000 f82d 	bl	8003300 <UART_WaitOnFlagUntilTimeout>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d001      	beq.n	80032ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e021      	b.n	80032f2 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2204      	movs	r2, #4
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d10d      	bne.n	80032d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	03d9      	lsls	r1, r3, #15
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <UART_CheckIdleState+0x90>)
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	0013      	movs	r3, r2
 80032ca:	2200      	movs	r2, #0
 80032cc:	f000 f818 	bl	8003300 <UART_WaitOnFlagUntilTimeout>
 80032d0:	1e03      	subs	r3, r0, #0
 80032d2:	d001      	beq.n	80032d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e00c      	b.n	80032f2 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	2120      	movs	r1, #32
 80032de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2284      	movs	r2, #132	; 0x84
 80032e4:	2120      	movs	r1, #32
 80032e6:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	227c      	movs	r2, #124	; 0x7c
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b004      	add	sp, #16
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	01ffffff 	.word	0x01ffffff

08003300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003310:	e02b      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	3301      	adds	r3, #1
 8003316:	d028      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003318:	f7fd fc64 	bl	8000be4 <HAL_GetTick>
 800331c:	0002      	movs	r2, r0
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11d      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4916      	ldr	r1, [pc, #88]	; (8003394 <UART_WaitOnFlagUntilTimeout+0x94>)
 800333a:	400a      	ands	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	438a      	bics	r2, r1
 800334c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	2120      	movs	r1, #32
 8003354:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2284      	movs	r2, #132	; 0x84
 800335a:	2120      	movs	r1, #32
 800335c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	227c      	movs	r2, #124	; 0x7c
 8003362:	2100      	movs	r1, #0
 8003364:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e00f      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	425a      	negs	r2, r3
 800337a:	4153      	adcs	r3, r2
 800337c:	b2db      	uxtb	r3, r3
 800337e:	001a      	movs	r2, r3
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d0c4      	beq.n	8003312 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b004      	add	sp, #16
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	fffffe5f 	.word	0xfffffe5f

08003398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	227c      	movs	r2, #124	; 0x7c
 80033a4:	5c9b      	ldrb	r3, [r3, r2]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_UARTEx_DisableFifoMode+0x16>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e027      	b.n	80033fe <HAL_UARTEx_DisableFifoMode+0x66>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	227c      	movs	r2, #124	; 0x7c
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	2124      	movs	r1, #36	; 0x24
 80033bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <HAL_UARTEx_DisableFifoMode+0x70>)
 80033da:	4013      	ands	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	2120      	movs	r1, #32
 80033f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	227c      	movs	r2, #124	; 0x7c
 80033f8:	2100      	movs	r1, #0
 80033fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	dfffffff 	.word	0xdfffffff

0800340c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	227c      	movs	r2, #124	; 0x7c
 800341a:	5c9b      	ldrb	r3, [r3, r2]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e02e      	b.n	8003482 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	227c      	movs	r2, #124	; 0x7c
 8003428:	2101      	movs	r1, #1
 800342a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	2124      	movs	r1, #36	; 0x24
 8003432:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	08d9      	lsrs	r1, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f854 	bl	8003510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	2120      	movs	r1, #32
 8003476:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	227c      	movs	r2, #124	; 0x7c
 800347c:	2100      	movs	r1, #0
 800347e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	227c      	movs	r2, #124	; 0x7c
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e02f      	b.n	8003504 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	227c      	movs	r2, #124	; 0x7c
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	2124      	movs	r1, #36	; 0x24
 80034b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2101      	movs	r1, #1
 80034c8:	438a      	bics	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4a0e      	ldr	r2, [pc, #56]	; (800350c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 f813 	bl	8003510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	2120      	movs	r1, #32
 80034f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	227c      	movs	r2, #124	; 0x7c
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b004      	add	sp, #16
 800350a:	bd80      	pop	{r7, pc}
 800350c:	f1ffffff 	.word	0xf1ffffff

08003510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003518:	2314      	movs	r3, #20
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <UARTEx_SetNbDataToProcess+0xcc>)
 800351e:	ca03      	ldmia	r2!, {r0, r1}
 8003520:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003522:	230c      	movs	r3, #12
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <UARTEx_SetNbDataToProcess+0xd0>)
 8003528:	ca03      	ldmia	r2!, {r0, r1}
 800352a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	226a      	movs	r2, #106	; 0x6a
 8003538:	2101      	movs	r1, #1
 800353a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2268      	movs	r2, #104	; 0x68
 8003540:	2101      	movs	r1, #1
 8003542:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003544:	e046      	b.n	80035d4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003546:	261f      	movs	r6, #31
 8003548:	19bb      	adds	r3, r7, r6
 800354a:	2208      	movs	r2, #8
 800354c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800354e:	201e      	movs	r0, #30
 8003550:	183b      	adds	r3, r7, r0
 8003552:	2208      	movs	r2, #8
 8003554:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	0e5b      	lsrs	r3, r3, #25
 800355e:	b2da      	uxtb	r2, r3
 8003560:	241d      	movs	r4, #29
 8003562:	193b      	adds	r3, r7, r4
 8003564:	2107      	movs	r1, #7
 8003566:	400a      	ands	r2, r1
 8003568:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	0f5b      	lsrs	r3, r3, #29
 8003572:	b2da      	uxtb	r2, r3
 8003574:	251c      	movs	r5, #28
 8003576:	197b      	adds	r3, r7, r5
 8003578:	2107      	movs	r1, #7
 800357a:	400a      	ands	r2, r1
 800357c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800357e:	183b      	adds	r3, r7, r0
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	197a      	adds	r2, r7, r5
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	2114      	movs	r1, #20
 8003588:	1879      	adds	r1, r7, r1
 800358a:	5c8a      	ldrb	r2, [r1, r2]
 800358c:	435a      	muls	r2, r3
 800358e:	0010      	movs	r0, r2
 8003590:	197b      	adds	r3, r7, r5
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	250c      	movs	r5, #12
 8003596:	197a      	adds	r2, r7, r5
 8003598:	5cd3      	ldrb	r3, [r2, r3]
 800359a:	0019      	movs	r1, r3
 800359c:	f7fc fe3c 	bl	8000218 <__divsi3>
 80035a0:	0003      	movs	r3, r0
 80035a2:	b299      	uxth	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	226a      	movs	r2, #106	; 0x6a
 80035a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80035aa:	19bb      	adds	r3, r7, r6
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	193a      	adds	r2, r7, r4
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	2114      	movs	r1, #20
 80035b4:	1879      	adds	r1, r7, r1
 80035b6:	5c8a      	ldrb	r2, [r1, r2]
 80035b8:	435a      	muls	r2, r3
 80035ba:	0010      	movs	r0, r2
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	197a      	adds	r2, r7, r5
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	0019      	movs	r1, r3
 80035c6:	f7fc fe27 	bl	8000218 <__divsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	b299      	uxth	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2268      	movs	r2, #104	; 0x68
 80035d2:	5299      	strh	r1, [r3, r2]
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b009      	add	sp, #36	; 0x24
 80035da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035dc:	08003654 	.word	0x08003654
 80035e0:	0800365c 	.word	0x0800365c

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	2600      	movs	r6, #0
 80035e8:	4d0c      	ldr	r5, [pc, #48]	; (800361c <__libc_init_array+0x38>)
 80035ea:	4c0d      	ldr	r4, [pc, #52]	; (8003620 <__libc_init_array+0x3c>)
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	42a6      	cmp	r6, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	2600      	movs	r6, #0
 80035f6:	f000 f821 	bl	800363c <_init>
 80035fa:	4d0a      	ldr	r5, [pc, #40]	; (8003624 <__libc_init_array+0x40>)
 80035fc:	4c0a      	ldr	r4, [pc, #40]	; (8003628 <__libc_init_array+0x44>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	42a6      	cmp	r6, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	00b3      	lsls	r3, r6, #2
 800360a:	58eb      	ldr	r3, [r5, r3]
 800360c:	4798      	blx	r3
 800360e:	3601      	adds	r6, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	00b3      	lsls	r3, r6, #2
 8003614:	58eb      	ldr	r3, [r5, r3]
 8003616:	4798      	blx	r3
 8003618:	3601      	adds	r6, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	080036cc 	.word	0x080036cc
 8003620:	080036cc 	.word	0x080036cc
 8003624:	080036cc 	.word	0x080036cc
 8003628:	080036d0 	.word	0x080036d0

0800362c <memset>:
 800362c:	0003      	movs	r3, r0
 800362e:	1812      	adds	r2, r2, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	7019      	strb	r1, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <_init>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003642:	bc08      	pop	{r3}
 8003644:	469e      	mov	lr, r3
 8003646:	4770      	bx	lr

08003648 <_fini>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr
