
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003230  08003230  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003238  08003238  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  0800324c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800324c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a12c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001793  00000000  00000000  0002a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025789  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009011  00000000  00000000  00052121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e842e  00000000  00000000  0005b132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c0  00000000  00000000  001435b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800318c 	.word	0x0800318c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800318c 	.word	0x0800318c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d013      	beq.n	8000510 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00b      	beq.n	8000510 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004f8:	e000      	b.n	80004fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000506:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <UART_SEND>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_SEND(UART_HandleTypeDef *huart, char buffer[])
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe4d 	bl	80001c8 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	b29a      	uxth	r2, r3
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	6839      	ldr	r1, [r7, #0]
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f002 f909 	bl	8002750 <HAL_UART_Transmit>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int Count = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
	char buffer[10];
	char CRLF[3] = {0x0A, 0x0D, 0x0};         // add newline (CR/LF)
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <main+0x98>)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	6812      	ldr	r2, [r2, #0]
 8000558:	4611      	mov	r1, r2
 800055a:	8019      	strh	r1, [r3, #0]
 800055c:	3302      	adds	r3, #2
 800055e:	0c12      	lsrs	r2, r2, #16
 8000560:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fa53 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f841 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8e5 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056e:	f000 f8b3 	bl	80006d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_SEND(&huart2, "Main program started \r\n");
 8000572:	491c      	ldr	r1, [pc, #112]	; (80005e4 <main+0x9c>)
 8000574:	481c      	ldr	r0, [pc, #112]	; (80005e8 <main+0xa0>)
 8000576:	f7ff ffd2 	bl	800051e <UART_SEND>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  itoa(Count, buffer, 10);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	220a      	movs	r2, #10
 8000580:	4619      	mov	r1, r3
 8000582:	6978      	ldr	r0, [r7, #20]
 8000584:	f002 fda6 	bl	80030d4 <itoa>
	  strcat(buffer, CRLF);
 8000588:	1d3a      	adds	r2, r7, #4
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fda9 	bl	80030e8 <strcat>
	  UART_SEND(&huart2, buffer);
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	4619      	mov	r1, r3
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <main+0xa0>)
 800059e:	f7ff ffbe 	bl	800051e <UART_SEND>
	  Count++;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_WritePin(GPIOA, LED, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 fd5c 	bl	800106c <HAL_GPIO_WritePin>
	  ITM_SendChar('I');
 80005b4:	2049      	movs	r0, #73	; 0x49
 80005b6:	f7ff ff8b 	bl	80004d0 <ITM_SendChar>
	  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 faa1 	bl	8000b04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 fd4f 	bl	800106c <HAL_GPIO_WritePin>
	  ITM_SendChar('O');
 80005ce:	204f      	movs	r0, #79	; 0x4f
 80005d0:	f7ff ff7e 	bl	80004d0 <ITM_SendChar>
	  HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fa94 	bl	8000b04 <HAL_Delay>
	  itoa(Count, buffer, 10);
 80005dc:	e7cd      	b.n	800057a <main+0x32>
 80005de:	bf00      	nop
 80005e0:	080031bc 	.word	0x080031bc
 80005e4:	080031a4 	.word	0x080031a4
 80005e8:	20000028 	.word	0x20000028

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0b8      	sub	sp, #224	; 0xe0
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd6c 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2288      	movs	r2, #136	; 0x88
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fd5e 	bl	80030d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000642:	230a      	movs	r3, #10
 8000644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000648:	2307      	movs	r3, #7
 800064a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fd80 	bl	8001164 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800066a:	f000 f8dd 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f94c 	bl	8001930 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069e:	f000 f8c3 	bl	8000828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fb45 	bl	8001d3c <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b8:	f000 f8b6 	bl	8000828 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c0:	f000 fcfa 	bl	80010b8 <HAL_PWREx_ControlVoltageScaling>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006ca:	f000 f8ad 	bl	8000828 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	37e0      	adds	r7, #224	; 0xe0
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART2_UART_Init+0x58>)
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <MX_USART2_UART_Init+0x5c>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_USART2_UART_Init+0x58>)
 80006e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x58>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x58>)
 800071c:	f001 ffca 	bl	80026b4 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000726:	f000 f87f 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a31      	ldr	r2, [pc, #196]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_GPIO_Init+0xe0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <MX_GPIO_Init+0xe0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a25      	ldr	r2, [pc, #148]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_GPIO_Init+0xe0>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_GPIO_Init+0xe0>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <MX_GPIO_Init+0xe0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_GPIO_Init+0xe0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 fc59 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_GPIO_Init+0xe4>)
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0xe8>)
 80007d0:	f000 faa2 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d4:	2320      	movs	r3, #32
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fa93 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_GPIO_Init+0xec>)
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 fa85 	bl	8000d18 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	10210000 	.word	0x10210000
 8000820:	48000800 	.word	0x48000800
 8000824:	10110000 	.word	0x10110000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	; 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_UART_MspInit+0x7c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d128      	bne.n	80008f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x80>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <HAL_UART_MspInit+0x80>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6593      	str	r3, [r2, #88]	; 0x58
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_UART_MspInit+0x80>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_UART_MspInit+0x80>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_UART_MspInit+0x80>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_MspInit+0x80>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ce:	230c      	movs	r3, #12
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008de:	2307      	movs	r3, #7
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fa14 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40021000 	.word	0x40021000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8ba 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <SystemInit+0x5c>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <SystemInit+0x5c>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <SystemInit+0x60>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <SystemInit+0x60>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <SystemInit+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <SystemInit+0x60>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <SystemInit+0x60>)
 8000980:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000984:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000988:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <SystemInit+0x60>)
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <SystemInit+0x60>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <SystemInit+0x60>)
 8000998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SystemInit+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00
 80009b4:	40021000 	.word	0x40021000

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffca 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009c2:	e003      	b.n	80009cc <LoopCopyDataInit>

080009c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009ca:	3104      	adds	r1, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80009d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009d4:	d3f6      	bcc.n	80009c4 <CopyDataInit>
	ldr	r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009d8:	e002      	b.n	80009e0 <LoopFillZerobss>

080009da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009dc:	f842 3b04 	str.w	r3, [r2], #4

080009e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <LoopForever+0x16>)
	cmp	r2, r3
 80009e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009e4:	d3f9      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fb39 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fdad 	bl	8000548 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009f4:	08003240 	.word	0x08003240
	ldr	r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009fc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a04:	200000b0 	.word	0x200000b0

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_Init+0x3c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_Init+0x3c>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f944 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f80f 	bl	8000a4c <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff fefb 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d023      	beq.n	8000aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x70>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f941 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f919 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e004      	b.n	8000aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e001      	b.n	8000aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000ac 	.word	0x200000ac

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000ac 	.word	0x200000ac

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e17f      	b.n	8001028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8171 	beq.w	8001022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d00b      	beq.n	8000d60 <HAL_GPIO_Init+0x48>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d007      	beq.n	8000d60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	2b11      	cmp	r3, #17
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b12      	cmp	r3, #18
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 0201 	and.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d118      	bne.n	8000e00 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	f003 0201 	and.w	r2, r3, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x128>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b12      	cmp	r3, #18
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	6939      	ldr	r1, [r7, #16]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80ac 	beq.w	8001022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a5e      	ldr	r2, [pc, #376]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_GPIO_Init+0x334>)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x242>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x338>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x23e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x33c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x23a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x340>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x236>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x344>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x232>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x348>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x22e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x34c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x22a>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x244>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6c:	4937      	ldr	r1, [pc, #220]	; (800104c <HAL_GPIO_Init+0x334>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x350>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_GPIO_Init+0x350>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa22 f303 	lsr.w	r3, r2, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	f47f ae78 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	48001400 	.word	0x48001400
 8001064:	48001800 	.word	0x48001800
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001088:	e002      	b.n	8001090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40007000 	.word	0x40007000

080010b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c6:	d130      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d4:	d038      	beq.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0c9b      	lsrs	r3, r3, #18
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fc:	e002      	b.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3b01      	subs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001110:	d102      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f2      	bne.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001124:	d110      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e00f      	b.n	800114a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001136:	d007      	beq.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000
 800115c:	20000000 	.word	0x20000000
 8001160:	431bde83 	.word	0x431bde83

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e3d4      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001176:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001180:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80e4 	beq.w	8001360 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_RCC_OscConfig+0x4a>
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	f040 808b 	bne.w	80012bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 8087 	bne.w	80012bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ae:	4b93      	ldr	r3, [pc, #588]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x62>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e3ac      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_RCC_OscConfig+0x7c>
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011de:	e005      	b.n	80011ec <HAL_RCC_OscConfig+0x88>
 80011e0:	4b86      	ldr	r3, [pc, #536]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d223      	bcs.n	8001238 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fd41 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e38d      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001204:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a7c      	ldr	r2, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b7a      	ldr	r3, [pc, #488]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4977      	ldr	r1, [pc, #476]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001222:	4b76      	ldr	r3, [pc, #472]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	4972      	ldr	r1, [pc, #456]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
 8001236:	e025      	b.n	8001284 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001238:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6f      	ldr	r2, [pc, #444]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	496a      	ldr	r1, [pc, #424]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001256:	4b69      	ldr	r3, [pc, #420]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	4965      	ldr	r1, [pc, #404]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fd01 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e34d      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001284:	f000 fc36 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001288:	4602      	mov	r2, r0
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	495a      	ldr	r1, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x29c>)
 8001296:	5ccb      	ldrb	r3, [r1, r3]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_RCC_OscConfig+0x2a0>)
 80012a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_RCC_OscConfig+0x2a4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fbcf 	bl	8000a4c <HAL_InitTick>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d052      	beq.n	800135e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	e331      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d032      	beq.n	800132a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012c4:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc0c 	bl	8000aec <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc08 	bl	8000aec <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e31a      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	493b      	ldr	r1, [pc, #236]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4936      	ldr	r1, [pc, #216]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
 8001328:	e01a      	b.n	8001360 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001336:	f7ff fbd9 	bl	8000aec <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800133e:	f7ff fbd5 	bl	8000aec <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e2e7      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x1da>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d074      	beq.n	8001456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x21a>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b0c      	cmp	r3, #12
 8001376:	d10e      	bne.n	8001396 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d064      	beq.n	8001454 <HAL_RCC_OscConfig+0x2f0>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d160      	bne.n	8001454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e2c4      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x24a>
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e01d      	b.n	80013ea <HAL_RCC_OscConfig+0x286>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x26e>
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e00b      	b.n	80013ea <HAL_RCC_OscConfig+0x286>
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01c      	beq.n	800142c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb7b 	bl	8000aec <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f8:	e011      	b.n	800141e <HAL_RCC_OscConfig+0x2ba>
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	080031c0 	.word	0x080031c0
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fb6e 	bl	8000aec <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e280      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141e:	4baf      	ldr	r3, [pc, #700]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x2a8>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fb5e 	bl	8000aec <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fb5a 	bl	8000aec <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e26c      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001446:	4ba5      	ldr	r3, [pc, #660]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x2d0>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d060      	beq.n	8001524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x310>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d119      	bne.n	80014a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d116      	bne.n	80014a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	4b99      	ldr	r3, [pc, #612]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x328>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e249      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b93      	ldr	r3, [pc, #588]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	4990      	ldr	r1, [pc, #576]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	e040      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d023      	beq.n	80014f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014aa:	4b8c      	ldr	r3, [pc, #560]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a8b      	ldr	r2, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb19 	bl	8000aec <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fb15 	bl	8000aec <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e227      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	497c      	ldr	r1, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e018      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a79      	ldr	r2, [pc, #484]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff faf5 	bl	8000aec <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff faf1 	bl	8000aec <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e203      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d03c      	beq.n	80015aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01c      	beq.n	8001572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153e:	4a67      	ldr	r2, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fad0 	bl	8000aec <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff facc 	bl	8000aec <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1de      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001562:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ef      	beq.n	8001550 <HAL_RCC_OscConfig+0x3ec>
 8001570:	e01b      	b.n	80015aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fab3 	bl	8000aec <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff faaf 	bl	8000aec <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1c1      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ef      	bne.n	800158a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80a6 	beq.w	8001704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b44      	ldr	r3, [pc, #272]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a43      	ldr	r2, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d118      	bne.n	8001622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa76 	bl	8000aec <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7ff fa72 	bl	8000aec <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e184      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x4d8>
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163a:	e024      	b.n	8001686 <HAL_RCC_OscConfig+0x522>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d110      	bne.n	8001666 <HAL_RCC_OscConfig+0x502>
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	e00f      	b.n	8001686 <HAL_RCC_OscConfig+0x522>
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d016      	beq.n	80016bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fa2d 	bl	8000aec <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fa29 	bl	8000aec <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e139      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0ed      	beq.n	8001696 <HAL_RCC_OscConfig+0x532>
 80016ba:	e01a      	b.n	80016f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fa16 	bl	8000aec <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff fa12 	bl	8000aec <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d906      	bls.n	80016e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e122      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	4b90      	ldr	r3, [pc, #576]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1e8      	bne.n	80016c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a8a      	ldr	r2, [pc, #552]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80016fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8108 	beq.w	800191e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	2b02      	cmp	r3, #2
 8001714:	f040 80d0 	bne.w	80018b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001718:	4b83      	ldr	r3, [pc, #524]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	429a      	cmp	r2, r3
 800172a:	d130      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	3b01      	subs	r3, #1
 8001738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d127      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11f      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001758:	2a07      	cmp	r2, #7
 800175a:	bf14      	ite	ne
 800175c:	2201      	movne	r2, #1
 800175e:	2200      	moveq	r2, #0
 8001760:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001762:	4293      	cmp	r3, r2
 8001764:	d113      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	3b01      	subs	r3, #1
 8001774:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d109      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	3b01      	subs	r3, #1
 8001788:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d06e      	beq.n	800186c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d069      	beq.n	8001868 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b7      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017b0:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017bc:	f7ff f996 	bl	8000aec <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f992 	bl	8000aec <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0a4      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b51      	ldr	r3, [pc, #324]	; (800192c <HAL_RCC_OscConfig+0x7c8>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017f2:	3a01      	subs	r2, #1
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017fc:	0212      	lsls	r2, r2, #8
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001804:	0852      	lsrs	r2, r2, #1
 8001806:	3a01      	subs	r2, #1
 8001808:	0552      	lsls	r2, r2, #21
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001810:	0852      	lsrs	r2, r2, #1
 8001812:	3a01      	subs	r2, #1
 8001814:	0652      	lsls	r2, r2, #25
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800181c:	0912      	lsrs	r2, r2, #4
 800181e:	0452      	lsls	r2, r2, #17
 8001820:	430a      	orrs	r2, r1
 8001822:	4941      	ldr	r1, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001840:	f7ff f954 	bl	8000aec <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f950 	bl	8000aec <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e062      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001866:	e05a      	b.n	800191e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e059      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d152      	bne.n	800191e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001890:	f7ff f92c 	bl	8000aec <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f928 	bl	8000aec <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e03a      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x734>
 80018b6:	e032      	b.n	800191e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d02d      	beq.n	800191a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018dc:	f023 0303 	bic.w	r3, r3, #3
 80018e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff f8fb 	bl	8000aec <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f8f7 	bl	8000aec <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e009      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x796>
 8001918:	e001      	b.n	800191e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	f99d808c 	.word	0xf99d808c

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0c8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4961      	ldr	r1, [pc, #388]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b0      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d04c      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001988:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d121      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e09e      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e092      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b8:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e086      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e07e      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 0203 	bic.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	493f      	ldr	r1, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ea:	f7ff f87f 	bl	8000aec <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7ff f87b 	bl	8000aec <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e066      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 020c 	and.w	r2, r3, #12
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d1eb      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	492c      	ldr	r1, [pc, #176]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4924      	ldr	r1, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e036      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4910      	ldr	r1, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa6:	f000 f825 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe ffbe 	bl	8000a4c <HAL_InitTick>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	080031c0 	.word	0x080031c0
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d121      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11e      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e005      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b50:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10d      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	e004      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d134      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d003      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8001b98:	e005      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b9c:	617b      	str	r3, [r7, #20]
      break;
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ba2:	617b      	str	r3, [r7, #20]
      break;
 8001ba4:	e002      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	617b      	str	r3, [r7, #20]
      break;
 8001baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	fb02 f203 	mul.w	r2, r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	0e5b      	lsrs	r3, r3, #25
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bec:	69bb      	ldr	r3, [r7, #24]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	080031d8 	.word	0x080031d8
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	080031d0 	.word	0x080031d0

08001c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c54:	f7ff ffda 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0adb      	lsrs	r3, r3, #11
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080031d0 	.word	0x080031d0

08001c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c94:	f7ff fa02 	bl	800109c <HAL_PWREx_GetVoltageRange>
 8001c98:	6178      	str	r0, [r7, #20]
 8001c9a:	e014      	b.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb4:	f7ff f9f2 	bl	800109c <HAL_PWREx_GetVoltageRange>
 8001cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ccc:	d10b      	bne.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d919      	bls.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd8:	d902      	bls.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cda:	2302      	movs	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e013      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e010      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b80      	cmp	r3, #128	; 0x80
 8001cea:	d902      	bls.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cec:	2303      	movs	r3, #3
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e00a      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d102      	bne.n	8001cfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	e004      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b70      	cmp	r3, #112	; 0x70
 8001d02:	d101      	bne.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 0207 	bic.w	r2, r3, #7
 8001d10:	4909      	ldr	r1, [pc, #36]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d44:	2300      	movs	r3, #0
 8001d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d041      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d60:	d02a      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d66:	d824      	bhi.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d72:	d81e      	bhi.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d7e:	e018      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d80:	4b86      	ldr	r3, [pc, #536]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a85      	ldr	r2, [pc, #532]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d8c:	e015      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fabb 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d9e:	e00c      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3320      	adds	r3, #32
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fba6 	bl	80024f8 <RCCEx_PLLSAI2_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db0:	e003      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	74fb      	strb	r3, [r7, #19]
      break;
 8001db6:	e000      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc0:	4b76      	ldr	r3, [pc, #472]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dce:	4973      	ldr	r1, [pc, #460]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dd6:	e001      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d041      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001df0:	d02a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001df6:	d824      	bhi.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e02:	d81e      	bhi.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e10:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a61      	ldr	r2, [pc, #388]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e1c:	e015      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fa73 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e2e:	e00c      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3320      	adds	r3, #32
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fb5e 	bl	80024f8 <RCCEx_PLLSAI2_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e40:	e003      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	74fb      	strb	r3, [r7, #19]
      break;
 8001e46:	e000      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e4a:	7cfb      	ldrb	r3, [r7, #19]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e5e:	494f      	ldr	r1, [pc, #316]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e66:	e001      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a0 	beq.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3a      	ldr	r2, [pc, #232]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe16 	bl	8000aec <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fe12 	bl	8000aec <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d15c      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01f      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d019      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fdd1 	bl	8000aec <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fdcd 	bl	8000aec <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d902      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	74fb      	strb	r3, [r7, #19]
            break;
 8001f64:	e006      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ec      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8a:	4904      	ldr	r1, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f92:	e009      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
 8001f98:	e006      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b9e      	ldr	r3, [pc, #632]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a9d      	ldr	r2, [pc, #628]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc6:	4b98      	ldr	r3, [pc, #608]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f023 0203 	bic.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	4994      	ldr	r1, [pc, #592]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 020c 	bic.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	498c      	ldr	r1, [pc, #560]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800200a:	4b87      	ldr	r3, [pc, #540]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4983      	ldr	r1, [pc, #524]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800202c:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	497b      	ldr	r1, [pc, #492]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	4972      	ldr	r1, [pc, #456]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002070:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	496a      	ldr	r1, [pc, #424]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	4961      	ldr	r1, [pc, #388]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020b4:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4959      	ldr	r1, [pc, #356]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	4950      	ldr	r1, [pc, #320]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	4948      	ldr	r1, [pc, #288]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	493f      	ldr	r1, [pc, #252]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d028      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800213c:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214a:	4937      	ldr	r1, [pc, #220]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215a:	d106      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a31      	ldr	r2, [pc, #196]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
 8002168:	e011      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002172:	d10c      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f8c8 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d028      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	491f      	ldr	r1, [pc, #124]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c4:	60d3      	str	r3, [r2, #12]
 80021c6:	e011      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f899 	bl	8002310 <RCCEx_PLLSAI1_Config>
 80021de:	4603      	mov	r3, r0
 80021e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02b      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002216:	d109      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a02      	ldr	r2, [pc, #8]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002222:	60d3      	str	r3, [r2, #12]
 8002224:	e014      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002234:	d10c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f867 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02f      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800226a:	4928      	ldr	r1, [pc, #160]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800227a:	d10d      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3304      	adds	r3, #4
 8002280:	2102      	movs	r1, #2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f844 	bl	8002310 <RCCEx_PLLSAI1_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d014      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	74bb      	strb	r3, [r7, #18]
 8002296:	e011      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3320      	adds	r3, #32
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f925 	bl	80024f8 <RCCEx_PLLSAI2_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d6:	490d      	ldr	r1, [pc, #52]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fa:	4904      	ldr	r1, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002302:	7cbb      	ldrb	r3, [r7, #18]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000

08002310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800231e:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d018      	beq.n	800235c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d10d      	bne.n	8002356 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
       ||
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
       ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d047      	beq.n	80023e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e044      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d018      	beq.n	8002396 <RCCEx_PLLSAI1_Config+0x86>
 8002364:	2b03      	cmp	r3, #3
 8002366:	d825      	bhi.n	80023b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d002      	beq.n	8002372 <RCCEx_PLLSAI1_Config+0x62>
 800236c:	2b02      	cmp	r3, #2
 800236e:	d009      	beq.n	8002384 <RCCEx_PLLSAI1_Config+0x74>
 8002370:	e020      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002372:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d11d      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002382:	e01a      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002384:	4b5b      	ldr	r3, [pc, #364]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002394:	e013      	b.n	80023be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002396:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023a2:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023b2:	e006      	b.n	80023c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e004      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ba:	bf00      	nop
 80023bc:	e002      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023ca:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6819      	ldr	r1, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	430b      	orrs	r3, r1
 80023e0:	4944      	ldr	r1, [pc, #272]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d17d      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a40      	ldr	r2, [pc, #256]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7fe fb78 	bl	8000aec <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023fe:	e009      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002400:	f7fe fb74 	bl	8000aec <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d902      	bls.n	8002414 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	73fb      	strb	r3, [r7, #15]
        break;
 8002412:	e005      	b.n	8002420 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ef      	bne.n	8002400 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d160      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d111      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6892      	ldr	r2, [r2, #8]
 800243c:	0211      	lsls	r1, r2, #8
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68d2      	ldr	r2, [r2, #12]
 8002442:	0912      	lsrs	r2, r2, #4
 8002444:	0452      	lsls	r2, r2, #17
 8002446:	430a      	orrs	r2, r1
 8002448:	492a      	ldr	r1, [pc, #168]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	610b      	str	r3, [r1, #16]
 800244e:	e027      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d112      	bne.n	800247c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800245e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6892      	ldr	r2, [r2, #8]
 8002466:	0211      	lsls	r1, r2, #8
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6912      	ldr	r2, [r2, #16]
 800246c:	0852      	lsrs	r2, r2, #1
 800246e:	3a01      	subs	r2, #1
 8002470:	0552      	lsls	r2, r2, #21
 8002472:	430a      	orrs	r2, r1
 8002474:	491f      	ldr	r1, [pc, #124]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	610b      	str	r3, [r1, #16]
 800247a:	e011      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002484:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	0211      	lsls	r1, r2, #8
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6952      	ldr	r2, [r2, #20]
 8002492:	0852      	lsrs	r2, r2, #1
 8002494:	3a01      	subs	r2, #1
 8002496:	0652      	lsls	r2, r2, #25
 8002498:	430a      	orrs	r2, r1
 800249a:	4916      	ldr	r1, [pc, #88]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fb1e 	bl	8000aec <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024b2:	e009      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024b4:	f7fe fb1a 	bl	8000aec <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d902      	bls.n	80024c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	73fb      	strb	r3, [r7, #15]
          break;
 80024c6:	e005      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4904      	ldr	r1, [pc, #16]	; (80024f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002506:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d018      	beq.n	8002544 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0203 	and.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d10d      	bne.n	800253e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
       ||
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800252a:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
       ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d047      	beq.n	80025ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e044      	b.n	80025ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d018      	beq.n	800257e <RCCEx_PLLSAI2_Config+0x86>
 800254c:	2b03      	cmp	r3, #3
 800254e:	d825      	bhi.n	800259c <RCCEx_PLLSAI2_Config+0xa4>
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <RCCEx_PLLSAI2_Config+0x62>
 8002554:	2b02      	cmp	r3, #2
 8002556:	d009      	beq.n	800256c <RCCEx_PLLSAI2_Config+0x74>
 8002558:	e020      	b.n	800259c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800255a:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11d      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256a:	e01a      	b.n	80025a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e013      	b.n	80025a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800257e:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800258a:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800259a:	e006      	b.n	80025aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e004      	b.n	80025ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025a2:	bf00      	nop
 80025a4:	e002      	b.n	80025ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	430b      	orrs	r3, r1
 80025c8:	4939      	ldr	r1, [pc, #228]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d167      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e0:	f7fe fa84 	bl	8000aec <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025e6:	e009      	b.n	80025fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025e8:	f7fe fa80 	bl	8000aec <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d902      	bls.n	80025fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	73fb      	strb	r3, [r7, #15]
        break;
 80025fa:	e005      	b.n	8002608 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ef      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d14a      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d111      	bne.n	8002638 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800261c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	0211      	lsls	r1, r2, #8
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	0912      	lsrs	r2, r2, #4
 800262c:	0452      	lsls	r2, r2, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	491f      	ldr	r1, [pc, #124]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	4313      	orrs	r3, r2
 8002634:	614b      	str	r3, [r1, #20]
 8002636:	e011      	b.n	800265c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6912      	ldr	r2, [r2, #16]
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0652      	lsls	r2, r2, #25
 8002654:	430a      	orrs	r2, r1
 8002656:	4916      	ldr	r1, [pc, #88]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	4313      	orrs	r3, r2
 800265a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fa40 	bl	8000aec <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800266e:	e009      	b.n	8002684 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002670:	f7fe fa3c 	bl	8000aec <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	73fb      	strb	r3, [r7, #15]
          break;
 8002682:	e005      	b.n	8002690 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4904      	ldr	r1, [pc, #16]	; (80026b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e040      	b.n	8002748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe f8d0 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8c0 	bl	8002878 <UART_SetConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e022      	b.n	8002748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fb3e 	bl	8002d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800271e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800272e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fbc5 	bl	8002ed0 <UART_CheckIdleState>
 8002746:	4603      	mov	r3, r0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002764:	2b20      	cmp	r3, #32
 8002766:	f040 8082 	bne.w	800286e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_Transmit+0x26>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07a      	b.n	8002870 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_UART_Transmit+0x38>
 8002784:	2302      	movs	r3, #2
 8002786:	e073      	b.n	8002870 <HAL_UART_Transmit+0x120>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2221      	movs	r2, #33	; 0x21
 800279c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800279e:	f7fe f9a5 	bl	8000aec <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0x80>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80027e0:	e02d      	b.n	800283e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fbb8 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e039      	b.n	8002870 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800280e:	b292      	uxth	r2, r2
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	3302      	adds	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e008      	b.n	800282c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b292      	uxth	r2, r2
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1cb      	bne.n	80027e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2200      	movs	r2, #0
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fb84 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e005      	b.n	8002870 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4313      	orrs	r3, r2
 800289a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4bad      	ldr	r3, [pc, #692]	; (8002b58 <UART_SetConfig+0x2e0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	69f9      	ldr	r1, [r7, #28]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4aa2      	ldr	r2, [pc, #648]	; (8002b5c <UART_SetConfig+0x2e4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a99      	ldr	r2, [pc, #612]	; (8002b60 <UART_SetConfig+0x2e8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d121      	bne.n	8002942 <UART_SetConfig+0xca>
 80028fe:	4b99      	ldr	r3, [pc, #612]	; (8002b64 <UART_SetConfig+0x2ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d817      	bhi.n	800293c <UART_SetConfig+0xc4>
 800290c:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <UART_SetConfig+0x9c>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002925 	.word	0x08002925
 8002918:	08002931 	.word	0x08002931
 800291c:	0800292b 	.word	0x0800292b
 8002920:	08002937 	.word	0x08002937
 8002924:	2301      	movs	r3, #1
 8002926:	76fb      	strb	r3, [r7, #27]
 8002928:	e0e7      	b.n	8002afa <UART_SetConfig+0x282>
 800292a:	2302      	movs	r3, #2
 800292c:	76fb      	strb	r3, [r7, #27]
 800292e:	e0e4      	b.n	8002afa <UART_SetConfig+0x282>
 8002930:	2304      	movs	r3, #4
 8002932:	76fb      	strb	r3, [r7, #27]
 8002934:	e0e1      	b.n	8002afa <UART_SetConfig+0x282>
 8002936:	2308      	movs	r3, #8
 8002938:	76fb      	strb	r3, [r7, #27]
 800293a:	e0de      	b.n	8002afa <UART_SetConfig+0x282>
 800293c:	2310      	movs	r3, #16
 800293e:	76fb      	strb	r3, [r7, #27]
 8002940:	e0db      	b.n	8002afa <UART_SetConfig+0x282>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a88      	ldr	r2, [pc, #544]	; (8002b68 <UART_SetConfig+0x2f0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d132      	bne.n	80029b2 <UART_SetConfig+0x13a>
 800294c:	4b85      	ldr	r3, [pc, #532]	; (8002b64 <UART_SetConfig+0x2ec>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d828      	bhi.n	80029ac <UART_SetConfig+0x134>
 800295a:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <UART_SetConfig+0xe8>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	08002995 	.word	0x08002995
 8002964:	080029ad 	.word	0x080029ad
 8002968:	080029ad 	.word	0x080029ad
 800296c:	080029ad 	.word	0x080029ad
 8002970:	080029a1 	.word	0x080029a1
 8002974:	080029ad 	.word	0x080029ad
 8002978:	080029ad 	.word	0x080029ad
 800297c:	080029ad 	.word	0x080029ad
 8002980:	0800299b 	.word	0x0800299b
 8002984:	080029ad 	.word	0x080029ad
 8002988:	080029ad 	.word	0x080029ad
 800298c:	080029ad 	.word	0x080029ad
 8002990:	080029a7 	.word	0x080029a7
 8002994:	2300      	movs	r3, #0
 8002996:	76fb      	strb	r3, [r7, #27]
 8002998:	e0af      	b.n	8002afa <UART_SetConfig+0x282>
 800299a:	2302      	movs	r3, #2
 800299c:	76fb      	strb	r3, [r7, #27]
 800299e:	e0ac      	b.n	8002afa <UART_SetConfig+0x282>
 80029a0:	2304      	movs	r3, #4
 80029a2:	76fb      	strb	r3, [r7, #27]
 80029a4:	e0a9      	b.n	8002afa <UART_SetConfig+0x282>
 80029a6:	2308      	movs	r3, #8
 80029a8:	76fb      	strb	r3, [r7, #27]
 80029aa:	e0a6      	b.n	8002afa <UART_SetConfig+0x282>
 80029ac:	2310      	movs	r3, #16
 80029ae:	76fb      	strb	r3, [r7, #27]
 80029b0:	e0a3      	b.n	8002afa <UART_SetConfig+0x282>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6d      	ldr	r2, [pc, #436]	; (8002b6c <UART_SetConfig+0x2f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d120      	bne.n	80029fe <UART_SetConfig+0x186>
 80029bc:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <UART_SetConfig+0x2ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029c6:	2b30      	cmp	r3, #48	; 0x30
 80029c8:	d013      	beq.n	80029f2 <UART_SetConfig+0x17a>
 80029ca:	2b30      	cmp	r3, #48	; 0x30
 80029cc:	d814      	bhi.n	80029f8 <UART_SetConfig+0x180>
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d009      	beq.n	80029e6 <UART_SetConfig+0x16e>
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d810      	bhi.n	80029f8 <UART_SetConfig+0x180>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <UART_SetConfig+0x168>
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d006      	beq.n	80029ec <UART_SetConfig+0x174>
 80029de:	e00b      	b.n	80029f8 <UART_SetConfig+0x180>
 80029e0:	2300      	movs	r3, #0
 80029e2:	76fb      	strb	r3, [r7, #27]
 80029e4:	e089      	b.n	8002afa <UART_SetConfig+0x282>
 80029e6:	2302      	movs	r3, #2
 80029e8:	76fb      	strb	r3, [r7, #27]
 80029ea:	e086      	b.n	8002afa <UART_SetConfig+0x282>
 80029ec:	2304      	movs	r3, #4
 80029ee:	76fb      	strb	r3, [r7, #27]
 80029f0:	e083      	b.n	8002afa <UART_SetConfig+0x282>
 80029f2:	2308      	movs	r3, #8
 80029f4:	76fb      	strb	r3, [r7, #27]
 80029f6:	e080      	b.n	8002afa <UART_SetConfig+0x282>
 80029f8:	2310      	movs	r3, #16
 80029fa:	76fb      	strb	r3, [r7, #27]
 80029fc:	e07d      	b.n	8002afa <UART_SetConfig+0x282>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <UART_SetConfig+0x2f8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d120      	bne.n	8002a4a <UART_SetConfig+0x1d2>
 8002a08:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <UART_SetConfig+0x2ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a12:	2bc0      	cmp	r3, #192	; 0xc0
 8002a14:	d013      	beq.n	8002a3e <UART_SetConfig+0x1c6>
 8002a16:	2bc0      	cmp	r3, #192	; 0xc0
 8002a18:	d814      	bhi.n	8002a44 <UART_SetConfig+0x1cc>
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d009      	beq.n	8002a32 <UART_SetConfig+0x1ba>
 8002a1e:	2b80      	cmp	r3, #128	; 0x80
 8002a20:	d810      	bhi.n	8002a44 <UART_SetConfig+0x1cc>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <UART_SetConfig+0x1b4>
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d006      	beq.n	8002a38 <UART_SetConfig+0x1c0>
 8002a2a:	e00b      	b.n	8002a44 <UART_SetConfig+0x1cc>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	76fb      	strb	r3, [r7, #27]
 8002a30:	e063      	b.n	8002afa <UART_SetConfig+0x282>
 8002a32:	2302      	movs	r3, #2
 8002a34:	76fb      	strb	r3, [r7, #27]
 8002a36:	e060      	b.n	8002afa <UART_SetConfig+0x282>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	76fb      	strb	r3, [r7, #27]
 8002a3c:	e05d      	b.n	8002afa <UART_SetConfig+0x282>
 8002a3e:	2308      	movs	r3, #8
 8002a40:	76fb      	strb	r3, [r7, #27]
 8002a42:	e05a      	b.n	8002afa <UART_SetConfig+0x282>
 8002a44:	2310      	movs	r3, #16
 8002a46:	76fb      	strb	r3, [r7, #27]
 8002a48:	e057      	b.n	8002afa <UART_SetConfig+0x282>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <UART_SetConfig+0x2fc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d125      	bne.n	8002aa0 <UART_SetConfig+0x228>
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <UART_SetConfig+0x2ec>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a62:	d017      	beq.n	8002a94 <UART_SetConfig+0x21c>
 8002a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a68:	d817      	bhi.n	8002a9a <UART_SetConfig+0x222>
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6e:	d00b      	beq.n	8002a88 <UART_SetConfig+0x210>
 8002a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a74:	d811      	bhi.n	8002a9a <UART_SetConfig+0x222>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <UART_SetConfig+0x20a>
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d006      	beq.n	8002a8e <UART_SetConfig+0x216>
 8002a80:	e00b      	b.n	8002a9a <UART_SetConfig+0x222>
 8002a82:	2300      	movs	r3, #0
 8002a84:	76fb      	strb	r3, [r7, #27]
 8002a86:	e038      	b.n	8002afa <UART_SetConfig+0x282>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	76fb      	strb	r3, [r7, #27]
 8002a8c:	e035      	b.n	8002afa <UART_SetConfig+0x282>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	76fb      	strb	r3, [r7, #27]
 8002a92:	e032      	b.n	8002afa <UART_SetConfig+0x282>
 8002a94:	2308      	movs	r3, #8
 8002a96:	76fb      	strb	r3, [r7, #27]
 8002a98:	e02f      	b.n	8002afa <UART_SetConfig+0x282>
 8002a9a:	2310      	movs	r3, #16
 8002a9c:	76fb      	strb	r3, [r7, #27]
 8002a9e:	e02c      	b.n	8002afa <UART_SetConfig+0x282>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <UART_SetConfig+0x2e4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d125      	bne.n	8002af6 <UART_SetConfig+0x27e>
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <UART_SetConfig+0x2ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ab8:	d017      	beq.n	8002aea <UART_SetConfig+0x272>
 8002aba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002abe:	d817      	bhi.n	8002af0 <UART_SetConfig+0x278>
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac4:	d00b      	beq.n	8002ade <UART_SetConfig+0x266>
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aca:	d811      	bhi.n	8002af0 <UART_SetConfig+0x278>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <UART_SetConfig+0x260>
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad4:	d006      	beq.n	8002ae4 <UART_SetConfig+0x26c>
 8002ad6:	e00b      	b.n	8002af0 <UART_SetConfig+0x278>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	76fb      	strb	r3, [r7, #27]
 8002adc:	e00d      	b.n	8002afa <UART_SetConfig+0x282>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	76fb      	strb	r3, [r7, #27]
 8002ae2:	e00a      	b.n	8002afa <UART_SetConfig+0x282>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	76fb      	strb	r3, [r7, #27]
 8002ae8:	e007      	b.n	8002afa <UART_SetConfig+0x282>
 8002aea:	2308      	movs	r3, #8
 8002aec:	76fb      	strb	r3, [r7, #27]
 8002aee:	e004      	b.n	8002afa <UART_SetConfig+0x282>
 8002af0:	2310      	movs	r3, #16
 8002af2:	76fb      	strb	r3, [r7, #27]
 8002af4:	e001      	b.n	8002afa <UART_SetConfig+0x282>
 8002af6:	2310      	movs	r3, #16
 8002af8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <UART_SetConfig+0x2e4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f040 8087 	bne.w	8002c14 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b06:	7efb      	ldrb	r3, [r7, #27]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d837      	bhi.n	8002b7c <UART_SetConfig+0x304>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <UART_SetConfig+0x29c>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002b7d 	.word	0x08002b7d
 8002b1c:	08002b41 	.word	0x08002b41
 8002b20:	08002b7d 	.word	0x08002b7d
 8002b24:	08002b47 	.word	0x08002b47
 8002b28:	08002b7d 	.word	0x08002b7d
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002b7d 	.word	0x08002b7d
 8002b34:	08002b4f 	.word	0x08002b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b38:	f7ff f874 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002b3c:	6178      	str	r0, [r7, #20]
        break;
 8002b3e:	e022      	b.n	8002b86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <UART_SetConfig+0x300>)
 8002b42:	617b      	str	r3, [r7, #20]
        break;
 8002b44:	e01f      	b.n	8002b86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b46:	f7fe ffd5 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8002b4a:	6178      	str	r0, [r7, #20]
        break;
 8002b4c:	e01b      	b.n	8002b86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	617b      	str	r3, [r7, #20]
        break;
 8002b54:	e017      	b.n	8002b86 <UART_SetConfig+0x30e>
 8002b56:	bf00      	nop
 8002b58:	efff69f3 	.word	0xefff69f3
 8002b5c:	40008000 	.word	0x40008000
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40004400 	.word	0x40004400
 8002b6c:	40004800 	.word	0x40004800
 8002b70:	40004c00 	.word	0x40004c00
 8002b74:	40005000 	.word	0x40005000
 8002b78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	76bb      	strb	r3, [r7, #26]
        break;
 8002b84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80f1 	beq.w	8002d70 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d305      	bcc.n	8002baa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d902      	bls.n	8002bb0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	76bb      	strb	r3, [r7, #26]
 8002bae:	e0df      	b.n	8002d70 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	020b      	lsls	r3, r1, #8
 8002bc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002bc6:	0202      	lsls	r2, r0, #8
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6849      	ldr	r1, [r1, #4]
 8002bcc:	0849      	lsrs	r1, r1, #1
 8002bce:	4608      	mov	r0, r1
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	1814      	adds	r4, r2, r0
 8002bd6:	eb43 0501 	adc.w	r5, r3, r1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	4620      	mov	r0, r4
 8002be6:	4629      	mov	r1, r5
 8002be8:	f7fd faf6 	bl	80001d8 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bfa:	d308      	bcc.n	8002c0e <UART_SetConfig+0x396>
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c02:	d204      	bcs.n	8002c0e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e0b0      	b.n	8002d70 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	76bb      	strb	r3, [r7, #26]
 8002c12:	e0ad      	b.n	8002d70 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d15c      	bne.n	8002cd8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002c1e:	7efb      	ldrb	r3, [r7, #27]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d828      	bhi.n	8002c76 <UART_SetConfig+0x3fe>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0x3b4>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c61 	.word	0x08002c61
 8002c38:	08002c77 	.word	0x08002c77
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c77 	.word	0x08002c77
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002c77 	.word	0x08002c77
 8002c4c:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7fe ffe8 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002c54:	6178      	str	r0, [r7, #20]
        break;
 8002c56:	e013      	b.n	8002c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7fe fffa 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	6178      	str	r0, [r7, #20]
        break;
 8002c5e:	e00f      	b.n	8002c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <UART_SetConfig+0x510>)
 8002c62:	617b      	str	r3, [r7, #20]
        break;
 8002c64:	e00c      	b.n	8002c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7fe ff45 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8002c6a:	6178      	str	r0, [r7, #20]
        break;
 8002c6c:	e008      	b.n	8002c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c72:	617b      	str	r3, [r7, #20]
        break;
 8002c74:	e004      	b.n	8002c80 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	76bb      	strb	r3, [r7, #26]
        break;
 8002c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d074      	beq.n	8002d70 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	005a      	lsls	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	441a      	add	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b0f      	cmp	r3, #15
 8002ca2:	d916      	bls.n	8002cd2 <UART_SetConfig+0x45a>
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002caa:	d212      	bcs.n	8002cd2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f023 030f 	bic.w	r3, r3, #15
 8002cb4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	89fa      	ldrh	r2, [r7, #14]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	e04e      	b.n	8002d70 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	76bb      	strb	r3, [r7, #26]
 8002cd6:	e04b      	b.n	8002d70 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cd8:	7efb      	ldrb	r3, [r7, #27]
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d827      	bhi.n	8002d2e <UART_SetConfig+0x4b6>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <UART_SetConfig+0x46c>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	08002d19 	.word	0x08002d19
 8002cf0:	08002d2f 	.word	0x08002d2f
 8002cf4:	08002d1f 	.word	0x08002d1f
 8002cf8:	08002d2f 	.word	0x08002d2f
 8002cfc:	08002d2f 	.word	0x08002d2f
 8002d00:	08002d2f 	.word	0x08002d2f
 8002d04:	08002d27 	.word	0x08002d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d08:	f7fe ff8c 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002d0c:	6178      	str	r0, [r7, #20]
        break;
 8002d0e:	e013      	b.n	8002d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d10:	f7fe ff9e 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 8002d14:	6178      	str	r0, [r7, #20]
        break;
 8002d16:	e00f      	b.n	8002d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <UART_SetConfig+0x510>)
 8002d1a:	617b      	str	r3, [r7, #20]
        break;
 8002d1c:	e00c      	b.n	8002d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1e:	f7fe fee9 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8002d22:	6178      	str	r0, [r7, #20]
        break;
 8002d24:	e008      	b.n	8002d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d2a:	617b      	str	r3, [r7, #20]
        break;
 8002d2c:	e004      	b.n	8002d38 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	76bb      	strb	r3, [r7, #26]
        break;
 8002d36:	bf00      	nop
    }

    if (pclk != 0U)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	085a      	lsrs	r2, r3, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d908      	bls.n	8002d6c <UART_SetConfig+0x4f4>
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d204      	bcs.n	8002d6c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	e001      	b.n	8002d70 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d7c:	7ebb      	ldrb	r3, [r7, #26]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	00f42400 	.word	0x00f42400

08002d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01a      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e8a:	d10a      	bne.n	8002ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ee0:	f7fd fe04 	bl	8000aec <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d10e      	bne.n	8002f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f82d 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e023      	b.n	8002f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d10e      	bne.n	8002f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f817 	bl	8002f62 <UART_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e00d      	b.n	8002f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f72:	e05e      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d05a      	beq.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fd fdb6 	bl	8000aec <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11b      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fa0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e043      	b.n	8003052 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02c      	beq.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe6:	d124      	bne.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003000:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e00f      	b.n	8003052 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	429a      	cmp	r2, r3
 800304e:	d091      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4d0d      	ldr	r5, [pc, #52]	; (8003094 <__libc_init_array+0x38>)
 8003060:	4c0d      	ldr	r4, [pc, #52]	; (8003098 <__libc_init_array+0x3c>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	2600      	movs	r6, #0
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	4d0b      	ldr	r5, [pc, #44]	; (800309c <__libc_init_array+0x40>)
 800306e:	4c0c      	ldr	r4, [pc, #48]	; (80030a0 <__libc_init_array+0x44>)
 8003070:	f000 f88c 	bl	800318c <_init>
 8003074:	1b64      	subs	r4, r4, r5
 8003076:	10a4      	asrs	r4, r4, #2
 8003078:	2600      	movs	r6, #0
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f855 3b04 	ldr.w	r3, [r5], #4
 8003084:	4798      	blx	r3
 8003086:	3601      	adds	r6, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f855 3b04 	ldr.w	r3, [r5], #4
 800308e:	4798      	blx	r3
 8003090:	3601      	adds	r6, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	08003238 	.word	0x08003238
 8003098:	08003238 	.word	0x08003238
 800309c:	08003238 	.word	0x08003238
 80030a0:	0800323c 	.word	0x0800323c

080030a4 <__itoa>:
 80030a4:	1e93      	subs	r3, r2, #2
 80030a6:	2b22      	cmp	r3, #34	; 0x22
 80030a8:	b510      	push	{r4, lr}
 80030aa:	460c      	mov	r4, r1
 80030ac:	d904      	bls.n	80030b8 <__itoa+0x14>
 80030ae:	2300      	movs	r3, #0
 80030b0:	700b      	strb	r3, [r1, #0]
 80030b2:	461c      	mov	r4, r3
 80030b4:	4620      	mov	r0, r4
 80030b6:	bd10      	pop	{r4, pc}
 80030b8:	2a0a      	cmp	r2, #10
 80030ba:	d109      	bne.n	80030d0 <__itoa+0x2c>
 80030bc:	2800      	cmp	r0, #0
 80030be:	da07      	bge.n	80030d0 <__itoa+0x2c>
 80030c0:	232d      	movs	r3, #45	; 0x2d
 80030c2:	700b      	strb	r3, [r1, #0]
 80030c4:	4240      	negs	r0, r0
 80030c6:	2101      	movs	r1, #1
 80030c8:	4421      	add	r1, r4
 80030ca:	f000 f81d 	bl	8003108 <__utoa>
 80030ce:	e7f1      	b.n	80030b4 <__itoa+0x10>
 80030d0:	2100      	movs	r1, #0
 80030d2:	e7f9      	b.n	80030c8 <__itoa+0x24>

080030d4 <itoa>:
 80030d4:	f7ff bfe6 	b.w	80030a4 <__itoa>

080030d8 <memset>:
 80030d8:	4402      	add	r2, r0
 80030da:	4603      	mov	r3, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	f803 1b01 	strb.w	r1, [r3], #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <strcat>:
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4602      	mov	r2, r0
 80030ec:	7814      	ldrb	r4, [r2, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	3201      	adds	r2, #1
 80030f2:	2c00      	cmp	r4, #0
 80030f4:	d1fa      	bne.n	80030ec <strcat+0x4>
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003100:	2a00      	cmp	r2, #0
 8003102:	d1f9      	bne.n	80030f8 <strcat+0x10>
 8003104:	bd10      	pop	{r4, pc}
	...

08003108 <__utoa>:
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	4c1f      	ldr	r4, [pc, #124]	; (8003188 <__utoa+0x80>)
 800310c:	b08b      	sub	sp, #44	; 0x2c
 800310e:	4605      	mov	r5, r0
 8003110:	460b      	mov	r3, r1
 8003112:	466e      	mov	r6, sp
 8003114:	f104 0c20 	add.w	ip, r4, #32
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	6861      	ldr	r1, [r4, #4]
 800311c:	4637      	mov	r7, r6
 800311e:	c703      	stmia	r7!, {r0, r1}
 8003120:	3408      	adds	r4, #8
 8003122:	4564      	cmp	r4, ip
 8003124:	463e      	mov	r6, r7
 8003126:	d1f7      	bne.n	8003118 <__utoa+0x10>
 8003128:	7921      	ldrb	r1, [r4, #4]
 800312a:	7139      	strb	r1, [r7, #4]
 800312c:	1e91      	subs	r1, r2, #2
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	6038      	str	r0, [r7, #0]
 8003132:	2922      	cmp	r1, #34	; 0x22
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	d904      	bls.n	8003144 <__utoa+0x3c>
 800313a:	7019      	strb	r1, [r3, #0]
 800313c:	460b      	mov	r3, r1
 800313e:	4618      	mov	r0, r3
 8003140:	b00b      	add	sp, #44	; 0x2c
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003144:	1e58      	subs	r0, r3, #1
 8003146:	4684      	mov	ip, r0
 8003148:	fbb5 f7f2 	udiv	r7, r5, r2
 800314c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003150:	fb02 5617 	mls	r6, r2, r7, r5
 8003154:	4476      	add	r6, lr
 8003156:	460c      	mov	r4, r1
 8003158:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800315c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003160:	462e      	mov	r6, r5
 8003162:	42b2      	cmp	r2, r6
 8003164:	f101 0101 	add.w	r1, r1, #1
 8003168:	463d      	mov	r5, r7
 800316a:	d9ed      	bls.n	8003148 <__utoa+0x40>
 800316c:	2200      	movs	r2, #0
 800316e:	545a      	strb	r2, [r3, r1]
 8003170:	1919      	adds	r1, r3, r4
 8003172:	1aa5      	subs	r5, r4, r2
 8003174:	42aa      	cmp	r2, r5
 8003176:	dae2      	bge.n	800313e <__utoa+0x36>
 8003178:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800317c:	780e      	ldrb	r6, [r1, #0]
 800317e:	7006      	strb	r6, [r0, #0]
 8003180:	3201      	adds	r2, #1
 8003182:	f801 5901 	strb.w	r5, [r1], #-1
 8003186:	e7f4      	b.n	8003172 <__utoa+0x6a>
 8003188:	08003208 	.word	0x08003208

0800318c <_init>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr

08003198 <_fini>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	bf00      	nop
 800319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319e:	bc08      	pop	{r3}
 80031a0:	469e      	mov	lr, r3
 80031a2:	4770      	bx	lr
