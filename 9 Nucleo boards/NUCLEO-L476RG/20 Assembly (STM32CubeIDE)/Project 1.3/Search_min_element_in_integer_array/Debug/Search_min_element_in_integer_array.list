
Search_min_element_in_integer_array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ec  080039ec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f4  080039f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080039fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000084  08003a80  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003a80  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a92b  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001917  00000000  00000000  0002a9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e34  00000000  00000000  0002d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009560  00000000  00000000  00053224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e96cd  00000000  00000000  0005c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002618  00000000  00000000  00145ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003948 	.word	0x08003948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08003948 	.word	0x08003948

080001d0 <max_int>:
				.global max_int
				.text
max_int:
				ldr	r2,	[r0]
 80001d0:	6802      	ldr	r2, [r0, #0]

080001d2 <next>:
next:
				ldr	r3,	[r0, #4]
 80001d2:	6843      	ldr	r3, [r0, #4]
				cmp	r2,	r3
 80001d4:	429a      	cmp	r2, r3
				bgt	cont
 80001d6:	dc00      	bgt.n	80001da <cont>
				mov	r2,	r3
 80001d8:	1c1a      	adds	r2, r3, #0

080001da <cont>:
cont:
				add	r0,	r0,	#4
 80001da:	3004      	adds	r0, #4
				sub	r1,	r1,	#1
 80001dc:	3901      	subs	r1, #1
				cmp r1, #1
 80001de:	2901      	cmp	r1, #1
				beq exit
 80001e0:	d000      	beq.n	80001e4 <exit>
				b	next
 80001e2:	e7f6      	b.n	80001d2 <next>

080001e4 <exit>:
exit:
				mov	r0, r2
 80001e4:	1c10      	adds	r0, r2, #0
				bx	lr
 80001e6:	4770      	bx	lr

080001e8 <min_int>:
				.global min_int
				.text
min_int:
				ldr	r2,	[r0]
 80001e8:	6802      	ldr	r2, [r0, #0]

080001ea <next>:
next:
				ldr	r3,	[r0, #4]
 80001ea:	6843      	ldr	r3, [r0, #4]
				cmp	r2,	r3
 80001ec:	429a      	cmp	r2, r3
				ble	cont
 80001ee:	dd00      	ble.n	80001f2 <cont>
				mov	r2,	r3
 80001f0:	1c1a      	adds	r2, r3, #0

080001f2 <cont>:
cont:
				add	r0,	r0,	#4
 80001f2:	3004      	adds	r0, #4
				sub	r1,	r1,	#1
 80001f4:	3901      	subs	r1, #1
				cmp r1, #1
 80001f6:	2901      	cmp	r1, #1
				beq exit
 80001f8:	d000      	beq.n	80001fc <exit>
				b	next
 80001fa:	e7f6      	b.n	80001ea <next>

080001fc <exit>:
exit:
				mov	r0, r2
 80001fc:	1c10      	adds	r0, r2, #0
				bx	lr
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa70 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f818 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8bc 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f88a 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  disp_data(min_int(num, sizeof(num)/4));
 80005ac:	2105      	movs	r1, #5
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <main+0x38>)
 80005b0:	f7ff fe1a 	bl	80001e8 <min_int>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f91a 	bl	80007f0 <disp_data>
  disp_data(max_int(num, sizeof(num)/4));
 80005bc:	2105      	movs	r1, #5
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0x38>)
 80005c0:	f7ff fe06 	bl	80001d0 <max_int>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f912 	bl	80007f0 <disp_data>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x34>
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0b8      	sub	sp, #224	; 0xe0
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005de:	2244      	movs	r2, #68	; 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fd7a 	bl	80030dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2288      	movs	r2, #136	; 0x88
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fd6c 	bl	80030dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000630:	2307      	movs	r3, #7
 8000632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fda2 	bl	8001190 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000652:	f000 f8ed 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f96e 	bl	800195c <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000686:	f000 f8d3 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800068a:	2302      	movs	r3, #2
 800068c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800068e:	2300      	movs	r3, #0
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb67 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006a0:	f000 f8c6 	bl	8000830 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a8:	f000 fd1c 	bl	80010e4 <HAL_PWREx_ControlVoltageScaling>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006b2:	f000 f8bd 	bl	8000830 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	37e0      	adds	r7, #224	; 0xe0
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART2_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x58>)
 8000704:	f001 ffec 	bl	80026e0 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f88f 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000ac 	.word	0x200000ac
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fc7b 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0xc8>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_GPIO_Init+0xcc>)
 80007b8:	f000 fac4 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fab5 	bl	8000d44 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	48000800 	.word	0x48000800

080007f0 <disp_data>:

/* USER CODE BEGIN 4 */

/* Seriele print routine */
void disp_data(int val){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0a4      	sub	sp, #144	; 0x90
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	char buf[128];
	int bRead;
	bRead = sprintf(buf, "Returned: %d\n\r",val);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	490a      	ldr	r1, [pc, #40]	; (8000828 <disp_data+0x38>)
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fc73 	bl	80030ec <siprintf>
 8000806:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, bRead, 300);
 800080a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800080e:	b29a      	uxth	r2, r3
 8000810:	f107 010c 	add.w	r1, r7, #12
 8000814:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <disp_data+0x3c>)
 800081a:	f001 ffaf 	bl	800277c <HAL_UART_Transmit>
}
 800081e:	bf00      	nop
 8000820:	3790      	adds	r7, #144	; 0x90
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	08003960 	.word	0x08003960
 800082c:	200000ac 	.word	0x200000ac

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d128      	bne.n	80008f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 fa26 	bl	8000d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40004400 	.word	0x40004400
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8f0 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f002 fb7c 	bl	8003088 <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20018000 	.word	0x20018000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	20000148 	.word	0x20000148

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <SystemInit+0x5c>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <SystemInit+0x5c>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <SystemInit+0x60>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <SystemInit+0x60>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SystemInit+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SystemInit+0x60>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <SystemInit+0x60>)
 80009f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <SystemInit+0x60>)
 8000a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SystemInit+0x60>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <SystemInit+0x60>)
 8000a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SystemInit+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	40021000 	.word	0x40021000

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffca 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a36:	e003      	b.n	8000a40 <LoopCopyDataInit>

08000a38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a3e:	3104      	adds	r1, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a48:	d3f6      	bcc.n	8000a38 <CopyDataInit>
	ldr	r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a4c:	e002      	b.n	8000a54 <LoopFillZerobss>

08000a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a50:	f842 3b04 	str.w	r3, [r2], #4

08000a54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <LoopForever+0x16>)
	cmp	r2, r3
 8000a56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a58:	d3f9      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 fb1b 	bl	8003094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd9b 	bl	8000598 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a68:	080039fc 	.word	0x080039fc
	ldr	r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a70:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8000a74:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8000a78:	20000144 	.word	0x20000144

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_Init+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_Init+0x3c>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f920 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fec5 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f91d 	bl	8000d2a <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f8f5 	bl	8000cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000001c 	.word	0x2000001c
 8000b30:	20000014 	.word	0x20000014
 8000b34:	20000018 	.word	0x20000018

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000001c 	.word	0x2000001c
 8000b5c:	20000130 	.word	0x20000130

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000130 	.word	0x20000130

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff47 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5c 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e17f      	b.n	8001054 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8171 	beq.w	800104e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d00b      	beq.n	8000d8c <HAL_GPIO_Init+0x48>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d007      	beq.n	8000d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d80:	2b11      	cmp	r3, #17
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b12      	cmp	r3, #18
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d118      	bne.n	8000e2c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x128>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	6939      	ldr	r1, [r7, #16]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80ac 	beq.w	800104e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <HAL_GPIO_Init+0x330>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	4a5e      	ldr	r2, [pc, #376]	; (8001074 <HAL_GPIO_Init+0x330>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	; 0x60
 8000f02:	4b5c      	ldr	r3, [pc, #368]	; (8001074 <HAL_GPIO_Init+0x330>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	; (8001078 <HAL_GPIO_Init+0x334>)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x242>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_GPIO_Init+0x338>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x23e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x33c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x23a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x340>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x236>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <HAL_GPIO_Init+0x344>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x232>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	; (800108c <HAL_GPIO_Init+0x348>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x22e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x34c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x22a>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f6e:	2307      	movs	r3, #7
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x244>
 8000f86:	2300      	movs	r3, #0
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f98:	4937      	ldr	r1, [pc, #220]	; (8001078 <HAL_GPIO_Init+0x334>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <HAL_GPIO_Init+0x350>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fca:	4a32      	ldr	r2, [pc, #200]	; (8001094 <HAL_GPIO_Init+0x350>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_GPIO_Init+0x350>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <HAL_GPIO_Init+0x350>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_GPIO_Init+0x350>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_GPIO_Init+0x350>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_GPIO_Init+0x350>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <HAL_GPIO_Init+0x350>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f ae78 	bne.w	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	48001000 	.word	0x48001000
 800108c:	48001400 	.word	0x48001400
 8001090:	48001800 	.word	0x48001800
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f2:	d130      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d038      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2232      	movs	r2, #50	; 0x32
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9b      	lsrs	r3, r3, #18
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001128:	e002      	b.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113c:	d102      	bne.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f2      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	d110      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e00f      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d007      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40007000 	.word	0x40007000
 8001188:	20000014 	.word	0x20000014
 800118c:	431bde83 	.word	0x431bde83

08001190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e3d4      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a2:	4ba1      	ldr	r3, [pc, #644]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ac:	4b9e      	ldr	r3, [pc, #632]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80e4 	beq.w	800138c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <HAL_RCC_OscConfig+0x4a>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	f040 808b 	bne.w	80012e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f040 8087 	bne.w	80012e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011da:	4b93      	ldr	r3, [pc, #588]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x62>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e3ac      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1a      	ldr	r2, [r3, #32]
 80011f6:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_RCC_OscConfig+0x7c>
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120a:	e005      	b.n	8001218 <HAL_RCC_OscConfig+0x88>
 800120c:	4b86      	ldr	r3, [pc, #536]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001218:	4293      	cmp	r3, r2
 800121a:	d223      	bcs.n	8001264 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fd41 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e38d      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a7c      	ldr	r2, [pc, #496]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b7a      	ldr	r3, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4977      	ldr	r1, [pc, #476]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
 8001262:	e025      	b.n	80012b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001264:	4b70      	ldr	r3, [pc, #448]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6f      	ldr	r2, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	4965      	ldr	r1, [pc, #404]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fd01 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e34d      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b0:	f000 fc36 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	495a      	ldr	r1, [pc, #360]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80012c2:	5ccb      	ldrb	r3, [r1, r3]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_RCC_OscConfig+0x2a0>)
 80012ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x2a4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fbf3 	bl	8000ac0 <HAL_InitTick>
 80012da:	4603      	mov	r3, r0
 80012dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d052      	beq.n	800138a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	e331      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d032      	beq.n	8001356 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc30 	bl	8000b60 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001304:	f7ff fc2c 	bl	8000b60 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e31a      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a40      	ldr	r2, [pc, #256]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	493b      	ldr	r1, [pc, #236]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	4936      	ldr	r1, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
 8001354:	e01a      	b.n	800138c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001356:	4b34      	ldr	r3, [pc, #208]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a33      	ldr	r2, [pc, #204]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001362:	f7ff fbfd 	bl	8000b60 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136a:	f7ff fbf9 	bl	8000b60 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e2e7      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x1da>
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d074      	beq.n	8001482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x21a>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d10e      	bne.n	80013c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d064      	beq.n	8001480 <HAL_RCC_OscConfig+0x2f0>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d160      	bne.n	8001480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e2c4      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x24a>
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e01d      	b.n	8001416 <HAL_RCC_OscConfig+0x286>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x26e>
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x286>
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_RCC_OscConfig+0x298>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01c      	beq.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fb9f 	bl	8000b60 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001424:	e011      	b.n	800144a <HAL_RCC_OscConfig+0x2ba>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	08003970 	.word	0x08003970
 8001430:	20000014 	.word	0x20000014
 8001434:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fb92 	bl	8000b60 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e280      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144a:	4baf      	ldr	r3, [pc, #700]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x2a8>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb82 	bl	8000b60 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fb7e 	bl	8000b60 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e26c      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001472:	4ba5      	ldr	r3, [pc, #660]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d0>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d060      	beq.n	8001550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x310>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d119      	bne.n	80014ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d116      	bne.n	80014ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	4b99      	ldr	r3, [pc, #612]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x328>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e249      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b93      	ldr	r3, [pc, #588]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	4990      	ldr	r1, [pc, #576]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	e040      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d023      	beq.n	800151e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d6:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a8b      	ldr	r2, [pc, #556]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb3d 	bl	8000b60 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb39 	bl	8000b60 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e227      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	497c      	ldr	r1, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a79      	ldr	r2, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fb19 	bl	8000b60 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fb15 	bl	8000b60 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e203      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001544:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d03c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01c      	beq.n	800159e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	4a67      	ldr	r2, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff faf4 	bl	8000b60 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff faf0 	bl	8000b60 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1de      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158e:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ef      	beq.n	800157c <HAL_RCC_OscConfig+0x3ec>
 800159c:	e01b      	b.n	80015d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fad7 	bl	8000b60 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fad3 	bl	8000b60 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1c1      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c8:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ef      	bne.n	80015b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a6 	beq.w	8001730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160c:	2301      	movs	r3, #1
 800160e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d118      	bne.n	800164e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001628:	f7ff fa9a 	bl	8000b60 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001630:	f7ff fa96 	bl	8000b60 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e184      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x57c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x4d8>
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001666:	e024      	b.n	80016b2 <HAL_RCC_OscConfig+0x522>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d110      	bne.n	8001692 <HAL_RCC_OscConfig+0x502>
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	e00f      	b.n	80016b2 <HAL_RCC_OscConfig+0x522>
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa51 	bl	8000b60 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fa4d 	bl	8000b60 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e139      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x578>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0ed      	beq.n	80016c2 <HAL_RCC_OscConfig+0x532>
 80016e6:	e01a      	b.n	800171e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa3a 	bl	8000b60 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ee:	e00f      	b.n	8001710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa36 	bl	8000b60 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d906      	bls.n	8001710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e122      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001710:	4b90      	ldr	r3, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e8      	bne.n	80016f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a8a      	ldr	r2, [pc, #552]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8108 	beq.w	800194a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	2b02      	cmp	r3, #2
 8001740:	f040 80d0 	bne.w	80018e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001744:	4b83      	ldr	r3, [pc, #524]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	429a      	cmp	r2, r3
 8001756:	d130      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	3b01      	subs	r3, #1
 8001764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d127      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d11f      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001784:	2a07      	cmp	r2, #7
 8001786:	bf14      	ite	ne
 8001788:	2201      	movne	r2, #1
 800178a:	2200      	moveq	r2, #0
 800178c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	4293      	cmp	r3, r2
 8001790:	d113      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d06e      	beq.n	8001898 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d069      	beq.n	8001894 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017cc:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0b7      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a5c      	ldr	r2, [pc, #368]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80017e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e8:	f7ff f9ba 	bl	8000b60 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f9b6 	bl	8000b60 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0a4      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x7c8>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800181e:	3a01      	subs	r2, #1
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001828:	0212      	lsls	r2, r2, #8
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001830:	0852      	lsrs	r2, r2, #1
 8001832:	3a01      	subs	r2, #1
 8001834:	0552      	lsls	r2, r2, #21
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800183c:	0852      	lsrs	r2, r2, #1
 800183e:	3a01      	subs	r2, #1
 8001840:	0652      	lsls	r2, r2, #25
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001848:	0912      	lsrs	r2, r2, #4
 800184a:	0452      	lsls	r2, r2, #17
 800184c:	430a      	orrs	r2, r1
 800184e:	4941      	ldr	r1, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3e      	ldr	r2, [pc, #248]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186c:	f7ff f978 	bl	8000b60 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f974 	bl	8000b60 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e062      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001892:	e05a      	b.n	800194a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e059      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d152      	bne.n	800194a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018bc:	f7ff f950 	bl	8000b60 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f94c 	bl	8000b60 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e03a      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x734>
 80018e2:	e032      	b.n	800194a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d02d      	beq.n	8001946 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001908:	f023 0303 	bic.w	r3, r3, #3
 800190c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 8001914:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f91f 	bl	8000b60 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff f91b 	bl	8000b60 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e009      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x796>
 8001944:	e001      	b.n	800194a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	f99d808c 	.word	0xf99d808c

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0c8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d910      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	4961      	ldr	r1, [pc, #388]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b0      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d04c      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d121      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e09e      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e092      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e4:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e086      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07e      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 0203 	bic.w	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	493f      	ldr	r1, [pc, #252]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a16:	f7ff f8a3 	bl	8000b60 <HAL_GetTick>
 8001a1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1e:	f7ff f89f 	bl	8000b60 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e066      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 020c 	and.w	r2, r3, #12
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d1eb      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	492c      	ldr	r1, [pc, #176]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4924      	ldr	r1, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e036      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4910      	ldr	r1, [pc, #64]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad2:	f000 f825 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490c      	ldr	r1, [pc, #48]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe ffe2 	bl	8000ac0 <HAL_InitTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08003970 	.word	0x08003970
 8001b18:	20000014 	.word	0x20000014
 8001b1c:	20000018 	.word	0x20000018

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b38:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d11e      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e005      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e004      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ba6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d134      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d003      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0xac>
 8001bc4:	e005      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc8:	617b      	str	r3, [r7, #20]
      break;
 8001bca:	e005      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bce:	617b      	str	r3, [r7, #20]
      break;
 8001bd0:	e002      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	3301      	adds	r3, #1
 8001be4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	fb02 f203 	mul.w	r2, r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	0e5b      	lsrs	r3, r3, #25
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c18:	69bb      	ldr	r3, [r7, #24]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003988 	.word	0x08003988
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	007a1200 	.word	0x007a1200

08001c38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000014 	.word	0x20000014

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08003980 	.word	0x08003980

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c80:	f7ff ffda 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08003980 	.word	0x08003980

08001ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cc0:	f7ff fa02 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001cc4:	6178      	str	r0, [r7, #20]
 8001cc6:	e014      	b.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ce0:	f7ff f9f2 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001ce4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf8:	d10b      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d919      	bls.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2ba0      	cmp	r3, #160	; 0xa0
 8001d04:	d902      	bls.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d06:	2302      	movs	r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e013      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e010      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d902      	bls.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d18:	2303      	movs	r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e00a      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d102      	bne.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e004      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b70      	cmp	r3, #112	; 0x70
 8001d2e:	d101      	bne.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0207 	bic.w	r2, r3, #7
 8001d3c:	4909      	ldr	r1, [pc, #36]	; (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d70:	2300      	movs	r3, #0
 8001d72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d74:	2300      	movs	r3, #0
 8001d76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d041      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d8c:	d02a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d92:	d824      	bhi.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d98:	d008      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d9e:	d81e      	bhi.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da8:	d010      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001daa:	e018      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dac:	4b86      	ldr	r3, [pc, #536]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a85      	ldr	r2, [pc, #532]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db8:	e015      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fabb 	bl	800233c <RCCEx_PLLSAI1_Config>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dca:	e00c      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3320      	adds	r3, #32
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fba6 	bl	8002524 <RCCEx_PLLSAI2_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ddc:	e003      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	74fb      	strb	r3, [r7, #19]
      break;
 8001de2:	e000      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dec:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfa:	4973      	ldr	r1, [pc, #460]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e02:	e001      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d041      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e1c:	d02a      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e22:	d824      	bhi.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e28:	d008      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e2e:	d81e      	bhi.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d010      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e3a:	e018      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e3c:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a61      	ldr	r2, [pc, #388]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e48:	e015      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fa73 	bl	800233c <RCCEx_PLLSAI1_Config>
 8001e56:	4603      	mov	r3, r0
 8001e58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e5a:	e00c      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3320      	adds	r3, #32
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb5e 	bl	8002524 <RCCEx_PLLSAI2_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e6c:	e003      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	74fb      	strb	r3, [r7, #19]
      break;
 8001e72:	e000      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e76:	7cfb      	ldrb	r3, [r7, #19]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e7c:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e8a:	494f      	ldr	r1, [pc, #316]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e92:	e001      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a0 	beq.w	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a40      	ldr	r2, [pc, #256]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ecc:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001edc:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fe3a 	bl	8000b60 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eee:	e009      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef0:	f7fe fe36 	bl	8000b60 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d902      	bls.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	74fb      	strb	r3, [r7, #19]
        break;
 8001f02:	e005      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ef      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d15c      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01f      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d019      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d016      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fdf5 	bl	8000b60 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f78:	e00b      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fdf1 	bl	8000b60 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d902      	bls.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f90:	e006      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ec      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb6:	4904      	ldr	r1, [pc, #16]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
 8001fc4:	e006      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd4:	7c7b      	ldrb	r3, [r7, #17]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b9e      	ldr	r3, [pc, #632]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	4a9d      	ldr	r2, [pc, #628]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff2:	4b98      	ldr	r3, [pc, #608]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	f023 0203 	bic.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	4994      	ldr	r1, [pc, #592]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002014:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	f023 020c 	bic.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	498c      	ldr	r1, [pc, #560]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002036:	4b87      	ldr	r3, [pc, #540]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	4983      	ldr	r1, [pc, #524]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002058:	4b7e      	ldr	r3, [pc, #504]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	497b      	ldr	r1, [pc, #492]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800207a:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002088:	4972      	ldr	r1, [pc, #456]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800209c:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	496a      	ldr	r1, [pc, #424]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	4961      	ldr	r1, [pc, #388]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020e0:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	4959      	ldr	r1, [pc, #356]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002108:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002110:	4950      	ldr	r1, [pc, #320]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	4948      	ldr	r1, [pc, #288]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	493f      	ldr	r1, [pc, #252]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d028      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002176:	4937      	ldr	r1, [pc, #220]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002186:	d106      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
 8002194:	e011      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800219e:	d10c      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f8c8 	bl	800233c <RCCEx_PLLSAI1_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d028      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021c6:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	491f      	ldr	r1, [pc, #124]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f0:	60d3      	str	r3, [r2, #12]
 80021f2:	e011      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f899 	bl	800233c <RCCEx_PLLSAI1_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02b      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002242:	d109      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a02      	ldr	r2, [pc, #8]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
 8002250:	e014      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002260:	d10c      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f867 	bl	800233c <RCCEx_PLLSAI1_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d02f      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002296:	4928      	ldr	r1, [pc, #160]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022a6:	d10d      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	2102      	movs	r1, #2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f844 	bl	800233c <RCCEx_PLLSAI1_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d014      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	74bb      	strb	r3, [r7, #18]
 80022c2:	e011      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3320      	adds	r3, #32
 80022d2:	2102      	movs	r1, #2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f925 	bl	8002524 <RCCEx_PLLSAI2_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002302:	490d      	ldr	r1, [pc, #52]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002326:	4904      	ldr	r1, [pc, #16]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800232e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800234a:	4b75      	ldr	r3, [pc, #468]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d018      	beq.n	8002388 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d10d      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
       ||
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
       ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d047      	beq.n	8002412 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e044      	b.n	8002412 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d018      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x86>
 8002390:	2b03      	cmp	r3, #3
 8002392:	d825      	bhi.n	80023e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002394:	2b01      	cmp	r3, #1
 8002396:	d002      	beq.n	800239e <RCCEx_PLLSAI1_Config+0x62>
 8002398:	2b02      	cmp	r3, #2
 800239a:	d009      	beq.n	80023b0 <RCCEx_PLLSAI1_Config+0x74>
 800239c:	e020      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800239e:	4b60      	ldr	r3, [pc, #384]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ae:	e01a      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023b0:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d116      	bne.n	80023ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e013      	b.n	80023ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023c2:	4b57      	ldr	r3, [pc, #348]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023de:	e006      	b.n	80023ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e004      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023e6:	bf00      	nop
 80023e8:	e002      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	430b      	orrs	r3, r1
 800240c:	4944      	ldr	r1, [pc, #272]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d17d      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a40      	ldr	r2, [pc, #256]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fb9c 	bl	8000b60 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800242a:	e009      	b.n	8002440 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800242c:	f7fe fb98 	bl	8000b60 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d902      	bls.n	8002440 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	73fb      	strb	r3, [r7, #15]
        break;
 800243e:	e005      	b.n	800244c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002440:	4b37      	ldr	r3, [pc, #220]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ef      	bne.n	800242c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d160      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	0211      	lsls	r1, r2, #8
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	0912      	lsrs	r2, r2, #4
 8002470:	0452      	lsls	r2, r2, #17
 8002472:	430a      	orrs	r2, r1
 8002474:	492a      	ldr	r1, [pc, #168]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	610b      	str	r3, [r1, #16]
 800247a:	e027      	b.n	80024cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d112      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800248a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6892      	ldr	r2, [r2, #8]
 8002492:	0211      	lsls	r1, r2, #8
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6912      	ldr	r2, [r2, #16]
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	3a01      	subs	r2, #1
 800249c:	0552      	lsls	r2, r2, #21
 800249e:	430a      	orrs	r2, r1
 80024a0:	491f      	ldr	r1, [pc, #124]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	610b      	str	r3, [r1, #16]
 80024a6:	e011      	b.n	80024cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6892      	ldr	r2, [r2, #8]
 80024b8:	0211      	lsls	r1, r2, #8
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6952      	ldr	r2, [r2, #20]
 80024be:	0852      	lsrs	r2, r2, #1
 80024c0:	3a01      	subs	r2, #1
 80024c2:	0652      	lsls	r2, r2, #25
 80024c4:	430a      	orrs	r2, r1
 80024c6:	4916      	ldr	r1, [pc, #88]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fb42 	bl	8000b60 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024de:	e009      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e0:	f7fe fb3e 	bl	8000b60 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	73fb      	strb	r3, [r7, #15]
          break;
 80024f2:	e005      	b.n	8002500 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	4904      	ldr	r1, [pc, #16]	; (8002520 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000

08002524 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d018      	beq.n	8002570 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d10d      	bne.n	800256a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
       ||
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002556:	4b61      	ldr	r3, [pc, #388]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
       ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d047      	beq.n	80025fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e044      	b.n	80025fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d018      	beq.n	80025aa <RCCEx_PLLSAI2_Config+0x86>
 8002578:	2b03      	cmp	r3, #3
 800257a:	d825      	bhi.n	80025c8 <RCCEx_PLLSAI2_Config+0xa4>
 800257c:	2b01      	cmp	r3, #1
 800257e:	d002      	beq.n	8002586 <RCCEx_PLLSAI2_Config+0x62>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d009      	beq.n	8002598 <RCCEx_PLLSAI2_Config+0x74>
 8002584:	e020      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002586:	4b55      	ldr	r3, [pc, #340]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11d      	bne.n	80025ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002596:	e01a      	b.n	80025ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d116      	bne.n	80025d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e013      	b.n	80025d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025aa:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025b6:	4b49      	ldr	r3, [pc, #292]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025c6:	e006      	b.n	80025d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e004      	b.n	80025d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025ce:	bf00      	nop
 80025d0:	e002      	b.n	80025d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	430b      	orrs	r3, r1
 80025f4:	4939      	ldr	r1, [pc, #228]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d167      	bne.n	80026d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002600:	4b36      	ldr	r3, [pc, #216]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a35      	ldr	r2, [pc, #212]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe faa8 	bl	8000b60 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002612:	e009      	b.n	8002628 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002614:	f7fe faa4 	bl	8000b60 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d902      	bls.n	8002628 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	73fb      	strb	r3, [r7, #15]
        break;
 8002626:	e005      	b.n	8002634 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ef      	bne.n	8002614 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d14a      	bne.n	80026d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d111      	bne.n	8002664 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6892      	ldr	r2, [r2, #8]
 8002650:	0211      	lsls	r1, r2, #8
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	0912      	lsrs	r2, r2, #4
 8002658:	0452      	lsls	r2, r2, #17
 800265a:	430a      	orrs	r2, r1
 800265c:	491f      	ldr	r1, [pc, #124]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	614b      	str	r3, [r1, #20]
 8002662:	e011      	b.n	8002688 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800266c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	0211      	lsls	r1, r2, #8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6912      	ldr	r2, [r2, #16]
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0652      	lsls	r2, r2, #25
 8002680:	430a      	orrs	r2, r1
 8002682:	4916      	ldr	r1, [pc, #88]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002692:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fa64 	bl	8000b60 <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800269a:	e009      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800269c:	f7fe fa60 	bl	8000b60 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d902      	bls.n	80026b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	73fb      	strb	r3, [r7, #15]
          break;
 80026ae:	e005      	b.n	80026bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ef      	beq.n	800269c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4904      	ldr	r1, [pc, #16]	; (80026dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e040      	b.n	8002774 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe f8be 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8c0 	bl	80028a4 <UART_SetConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e022      	b.n	8002774 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fb3e 	bl	8002db8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800274a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800275a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fbc5 	bl	8002efc <UART_CheckIdleState>
 8002772:	4603      	mov	r3, r0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002790:	2b20      	cmp	r3, #32
 8002792:	f040 8082 	bne.w	800289a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_UART_Transmit+0x26>
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07a      	b.n	800289c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Transmit+0x38>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e073      	b.n	800289c <HAL_UART_Transmit+0x120>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2221      	movs	r2, #33	; 0x21
 80027c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ca:	f7fe f9c9 	bl	8000b60 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	88fa      	ldrh	r2, [r7, #6]
 80027dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d108      	bne.n	80027fc <HAL_UART_Transmit+0x80>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e003      	b.n	8002804 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800280c:	e02d      	b.n	800286a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fbb8 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e039      	b.n	800289c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800283a:	b292      	uxth	r2, r2
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3302      	adds	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e008      	b.n	8002858 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b292      	uxth	r2, r2
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1cb      	bne.n	800280e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	2140      	movs	r1, #64	; 0x40
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fb84 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e005      	b.n	800289c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4bad      	ldr	r3, [pc, #692]	; (8002b84 <UART_SetConfig+0x2e0>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	69f9      	ldr	r1, [r7, #28]
 80028d8:	430b      	orrs	r3, r1
 80028da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4aa2      	ldr	r2, [pc, #648]	; (8002b88 <UART_SetConfig+0x2e4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	4313      	orrs	r3, r2
 800290a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a99      	ldr	r2, [pc, #612]	; (8002b8c <UART_SetConfig+0x2e8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d121      	bne.n	800296e <UART_SetConfig+0xca>
 800292a:	4b99      	ldr	r3, [pc, #612]	; (8002b90 <UART_SetConfig+0x2ec>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d817      	bhi.n	8002968 <UART_SetConfig+0xc4>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <UART_SetConfig+0x9c>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002957 	.word	0x08002957
 800294c:	08002963 	.word	0x08002963
 8002950:	2301      	movs	r3, #1
 8002952:	76fb      	strb	r3, [r7, #27]
 8002954:	e0e7      	b.n	8002b26 <UART_SetConfig+0x282>
 8002956:	2302      	movs	r3, #2
 8002958:	76fb      	strb	r3, [r7, #27]
 800295a:	e0e4      	b.n	8002b26 <UART_SetConfig+0x282>
 800295c:	2304      	movs	r3, #4
 800295e:	76fb      	strb	r3, [r7, #27]
 8002960:	e0e1      	b.n	8002b26 <UART_SetConfig+0x282>
 8002962:	2308      	movs	r3, #8
 8002964:	76fb      	strb	r3, [r7, #27]
 8002966:	e0de      	b.n	8002b26 <UART_SetConfig+0x282>
 8002968:	2310      	movs	r3, #16
 800296a:	76fb      	strb	r3, [r7, #27]
 800296c:	e0db      	b.n	8002b26 <UART_SetConfig+0x282>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a88      	ldr	r2, [pc, #544]	; (8002b94 <UART_SetConfig+0x2f0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d132      	bne.n	80029de <UART_SetConfig+0x13a>
 8002978:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <UART_SetConfig+0x2ec>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d828      	bhi.n	80029d8 <UART_SetConfig+0x134>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <UART_SetConfig+0xe8>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	080029c1 	.word	0x080029c1
 8002990:	080029d9 	.word	0x080029d9
 8002994:	080029d9 	.word	0x080029d9
 8002998:	080029d9 	.word	0x080029d9
 800299c:	080029cd 	.word	0x080029cd
 80029a0:	080029d9 	.word	0x080029d9
 80029a4:	080029d9 	.word	0x080029d9
 80029a8:	080029d9 	.word	0x080029d9
 80029ac:	080029c7 	.word	0x080029c7
 80029b0:	080029d9 	.word	0x080029d9
 80029b4:	080029d9 	.word	0x080029d9
 80029b8:	080029d9 	.word	0x080029d9
 80029bc:	080029d3 	.word	0x080029d3
 80029c0:	2300      	movs	r3, #0
 80029c2:	76fb      	strb	r3, [r7, #27]
 80029c4:	e0af      	b.n	8002b26 <UART_SetConfig+0x282>
 80029c6:	2302      	movs	r3, #2
 80029c8:	76fb      	strb	r3, [r7, #27]
 80029ca:	e0ac      	b.n	8002b26 <UART_SetConfig+0x282>
 80029cc:	2304      	movs	r3, #4
 80029ce:	76fb      	strb	r3, [r7, #27]
 80029d0:	e0a9      	b.n	8002b26 <UART_SetConfig+0x282>
 80029d2:	2308      	movs	r3, #8
 80029d4:	76fb      	strb	r3, [r7, #27]
 80029d6:	e0a6      	b.n	8002b26 <UART_SetConfig+0x282>
 80029d8:	2310      	movs	r3, #16
 80029da:	76fb      	strb	r3, [r7, #27]
 80029dc:	e0a3      	b.n	8002b26 <UART_SetConfig+0x282>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6d      	ldr	r2, [pc, #436]	; (8002b98 <UART_SetConfig+0x2f4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d120      	bne.n	8002a2a <UART_SetConfig+0x186>
 80029e8:	4b69      	ldr	r3, [pc, #420]	; (8002b90 <UART_SetConfig+0x2ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029f2:	2b30      	cmp	r3, #48	; 0x30
 80029f4:	d013      	beq.n	8002a1e <UART_SetConfig+0x17a>
 80029f6:	2b30      	cmp	r3, #48	; 0x30
 80029f8:	d814      	bhi.n	8002a24 <UART_SetConfig+0x180>
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d009      	beq.n	8002a12 <UART_SetConfig+0x16e>
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d810      	bhi.n	8002a24 <UART_SetConfig+0x180>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <UART_SetConfig+0x168>
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d006      	beq.n	8002a18 <UART_SetConfig+0x174>
 8002a0a:	e00b      	b.n	8002a24 <UART_SetConfig+0x180>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	76fb      	strb	r3, [r7, #27]
 8002a10:	e089      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a12:	2302      	movs	r3, #2
 8002a14:	76fb      	strb	r3, [r7, #27]
 8002a16:	e086      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	76fb      	strb	r3, [r7, #27]
 8002a1c:	e083      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	76fb      	strb	r3, [r7, #27]
 8002a22:	e080      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a24:	2310      	movs	r3, #16
 8002a26:	76fb      	strb	r3, [r7, #27]
 8002a28:	e07d      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <UART_SetConfig+0x2f8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d120      	bne.n	8002a76 <UART_SetConfig+0x1d2>
 8002a34:	4b56      	ldr	r3, [pc, #344]	; (8002b90 <UART_SetConfig+0x2ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a40:	d013      	beq.n	8002a6a <UART_SetConfig+0x1c6>
 8002a42:	2bc0      	cmp	r3, #192	; 0xc0
 8002a44:	d814      	bhi.n	8002a70 <UART_SetConfig+0x1cc>
 8002a46:	2b80      	cmp	r3, #128	; 0x80
 8002a48:	d009      	beq.n	8002a5e <UART_SetConfig+0x1ba>
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d810      	bhi.n	8002a70 <UART_SetConfig+0x1cc>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <UART_SetConfig+0x1b4>
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d006      	beq.n	8002a64 <UART_SetConfig+0x1c0>
 8002a56:	e00b      	b.n	8002a70 <UART_SetConfig+0x1cc>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	76fb      	strb	r3, [r7, #27]
 8002a5c:	e063      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	76fb      	strb	r3, [r7, #27]
 8002a62:	e060      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a64:	2304      	movs	r3, #4
 8002a66:	76fb      	strb	r3, [r7, #27]
 8002a68:	e05d      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	76fb      	strb	r3, [r7, #27]
 8002a6e:	e05a      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a70:	2310      	movs	r3, #16
 8002a72:	76fb      	strb	r3, [r7, #27]
 8002a74:	e057      	b.n	8002b26 <UART_SetConfig+0x282>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <UART_SetConfig+0x2fc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d125      	bne.n	8002acc <UART_SetConfig+0x228>
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <UART_SetConfig+0x2ec>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8e:	d017      	beq.n	8002ac0 <UART_SetConfig+0x21c>
 8002a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a94:	d817      	bhi.n	8002ac6 <UART_SetConfig+0x222>
 8002a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9a:	d00b      	beq.n	8002ab4 <UART_SetConfig+0x210>
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa0:	d811      	bhi.n	8002ac6 <UART_SetConfig+0x222>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <UART_SetConfig+0x20a>
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aaa:	d006      	beq.n	8002aba <UART_SetConfig+0x216>
 8002aac:	e00b      	b.n	8002ac6 <UART_SetConfig+0x222>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	76fb      	strb	r3, [r7, #27]
 8002ab2:	e038      	b.n	8002b26 <UART_SetConfig+0x282>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	76fb      	strb	r3, [r7, #27]
 8002ab8:	e035      	b.n	8002b26 <UART_SetConfig+0x282>
 8002aba:	2304      	movs	r3, #4
 8002abc:	76fb      	strb	r3, [r7, #27]
 8002abe:	e032      	b.n	8002b26 <UART_SetConfig+0x282>
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	76fb      	strb	r3, [r7, #27]
 8002ac4:	e02f      	b.n	8002b26 <UART_SetConfig+0x282>
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	76fb      	strb	r3, [r7, #27]
 8002aca:	e02c      	b.n	8002b26 <UART_SetConfig+0x282>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <UART_SetConfig+0x2e4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d125      	bne.n	8002b22 <UART_SetConfig+0x27e>
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <UART_SetConfig+0x2ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ae4:	d017      	beq.n	8002b16 <UART_SetConfig+0x272>
 8002ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002aea:	d817      	bhi.n	8002b1c <UART_SetConfig+0x278>
 8002aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af0:	d00b      	beq.n	8002b0a <UART_SetConfig+0x266>
 8002af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af6:	d811      	bhi.n	8002b1c <UART_SetConfig+0x278>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <UART_SetConfig+0x260>
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b00:	d006      	beq.n	8002b10 <UART_SetConfig+0x26c>
 8002b02:	e00b      	b.n	8002b1c <UART_SetConfig+0x278>
 8002b04:	2300      	movs	r3, #0
 8002b06:	76fb      	strb	r3, [r7, #27]
 8002b08:	e00d      	b.n	8002b26 <UART_SetConfig+0x282>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	76fb      	strb	r3, [r7, #27]
 8002b0e:	e00a      	b.n	8002b26 <UART_SetConfig+0x282>
 8002b10:	2304      	movs	r3, #4
 8002b12:	76fb      	strb	r3, [r7, #27]
 8002b14:	e007      	b.n	8002b26 <UART_SetConfig+0x282>
 8002b16:	2308      	movs	r3, #8
 8002b18:	76fb      	strb	r3, [r7, #27]
 8002b1a:	e004      	b.n	8002b26 <UART_SetConfig+0x282>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	76fb      	strb	r3, [r7, #27]
 8002b20:	e001      	b.n	8002b26 <UART_SetConfig+0x282>
 8002b22:	2310      	movs	r3, #16
 8002b24:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <UART_SetConfig+0x2e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	f040 8087 	bne.w	8002c40 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b32:	7efb      	ldrb	r3, [r7, #27]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d837      	bhi.n	8002ba8 <UART_SetConfig+0x304>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <UART_SetConfig+0x29c>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b65 	.word	0x08002b65
 8002b44:	08002ba9 	.word	0x08002ba9
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002ba9 	.word	0x08002ba9
 8002b50:	08002b73 	.word	0x08002b73
 8002b54:	08002ba9 	.word	0x08002ba9
 8002b58:	08002ba9 	.word	0x08002ba9
 8002b5c:	08002ba9 	.word	0x08002ba9
 8002b60:	08002b7b 	.word	0x08002b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b64:	f7ff f874 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002b68:	6178      	str	r0, [r7, #20]
        break;
 8002b6a:	e022      	b.n	8002bb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <UART_SetConfig+0x300>)
 8002b6e:	617b      	str	r3, [r7, #20]
        break;
 8002b70:	e01f      	b.n	8002bb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b72:	f7fe ffd5 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8002b76:	6178      	str	r0, [r7, #20]
        break;
 8002b78:	e01b      	b.n	8002bb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7e:	617b      	str	r3, [r7, #20]
        break;
 8002b80:	e017      	b.n	8002bb2 <UART_SetConfig+0x30e>
 8002b82:	bf00      	nop
 8002b84:	efff69f3 	.word	0xefff69f3
 8002b88:	40008000 	.word	0x40008000
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40004400 	.word	0x40004400
 8002b98:	40004800 	.word	0x40004800
 8002b9c:	40004c00 	.word	0x40004c00
 8002ba0:	40005000 	.word	0x40005000
 8002ba4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	76bb      	strb	r3, [r7, #26]
        break;
 8002bb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80f1 	beq.w	8002d9c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d305      	bcc.n	8002bd6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d902      	bls.n	8002bdc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	76bb      	strb	r3, [r7, #26]
 8002bda:	e0df      	b.n	8002d9c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	020b      	lsls	r3, r1, #8
 8002bee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002bf2:	0202      	lsls	r2, r0, #8
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6849      	ldr	r1, [r1, #4]
 8002bf8:	0849      	lsrs	r1, r1, #1
 8002bfa:	4608      	mov	r0, r1
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	1814      	adds	r4, r2, r0
 8002c02:	eb43 0501 	adc.w	r5, r3, r1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd fb44 	bl	80002a0 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c26:	d308      	bcc.n	8002c3a <UART_SetConfig+0x396>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2e:	d204      	bcs.n	8002c3a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	e0b0      	b.n	8002d9c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	76bb      	strb	r3, [r7, #26]
 8002c3e:	e0ad      	b.n	8002d9c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c48:	d15c      	bne.n	8002d04 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002c4a:	7efb      	ldrb	r3, [r7, #27]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d828      	bhi.n	8002ca2 <UART_SetConfig+0x3fe>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <UART_SetConfig+0x3b4>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c8d 	.word	0x08002c8d
 8002c64:	08002ca3 	.word	0x08002ca3
 8002c68:	08002c93 	.word	0x08002c93
 8002c6c:	08002ca3 	.word	0x08002ca3
 8002c70:	08002ca3 	.word	0x08002ca3
 8002c74:	08002ca3 	.word	0x08002ca3
 8002c78:	08002c9b 	.word	0x08002c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7fe ffe8 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002c80:	6178      	str	r0, [r7, #20]
        break;
 8002c82:	e013      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c84:	f7fe fffa 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002c88:	6178      	str	r0, [r7, #20]
        break;
 8002c8a:	e00f      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <UART_SetConfig+0x510>)
 8002c8e:	617b      	str	r3, [r7, #20]
        break;
 8002c90:	e00c      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c92:	f7fe ff45 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8002c96:	6178      	str	r0, [r7, #20]
        break;
 8002c98:	e008      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9e:	617b      	str	r3, [r7, #20]
        break;
 8002ca0:	e004      	b.n	8002cac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	76bb      	strb	r3, [r7, #26]
        break;
 8002caa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d074      	beq.n	8002d9c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005a      	lsls	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d916      	bls.n	8002cfe <UART_SetConfig+0x45a>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d212      	bcs.n	8002cfe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f023 030f 	bic.w	r3, r3, #15
 8002ce0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	89fb      	ldrh	r3, [r7, #14]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	89fa      	ldrh	r2, [r7, #14]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	e04e      	b.n	8002d9c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	76bb      	strb	r3, [r7, #26]
 8002d02:	e04b      	b.n	8002d9c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d04:	7efb      	ldrb	r3, [r7, #27]
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d827      	bhi.n	8002d5a <UART_SetConfig+0x4b6>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <UART_SetConfig+0x46c>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d5b 	.word	0x08002d5b
 8002d20:	08002d4b 	.word	0x08002d4b
 8002d24:	08002d5b 	.word	0x08002d5b
 8002d28:	08002d5b 	.word	0x08002d5b
 8002d2c:	08002d5b 	.word	0x08002d5b
 8002d30:	08002d53 	.word	0x08002d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7fe ff8c 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002d38:	6178      	str	r0, [r7, #20]
        break;
 8002d3a:	e013      	b.n	8002d64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7fe ff9e 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002d40:	6178      	str	r0, [r7, #20]
        break;
 8002d42:	e00f      	b.n	8002d64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <UART_SetConfig+0x510>)
 8002d46:	617b      	str	r3, [r7, #20]
        break;
 8002d48:	e00c      	b.n	8002d64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4a:	f7fe fee9 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8002d4e:	6178      	str	r0, [r7, #20]
        break;
 8002d50:	e008      	b.n	8002d64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d56:	617b      	str	r3, [r7, #20]
        break;
 8002d58:	e004      	b.n	8002d64 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	76bb      	strb	r3, [r7, #26]
        break;
 8002d62:	bf00      	nop
    }

    if (pclk != 0U)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	085a      	lsrs	r2, r3, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	441a      	add	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d908      	bls.n	8002d98 <UART_SetConfig+0x4f4>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d204      	bcs.n	8002d98 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	e001      	b.n	8002d9c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002da8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	00f42400 	.word	0x00f42400

08002db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01a      	beq.n	8002ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb6:	d10a      	bne.n	8002ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f0c:	f7fd fe28 	bl	8000b60 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d10e      	bne.n	8002f3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f82d 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e023      	b.n	8002f86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d10e      	bne.n	8002f6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f817 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e00d      	b.n	8002f86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	e05e      	b.n	800305e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d05a      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa8:	f7fd fdda 	bl	8000b60 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d302      	bcc.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11b      	bne.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fcc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e043      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02c      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d124      	bne.n	800305e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800301c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800302c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	429a      	cmp	r2, r3
 800307a:	d091      	beq.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <__errno>:
 8003088:	4b01      	ldr	r3, [pc, #4]	; (8003090 <__errno+0x8>)
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000020 	.word	0x20000020

08003094 <__libc_init_array>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	4d0d      	ldr	r5, [pc, #52]	; (80030cc <__libc_init_array+0x38>)
 8003098:	4c0d      	ldr	r4, [pc, #52]	; (80030d0 <__libc_init_array+0x3c>)
 800309a:	1b64      	subs	r4, r4, r5
 800309c:	10a4      	asrs	r4, r4, #2
 800309e:	2600      	movs	r6, #0
 80030a0:	42a6      	cmp	r6, r4
 80030a2:	d109      	bne.n	80030b8 <__libc_init_array+0x24>
 80030a4:	4d0b      	ldr	r5, [pc, #44]	; (80030d4 <__libc_init_array+0x40>)
 80030a6:	4c0c      	ldr	r4, [pc, #48]	; (80030d8 <__libc_init_array+0x44>)
 80030a8:	f000 fc4e 	bl	8003948 <_init>
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	2600      	movs	r6, #0
 80030b2:	42a6      	cmp	r6, r4
 80030b4:	d105      	bne.n	80030c2 <__libc_init_array+0x2e>
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030bc:	4798      	blx	r3
 80030be:	3601      	adds	r6, #1
 80030c0:	e7ee      	b.n	80030a0 <__libc_init_array+0xc>
 80030c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c6:	4798      	blx	r3
 80030c8:	3601      	adds	r6, #1
 80030ca:	e7f2      	b.n	80030b2 <__libc_init_array+0x1e>
 80030cc:	080039f4 	.word	0x080039f4
 80030d0:	080039f4 	.word	0x080039f4
 80030d4:	080039f4 	.word	0x080039f4
 80030d8:	080039f8 	.word	0x080039f8

080030dc <memset>:
 80030dc:	4402      	add	r2, r0
 80030de:	4603      	mov	r3, r0
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d100      	bne.n	80030e6 <memset+0xa>
 80030e4:	4770      	bx	lr
 80030e6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ea:	e7f9      	b.n	80030e0 <memset+0x4>

080030ec <siprintf>:
 80030ec:	b40e      	push	{r1, r2, r3}
 80030ee:	b500      	push	{lr}
 80030f0:	b09c      	sub	sp, #112	; 0x70
 80030f2:	ab1d      	add	r3, sp, #116	; 0x74
 80030f4:	9002      	str	r0, [sp, #8]
 80030f6:	9006      	str	r0, [sp, #24]
 80030f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030fc:	4809      	ldr	r0, [pc, #36]	; (8003124 <siprintf+0x38>)
 80030fe:	9107      	str	r1, [sp, #28]
 8003100:	9104      	str	r1, [sp, #16]
 8003102:	4909      	ldr	r1, [pc, #36]	; (8003128 <siprintf+0x3c>)
 8003104:	f853 2b04 	ldr.w	r2, [r3], #4
 8003108:	9105      	str	r1, [sp, #20]
 800310a:	6800      	ldr	r0, [r0, #0]
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	a902      	add	r1, sp, #8
 8003110:	f000 f868 	bl	80031e4 <_svfiprintf_r>
 8003114:	9b02      	ldr	r3, [sp, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	b01c      	add	sp, #112	; 0x70
 800311c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003120:	b003      	add	sp, #12
 8003122:	4770      	bx	lr
 8003124:	20000020 	.word	0x20000020
 8003128:	ffff0208 	.word	0xffff0208

0800312c <__ssputs_r>:
 800312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003130:	688e      	ldr	r6, [r1, #8]
 8003132:	429e      	cmp	r6, r3
 8003134:	4682      	mov	sl, r0
 8003136:	460c      	mov	r4, r1
 8003138:	4690      	mov	r8, r2
 800313a:	461f      	mov	r7, r3
 800313c:	d838      	bhi.n	80031b0 <__ssputs_r+0x84>
 800313e:	898a      	ldrh	r2, [r1, #12]
 8003140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003144:	d032      	beq.n	80031ac <__ssputs_r+0x80>
 8003146:	6825      	ldr	r5, [r4, #0]
 8003148:	6909      	ldr	r1, [r1, #16]
 800314a:	eba5 0901 	sub.w	r9, r5, r1
 800314e:	6965      	ldr	r5, [r4, #20]
 8003150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003158:	3301      	adds	r3, #1
 800315a:	444b      	add	r3, r9
 800315c:	106d      	asrs	r5, r5, #1
 800315e:	429d      	cmp	r5, r3
 8003160:	bf38      	it	cc
 8003162:	461d      	movcc	r5, r3
 8003164:	0553      	lsls	r3, r2, #21
 8003166:	d531      	bpl.n	80031cc <__ssputs_r+0xa0>
 8003168:	4629      	mov	r1, r5
 800316a:	f000 fb47 	bl	80037fc <_malloc_r>
 800316e:	4606      	mov	r6, r0
 8003170:	b950      	cbnz	r0, 8003188 <__ssputs_r+0x5c>
 8003172:	230c      	movs	r3, #12
 8003174:	f8ca 3000 	str.w	r3, [sl]
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317e:	81a3      	strh	r3, [r4, #12]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003188:	6921      	ldr	r1, [r4, #16]
 800318a:	464a      	mov	r2, r9
 800318c:	f000 fabe 	bl	800370c <memcpy>
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	6126      	str	r6, [r4, #16]
 800319e:	6165      	str	r5, [r4, #20]
 80031a0:	444e      	add	r6, r9
 80031a2:	eba5 0509 	sub.w	r5, r5, r9
 80031a6:	6026      	str	r6, [r4, #0]
 80031a8:	60a5      	str	r5, [r4, #8]
 80031aa:	463e      	mov	r6, r7
 80031ac:	42be      	cmp	r6, r7
 80031ae:	d900      	bls.n	80031b2 <__ssputs_r+0x86>
 80031b0:	463e      	mov	r6, r7
 80031b2:	4632      	mov	r2, r6
 80031b4:	6820      	ldr	r0, [r4, #0]
 80031b6:	4641      	mov	r1, r8
 80031b8:	f000 fab6 	bl	8003728 <memmove>
 80031bc:	68a3      	ldr	r3, [r4, #8]
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	1b9b      	subs	r3, r3, r6
 80031c2:	4432      	add	r2, r6
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	2000      	movs	r0, #0
 80031ca:	e7db      	b.n	8003184 <__ssputs_r+0x58>
 80031cc:	462a      	mov	r2, r5
 80031ce:	f000 fb6f 	bl	80038b0 <_realloc_r>
 80031d2:	4606      	mov	r6, r0
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d1e1      	bne.n	800319c <__ssputs_r+0x70>
 80031d8:	6921      	ldr	r1, [r4, #16]
 80031da:	4650      	mov	r0, sl
 80031dc:	f000 fabe 	bl	800375c <_free_r>
 80031e0:	e7c7      	b.n	8003172 <__ssputs_r+0x46>
	...

080031e4 <_svfiprintf_r>:
 80031e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e8:	4698      	mov	r8, r3
 80031ea:	898b      	ldrh	r3, [r1, #12]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	b09d      	sub	sp, #116	; 0x74
 80031f0:	4607      	mov	r7, r0
 80031f2:	460d      	mov	r5, r1
 80031f4:	4614      	mov	r4, r2
 80031f6:	d50e      	bpl.n	8003216 <_svfiprintf_r+0x32>
 80031f8:	690b      	ldr	r3, [r1, #16]
 80031fa:	b963      	cbnz	r3, 8003216 <_svfiprintf_r+0x32>
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	f000 fafd 	bl	80037fc <_malloc_r>
 8003202:	6028      	str	r0, [r5, #0]
 8003204:	6128      	str	r0, [r5, #16]
 8003206:	b920      	cbnz	r0, 8003212 <_svfiprintf_r+0x2e>
 8003208:	230c      	movs	r3, #12
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	e0d1      	b.n	80033b6 <_svfiprintf_r+0x1d2>
 8003212:	2340      	movs	r3, #64	; 0x40
 8003214:	616b      	str	r3, [r5, #20]
 8003216:	2300      	movs	r3, #0
 8003218:	9309      	str	r3, [sp, #36]	; 0x24
 800321a:	2320      	movs	r3, #32
 800321c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003220:	f8cd 800c 	str.w	r8, [sp, #12]
 8003224:	2330      	movs	r3, #48	; 0x30
 8003226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80033d0 <_svfiprintf_r+0x1ec>
 800322a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800322e:	f04f 0901 	mov.w	r9, #1
 8003232:	4623      	mov	r3, r4
 8003234:	469a      	mov	sl, r3
 8003236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800323a:	b10a      	cbz	r2, 8003240 <_svfiprintf_r+0x5c>
 800323c:	2a25      	cmp	r2, #37	; 0x25
 800323e:	d1f9      	bne.n	8003234 <_svfiprintf_r+0x50>
 8003240:	ebba 0b04 	subs.w	fp, sl, r4
 8003244:	d00b      	beq.n	800325e <_svfiprintf_r+0x7a>
 8003246:	465b      	mov	r3, fp
 8003248:	4622      	mov	r2, r4
 800324a:	4629      	mov	r1, r5
 800324c:	4638      	mov	r0, r7
 800324e:	f7ff ff6d 	bl	800312c <__ssputs_r>
 8003252:	3001      	adds	r0, #1
 8003254:	f000 80aa 	beq.w	80033ac <_svfiprintf_r+0x1c8>
 8003258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800325a:	445a      	add	r2, fp
 800325c:	9209      	str	r2, [sp, #36]	; 0x24
 800325e:	f89a 3000 	ldrb.w	r3, [sl]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80a2 	beq.w	80033ac <_svfiprintf_r+0x1c8>
 8003268:	2300      	movs	r3, #0
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003272:	f10a 0a01 	add.w	sl, sl, #1
 8003276:	9304      	str	r3, [sp, #16]
 8003278:	9307      	str	r3, [sp, #28]
 800327a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800327e:	931a      	str	r3, [sp, #104]	; 0x68
 8003280:	4654      	mov	r4, sl
 8003282:	2205      	movs	r2, #5
 8003284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003288:	4851      	ldr	r0, [pc, #324]	; (80033d0 <_svfiprintf_r+0x1ec>)
 800328a:	f7fc ffb9 	bl	8000200 <memchr>
 800328e:	9a04      	ldr	r2, [sp, #16]
 8003290:	b9d8      	cbnz	r0, 80032ca <_svfiprintf_r+0xe6>
 8003292:	06d0      	lsls	r0, r2, #27
 8003294:	bf44      	itt	mi
 8003296:	2320      	movmi	r3, #32
 8003298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800329c:	0711      	lsls	r1, r2, #28
 800329e:	bf44      	itt	mi
 80032a0:	232b      	movmi	r3, #43	; 0x2b
 80032a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032a6:	f89a 3000 	ldrb.w	r3, [sl]
 80032aa:	2b2a      	cmp	r3, #42	; 0x2a
 80032ac:	d015      	beq.n	80032da <_svfiprintf_r+0xf6>
 80032ae:	9a07      	ldr	r2, [sp, #28]
 80032b0:	4654      	mov	r4, sl
 80032b2:	2000      	movs	r0, #0
 80032b4:	f04f 0c0a 	mov.w	ip, #10
 80032b8:	4621      	mov	r1, r4
 80032ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032be:	3b30      	subs	r3, #48	; 0x30
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d94e      	bls.n	8003362 <_svfiprintf_r+0x17e>
 80032c4:	b1b0      	cbz	r0, 80032f4 <_svfiprintf_r+0x110>
 80032c6:	9207      	str	r2, [sp, #28]
 80032c8:	e014      	b.n	80032f4 <_svfiprintf_r+0x110>
 80032ca:	eba0 0308 	sub.w	r3, r0, r8
 80032ce:	fa09 f303 	lsl.w	r3, r9, r3
 80032d2:	4313      	orrs	r3, r2
 80032d4:	9304      	str	r3, [sp, #16]
 80032d6:	46a2      	mov	sl, r4
 80032d8:	e7d2      	b.n	8003280 <_svfiprintf_r+0x9c>
 80032da:	9b03      	ldr	r3, [sp, #12]
 80032dc:	1d19      	adds	r1, r3, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	9103      	str	r1, [sp, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bfbb      	ittet	lt
 80032e6:	425b      	neglt	r3, r3
 80032e8:	f042 0202 	orrlt.w	r2, r2, #2
 80032ec:	9307      	strge	r3, [sp, #28]
 80032ee:	9307      	strlt	r3, [sp, #28]
 80032f0:	bfb8      	it	lt
 80032f2:	9204      	strlt	r2, [sp, #16]
 80032f4:	7823      	ldrb	r3, [r4, #0]
 80032f6:	2b2e      	cmp	r3, #46	; 0x2e
 80032f8:	d10c      	bne.n	8003314 <_svfiprintf_r+0x130>
 80032fa:	7863      	ldrb	r3, [r4, #1]
 80032fc:	2b2a      	cmp	r3, #42	; 0x2a
 80032fe:	d135      	bne.n	800336c <_svfiprintf_r+0x188>
 8003300:	9b03      	ldr	r3, [sp, #12]
 8003302:	1d1a      	adds	r2, r3, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	9203      	str	r2, [sp, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	bfb8      	it	lt
 800330c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003310:	3402      	adds	r4, #2
 8003312:	9305      	str	r3, [sp, #20]
 8003314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80033e0 <_svfiprintf_r+0x1fc>
 8003318:	7821      	ldrb	r1, [r4, #0]
 800331a:	2203      	movs	r2, #3
 800331c:	4650      	mov	r0, sl
 800331e:	f7fc ff6f 	bl	8000200 <memchr>
 8003322:	b140      	cbz	r0, 8003336 <_svfiprintf_r+0x152>
 8003324:	2340      	movs	r3, #64	; 0x40
 8003326:	eba0 000a 	sub.w	r0, r0, sl
 800332a:	fa03 f000 	lsl.w	r0, r3, r0
 800332e:	9b04      	ldr	r3, [sp, #16]
 8003330:	4303      	orrs	r3, r0
 8003332:	3401      	adds	r4, #1
 8003334:	9304      	str	r3, [sp, #16]
 8003336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333a:	4826      	ldr	r0, [pc, #152]	; (80033d4 <_svfiprintf_r+0x1f0>)
 800333c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003340:	2206      	movs	r2, #6
 8003342:	f7fc ff5d 	bl	8000200 <memchr>
 8003346:	2800      	cmp	r0, #0
 8003348:	d038      	beq.n	80033bc <_svfiprintf_r+0x1d8>
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <_svfiprintf_r+0x1f4>)
 800334c:	bb1b      	cbnz	r3, 8003396 <_svfiprintf_r+0x1b2>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	3307      	adds	r3, #7
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	3308      	adds	r3, #8
 8003358:	9303      	str	r3, [sp, #12]
 800335a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800335c:	4433      	add	r3, r6
 800335e:	9309      	str	r3, [sp, #36]	; 0x24
 8003360:	e767      	b.n	8003232 <_svfiprintf_r+0x4e>
 8003362:	fb0c 3202 	mla	r2, ip, r2, r3
 8003366:	460c      	mov	r4, r1
 8003368:	2001      	movs	r0, #1
 800336a:	e7a5      	b.n	80032b8 <_svfiprintf_r+0xd4>
 800336c:	2300      	movs	r3, #0
 800336e:	3401      	adds	r4, #1
 8003370:	9305      	str	r3, [sp, #20]
 8003372:	4619      	mov	r1, r3
 8003374:	f04f 0c0a 	mov.w	ip, #10
 8003378:	4620      	mov	r0, r4
 800337a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800337e:	3a30      	subs	r2, #48	; 0x30
 8003380:	2a09      	cmp	r2, #9
 8003382:	d903      	bls.n	800338c <_svfiprintf_r+0x1a8>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0c5      	beq.n	8003314 <_svfiprintf_r+0x130>
 8003388:	9105      	str	r1, [sp, #20]
 800338a:	e7c3      	b.n	8003314 <_svfiprintf_r+0x130>
 800338c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003390:	4604      	mov	r4, r0
 8003392:	2301      	movs	r3, #1
 8003394:	e7f0      	b.n	8003378 <_svfiprintf_r+0x194>
 8003396:	ab03      	add	r3, sp, #12
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	462a      	mov	r2, r5
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <_svfiprintf_r+0x1f8>)
 800339e:	a904      	add	r1, sp, #16
 80033a0:	4638      	mov	r0, r7
 80033a2:	f3af 8000 	nop.w
 80033a6:	1c42      	adds	r2, r0, #1
 80033a8:	4606      	mov	r6, r0
 80033aa:	d1d6      	bne.n	800335a <_svfiprintf_r+0x176>
 80033ac:	89ab      	ldrh	r3, [r5, #12]
 80033ae:	065b      	lsls	r3, r3, #25
 80033b0:	f53f af2c 	bmi.w	800320c <_svfiprintf_r+0x28>
 80033b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033b6:	b01d      	add	sp, #116	; 0x74
 80033b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033bc:	ab03      	add	r3, sp, #12
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	462a      	mov	r2, r5
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <_svfiprintf_r+0x1f8>)
 80033c4:	a904      	add	r1, sp, #16
 80033c6:	4638      	mov	r0, r7
 80033c8:	f000 f87a 	bl	80034c0 <_printf_i>
 80033cc:	e7eb      	b.n	80033a6 <_svfiprintf_r+0x1c2>
 80033ce:	bf00      	nop
 80033d0:	080039b8 	.word	0x080039b8
 80033d4:	080039c2 	.word	0x080039c2
 80033d8:	00000000 	.word	0x00000000
 80033dc:	0800312d 	.word	0x0800312d
 80033e0:	080039be 	.word	0x080039be

080033e4 <_printf_common>:
 80033e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e8:	4616      	mov	r6, r2
 80033ea:	4699      	mov	r9, r3
 80033ec:	688a      	ldr	r2, [r1, #8]
 80033ee:	690b      	ldr	r3, [r1, #16]
 80033f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bfb8      	it	lt
 80033f8:	4613      	movlt	r3, r2
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003400:	4607      	mov	r7, r0
 8003402:	460c      	mov	r4, r1
 8003404:	b10a      	cbz	r2, 800340a <_printf_common+0x26>
 8003406:	3301      	adds	r3, #1
 8003408:	6033      	str	r3, [r6, #0]
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	0699      	lsls	r1, r3, #26
 800340e:	bf42      	ittt	mi
 8003410:	6833      	ldrmi	r3, [r6, #0]
 8003412:	3302      	addmi	r3, #2
 8003414:	6033      	strmi	r3, [r6, #0]
 8003416:	6825      	ldr	r5, [r4, #0]
 8003418:	f015 0506 	ands.w	r5, r5, #6
 800341c:	d106      	bne.n	800342c <_printf_common+0x48>
 800341e:	f104 0a19 	add.w	sl, r4, #25
 8003422:	68e3      	ldr	r3, [r4, #12]
 8003424:	6832      	ldr	r2, [r6, #0]
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	42ab      	cmp	r3, r5
 800342a:	dc26      	bgt.n	800347a <_printf_common+0x96>
 800342c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003430:	1e13      	subs	r3, r2, #0
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	bf18      	it	ne
 8003436:	2301      	movne	r3, #1
 8003438:	0692      	lsls	r2, r2, #26
 800343a:	d42b      	bmi.n	8003494 <_printf_common+0xb0>
 800343c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003440:	4649      	mov	r1, r9
 8003442:	4638      	mov	r0, r7
 8003444:	47c0      	blx	r8
 8003446:	3001      	adds	r0, #1
 8003448:	d01e      	beq.n	8003488 <_printf_common+0xa4>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	68e5      	ldr	r5, [r4, #12]
 800344e:	6832      	ldr	r2, [r6, #0]
 8003450:	f003 0306 	and.w	r3, r3, #6
 8003454:	2b04      	cmp	r3, #4
 8003456:	bf08      	it	eq
 8003458:	1aad      	subeq	r5, r5, r2
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	6922      	ldr	r2, [r4, #16]
 800345e:	bf0c      	ite	eq
 8003460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003464:	2500      	movne	r5, #0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfc4      	itt	gt
 800346a:	1a9b      	subgt	r3, r3, r2
 800346c:	18ed      	addgt	r5, r5, r3
 800346e:	2600      	movs	r6, #0
 8003470:	341a      	adds	r4, #26
 8003472:	42b5      	cmp	r5, r6
 8003474:	d11a      	bne.n	80034ac <_printf_common+0xc8>
 8003476:	2000      	movs	r0, #0
 8003478:	e008      	b.n	800348c <_printf_common+0xa8>
 800347a:	2301      	movs	r3, #1
 800347c:	4652      	mov	r2, sl
 800347e:	4649      	mov	r1, r9
 8003480:	4638      	mov	r0, r7
 8003482:	47c0      	blx	r8
 8003484:	3001      	adds	r0, #1
 8003486:	d103      	bne.n	8003490 <_printf_common+0xac>
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003490:	3501      	adds	r5, #1
 8003492:	e7c6      	b.n	8003422 <_printf_common+0x3e>
 8003494:	18e1      	adds	r1, r4, r3
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	2030      	movs	r0, #48	; 0x30
 800349a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800349e:	4422      	add	r2, r4
 80034a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034a8:	3302      	adds	r3, #2
 80034aa:	e7c7      	b.n	800343c <_printf_common+0x58>
 80034ac:	2301      	movs	r3, #1
 80034ae:	4622      	mov	r2, r4
 80034b0:	4649      	mov	r1, r9
 80034b2:	4638      	mov	r0, r7
 80034b4:	47c0      	blx	r8
 80034b6:	3001      	adds	r0, #1
 80034b8:	d0e6      	beq.n	8003488 <_printf_common+0xa4>
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7d9      	b.n	8003472 <_printf_common+0x8e>
	...

080034c0 <_printf_i>:
 80034c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	460c      	mov	r4, r1
 80034c6:	4691      	mov	r9, r2
 80034c8:	7e27      	ldrb	r7, [r4, #24]
 80034ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034cc:	2f78      	cmp	r7, #120	; 0x78
 80034ce:	4680      	mov	r8, r0
 80034d0:	469a      	mov	sl, r3
 80034d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d6:	d807      	bhi.n	80034e8 <_printf_i+0x28>
 80034d8:	2f62      	cmp	r7, #98	; 0x62
 80034da:	d80a      	bhi.n	80034f2 <_printf_i+0x32>
 80034dc:	2f00      	cmp	r7, #0
 80034de:	f000 80d8 	beq.w	8003692 <_printf_i+0x1d2>
 80034e2:	2f58      	cmp	r7, #88	; 0x58
 80034e4:	f000 80a3 	beq.w	800362e <_printf_i+0x16e>
 80034e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034f0:	e03a      	b.n	8003568 <_printf_i+0xa8>
 80034f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034f6:	2b15      	cmp	r3, #21
 80034f8:	d8f6      	bhi.n	80034e8 <_printf_i+0x28>
 80034fa:	a001      	add	r0, pc, #4	; (adr r0, 8003500 <_printf_i+0x40>)
 80034fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003500:	08003559 	.word	0x08003559
 8003504:	0800356d 	.word	0x0800356d
 8003508:	080034e9 	.word	0x080034e9
 800350c:	080034e9 	.word	0x080034e9
 8003510:	080034e9 	.word	0x080034e9
 8003514:	080034e9 	.word	0x080034e9
 8003518:	0800356d 	.word	0x0800356d
 800351c:	080034e9 	.word	0x080034e9
 8003520:	080034e9 	.word	0x080034e9
 8003524:	080034e9 	.word	0x080034e9
 8003528:	080034e9 	.word	0x080034e9
 800352c:	08003679 	.word	0x08003679
 8003530:	0800359d 	.word	0x0800359d
 8003534:	0800365b 	.word	0x0800365b
 8003538:	080034e9 	.word	0x080034e9
 800353c:	080034e9 	.word	0x080034e9
 8003540:	0800369b 	.word	0x0800369b
 8003544:	080034e9 	.word	0x080034e9
 8003548:	0800359d 	.word	0x0800359d
 800354c:	080034e9 	.word	0x080034e9
 8003550:	080034e9 	.word	0x080034e9
 8003554:	08003663 	.word	0x08003663
 8003558:	680b      	ldr	r3, [r1, #0]
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	600a      	str	r2, [r1, #0]
 8003560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003568:	2301      	movs	r3, #1
 800356a:	e0a3      	b.n	80036b4 <_printf_i+0x1f4>
 800356c:	6825      	ldr	r5, [r4, #0]
 800356e:	6808      	ldr	r0, [r1, #0]
 8003570:	062e      	lsls	r6, r5, #24
 8003572:	f100 0304 	add.w	r3, r0, #4
 8003576:	d50a      	bpl.n	800358e <_printf_i+0xce>
 8003578:	6805      	ldr	r5, [r0, #0]
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	2d00      	cmp	r5, #0
 800357e:	da03      	bge.n	8003588 <_printf_i+0xc8>
 8003580:	232d      	movs	r3, #45	; 0x2d
 8003582:	426d      	negs	r5, r5
 8003584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003588:	485e      	ldr	r0, [pc, #376]	; (8003704 <_printf_i+0x244>)
 800358a:	230a      	movs	r3, #10
 800358c:	e019      	b.n	80035c2 <_printf_i+0x102>
 800358e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003592:	6805      	ldr	r5, [r0, #0]
 8003594:	600b      	str	r3, [r1, #0]
 8003596:	bf18      	it	ne
 8003598:	b22d      	sxthne	r5, r5
 800359a:	e7ef      	b.n	800357c <_printf_i+0xbc>
 800359c:	680b      	ldr	r3, [r1, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	1d18      	adds	r0, r3, #4
 80035a2:	6008      	str	r0, [r1, #0]
 80035a4:	0628      	lsls	r0, r5, #24
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0xec>
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <_printf_i+0xf2>
 80035ac:	0669      	lsls	r1, r5, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0xe8>
 80035b0:	881d      	ldrh	r5, [r3, #0]
 80035b2:	4854      	ldr	r0, [pc, #336]	; (8003704 <_printf_i+0x244>)
 80035b4:	2f6f      	cmp	r7, #111	; 0x6f
 80035b6:	bf0c      	ite	eq
 80035b8:	2308      	moveq	r3, #8
 80035ba:	230a      	movne	r3, #10
 80035bc:	2100      	movs	r1, #0
 80035be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035c2:	6866      	ldr	r6, [r4, #4]
 80035c4:	60a6      	str	r6, [r4, #8]
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	bfa2      	ittt	ge
 80035ca:	6821      	ldrge	r1, [r4, #0]
 80035cc:	f021 0104 	bicge.w	r1, r1, #4
 80035d0:	6021      	strge	r1, [r4, #0]
 80035d2:	b90d      	cbnz	r5, 80035d8 <_printf_i+0x118>
 80035d4:	2e00      	cmp	r6, #0
 80035d6:	d04d      	beq.n	8003674 <_printf_i+0x1b4>
 80035d8:	4616      	mov	r6, r2
 80035da:	fbb5 f1f3 	udiv	r1, r5, r3
 80035de:	fb03 5711 	mls	r7, r3, r1, r5
 80035e2:	5dc7      	ldrb	r7, [r0, r7]
 80035e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035e8:	462f      	mov	r7, r5
 80035ea:	42bb      	cmp	r3, r7
 80035ec:	460d      	mov	r5, r1
 80035ee:	d9f4      	bls.n	80035da <_printf_i+0x11a>
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d10b      	bne.n	800360c <_printf_i+0x14c>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07df      	lsls	r7, r3, #31
 80035f8:	d508      	bpl.n	800360c <_printf_i+0x14c>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	6861      	ldr	r1, [r4, #4]
 80035fe:	4299      	cmp	r1, r3
 8003600:	bfde      	ittt	le
 8003602:	2330      	movle	r3, #48	; 0x30
 8003604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800360c:	1b92      	subs	r2, r2, r6
 800360e:	6122      	str	r2, [r4, #16]
 8003610:	f8cd a000 	str.w	sl, [sp]
 8003614:	464b      	mov	r3, r9
 8003616:	aa03      	add	r2, sp, #12
 8003618:	4621      	mov	r1, r4
 800361a:	4640      	mov	r0, r8
 800361c:	f7ff fee2 	bl	80033e4 <_printf_common>
 8003620:	3001      	adds	r0, #1
 8003622:	d14c      	bne.n	80036be <_printf_i+0x1fe>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	b004      	add	sp, #16
 800362a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362e:	4835      	ldr	r0, [pc, #212]	; (8003704 <_printf_i+0x244>)
 8003630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	680e      	ldr	r6, [r1, #0]
 8003638:	061f      	lsls	r7, r3, #24
 800363a:	f856 5b04 	ldr.w	r5, [r6], #4
 800363e:	600e      	str	r6, [r1, #0]
 8003640:	d514      	bpl.n	800366c <_printf_i+0x1ac>
 8003642:	07d9      	lsls	r1, r3, #31
 8003644:	bf44      	itt	mi
 8003646:	f043 0320 	orrmi.w	r3, r3, #32
 800364a:	6023      	strmi	r3, [r4, #0]
 800364c:	b91d      	cbnz	r5, 8003656 <_printf_i+0x196>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f023 0320 	bic.w	r3, r3, #32
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	2310      	movs	r3, #16
 8003658:	e7b0      	b.n	80035bc <_printf_i+0xfc>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	f043 0320 	orr.w	r3, r3, #32
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	2378      	movs	r3, #120	; 0x78
 8003664:	4828      	ldr	r0, [pc, #160]	; (8003708 <_printf_i+0x248>)
 8003666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800366a:	e7e3      	b.n	8003634 <_printf_i+0x174>
 800366c:	065e      	lsls	r6, r3, #25
 800366e:	bf48      	it	mi
 8003670:	b2ad      	uxthmi	r5, r5
 8003672:	e7e6      	b.n	8003642 <_printf_i+0x182>
 8003674:	4616      	mov	r6, r2
 8003676:	e7bb      	b.n	80035f0 <_printf_i+0x130>
 8003678:	680b      	ldr	r3, [r1, #0]
 800367a:	6826      	ldr	r6, [r4, #0]
 800367c:	6960      	ldr	r0, [r4, #20]
 800367e:	1d1d      	adds	r5, r3, #4
 8003680:	600d      	str	r5, [r1, #0]
 8003682:	0635      	lsls	r5, r6, #24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	d501      	bpl.n	800368c <_printf_i+0x1cc>
 8003688:	6018      	str	r0, [r3, #0]
 800368a:	e002      	b.n	8003692 <_printf_i+0x1d2>
 800368c:	0671      	lsls	r1, r6, #25
 800368e:	d5fb      	bpl.n	8003688 <_printf_i+0x1c8>
 8003690:	8018      	strh	r0, [r3, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	4616      	mov	r6, r2
 8003698:	e7ba      	b.n	8003610 <_printf_i+0x150>
 800369a:	680b      	ldr	r3, [r1, #0]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	600a      	str	r2, [r1, #0]
 80036a0:	681e      	ldr	r6, [r3, #0]
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7fc fdaa 	bl	8000200 <memchr>
 80036ac:	b108      	cbz	r0, 80036b2 <_printf_i+0x1f2>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	6060      	str	r0, [r4, #4]
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	2300      	movs	r3, #0
 80036b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036bc:	e7a8      	b.n	8003610 <_printf_i+0x150>
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	4632      	mov	r2, r6
 80036c2:	4649      	mov	r1, r9
 80036c4:	4640      	mov	r0, r8
 80036c6:	47d0      	blx	sl
 80036c8:	3001      	adds	r0, #1
 80036ca:	d0ab      	beq.n	8003624 <_printf_i+0x164>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	079b      	lsls	r3, r3, #30
 80036d0:	d413      	bmi.n	80036fa <_printf_i+0x23a>
 80036d2:	68e0      	ldr	r0, [r4, #12]
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bfb8      	it	lt
 80036da:	4618      	movlt	r0, r3
 80036dc:	e7a4      	b.n	8003628 <_printf_i+0x168>
 80036de:	2301      	movs	r3, #1
 80036e0:	4632      	mov	r2, r6
 80036e2:	4649      	mov	r1, r9
 80036e4:	4640      	mov	r0, r8
 80036e6:	47d0      	blx	sl
 80036e8:	3001      	adds	r0, #1
 80036ea:	d09b      	beq.n	8003624 <_printf_i+0x164>
 80036ec:	3501      	adds	r5, #1
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	9903      	ldr	r1, [sp, #12]
 80036f2:	1a5b      	subs	r3, r3, r1
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dcf2      	bgt.n	80036de <_printf_i+0x21e>
 80036f8:	e7eb      	b.n	80036d2 <_printf_i+0x212>
 80036fa:	2500      	movs	r5, #0
 80036fc:	f104 0619 	add.w	r6, r4, #25
 8003700:	e7f5      	b.n	80036ee <_printf_i+0x22e>
 8003702:	bf00      	nop
 8003704:	080039c9 	.word	0x080039c9
 8003708:	080039da 	.word	0x080039da

0800370c <memcpy>:
 800370c:	440a      	add	r2, r1
 800370e:	4291      	cmp	r1, r2
 8003710:	f100 33ff 	add.w	r3, r0, #4294967295
 8003714:	d100      	bne.n	8003718 <memcpy+0xc>
 8003716:	4770      	bx	lr
 8003718:	b510      	push	{r4, lr}
 800371a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800371e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003722:	4291      	cmp	r1, r2
 8003724:	d1f9      	bne.n	800371a <memcpy+0xe>
 8003726:	bd10      	pop	{r4, pc}

08003728 <memmove>:
 8003728:	4288      	cmp	r0, r1
 800372a:	b510      	push	{r4, lr}
 800372c:	eb01 0402 	add.w	r4, r1, r2
 8003730:	d902      	bls.n	8003738 <memmove+0x10>
 8003732:	4284      	cmp	r4, r0
 8003734:	4623      	mov	r3, r4
 8003736:	d807      	bhi.n	8003748 <memmove+0x20>
 8003738:	1e43      	subs	r3, r0, #1
 800373a:	42a1      	cmp	r1, r4
 800373c:	d008      	beq.n	8003750 <memmove+0x28>
 800373e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003746:	e7f8      	b.n	800373a <memmove+0x12>
 8003748:	4402      	add	r2, r0
 800374a:	4601      	mov	r1, r0
 800374c:	428a      	cmp	r2, r1
 800374e:	d100      	bne.n	8003752 <memmove+0x2a>
 8003750:	bd10      	pop	{r4, pc}
 8003752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800375a:	e7f7      	b.n	800374c <memmove+0x24>

0800375c <_free_r>:
 800375c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800375e:	2900      	cmp	r1, #0
 8003760:	d048      	beq.n	80037f4 <_free_r+0x98>
 8003762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003766:	9001      	str	r0, [sp, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f1a1 0404 	sub.w	r4, r1, #4
 800376e:	bfb8      	it	lt
 8003770:	18e4      	addlt	r4, r4, r3
 8003772:	f000 f8d3 	bl	800391c <__malloc_lock>
 8003776:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <_free_r+0x9c>)
 8003778:	9801      	ldr	r0, [sp, #4]
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	4615      	mov	r5, r2
 800377e:	b933      	cbnz	r3, 800378e <_free_r+0x32>
 8003780:	6063      	str	r3, [r4, #4]
 8003782:	6014      	str	r4, [r2, #0]
 8003784:	b003      	add	sp, #12
 8003786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800378a:	f000 b8cd 	b.w	8003928 <__malloc_unlock>
 800378e:	42a3      	cmp	r3, r4
 8003790:	d90b      	bls.n	80037aa <_free_r+0x4e>
 8003792:	6821      	ldr	r1, [r4, #0]
 8003794:	1862      	adds	r2, r4, r1
 8003796:	4293      	cmp	r3, r2
 8003798:	bf04      	itt	eq
 800379a:	681a      	ldreq	r2, [r3, #0]
 800379c:	685b      	ldreq	r3, [r3, #4]
 800379e:	6063      	str	r3, [r4, #4]
 80037a0:	bf04      	itt	eq
 80037a2:	1852      	addeq	r2, r2, r1
 80037a4:	6022      	streq	r2, [r4, #0]
 80037a6:	602c      	str	r4, [r5, #0]
 80037a8:	e7ec      	b.n	8003784 <_free_r+0x28>
 80037aa:	461a      	mov	r2, r3
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b10b      	cbz	r3, 80037b4 <_free_r+0x58>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d9fa      	bls.n	80037aa <_free_r+0x4e>
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	1855      	adds	r5, r2, r1
 80037b8:	42a5      	cmp	r5, r4
 80037ba:	d10b      	bne.n	80037d4 <_free_r+0x78>
 80037bc:	6824      	ldr	r4, [r4, #0]
 80037be:	4421      	add	r1, r4
 80037c0:	1854      	adds	r4, r2, r1
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	d1dd      	bne.n	8003784 <_free_r+0x28>
 80037c8:	681c      	ldr	r4, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	4421      	add	r1, r4
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	e7d7      	b.n	8003784 <_free_r+0x28>
 80037d4:	d902      	bls.n	80037dc <_free_r+0x80>
 80037d6:	230c      	movs	r3, #12
 80037d8:	6003      	str	r3, [r0, #0]
 80037da:	e7d3      	b.n	8003784 <_free_r+0x28>
 80037dc:	6825      	ldr	r5, [r4, #0]
 80037de:	1961      	adds	r1, r4, r5
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf04      	itt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	bf04      	itt	eq
 80037ec:	1949      	addeq	r1, r1, r5
 80037ee:	6021      	streq	r1, [r4, #0]
 80037f0:	6054      	str	r4, [r2, #4]
 80037f2:	e7c7      	b.n	8003784 <_free_r+0x28>
 80037f4:	b003      	add	sp, #12
 80037f6:	bd30      	pop	{r4, r5, pc}
 80037f8:	200000a4 	.word	0x200000a4

080037fc <_malloc_r>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	1ccd      	adds	r5, r1, #3
 8003800:	f025 0503 	bic.w	r5, r5, #3
 8003804:	3508      	adds	r5, #8
 8003806:	2d0c      	cmp	r5, #12
 8003808:	bf38      	it	cc
 800380a:	250c      	movcc	r5, #12
 800380c:	2d00      	cmp	r5, #0
 800380e:	4606      	mov	r6, r0
 8003810:	db01      	blt.n	8003816 <_malloc_r+0x1a>
 8003812:	42a9      	cmp	r1, r5
 8003814:	d903      	bls.n	800381e <_malloc_r+0x22>
 8003816:	230c      	movs	r3, #12
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	2000      	movs	r0, #0
 800381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381e:	f000 f87d 	bl	800391c <__malloc_lock>
 8003822:	4921      	ldr	r1, [pc, #132]	; (80038a8 <_malloc_r+0xac>)
 8003824:	680a      	ldr	r2, [r1, #0]
 8003826:	4614      	mov	r4, r2
 8003828:	b99c      	cbnz	r4, 8003852 <_malloc_r+0x56>
 800382a:	4f20      	ldr	r7, [pc, #128]	; (80038ac <_malloc_r+0xb0>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b923      	cbnz	r3, 800383a <_malloc_r+0x3e>
 8003830:	4621      	mov	r1, r4
 8003832:	4630      	mov	r0, r6
 8003834:	f000 f862 	bl	80038fc <_sbrk_r>
 8003838:	6038      	str	r0, [r7, #0]
 800383a:	4629      	mov	r1, r5
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f85d 	bl	80038fc <_sbrk_r>
 8003842:	1c43      	adds	r3, r0, #1
 8003844:	d123      	bne.n	800388e <_malloc_r+0x92>
 8003846:	230c      	movs	r3, #12
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	4630      	mov	r0, r6
 800384c:	f000 f86c 	bl	8003928 <__malloc_unlock>
 8003850:	e7e3      	b.n	800381a <_malloc_r+0x1e>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	1b5b      	subs	r3, r3, r5
 8003856:	d417      	bmi.n	8003888 <_malloc_r+0x8c>
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d903      	bls.n	8003864 <_malloc_r+0x68>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	441c      	add	r4, r3
 8003860:	6025      	str	r5, [r4, #0]
 8003862:	e004      	b.n	800386e <_malloc_r+0x72>
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	42a2      	cmp	r2, r4
 8003868:	bf0c      	ite	eq
 800386a:	600b      	streq	r3, [r1, #0]
 800386c:	6053      	strne	r3, [r2, #4]
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f85a 	bl	8003928 <__malloc_unlock>
 8003874:	f104 000b 	add.w	r0, r4, #11
 8003878:	1d23      	adds	r3, r4, #4
 800387a:	f020 0007 	bic.w	r0, r0, #7
 800387e:	1ac2      	subs	r2, r0, r3
 8003880:	d0cc      	beq.n	800381c <_malloc_r+0x20>
 8003882:	1a1b      	subs	r3, r3, r0
 8003884:	50a3      	str	r3, [r4, r2]
 8003886:	e7c9      	b.n	800381c <_malloc_r+0x20>
 8003888:	4622      	mov	r2, r4
 800388a:	6864      	ldr	r4, [r4, #4]
 800388c:	e7cc      	b.n	8003828 <_malloc_r+0x2c>
 800388e:	1cc4      	adds	r4, r0, #3
 8003890:	f024 0403 	bic.w	r4, r4, #3
 8003894:	42a0      	cmp	r0, r4
 8003896:	d0e3      	beq.n	8003860 <_malloc_r+0x64>
 8003898:	1a21      	subs	r1, r4, r0
 800389a:	4630      	mov	r0, r6
 800389c:	f000 f82e 	bl	80038fc <_sbrk_r>
 80038a0:	3001      	adds	r0, #1
 80038a2:	d1dd      	bne.n	8003860 <_malloc_r+0x64>
 80038a4:	e7cf      	b.n	8003846 <_malloc_r+0x4a>
 80038a6:	bf00      	nop
 80038a8:	200000a4 	.word	0x200000a4
 80038ac:	200000a8 	.word	0x200000a8

080038b0 <_realloc_r>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	4607      	mov	r7, r0
 80038b4:	4614      	mov	r4, r2
 80038b6:	460e      	mov	r6, r1
 80038b8:	b921      	cbnz	r1, 80038c4 <_realloc_r+0x14>
 80038ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038be:	4611      	mov	r1, r2
 80038c0:	f7ff bf9c 	b.w	80037fc <_malloc_r>
 80038c4:	b922      	cbnz	r2, 80038d0 <_realloc_r+0x20>
 80038c6:	f7ff ff49 	bl	800375c <_free_r>
 80038ca:	4625      	mov	r5, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d0:	f000 f830 	bl	8003934 <_malloc_usable_size_r>
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d20f      	bcs.n	80038f8 <_realloc_r+0x48>
 80038d8:	4621      	mov	r1, r4
 80038da:	4638      	mov	r0, r7
 80038dc:	f7ff ff8e 	bl	80037fc <_malloc_r>
 80038e0:	4605      	mov	r5, r0
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d0f2      	beq.n	80038cc <_realloc_r+0x1c>
 80038e6:	4631      	mov	r1, r6
 80038e8:	4622      	mov	r2, r4
 80038ea:	f7ff ff0f 	bl	800370c <memcpy>
 80038ee:	4631      	mov	r1, r6
 80038f0:	4638      	mov	r0, r7
 80038f2:	f7ff ff33 	bl	800375c <_free_r>
 80038f6:	e7e9      	b.n	80038cc <_realloc_r+0x1c>
 80038f8:	4635      	mov	r5, r6
 80038fa:	e7e7      	b.n	80038cc <_realloc_r+0x1c>

080038fc <_sbrk_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4d06      	ldr	r5, [pc, #24]	; (8003918 <_sbrk_r+0x1c>)
 8003900:	2300      	movs	r3, #0
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	f7fd f828 	bl	800095c <_sbrk>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_sbrk_r+0x1a>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	b103      	cbz	r3, 8003916 <_sbrk_r+0x1a>
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	20000134 	.word	0x20000134

0800391c <__malloc_lock>:
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <__malloc_lock+0x8>)
 800391e:	f000 b811 	b.w	8003944 <__retarget_lock_acquire_recursive>
 8003922:	bf00      	nop
 8003924:	2000013c 	.word	0x2000013c

08003928 <__malloc_unlock>:
 8003928:	4801      	ldr	r0, [pc, #4]	; (8003930 <__malloc_unlock+0x8>)
 800392a:	f000 b80c 	b.w	8003946 <__retarget_lock_release_recursive>
 800392e:	bf00      	nop
 8003930:	2000013c 	.word	0x2000013c

08003934 <_malloc_usable_size_r>:
 8003934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003938:	1f18      	subs	r0, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfbc      	itt	lt
 800393e:	580b      	ldrlt	r3, [r1, r0]
 8003940:	18c0      	addlt	r0, r0, r3
 8003942:	4770      	bx	lr

08003944 <__retarget_lock_acquire_recursive>:
 8003944:	4770      	bx	lr

08003946 <__retarget_lock_release_recursive>:
 8003946:	4770      	bx	lr

08003948 <_init>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr

08003954 <_fini>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr
