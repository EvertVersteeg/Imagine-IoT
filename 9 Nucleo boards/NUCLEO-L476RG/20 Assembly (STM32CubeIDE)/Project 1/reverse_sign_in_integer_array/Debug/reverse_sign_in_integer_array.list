
Reverse_sign_in_integer_array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a34  08003a34  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a3c  08003a3c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000084  08003ac8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003ac8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_line   00009531  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000a926  00000000  00000000  000295e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001943  00000000  00000000  00033f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e96b0  00000000  00000000  00036118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000810  00000000  00000000  0011f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025e34  00000000  00000000  0011ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  00145e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003990 	.word	0x08003990

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08003990 	.word	0x08003990

080001d0 <inv_pint>:
				.global inv_pint
				.text
inv_pint:
				cmp	r1, #0
 80001d0:	2900      	cmp	r1, #0
				ble	exit
 80001d2:	dd06      	ble.n	80001e2 <exit>

080001d4 <next>:
next:
				ldr	r2, [r0]
 80001d4:	6802      	ldr	r2, [r0, #0]
				neg	r2, r2
 80001d6:	4252      	negs	r2, r2
				str	r2, [r0]
 80001d8:	6002      	str	r2, [r0, #0]
				sub	r1, r1, #1
 80001da:	3901      	subs	r1, #1
				beq	exit
 80001dc:	d001      	beq.n	80001e2 <exit>
				add	r0,	r0, #4
 80001de:	3004      	adds	r0, #4
				b	next
 80001e0:	e7f8      	b.n	80001d4 <next>

080001e2 <exit>:
exit:
				bx	lr
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fa77 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f81f 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8c3 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f891 	bl	80006c0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  inv_pint(num, sizeof(num)/4);
 800059e:	2105      	movs	r1, #5
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <main+0x48>)
 80005a2:	f7ff fe15 	bl	80001d0 <inv_pint>
	  for (int i=0; i<sizeof(num)/4; i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e009      	b.n	80005c0 <main+0x38>
		  disp_data(num[i]);
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <main+0x48>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f921 	bl	80007fc <disp_data>
	  for (int i=0; i<sizeof(num)/4; i++){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d9f2      	bls.n	80005ac <main+0x24>
	  	  }
	  HAL_Delay(30000);
 80005c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80005ca:	f000 fad5 	bl	8000b78 <HAL_Delay>
	  inv_pint(num, sizeof(num)/4);
 80005ce:	e7e6      	b.n	800059e <main+0x16>
 80005d0:	20000000 	.word	0x20000000

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0b8      	sub	sp, #224	; 0xe0
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005de:	2244      	movs	r2, #68	; 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fd9e 	bl	8003124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2288      	movs	r2, #136	; 0x88
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fd90 	bl	8003124 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000630:	2307      	movs	r3, #7
 8000632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fdc6 	bl	80011d8 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000652:	f000 f8cd 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f992 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000686:	f000 f8b3 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800068a:	2302      	movs	r3, #2
 800068c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800068e:	2300      	movs	r3, #0
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb8b 	bl	8001db0 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006a0:	f000 f8a6 	bl	80007f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a8:	f000 fd40 	bl	800112c <HAL_PWREx_ControlVoltageScaling>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006b2:	f000 f89d 	bl	80007f0 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	37e0      	adds	r7, #224	; 0xe0
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART2_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x58>)
 8000704:	f002 f810 	bl	8002728 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f86f 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000ac 	.word	0x200000ac
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fc9f 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0xc8>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_GPIO_Init+0xcc>)
 80007b8:	f000 fae8 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fad9 	bl	8000d8c <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	48000800 	.word	0x48000800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <disp_data>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
void disp_data(int val) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a4      	sub	sp, #144	; 0x90
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	char buf[128];
	int bRead;
	bRead = sprintf(buf, "Returned: %d\n\r", val);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <disp_data+0x38>)
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fc91 	bl	8003134 <siprintf>
 8000812:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, bRead, 300);
 8000816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800081a:	b29a      	uxth	r2, r3
 800081c:	f107 010c 	add.w	r1, r7, #12
 8000820:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <disp_data+0x3c>)
 8000826:	f001 ffcd 	bl	80027c4 <HAL_UART_Transmit>
}
 800082a:	bf00      	nop
 800082c:	3790      	adds	r7, #144	; 0x90
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	080039a8 	.word	0x080039a8
 8000838:	200000ac 	.word	0x200000ac

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d128      	bne.n	80008f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 fa4a 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40004400 	.word	0x40004400
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8f0 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f002 fba0 	bl	80030d0 <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20018000 	.word	0x20018000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	20000148 	.word	0x20000148

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <SystemInit+0x5c>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <SystemInit+0x5c>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <SystemInit+0x60>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <SystemInit+0x60>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SystemInit+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SystemInit+0x60>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <SystemInit+0x60>)
 80009f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <SystemInit+0x60>)
 8000a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SystemInit+0x60>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <SystemInit+0x60>)
 8000a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SystemInit+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	40021000 	.word	0x40021000

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffca 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a36:	e003      	b.n	8000a40 <LoopCopyDataInit>

08000a38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a3e:	3104      	adds	r1, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a48:	d3f6      	bcc.n	8000a38 <CopyDataInit>
	ldr	r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a4c:	e002      	b.n	8000a54 <LoopFillZerobss>

08000a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a50:	f842 3b04 	str.w	r3, [r2], #4

08000a54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <LoopForever+0x16>)
	cmp	r2, r3
 8000a56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a58:	d3f9      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 fb3f 	bl	80030dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd93 	bl	8000588 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a68:	08003a44 	.word	0x08003a44
	ldr	r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a70:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8000a74:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8000a78:	20000144 	.word	0x20000144

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_Init+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_Init+0x3c>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f944 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fec5 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f941 	bl	8000d72 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f919 	bl	8000d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000001c 	.word	0x2000001c
 8000b30:	20000014 	.word	0x20000014
 8000b34:	20000018 	.word	0x20000018

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000001c 	.word	0x2000001c
 8000b5c:	20000130 	.word	0x20000130

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000130 	.word	0x20000130

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000001c 	.word	0x2000001c

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff47 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff5c 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff8e 	bl	8000c78 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffb0 	bl	8000ce0 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e17f      	b.n	800109c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8171 	beq.w	8001096 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d00b      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc8:	2b11      	cmp	r3, #17
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b12      	cmp	r3, #18
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 0201 	and.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d118      	bne.n	8000e74 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x128>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b12      	cmp	r3, #18
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	6939      	ldr	r1, [r7, #16]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80ac 	beq.w	8001096 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <HAL_GPIO_Init+0x330>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	4a5e      	ldr	r2, [pc, #376]	; (80010bc <HAL_GPIO_Init+0x330>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4a:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <HAL_GPIO_Init+0x330>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f56:	4a5a      	ldr	r2, [pc, #360]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f80:	d025      	beq.n	8000fce <HAL_GPIO_Init+0x242>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x338>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01f      	beq.n	8000fca <HAL_GPIO_Init+0x23e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x33c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x23a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x340>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x236>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x344>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x232>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x348>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x22e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x34c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x22a>
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	e00c      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e00a      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x244>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe0:	4937      	ldr	r1, [pc, #220]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <HAL_GPIO_Init+0x350>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001012:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_GPIO_Init+0x350>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_GPIO_Init+0x350>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <HAL_GPIO_Init+0x350>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x350>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001066:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_GPIO_Init+0x350>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_GPIO_Init+0x350>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <HAL_GPIO_Init+0x350>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa22 f303 	lsr.w	r3, r2, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f47f ae78 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000c00 	.word	0x48000c00
 80010d0:	48001000 	.word	0x48001000
 80010d4:	48001400 	.word	0x48001400
 80010d8:	48001800 	.word	0x48001800
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_PWREx_GetVoltageRange+0x18>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000

0800112c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113a:	d130      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001148:	d038      	beq.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2232      	movs	r2, #50	; 0x32
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001170:	e002      	b.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3b01      	subs	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001184:	d102      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f2      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001198:	d110      	bne.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e00f      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d007      	beq.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000
 80011d0:	20000014 	.word	0x20000014
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e3d4      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ea:	4ba1      	ldr	r3, [pc, #644]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80e4 	beq.w	80013d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <HAL_RCC_OscConfig+0x4a>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	f040 808b 	bne.w	8001330 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b01      	cmp	r3, #1
 800121e:	f040 8087 	bne.w	8001330 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001222:	4b93      	ldr	r3, [pc, #588]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x62>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e3ac      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1a      	ldr	r2, [r3, #32]
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <HAL_RCC_OscConfig+0x7c>
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001252:	e005      	b.n	8001260 <HAL_RCC_OscConfig+0x88>
 8001254:	4b86      	ldr	r3, [pc, #536]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001260:	4293      	cmp	r3, r2
 8001262:	d223      	bcs.n	80012ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fd41 	bl	8001cf0 <RCC_SetFlashLatencyFromMSIRange>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e38d      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001278:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a7c      	ldr	r2, [pc, #496]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4977      	ldr	r1, [pc, #476]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	4972      	ldr	r1, [pc, #456]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
 80012aa:	e025      	b.n	80012f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ac:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6f      	ldr	r2, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	496a      	ldr	r1, [pc, #424]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	4965      	ldr	r1, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fd01 	bl	8001cf0 <RCC_SetFlashLatencyFromMSIRange>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e34d      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f8:	f000 fc36 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	495a      	ldr	r1, [pc, #360]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x2a0>)
 8001316:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001318:	4b58      	ldr	r3, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbcf 	bl	8000ac0 <HAL_InitTick>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d052      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	e331      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d032      	beq.n	800139e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001338:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001344:	f7ff fc0c 	bl	8000b60 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134c:	f7ff fc08 	bl	8000b60 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e31a      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a40      	ldr	r2, [pc, #256]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	493b      	ldr	r1, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	4936      	ldr	r1, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
 800139c:	e01a      	b.n	80013d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fbd9 	bl	8000b60 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b2:	f7ff fbd5 	bl	8000b60 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e2e7      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x1da>
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d074      	beq.n	80014ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x21a>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d10e      	bne.n	800140a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d10b      	bne.n	800140a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d064      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2f0>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d160      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e2c4      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x24a>
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a15      	ldr	r2, [pc, #84]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e01d      	b.n	800145e <HAL_RCC_OscConfig+0x286>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x26e>
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x286>
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_RCC_OscConfig+0x298>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fb7b 	bl	8000b60 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146c:	e011      	b.n	8001492 <HAL_RCC_OscConfig+0x2ba>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	080039b8 	.word	0x080039b8
 8001478:	20000014 	.word	0x20000014
 800147c:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fb6e 	bl	8000b60 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e280      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001492:	4baf      	ldr	r3, [pc, #700]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x2a8>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb5e 	bl	8000b60 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb5a 	bl	8000b60 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e26c      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ba:	4ba5      	ldr	r3, [pc, #660]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2d0>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d060      	beq.n	8001598 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x310>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d119      	bne.n	8001516 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d116      	bne.n	8001516 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e8:	4b99      	ldr	r3, [pc, #612]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x328>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e249      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4b93      	ldr	r3, [pc, #588]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	061b      	lsls	r3, r3, #24
 800150e:	4990      	ldr	r1, [pc, #576]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001514:	e040      	b.n	8001598 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d023      	beq.n	8001566 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151e:	4b8c      	ldr	r3, [pc, #560]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a8b      	ldr	r2, [pc, #556]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fb19 	bl	8000b60 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fb15 	bl	8000b60 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e227      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	4b82      	ldr	r3, [pc, #520]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b7f      	ldr	r3, [pc, #508]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	497c      	ldr	r1, [pc, #496]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e018      	b.n	8001598 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b7a      	ldr	r3, [pc, #488]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a79      	ldr	r2, [pc, #484]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 800156c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff faf5 	bl	8000b60 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff faf1 	bl	8000b60 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e203      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800158c:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d03c      	beq.n	800161e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	4a67      	ldr	r2, [pc, #412]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fad0 	bl	8000b60 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff facc 	bl	8000b60 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1de      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d6:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x3ec>
 80015e4:	e01b      	b.n	800161e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e6:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80015e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ec:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fab3 	bl	8000b60 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff faaf 	bl	8000b60 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1c1      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001610:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ef      	bne.n	80015fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80a6 	beq.w	8001778 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001630:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10d      	bne.n	8001658 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163c:	4b44      	ldr	r3, [pc, #272]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a43      	ldr	r2, [pc, #268]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
 8001648:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001654:	2301      	movs	r3, #1
 8001656:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <HAL_RCC_OscConfig+0x57c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d118      	bne.n	8001696 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001664:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_OscConfig+0x57c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <HAL_RCC_OscConfig+0x57c>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001670:	f7ff fa76 	bl	8000b60 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff fa72 	bl	8000b60 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e184      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_RCC_OscConfig+0x57c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4d8>
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ae:	e024      	b.n	80016fa <HAL_RCC_OscConfig+0x522>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d110      	bne.n	80016da <HAL_RCC_OscConfig+0x502>
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a24      	ldr	r2, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	4a20      	ldr	r2, [pc, #128]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d8:	e00f      	b.n	80016fa <HAL_RCC_OscConfig+0x522>
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d016      	beq.n	8001730 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fa2d 	bl	8000b60 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fa29 	bl	8000b60 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e139      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x578>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0ed      	beq.n	800170a <HAL_RCC_OscConfig+0x532>
 800172e:	e01a      	b.n	8001766 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa16 	bl	8000b60 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001736:	e00f      	b.n	8001758 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fa12 	bl	8000b60 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d906      	bls.n	8001758 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e122      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001758:	4b90      	ldr	r3, [pc, #576]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1e8      	bne.n	8001738 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4b8b      	ldr	r3, [pc, #556]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a8a      	ldr	r2, [pc, #552]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8108 	beq.w	8001992 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	2b02      	cmp	r3, #2
 8001788:	f040 80d0 	bne.w	800192c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800178c:	4b83      	ldr	r3, [pc, #524]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	429a      	cmp	r2, r3
 800179e:	d130      	bne.n	8001802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	3b01      	subs	r3, #1
 80017ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d127      	bne.n	8001802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d11f      	bne.n	8001802 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017cc:	2a07      	cmp	r2, #7
 80017ce:	bf14      	ite	ne
 80017d0:	2201      	movne	r2, #1
 80017d2:	2200      	moveq	r2, #0
 80017d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d113      	bne.n	8001802 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d06e      	beq.n	80018e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d069      	beq.n	80018dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001808:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001814:	4b61      	ldr	r3, [pc, #388]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b7      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001824:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a5c      	ldr	r2, [pc, #368]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800182a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800182e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001830:	f7ff f996 	bl	8000b60 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f992 	bl	8000b60 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0a4      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184a:	4b54      	ldr	r3, [pc, #336]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001856:	4b51      	ldr	r3, [pc, #324]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <HAL_RCC_OscConfig+0x7c8>)
 800185c:	4013      	ands	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001866:	3a01      	subs	r2, #1
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001870:	0212      	lsls	r2, r2, #8
 8001872:	4311      	orrs	r1, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001878:	0852      	lsrs	r2, r2, #1
 800187a:	3a01      	subs	r2, #1
 800187c:	0552      	lsls	r2, r2, #21
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001884:	0852      	lsrs	r2, r2, #1
 8001886:	3a01      	subs	r2, #1
 8001888:	0652      	lsls	r2, r2, #25
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001890:	0912      	lsrs	r2, r2, #4
 8001892:	0452      	lsls	r2, r2, #17
 8001894:	430a      	orrs	r2, r1
 8001896:	4941      	ldr	r1, [pc, #260]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800189c:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3e      	ldr	r2, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a3b      	ldr	r2, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b4:	f7ff f954 	bl	8000b60 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff f950 	bl	8000b60 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e062      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018da:	e05a      	b.n	8001992 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e059      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d152      	bne.n	8001992 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2a      	ldr	r2, [pc, #168]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001902:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001904:	f7ff f92c 	bl	8000b60 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f928 	bl	8000b60 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e03a      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x734>
 800192a:	e032      	b.n	8001992 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d02d      	beq.n	800198e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001950:	f023 0303 	bic.w	r3, r3, #3
 8001954:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 800195c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001964:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f8fb 	bl	8000b60 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f8f7 	bl	8000b60 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e009      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x7c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x796>
 800198c:	e001      	b.n	8001992 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	f99d808c 	.word	0xf99d808c

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0c8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4961      	ldr	r1, [pc, #388]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b0      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d04c      	beq.n	8001a8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fc:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e09e      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d115      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e092      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e086      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e07e      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 0203 	bic.w	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	493f      	ldr	r1, [pc, #252]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5e:	f7ff f87f 	bl	8000b60 <HAL_GetTick>
 8001a62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7ff f87b 	bl	8000b60 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e066      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 020c 	and.w	r2, r3, #12
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d1eb      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	492c      	ldr	r1, [pc, #176]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d210      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	4924      	ldr	r1, [pc, #144]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e036      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4918      	ldr	r1, [pc, #96]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4910      	ldr	r1, [pc, #64]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b1a:	f000 f825 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490c      	ldr	r1, [pc, #48]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ffbe 	bl	8000ac0 <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b48:	7afb      	ldrb	r3, [r7, #11]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	080039b8 	.word	0x080039b8
 8001b60:	20000014 	.word	0x20000014
 8001b64:	20000018 	.word	0x20000018

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d121      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d11e      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b9c:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e005      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e004      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d134      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d003      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xac>
 8001c0c:	e005      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c10:	617b      	str	r3, [r7, #20]
      break;
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c16:	617b      	str	r3, [r7, #20]
      break;
 8001c18:	e002      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	fb02 f203 	mul.w	r2, r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	0e5b      	lsrs	r3, r3, #25
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	3301      	adds	r3, #1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c60:	69bb      	ldr	r3, [r7, #24]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080039d0 	.word	0x080039d0
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000014 	.word	0x20000014

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c9c:	f7ff fff0 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	080039c8 	.word	0x080039c8

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cc8:	f7ff ffda 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	080039c8 	.word	0x080039c8

08001cf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d08:	f7ff fa02 	bl	8001110 <HAL_PWREx_GetVoltageRange>
 8001d0c:	6178      	str	r0, [r7, #20]
 8001d0e:	e014      	b.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d28:	f7ff f9f2 	bl	8001110 <HAL_PWREx_GetVoltageRange>
 8001d2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d40:	d10b      	bne.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d919      	bls.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d4c:	d902      	bls.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d4e:	2302      	movs	r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	e013      	b.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e010      	b.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b80      	cmp	r3, #128	; 0x80
 8001d5e:	d902      	bls.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d60:	2303      	movs	r3, #3
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e00a      	b.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	d102      	bne.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e004      	b.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b70      	cmp	r3, #112	; 0x70
 8001d76:	d101      	bne.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d78:	2301      	movs	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 0207 	bic.w	r2, r3, #7
 8001d84:	4909      	ldr	r1, [pc, #36]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40022000 	.word	0x40022000

08001db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001db8:	2300      	movs	r3, #0
 8001dba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d041      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dd4:	d02a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dda:	d824      	bhi.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001de0:	d008      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001de2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001de6:	d81e      	bhi.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df0:	d010      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001df2:	e018      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001df4:	4b86      	ldr	r3, [pc, #536]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a85      	ldr	r2, [pc, #532]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e00:	e015      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fabb 	bl	8002384 <RCCEx_PLLSAI1_Config>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e12:	e00c      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3320      	adds	r3, #32
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fba6 	bl	800256c <RCCEx_PLLSAI2_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e24:	e003      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	74fb      	strb	r3, [r7, #19]
      break;
 8001e2a:	e000      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e34:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e42:	4973      	ldr	r1, [pc, #460]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e4a:	e001      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d041      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e64:	d02a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e6a:	d824      	bhi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e70:	d008      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e76:	d81e      	bhi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d010      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e82:	e018      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a61      	ldr	r2, [pc, #388]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e90:	e015      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa73 	bl	8002384 <RCCEx_PLLSAI1_Config>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea2:	e00c      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fb5e 	bl	800256c <RCCEx_PLLSAI2_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb4:	e003      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eba:	e000      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed2:	494f      	ldr	r1, [pc, #316]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eda:	e001      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a0 	beq.w	800202e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a40      	ldr	r2, [pc, #256]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f24:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3a      	ldr	r2, [pc, #232]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f30:	f7fe fe16 	bl	8000b60 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f36:	e009      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f38:	f7fe fe12 	bl	8000b60 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d902      	bls.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	74fb      	strb	r3, [r7, #19]
        break;
 8001f4a:	e005      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f4c:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ef      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d15c      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01f      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d019      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe fdd1 	bl	8000b60 <HAL_GetTick>
 8001fbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	e00b      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fdcd 	bl	8000b60 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d902      	bls.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fd8:	e006      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ec      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffe:	4904      	ldr	r1, [pc, #16]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002006:	e009      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
 800200c:	e006      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201c:	7c7b      	ldrb	r3, [r7, #17]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a9d      	ldr	r2, [pc, #628]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203a:	4b98      	ldr	r3, [pc, #608]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f023 0203 	bic.w	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	4994      	ldr	r1, [pc, #592]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800205c:	4b8f      	ldr	r3, [pc, #572]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f023 020c 	bic.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	498c      	ldr	r1, [pc, #560]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800207e:	4b87      	ldr	r3, [pc, #540]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4983      	ldr	r1, [pc, #524]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020a0:	4b7e      	ldr	r3, [pc, #504]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	497b      	ldr	r1, [pc, #492]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d0:	4972      	ldr	r1, [pc, #456]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e4:	4b6d      	ldr	r3, [pc, #436]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	496a      	ldr	r1, [pc, #424]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	4961      	ldr	r1, [pc, #388]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002128:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	4959      	ldr	r1, [pc, #356]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214a:	4b54      	ldr	r3, [pc, #336]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002158:	4950      	ldr	r1, [pc, #320]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	4948      	ldr	r1, [pc, #288]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	493f      	ldr	r1, [pc, #252]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d028      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021be:	4937      	ldr	r1, [pc, #220]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ce:	d106      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021da:	60d3      	str	r3, [r2, #12]
 80021dc:	e011      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e6:	d10c      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f8c8 	bl	8002384 <RCCEx_PLLSAI1_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d028      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	491f      	ldr	r1, [pc, #124]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222c:	d106      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002238:	60d3      	str	r3, [r2, #12]
 800223a:	e011      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002244:	d10c      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	2101      	movs	r1, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f899 	bl	8002384 <RCCEx_PLLSAI1_Config>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02b      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800228a:	d109      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002296:	60d3      	str	r3, [r2, #12]
 8002298:	e014      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f867 	bl	8002384 <RCCEx_PLLSAI1_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02f      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022de:	4928      	ldr	r1, [pc, #160]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ee:	d10d      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f844 	bl	8002384 <RCCEx_PLLSAI1_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d014      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	74bb      	strb	r3, [r7, #18]
 800230a:	e011      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002314:	d10c      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3320      	adds	r3, #32
 800231a:	2102      	movs	r1, #2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f925 	bl	800256c <RCCEx_PLLSAI2_Config>
 8002322:	4603      	mov	r3, r0
 8002324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234a:	490d      	ldr	r1, [pc, #52]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002376:	7cbb      	ldrb	r3, [r7, #18]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000

08002384 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002392:	4b75      	ldr	r3, [pc, #468]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d018      	beq.n	80023d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0203 	and.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d10d      	bne.n	80023ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
       ||
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023b6:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
       ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d047      	beq.n	800245a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	e044      	b.n	800245a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d018      	beq.n	800240a <RCCEx_PLLSAI1_Config+0x86>
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d825      	bhi.n	8002428 <RCCEx_PLLSAI1_Config+0xa4>
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d002      	beq.n	80023e6 <RCCEx_PLLSAI1_Config+0x62>
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d009      	beq.n	80023f8 <RCCEx_PLLSAI1_Config+0x74>
 80023e4:	e020      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023e6:	4b60      	ldr	r3, [pc, #384]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11d      	bne.n	800242e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f6:	e01a      	b.n	800242e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023f8:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d116      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e013      	b.n	8002432 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002426:	e006      	b.n	8002436 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e004      	b.n	8002438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002436:	bf00      	nop
    }

    if(status == HAL_OK)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	430b      	orrs	r3, r1
 8002454:	4944      	ldr	r1, [pc, #272]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d17d      	bne.n	800255c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a40      	ldr	r2, [pc, #256]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800246a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe fb78 	bl	8000b60 <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002472:	e009      	b.n	8002488 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002474:	f7fe fb74 	bl	8000b60 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	73fb      	strb	r3, [r7, #15]
        break;
 8002486:	e005      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ef      	bne.n	8002474 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d160      	bne.n	800255c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	0211      	lsls	r1, r2, #8
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	0912      	lsrs	r2, r2, #4
 80024b8:	0452      	lsls	r2, r2, #17
 80024ba:	430a      	orrs	r2, r1
 80024bc:	492a      	ldr	r1, [pc, #168]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	610b      	str	r3, [r1, #16]
 80024c2:	e027      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d112      	bne.n	80024f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6892      	ldr	r2, [r2, #8]
 80024da:	0211      	lsls	r1, r2, #8
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6912      	ldr	r2, [r2, #16]
 80024e0:	0852      	lsrs	r2, r2, #1
 80024e2:	3a01      	subs	r2, #1
 80024e4:	0552      	lsls	r2, r2, #21
 80024e6:	430a      	orrs	r2, r1
 80024e8:	491f      	ldr	r1, [pc, #124]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	610b      	str	r3, [r1, #16]
 80024ee:	e011      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6892      	ldr	r2, [r2, #8]
 8002500:	0211      	lsls	r1, r2, #8
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6952      	ldr	r2, [r2, #20]
 8002506:	0852      	lsrs	r2, r2, #1
 8002508:	3a01      	subs	r2, #1
 800250a:	0652      	lsls	r2, r2, #25
 800250c:	430a      	orrs	r2, r1
 800250e:	4916      	ldr	r1, [pc, #88]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800251e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fb1e 	bl	8000b60 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002526:	e009      	b.n	800253c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002528:	f7fe fb1a 	bl	8000b60 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	73fb      	strb	r3, [r7, #15]
          break;
 800253a:	e005      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ef      	beq.n	8002528 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4904      	ldr	r1, [pc, #16]	; (8002568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800257a:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d018      	beq.n	80025b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002586:	4b67      	ldr	r3, [pc, #412]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0203 	and.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d10d      	bne.n	80025b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
       ||
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
       ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d047      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	e044      	b.n	8002642 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d018      	beq.n	80025f2 <RCCEx_PLLSAI2_Config+0x86>
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d825      	bhi.n	8002610 <RCCEx_PLLSAI2_Config+0xa4>
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d002      	beq.n	80025ce <RCCEx_PLLSAI2_Config+0x62>
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d009      	beq.n	80025e0 <RCCEx_PLLSAI2_Config+0x74>
 80025cc:	e020      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ce:	4b55      	ldr	r3, [pc, #340]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025de:	e01a      	b.n	8002616 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f0:	e013      	b.n	800261a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025f2:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025fe:	4b49      	ldr	r3, [pc, #292]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800260e:	e006      	b.n	800261e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      break;
 8002614:	e004      	b.n	8002620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002616:	bf00      	nop
 8002618:	e002      	b.n	8002620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800261e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10d      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002626:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	430b      	orrs	r3, r1
 800263c:	4939      	ldr	r1, [pc, #228]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d167      	bne.n	8002718 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a35      	ldr	r2, [pc, #212]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002654:	f7fe fa84 	bl	8000b60 <HAL_GetTick>
 8002658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800265a:	e009      	b.n	8002670 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800265c:	f7fe fa80 	bl	8000b60 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d902      	bls.n	8002670 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	73fb      	strb	r3, [r7, #15]
        break;
 800266e:	e005      	b.n	800267c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ef      	bne.n	800265c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d14a      	bne.n	8002718 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	0211      	lsls	r1, r2, #8
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	0912      	lsrs	r2, r2, #4
 80026a0:	0452      	lsls	r2, r2, #17
 80026a2:	430a      	orrs	r2, r1
 80026a4:	491f      	ldr	r1, [pc, #124]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	614b      	str	r3, [r1, #20]
 80026aa:	e011      	b.n	80026d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	0211      	lsls	r1, r2, #8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6912      	ldr	r2, [r2, #16]
 80026c2:	0852      	lsrs	r2, r2, #1
 80026c4:	3a01      	subs	r2, #1
 80026c6:	0652      	lsls	r2, r2, #25
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4916      	ldr	r1, [pc, #88]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe fa40 	bl	8000b60 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026e4:	f7fe fa3c 	bl	8000b60 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
          break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4904      	ldr	r1, [pc, #16]	; (8002724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e040      	b.n	80027bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f89a 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8c0 	bl	80028ec <UART_SetConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fb3e 	bl	8002e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fbc5 	bl	8002f44 <UART_CheckIdleState>
 80027ba:	4603      	mov	r3, r0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d8:	2b20      	cmp	r3, #32
 80027da:	f040 8082 	bne.w	80028e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_UART_Transmit+0x26>
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07a      	b.n	80028e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Transmit+0x38>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e073      	b.n	80028e4 <HAL_UART_Transmit+0x120>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2221      	movs	r2, #33	; 0x21
 8002810:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002812:	f7fe f9a5 	bl	8000b60 <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	d108      	bne.n	8002844 <HAL_UART_Transmit+0x80>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d104      	bne.n	8002844 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e003      	b.n	800284c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002854:	e02d      	b.n	80028b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fbb8 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e039      	b.n	80028e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10b      	bne.n	800288e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002882:	b292      	uxth	r2, r2
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	3302      	adds	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e008      	b.n	80028a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b292      	uxth	r2, r2
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3301      	adds	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1cb      	bne.n	8002856 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fb84 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e005      	b.n	80028e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
  }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ec:	b5b0      	push	{r4, r5, r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4313      	orrs	r3, r2
 800290e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4bad      	ldr	r3, [pc, #692]	; (8002bcc <UART_SetConfig+0x2e0>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	69f9      	ldr	r1, [r7, #28]
 8002920:	430b      	orrs	r3, r1
 8002922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4aa2      	ldr	r2, [pc, #648]	; (8002bd0 <UART_SetConfig+0x2e4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d004      	beq.n	8002954 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	4313      	orrs	r3, r2
 8002952:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a99      	ldr	r2, [pc, #612]	; (8002bd4 <UART_SetConfig+0x2e8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d121      	bne.n	80029b6 <UART_SetConfig+0xca>
 8002972:	4b99      	ldr	r3, [pc, #612]	; (8002bd8 <UART_SetConfig+0x2ec>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b03      	cmp	r3, #3
 800297e:	d817      	bhi.n	80029b0 <UART_SetConfig+0xc4>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <UART_SetConfig+0x9c>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002999 	.word	0x08002999
 800298c:	080029a5 	.word	0x080029a5
 8002990:	0800299f 	.word	0x0800299f
 8002994:	080029ab 	.word	0x080029ab
 8002998:	2301      	movs	r3, #1
 800299a:	76fb      	strb	r3, [r7, #27]
 800299c:	e0e7      	b.n	8002b6e <UART_SetConfig+0x282>
 800299e:	2302      	movs	r3, #2
 80029a0:	76fb      	strb	r3, [r7, #27]
 80029a2:	e0e4      	b.n	8002b6e <UART_SetConfig+0x282>
 80029a4:	2304      	movs	r3, #4
 80029a6:	76fb      	strb	r3, [r7, #27]
 80029a8:	e0e1      	b.n	8002b6e <UART_SetConfig+0x282>
 80029aa:	2308      	movs	r3, #8
 80029ac:	76fb      	strb	r3, [r7, #27]
 80029ae:	e0de      	b.n	8002b6e <UART_SetConfig+0x282>
 80029b0:	2310      	movs	r3, #16
 80029b2:	76fb      	strb	r3, [r7, #27]
 80029b4:	e0db      	b.n	8002b6e <UART_SetConfig+0x282>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a88      	ldr	r2, [pc, #544]	; (8002bdc <UART_SetConfig+0x2f0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d132      	bne.n	8002a26 <UART_SetConfig+0x13a>
 80029c0:	4b85      	ldr	r3, [pc, #532]	; (8002bd8 <UART_SetConfig+0x2ec>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d828      	bhi.n	8002a20 <UART_SetConfig+0x134>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <UART_SetConfig+0xe8>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002a21 	.word	0x08002a21
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a21 	.word	0x08002a21
 80029e4:	08002a15 	.word	0x08002a15
 80029e8:	08002a21 	.word	0x08002a21
 80029ec:	08002a21 	.word	0x08002a21
 80029f0:	08002a21 	.word	0x08002a21
 80029f4:	08002a0f 	.word	0x08002a0f
 80029f8:	08002a21 	.word	0x08002a21
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002a21 	.word	0x08002a21
 8002a04:	08002a1b 	.word	0x08002a1b
 8002a08:	2300      	movs	r3, #0
 8002a0a:	76fb      	strb	r3, [r7, #27]
 8002a0c:	e0af      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	76fb      	strb	r3, [r7, #27]
 8002a12:	e0ac      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a14:	2304      	movs	r3, #4
 8002a16:	76fb      	strb	r3, [r7, #27]
 8002a18:	e0a9      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	76fb      	strb	r3, [r7, #27]
 8002a1e:	e0a6      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a20:	2310      	movs	r3, #16
 8002a22:	76fb      	strb	r3, [r7, #27]
 8002a24:	e0a3      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <UART_SetConfig+0x2f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d120      	bne.n	8002a72 <UART_SetConfig+0x186>
 8002a30:	4b69      	ldr	r3, [pc, #420]	; (8002bd8 <UART_SetConfig+0x2ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a3a:	2b30      	cmp	r3, #48	; 0x30
 8002a3c:	d013      	beq.n	8002a66 <UART_SetConfig+0x17a>
 8002a3e:	2b30      	cmp	r3, #48	; 0x30
 8002a40:	d814      	bhi.n	8002a6c <UART_SetConfig+0x180>
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d009      	beq.n	8002a5a <UART_SetConfig+0x16e>
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d810      	bhi.n	8002a6c <UART_SetConfig+0x180>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <UART_SetConfig+0x168>
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d006      	beq.n	8002a60 <UART_SetConfig+0x174>
 8002a52:	e00b      	b.n	8002a6c <UART_SetConfig+0x180>
 8002a54:	2300      	movs	r3, #0
 8002a56:	76fb      	strb	r3, [r7, #27]
 8002a58:	e089      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	76fb      	strb	r3, [r7, #27]
 8002a5e:	e086      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a60:	2304      	movs	r3, #4
 8002a62:	76fb      	strb	r3, [r7, #27]
 8002a64:	e083      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a66:	2308      	movs	r3, #8
 8002a68:	76fb      	strb	r3, [r7, #27]
 8002a6a:	e080      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	76fb      	strb	r3, [r7, #27]
 8002a70:	e07d      	b.n	8002b6e <UART_SetConfig+0x282>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <UART_SetConfig+0x2f8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d120      	bne.n	8002abe <UART_SetConfig+0x1d2>
 8002a7c:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <UART_SetConfig+0x2ec>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a86:	2bc0      	cmp	r3, #192	; 0xc0
 8002a88:	d013      	beq.n	8002ab2 <UART_SetConfig+0x1c6>
 8002a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a8c:	d814      	bhi.n	8002ab8 <UART_SetConfig+0x1cc>
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d009      	beq.n	8002aa6 <UART_SetConfig+0x1ba>
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d810      	bhi.n	8002ab8 <UART_SetConfig+0x1cc>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d006      	beq.n	8002aac <UART_SetConfig+0x1c0>
 8002a9e:	e00b      	b.n	8002ab8 <UART_SetConfig+0x1cc>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	76fb      	strb	r3, [r7, #27]
 8002aa4:	e063      	b.n	8002b6e <UART_SetConfig+0x282>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	76fb      	strb	r3, [r7, #27]
 8002aaa:	e060      	b.n	8002b6e <UART_SetConfig+0x282>
 8002aac:	2304      	movs	r3, #4
 8002aae:	76fb      	strb	r3, [r7, #27]
 8002ab0:	e05d      	b.n	8002b6e <UART_SetConfig+0x282>
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	76fb      	strb	r3, [r7, #27]
 8002ab6:	e05a      	b.n	8002b6e <UART_SetConfig+0x282>
 8002ab8:	2310      	movs	r3, #16
 8002aba:	76fb      	strb	r3, [r7, #27]
 8002abc:	e057      	b.n	8002b6e <UART_SetConfig+0x282>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a49      	ldr	r2, [pc, #292]	; (8002be8 <UART_SetConfig+0x2fc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d125      	bne.n	8002b14 <UART_SetConfig+0x228>
 8002ac8:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <UART_SetConfig+0x2ec>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ad6:	d017      	beq.n	8002b08 <UART_SetConfig+0x21c>
 8002ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002adc:	d817      	bhi.n	8002b0e <UART_SetConfig+0x222>
 8002ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae2:	d00b      	beq.n	8002afc <UART_SetConfig+0x210>
 8002ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae8:	d811      	bhi.n	8002b0e <UART_SetConfig+0x222>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <UART_SetConfig+0x20a>
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af2:	d006      	beq.n	8002b02 <UART_SetConfig+0x216>
 8002af4:	e00b      	b.n	8002b0e <UART_SetConfig+0x222>
 8002af6:	2300      	movs	r3, #0
 8002af8:	76fb      	strb	r3, [r7, #27]
 8002afa:	e038      	b.n	8002b6e <UART_SetConfig+0x282>
 8002afc:	2302      	movs	r3, #2
 8002afe:	76fb      	strb	r3, [r7, #27]
 8002b00:	e035      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b02:	2304      	movs	r3, #4
 8002b04:	76fb      	strb	r3, [r7, #27]
 8002b06:	e032      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b08:	2308      	movs	r3, #8
 8002b0a:	76fb      	strb	r3, [r7, #27]
 8002b0c:	e02f      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b0e:	2310      	movs	r3, #16
 8002b10:	76fb      	strb	r3, [r7, #27]
 8002b12:	e02c      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2d      	ldr	r2, [pc, #180]	; (8002bd0 <UART_SetConfig+0x2e4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d125      	bne.n	8002b6a <UART_SetConfig+0x27e>
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <UART_SetConfig+0x2ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b2c:	d017      	beq.n	8002b5e <UART_SetConfig+0x272>
 8002b2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b32:	d817      	bhi.n	8002b64 <UART_SetConfig+0x278>
 8002b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b38:	d00b      	beq.n	8002b52 <UART_SetConfig+0x266>
 8002b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b3e:	d811      	bhi.n	8002b64 <UART_SetConfig+0x278>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <UART_SetConfig+0x260>
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	d006      	beq.n	8002b58 <UART_SetConfig+0x26c>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x278>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	76fb      	strb	r3, [r7, #27]
 8002b50:	e00d      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b52:	2302      	movs	r3, #2
 8002b54:	76fb      	strb	r3, [r7, #27]
 8002b56:	e00a      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	76fb      	strb	r3, [r7, #27]
 8002b5c:	e007      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	76fb      	strb	r3, [r7, #27]
 8002b62:	e004      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b64:	2310      	movs	r3, #16
 8002b66:	76fb      	strb	r3, [r7, #27]
 8002b68:	e001      	b.n	8002b6e <UART_SetConfig+0x282>
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <UART_SetConfig+0x2e4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	f040 8087 	bne.w	8002c88 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b7a:	7efb      	ldrb	r3, [r7, #27]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d837      	bhi.n	8002bf0 <UART_SetConfig+0x304>
 8002b80:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <UART_SetConfig+0x29c>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bad 	.word	0x08002bad
 8002b8c:	08002bf1 	.word	0x08002bf1
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bf1 	.word	0x08002bf1
 8002b98:	08002bbb 	.word	0x08002bbb
 8002b9c:	08002bf1 	.word	0x08002bf1
 8002ba0:	08002bf1 	.word	0x08002bf1
 8002ba4:	08002bf1 	.word	0x08002bf1
 8002ba8:	08002bc3 	.word	0x08002bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bac:	f7ff f874 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	6178      	str	r0, [r7, #20]
        break;
 8002bb2:	e022      	b.n	8002bfa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <UART_SetConfig+0x300>)
 8002bb6:	617b      	str	r3, [r7, #20]
        break;
 8002bb8:	e01f      	b.n	8002bfa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bba:	f7fe ffd5 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8002bbe:	6178      	str	r0, [r7, #20]
        break;
 8002bc0:	e01b      	b.n	8002bfa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc6:	617b      	str	r3, [r7, #20]
        break;
 8002bc8:	e017      	b.n	8002bfa <UART_SetConfig+0x30e>
 8002bca:	bf00      	nop
 8002bcc:	efff69f3 	.word	0xefff69f3
 8002bd0:	40008000 	.word	0x40008000
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40004400 	.word	0x40004400
 8002be0:	40004800 	.word	0x40004800
 8002be4:	40004c00 	.word	0x40004c00
 8002be8:	40005000 	.word	0x40005000
 8002bec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	76bb      	strb	r3, [r7, #26]
        break;
 8002bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80f1 	beq.w	8002de4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d305      	bcc.n	8002c1e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d902      	bls.n	8002c24 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	76bb      	strb	r3, [r7, #26]
 8002c22:	e0df      	b.n	8002de4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	020b      	lsls	r3, r1, #8
 8002c36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c3a:	0202      	lsls	r2, r0, #8
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6849      	ldr	r1, [r1, #4]
 8002c40:	0849      	lsrs	r1, r1, #1
 8002c42:	4608      	mov	r0, r1
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	1814      	adds	r4, r2, r0
 8002c4a:	eb43 0501 	adc.w	r5, r3, r1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd fb18 	bl	8000290 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c6e:	d308      	bcc.n	8002c82 <UART_SetConfig+0x396>
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c76:	d204      	bcs.n	8002c82 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	e0b0      	b.n	8002de4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	76bb      	strb	r3, [r7, #26]
 8002c86:	e0ad      	b.n	8002de4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c90:	d15c      	bne.n	8002d4c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002c92:	7efb      	ldrb	r3, [r7, #27]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d828      	bhi.n	8002cea <UART_SetConfig+0x3fe>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <UART_SetConfig+0x3b4>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002ccd 	.word	0x08002ccd
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	08002ceb 	.word	0x08002ceb
 8002cb0:	08002cdb 	.word	0x08002cdb
 8002cb4:	08002ceb 	.word	0x08002ceb
 8002cb8:	08002ceb 	.word	0x08002ceb
 8002cbc:	08002ceb 	.word	0x08002ceb
 8002cc0:	08002ce3 	.word	0x08002ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7fe ffe8 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	6178      	str	r0, [r7, #20]
        break;
 8002cca:	e013      	b.n	8002cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7fe fffa 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	6178      	str	r0, [r7, #20]
        break;
 8002cd2:	e00f      	b.n	8002cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd4:	4b49      	ldr	r3, [pc, #292]	; (8002dfc <UART_SetConfig+0x510>)
 8002cd6:	617b      	str	r3, [r7, #20]
        break;
 8002cd8:	e00c      	b.n	8002cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cda:	f7fe ff45 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8002cde:	6178      	str	r0, [r7, #20]
        break;
 8002ce0:	e008      	b.n	8002cf4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce6:	617b      	str	r3, [r7, #20]
        break;
 8002ce8:	e004      	b.n	8002cf4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	76bb      	strb	r3, [r7, #26]
        break;
 8002cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d074      	beq.n	8002de4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005a      	lsls	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d916      	bls.n	8002d46 <UART_SetConfig+0x45a>
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1e:	d212      	bcs.n	8002d46 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	89fa      	ldrh	r2, [r7, #14]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	e04e      	b.n	8002de4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	76bb      	strb	r3, [r7, #26]
 8002d4a:	e04b      	b.n	8002de4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d4c:	7efb      	ldrb	r3, [r7, #27]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d827      	bhi.n	8002da2 <UART_SetConfig+0x4b6>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x46c>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d85 	.word	0x08002d85
 8002d60:	08002d8d 	.word	0x08002d8d
 8002d64:	08002da3 	.word	0x08002da3
 8002d68:	08002d93 	.word	0x08002d93
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002da3 	.word	0x08002da3
 8002d74:	08002da3 	.word	0x08002da3
 8002d78:	08002d9b 	.word	0x08002d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7fe ff8c 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002d80:	6178      	str	r0, [r7, #20]
        break;
 8002d82:	e013      	b.n	8002dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7fe ff9e 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002d88:	6178      	str	r0, [r7, #20]
        break;
 8002d8a:	e00f      	b.n	8002dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <UART_SetConfig+0x510>)
 8002d8e:	617b      	str	r3, [r7, #20]
        break;
 8002d90:	e00c      	b.n	8002dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7fe fee9 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8002d96:	6178      	str	r0, [r7, #20]
        break;
 8002d98:	e008      	b.n	8002dac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	617b      	str	r3, [r7, #20]
        break;
 8002da0:	e004      	b.n	8002dac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	76bb      	strb	r3, [r7, #26]
        break;
 8002daa:	bf00      	nop
    }

    if (pclk != 0U)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	085a      	lsrs	r2, r3, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	441a      	add	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d908      	bls.n	8002de0 <UART_SetConfig+0x4f4>
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d204      	bcs.n	8002de0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e001      	b.n	8002de4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002df0:	7ebb      	ldrb	r3, [r7, #26]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00f42400 	.word	0x00f42400

08002e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01a      	beq.n	8002f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efe:	d10a      	bne.n	8002f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f54:	f7fd fe04 	bl	8000b60 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d10e      	bne.n	8002f86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f82d 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e023      	b.n	8002fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d10e      	bne.n	8002fb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f817 	bl	8002fd6 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e00d      	b.n	8002fce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe6:	e05e      	b.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d05a      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fd fdb6 	bl	8000b60 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <UART_WaitOnFlagUntilTimeout+0x30>
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11b      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003014:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e043      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02c      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305a:	d124      	bne.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003064:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003074:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e00f      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d091      	beq.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <__errno>:
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <__errno+0x8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000020 	.word	0x20000020

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	4d0d      	ldr	r5, [pc, #52]	; (8003114 <__libc_init_array+0x38>)
 80030e0:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	2600      	movs	r6, #0
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	4d0b      	ldr	r5, [pc, #44]	; (800311c <__libc_init_array+0x40>)
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__libc_init_array+0x44>)
 80030f0:	f000 fc4e 	bl	8003990 <_init>
 80030f4:	1b64      	subs	r4, r4, r5
 80030f6:	10a4      	asrs	r4, r4, #2
 80030f8:	2600      	movs	r6, #0
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	f855 3b04 	ldr.w	r3, [r5], #4
 8003104:	4798      	blx	r3
 8003106:	3601      	adds	r6, #1
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	f855 3b04 	ldr.w	r3, [r5], #4
 800310e:	4798      	blx	r3
 8003110:	3601      	adds	r6, #1
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	08003a3c 	.word	0x08003a3c
 8003118:	08003a3c 	.word	0x08003a3c
 800311c:	08003a3c 	.word	0x08003a3c
 8003120:	08003a40 	.word	0x08003a40

08003124 <memset>:
 8003124:	4402      	add	r2, r0
 8003126:	4603      	mov	r3, r0
 8003128:	4293      	cmp	r3, r2
 800312a:	d100      	bne.n	800312e <memset+0xa>
 800312c:	4770      	bx	lr
 800312e:	f803 1b01 	strb.w	r1, [r3], #1
 8003132:	e7f9      	b.n	8003128 <memset+0x4>

08003134 <siprintf>:
 8003134:	b40e      	push	{r1, r2, r3}
 8003136:	b500      	push	{lr}
 8003138:	b09c      	sub	sp, #112	; 0x70
 800313a:	ab1d      	add	r3, sp, #116	; 0x74
 800313c:	9002      	str	r0, [sp, #8]
 800313e:	9006      	str	r0, [sp, #24]
 8003140:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003144:	4809      	ldr	r0, [pc, #36]	; (800316c <siprintf+0x38>)
 8003146:	9107      	str	r1, [sp, #28]
 8003148:	9104      	str	r1, [sp, #16]
 800314a:	4909      	ldr	r1, [pc, #36]	; (8003170 <siprintf+0x3c>)
 800314c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003150:	9105      	str	r1, [sp, #20]
 8003152:	6800      	ldr	r0, [r0, #0]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	a902      	add	r1, sp, #8
 8003158:	f000 f868 	bl	800322c <_svfiprintf_r>
 800315c:	9b02      	ldr	r3, [sp, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	b01c      	add	sp, #112	; 0x70
 8003164:	f85d eb04 	ldr.w	lr, [sp], #4
 8003168:	b003      	add	sp, #12
 800316a:	4770      	bx	lr
 800316c:	20000020 	.word	0x20000020
 8003170:	ffff0208 	.word	0xffff0208

08003174 <__ssputs_r>:
 8003174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003178:	688e      	ldr	r6, [r1, #8]
 800317a:	429e      	cmp	r6, r3
 800317c:	4682      	mov	sl, r0
 800317e:	460c      	mov	r4, r1
 8003180:	4690      	mov	r8, r2
 8003182:	461f      	mov	r7, r3
 8003184:	d838      	bhi.n	80031f8 <__ssputs_r+0x84>
 8003186:	898a      	ldrh	r2, [r1, #12]
 8003188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800318c:	d032      	beq.n	80031f4 <__ssputs_r+0x80>
 800318e:	6825      	ldr	r5, [r4, #0]
 8003190:	6909      	ldr	r1, [r1, #16]
 8003192:	eba5 0901 	sub.w	r9, r5, r1
 8003196:	6965      	ldr	r5, [r4, #20]
 8003198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800319c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031a0:	3301      	adds	r3, #1
 80031a2:	444b      	add	r3, r9
 80031a4:	106d      	asrs	r5, r5, #1
 80031a6:	429d      	cmp	r5, r3
 80031a8:	bf38      	it	cc
 80031aa:	461d      	movcc	r5, r3
 80031ac:	0553      	lsls	r3, r2, #21
 80031ae:	d531      	bpl.n	8003214 <__ssputs_r+0xa0>
 80031b0:	4629      	mov	r1, r5
 80031b2:	f000 fb47 	bl	8003844 <_malloc_r>
 80031b6:	4606      	mov	r6, r0
 80031b8:	b950      	cbnz	r0, 80031d0 <__ssputs_r+0x5c>
 80031ba:	230c      	movs	r3, #12
 80031bc:	f8ca 3000 	str.w	r3, [sl]
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d0:	6921      	ldr	r1, [r4, #16]
 80031d2:	464a      	mov	r2, r9
 80031d4:	f000 fabe 	bl	8003754 <memcpy>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e2:	81a3      	strh	r3, [r4, #12]
 80031e4:	6126      	str	r6, [r4, #16]
 80031e6:	6165      	str	r5, [r4, #20]
 80031e8:	444e      	add	r6, r9
 80031ea:	eba5 0509 	sub.w	r5, r5, r9
 80031ee:	6026      	str	r6, [r4, #0]
 80031f0:	60a5      	str	r5, [r4, #8]
 80031f2:	463e      	mov	r6, r7
 80031f4:	42be      	cmp	r6, r7
 80031f6:	d900      	bls.n	80031fa <__ssputs_r+0x86>
 80031f8:	463e      	mov	r6, r7
 80031fa:	4632      	mov	r2, r6
 80031fc:	6820      	ldr	r0, [r4, #0]
 80031fe:	4641      	mov	r1, r8
 8003200:	f000 fab6 	bl	8003770 <memmove>
 8003204:	68a3      	ldr	r3, [r4, #8]
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	1b9b      	subs	r3, r3, r6
 800320a:	4432      	add	r2, r6
 800320c:	60a3      	str	r3, [r4, #8]
 800320e:	6022      	str	r2, [r4, #0]
 8003210:	2000      	movs	r0, #0
 8003212:	e7db      	b.n	80031cc <__ssputs_r+0x58>
 8003214:	462a      	mov	r2, r5
 8003216:	f000 fb6f 	bl	80038f8 <_realloc_r>
 800321a:	4606      	mov	r6, r0
 800321c:	2800      	cmp	r0, #0
 800321e:	d1e1      	bne.n	80031e4 <__ssputs_r+0x70>
 8003220:	6921      	ldr	r1, [r4, #16]
 8003222:	4650      	mov	r0, sl
 8003224:	f000 fabe 	bl	80037a4 <_free_r>
 8003228:	e7c7      	b.n	80031ba <__ssputs_r+0x46>
	...

0800322c <_svfiprintf_r>:
 800322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003230:	4698      	mov	r8, r3
 8003232:	898b      	ldrh	r3, [r1, #12]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	b09d      	sub	sp, #116	; 0x74
 8003238:	4607      	mov	r7, r0
 800323a:	460d      	mov	r5, r1
 800323c:	4614      	mov	r4, r2
 800323e:	d50e      	bpl.n	800325e <_svfiprintf_r+0x32>
 8003240:	690b      	ldr	r3, [r1, #16]
 8003242:	b963      	cbnz	r3, 800325e <_svfiprintf_r+0x32>
 8003244:	2140      	movs	r1, #64	; 0x40
 8003246:	f000 fafd 	bl	8003844 <_malloc_r>
 800324a:	6028      	str	r0, [r5, #0]
 800324c:	6128      	str	r0, [r5, #16]
 800324e:	b920      	cbnz	r0, 800325a <_svfiprintf_r+0x2e>
 8003250:	230c      	movs	r3, #12
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	e0d1      	b.n	80033fe <_svfiprintf_r+0x1d2>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	616b      	str	r3, [r5, #20]
 800325e:	2300      	movs	r3, #0
 8003260:	9309      	str	r3, [sp, #36]	; 0x24
 8003262:	2320      	movs	r3, #32
 8003264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003268:	f8cd 800c 	str.w	r8, [sp, #12]
 800326c:	2330      	movs	r3, #48	; 0x30
 800326e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003418 <_svfiprintf_r+0x1ec>
 8003272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003276:	f04f 0901 	mov.w	r9, #1
 800327a:	4623      	mov	r3, r4
 800327c:	469a      	mov	sl, r3
 800327e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003282:	b10a      	cbz	r2, 8003288 <_svfiprintf_r+0x5c>
 8003284:	2a25      	cmp	r2, #37	; 0x25
 8003286:	d1f9      	bne.n	800327c <_svfiprintf_r+0x50>
 8003288:	ebba 0b04 	subs.w	fp, sl, r4
 800328c:	d00b      	beq.n	80032a6 <_svfiprintf_r+0x7a>
 800328e:	465b      	mov	r3, fp
 8003290:	4622      	mov	r2, r4
 8003292:	4629      	mov	r1, r5
 8003294:	4638      	mov	r0, r7
 8003296:	f7ff ff6d 	bl	8003174 <__ssputs_r>
 800329a:	3001      	adds	r0, #1
 800329c:	f000 80aa 	beq.w	80033f4 <_svfiprintf_r+0x1c8>
 80032a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032a2:	445a      	add	r2, fp
 80032a4:	9209      	str	r2, [sp, #36]	; 0x24
 80032a6:	f89a 3000 	ldrb.w	r3, [sl]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80a2 	beq.w	80033f4 <_svfiprintf_r+0x1c8>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ba:	f10a 0a01 	add.w	sl, sl, #1
 80032be:	9304      	str	r3, [sp, #16]
 80032c0:	9307      	str	r3, [sp, #28]
 80032c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032c6:	931a      	str	r3, [sp, #104]	; 0x68
 80032c8:	4654      	mov	r4, sl
 80032ca:	2205      	movs	r2, #5
 80032cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d0:	4851      	ldr	r0, [pc, #324]	; (8003418 <_svfiprintf_r+0x1ec>)
 80032d2:	f7fc ff8d 	bl	80001f0 <memchr>
 80032d6:	9a04      	ldr	r2, [sp, #16]
 80032d8:	b9d8      	cbnz	r0, 8003312 <_svfiprintf_r+0xe6>
 80032da:	06d0      	lsls	r0, r2, #27
 80032dc:	bf44      	itt	mi
 80032de:	2320      	movmi	r3, #32
 80032e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032e4:	0711      	lsls	r1, r2, #28
 80032e6:	bf44      	itt	mi
 80032e8:	232b      	movmi	r3, #43	; 0x2b
 80032ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ee:	f89a 3000 	ldrb.w	r3, [sl]
 80032f2:	2b2a      	cmp	r3, #42	; 0x2a
 80032f4:	d015      	beq.n	8003322 <_svfiprintf_r+0xf6>
 80032f6:	9a07      	ldr	r2, [sp, #28]
 80032f8:	4654      	mov	r4, sl
 80032fa:	2000      	movs	r0, #0
 80032fc:	f04f 0c0a 	mov.w	ip, #10
 8003300:	4621      	mov	r1, r4
 8003302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003306:	3b30      	subs	r3, #48	; 0x30
 8003308:	2b09      	cmp	r3, #9
 800330a:	d94e      	bls.n	80033aa <_svfiprintf_r+0x17e>
 800330c:	b1b0      	cbz	r0, 800333c <_svfiprintf_r+0x110>
 800330e:	9207      	str	r2, [sp, #28]
 8003310:	e014      	b.n	800333c <_svfiprintf_r+0x110>
 8003312:	eba0 0308 	sub.w	r3, r0, r8
 8003316:	fa09 f303 	lsl.w	r3, r9, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	9304      	str	r3, [sp, #16]
 800331e:	46a2      	mov	sl, r4
 8003320:	e7d2      	b.n	80032c8 <_svfiprintf_r+0x9c>
 8003322:	9b03      	ldr	r3, [sp, #12]
 8003324:	1d19      	adds	r1, r3, #4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	9103      	str	r1, [sp, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	bfbb      	ittet	lt
 800332e:	425b      	neglt	r3, r3
 8003330:	f042 0202 	orrlt.w	r2, r2, #2
 8003334:	9307      	strge	r3, [sp, #28]
 8003336:	9307      	strlt	r3, [sp, #28]
 8003338:	bfb8      	it	lt
 800333a:	9204      	strlt	r2, [sp, #16]
 800333c:	7823      	ldrb	r3, [r4, #0]
 800333e:	2b2e      	cmp	r3, #46	; 0x2e
 8003340:	d10c      	bne.n	800335c <_svfiprintf_r+0x130>
 8003342:	7863      	ldrb	r3, [r4, #1]
 8003344:	2b2a      	cmp	r3, #42	; 0x2a
 8003346:	d135      	bne.n	80033b4 <_svfiprintf_r+0x188>
 8003348:	9b03      	ldr	r3, [sp, #12]
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	9203      	str	r2, [sp, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	bfb8      	it	lt
 8003354:	f04f 33ff 	movlt.w	r3, #4294967295
 8003358:	3402      	adds	r4, #2
 800335a:	9305      	str	r3, [sp, #20]
 800335c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003428 <_svfiprintf_r+0x1fc>
 8003360:	7821      	ldrb	r1, [r4, #0]
 8003362:	2203      	movs	r2, #3
 8003364:	4650      	mov	r0, sl
 8003366:	f7fc ff43 	bl	80001f0 <memchr>
 800336a:	b140      	cbz	r0, 800337e <_svfiprintf_r+0x152>
 800336c:	2340      	movs	r3, #64	; 0x40
 800336e:	eba0 000a 	sub.w	r0, r0, sl
 8003372:	fa03 f000 	lsl.w	r0, r3, r0
 8003376:	9b04      	ldr	r3, [sp, #16]
 8003378:	4303      	orrs	r3, r0
 800337a:	3401      	adds	r4, #1
 800337c:	9304      	str	r3, [sp, #16]
 800337e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003382:	4826      	ldr	r0, [pc, #152]	; (800341c <_svfiprintf_r+0x1f0>)
 8003384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003388:	2206      	movs	r2, #6
 800338a:	f7fc ff31 	bl	80001f0 <memchr>
 800338e:	2800      	cmp	r0, #0
 8003390:	d038      	beq.n	8003404 <_svfiprintf_r+0x1d8>
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <_svfiprintf_r+0x1f4>)
 8003394:	bb1b      	cbnz	r3, 80033de <_svfiprintf_r+0x1b2>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	3307      	adds	r3, #7
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	3308      	adds	r3, #8
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a4:	4433      	add	r3, r6
 80033a6:	9309      	str	r3, [sp, #36]	; 0x24
 80033a8:	e767      	b.n	800327a <_svfiprintf_r+0x4e>
 80033aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80033ae:	460c      	mov	r4, r1
 80033b0:	2001      	movs	r0, #1
 80033b2:	e7a5      	b.n	8003300 <_svfiprintf_r+0xd4>
 80033b4:	2300      	movs	r3, #0
 80033b6:	3401      	adds	r4, #1
 80033b8:	9305      	str	r3, [sp, #20]
 80033ba:	4619      	mov	r1, r3
 80033bc:	f04f 0c0a 	mov.w	ip, #10
 80033c0:	4620      	mov	r0, r4
 80033c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c6:	3a30      	subs	r2, #48	; 0x30
 80033c8:	2a09      	cmp	r2, #9
 80033ca:	d903      	bls.n	80033d4 <_svfiprintf_r+0x1a8>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0c5      	beq.n	800335c <_svfiprintf_r+0x130>
 80033d0:	9105      	str	r1, [sp, #20]
 80033d2:	e7c3      	b.n	800335c <_svfiprintf_r+0x130>
 80033d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d8:	4604      	mov	r4, r0
 80033da:	2301      	movs	r3, #1
 80033dc:	e7f0      	b.n	80033c0 <_svfiprintf_r+0x194>
 80033de:	ab03      	add	r3, sp, #12
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	462a      	mov	r2, r5
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <_svfiprintf_r+0x1f8>)
 80033e6:	a904      	add	r1, sp, #16
 80033e8:	4638      	mov	r0, r7
 80033ea:	f3af 8000 	nop.w
 80033ee:	1c42      	adds	r2, r0, #1
 80033f0:	4606      	mov	r6, r0
 80033f2:	d1d6      	bne.n	80033a2 <_svfiprintf_r+0x176>
 80033f4:	89ab      	ldrh	r3, [r5, #12]
 80033f6:	065b      	lsls	r3, r3, #25
 80033f8:	f53f af2c 	bmi.w	8003254 <_svfiprintf_r+0x28>
 80033fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033fe:	b01d      	add	sp, #116	; 0x74
 8003400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003404:	ab03      	add	r3, sp, #12
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	462a      	mov	r2, r5
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <_svfiprintf_r+0x1f8>)
 800340c:	a904      	add	r1, sp, #16
 800340e:	4638      	mov	r0, r7
 8003410:	f000 f87a 	bl	8003508 <_printf_i>
 8003414:	e7eb      	b.n	80033ee <_svfiprintf_r+0x1c2>
 8003416:	bf00      	nop
 8003418:	08003a00 	.word	0x08003a00
 800341c:	08003a0a 	.word	0x08003a0a
 8003420:	00000000 	.word	0x00000000
 8003424:	08003175 	.word	0x08003175
 8003428:	08003a06 	.word	0x08003a06

0800342c <_printf_common>:
 800342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	4616      	mov	r6, r2
 8003432:	4699      	mov	r9, r3
 8003434:	688a      	ldr	r2, [r1, #8]
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800343c:	4293      	cmp	r3, r2
 800343e:	bfb8      	it	lt
 8003440:	4613      	movlt	r3, r2
 8003442:	6033      	str	r3, [r6, #0]
 8003444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003448:	4607      	mov	r7, r0
 800344a:	460c      	mov	r4, r1
 800344c:	b10a      	cbz	r2, 8003452 <_printf_common+0x26>
 800344e:	3301      	adds	r3, #1
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	0699      	lsls	r1, r3, #26
 8003456:	bf42      	ittt	mi
 8003458:	6833      	ldrmi	r3, [r6, #0]
 800345a:	3302      	addmi	r3, #2
 800345c:	6033      	strmi	r3, [r6, #0]
 800345e:	6825      	ldr	r5, [r4, #0]
 8003460:	f015 0506 	ands.w	r5, r5, #6
 8003464:	d106      	bne.n	8003474 <_printf_common+0x48>
 8003466:	f104 0a19 	add.w	sl, r4, #25
 800346a:	68e3      	ldr	r3, [r4, #12]
 800346c:	6832      	ldr	r2, [r6, #0]
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	42ab      	cmp	r3, r5
 8003472:	dc26      	bgt.n	80034c2 <_printf_common+0x96>
 8003474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003478:	1e13      	subs	r3, r2, #0
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	bf18      	it	ne
 800347e:	2301      	movne	r3, #1
 8003480:	0692      	lsls	r2, r2, #26
 8003482:	d42b      	bmi.n	80034dc <_printf_common+0xb0>
 8003484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003488:	4649      	mov	r1, r9
 800348a:	4638      	mov	r0, r7
 800348c:	47c0      	blx	r8
 800348e:	3001      	adds	r0, #1
 8003490:	d01e      	beq.n	80034d0 <_printf_common+0xa4>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	68e5      	ldr	r5, [r4, #12]
 8003496:	6832      	ldr	r2, [r6, #0]
 8003498:	f003 0306 	and.w	r3, r3, #6
 800349c:	2b04      	cmp	r3, #4
 800349e:	bf08      	it	eq
 80034a0:	1aad      	subeq	r5, r5, r2
 80034a2:	68a3      	ldr	r3, [r4, #8]
 80034a4:	6922      	ldr	r2, [r4, #16]
 80034a6:	bf0c      	ite	eq
 80034a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034ac:	2500      	movne	r5, #0
 80034ae:	4293      	cmp	r3, r2
 80034b0:	bfc4      	itt	gt
 80034b2:	1a9b      	subgt	r3, r3, r2
 80034b4:	18ed      	addgt	r5, r5, r3
 80034b6:	2600      	movs	r6, #0
 80034b8:	341a      	adds	r4, #26
 80034ba:	42b5      	cmp	r5, r6
 80034bc:	d11a      	bne.n	80034f4 <_printf_common+0xc8>
 80034be:	2000      	movs	r0, #0
 80034c0:	e008      	b.n	80034d4 <_printf_common+0xa8>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4652      	mov	r2, sl
 80034c6:	4649      	mov	r1, r9
 80034c8:	4638      	mov	r0, r7
 80034ca:	47c0      	blx	r8
 80034cc:	3001      	adds	r0, #1
 80034ce:	d103      	bne.n	80034d8 <_printf_common+0xac>
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d8:	3501      	adds	r5, #1
 80034da:	e7c6      	b.n	800346a <_printf_common+0x3e>
 80034dc:	18e1      	adds	r1, r4, r3
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	2030      	movs	r0, #48	; 0x30
 80034e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034e6:	4422      	add	r2, r4
 80034e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034f0:	3302      	adds	r3, #2
 80034f2:	e7c7      	b.n	8003484 <_printf_common+0x58>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4622      	mov	r2, r4
 80034f8:	4649      	mov	r1, r9
 80034fa:	4638      	mov	r0, r7
 80034fc:	47c0      	blx	r8
 80034fe:	3001      	adds	r0, #1
 8003500:	d0e6      	beq.n	80034d0 <_printf_common+0xa4>
 8003502:	3601      	adds	r6, #1
 8003504:	e7d9      	b.n	80034ba <_printf_common+0x8e>
	...

08003508 <_printf_i>:
 8003508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800350c:	460c      	mov	r4, r1
 800350e:	4691      	mov	r9, r2
 8003510:	7e27      	ldrb	r7, [r4, #24]
 8003512:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003514:	2f78      	cmp	r7, #120	; 0x78
 8003516:	4680      	mov	r8, r0
 8003518:	469a      	mov	sl, r3
 800351a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800351e:	d807      	bhi.n	8003530 <_printf_i+0x28>
 8003520:	2f62      	cmp	r7, #98	; 0x62
 8003522:	d80a      	bhi.n	800353a <_printf_i+0x32>
 8003524:	2f00      	cmp	r7, #0
 8003526:	f000 80d8 	beq.w	80036da <_printf_i+0x1d2>
 800352a:	2f58      	cmp	r7, #88	; 0x58
 800352c:	f000 80a3 	beq.w	8003676 <_printf_i+0x16e>
 8003530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003538:	e03a      	b.n	80035b0 <_printf_i+0xa8>
 800353a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800353e:	2b15      	cmp	r3, #21
 8003540:	d8f6      	bhi.n	8003530 <_printf_i+0x28>
 8003542:	a001      	add	r0, pc, #4	; (adr r0, 8003548 <_printf_i+0x40>)
 8003544:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003548:	080035a1 	.word	0x080035a1
 800354c:	080035b5 	.word	0x080035b5
 8003550:	08003531 	.word	0x08003531
 8003554:	08003531 	.word	0x08003531
 8003558:	08003531 	.word	0x08003531
 800355c:	08003531 	.word	0x08003531
 8003560:	080035b5 	.word	0x080035b5
 8003564:	08003531 	.word	0x08003531
 8003568:	08003531 	.word	0x08003531
 800356c:	08003531 	.word	0x08003531
 8003570:	08003531 	.word	0x08003531
 8003574:	080036c1 	.word	0x080036c1
 8003578:	080035e5 	.word	0x080035e5
 800357c:	080036a3 	.word	0x080036a3
 8003580:	08003531 	.word	0x08003531
 8003584:	08003531 	.word	0x08003531
 8003588:	080036e3 	.word	0x080036e3
 800358c:	08003531 	.word	0x08003531
 8003590:	080035e5 	.word	0x080035e5
 8003594:	08003531 	.word	0x08003531
 8003598:	08003531 	.word	0x08003531
 800359c:	080036ab 	.word	0x080036ab
 80035a0:	680b      	ldr	r3, [r1, #0]
 80035a2:	1d1a      	adds	r2, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	600a      	str	r2, [r1, #0]
 80035a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0a3      	b.n	80036fc <_printf_i+0x1f4>
 80035b4:	6825      	ldr	r5, [r4, #0]
 80035b6:	6808      	ldr	r0, [r1, #0]
 80035b8:	062e      	lsls	r6, r5, #24
 80035ba:	f100 0304 	add.w	r3, r0, #4
 80035be:	d50a      	bpl.n	80035d6 <_printf_i+0xce>
 80035c0:	6805      	ldr	r5, [r0, #0]
 80035c2:	600b      	str	r3, [r1, #0]
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	da03      	bge.n	80035d0 <_printf_i+0xc8>
 80035c8:	232d      	movs	r3, #45	; 0x2d
 80035ca:	426d      	negs	r5, r5
 80035cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d0:	485e      	ldr	r0, [pc, #376]	; (800374c <_printf_i+0x244>)
 80035d2:	230a      	movs	r3, #10
 80035d4:	e019      	b.n	800360a <_printf_i+0x102>
 80035d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035da:	6805      	ldr	r5, [r0, #0]
 80035dc:	600b      	str	r3, [r1, #0]
 80035de:	bf18      	it	ne
 80035e0:	b22d      	sxthne	r5, r5
 80035e2:	e7ef      	b.n	80035c4 <_printf_i+0xbc>
 80035e4:	680b      	ldr	r3, [r1, #0]
 80035e6:	6825      	ldr	r5, [r4, #0]
 80035e8:	1d18      	adds	r0, r3, #4
 80035ea:	6008      	str	r0, [r1, #0]
 80035ec:	0628      	lsls	r0, r5, #24
 80035ee:	d501      	bpl.n	80035f4 <_printf_i+0xec>
 80035f0:	681d      	ldr	r5, [r3, #0]
 80035f2:	e002      	b.n	80035fa <_printf_i+0xf2>
 80035f4:	0669      	lsls	r1, r5, #25
 80035f6:	d5fb      	bpl.n	80035f0 <_printf_i+0xe8>
 80035f8:	881d      	ldrh	r5, [r3, #0]
 80035fa:	4854      	ldr	r0, [pc, #336]	; (800374c <_printf_i+0x244>)
 80035fc:	2f6f      	cmp	r7, #111	; 0x6f
 80035fe:	bf0c      	ite	eq
 8003600:	2308      	moveq	r3, #8
 8003602:	230a      	movne	r3, #10
 8003604:	2100      	movs	r1, #0
 8003606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800360a:	6866      	ldr	r6, [r4, #4]
 800360c:	60a6      	str	r6, [r4, #8]
 800360e:	2e00      	cmp	r6, #0
 8003610:	bfa2      	ittt	ge
 8003612:	6821      	ldrge	r1, [r4, #0]
 8003614:	f021 0104 	bicge.w	r1, r1, #4
 8003618:	6021      	strge	r1, [r4, #0]
 800361a:	b90d      	cbnz	r5, 8003620 <_printf_i+0x118>
 800361c:	2e00      	cmp	r6, #0
 800361e:	d04d      	beq.n	80036bc <_printf_i+0x1b4>
 8003620:	4616      	mov	r6, r2
 8003622:	fbb5 f1f3 	udiv	r1, r5, r3
 8003626:	fb03 5711 	mls	r7, r3, r1, r5
 800362a:	5dc7      	ldrb	r7, [r0, r7]
 800362c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003630:	462f      	mov	r7, r5
 8003632:	42bb      	cmp	r3, r7
 8003634:	460d      	mov	r5, r1
 8003636:	d9f4      	bls.n	8003622 <_printf_i+0x11a>
 8003638:	2b08      	cmp	r3, #8
 800363a:	d10b      	bne.n	8003654 <_printf_i+0x14c>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	07df      	lsls	r7, r3, #31
 8003640:	d508      	bpl.n	8003654 <_printf_i+0x14c>
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	6861      	ldr	r1, [r4, #4]
 8003646:	4299      	cmp	r1, r3
 8003648:	bfde      	ittt	le
 800364a:	2330      	movle	r3, #48	; 0x30
 800364c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003654:	1b92      	subs	r2, r2, r6
 8003656:	6122      	str	r2, [r4, #16]
 8003658:	f8cd a000 	str.w	sl, [sp]
 800365c:	464b      	mov	r3, r9
 800365e:	aa03      	add	r2, sp, #12
 8003660:	4621      	mov	r1, r4
 8003662:	4640      	mov	r0, r8
 8003664:	f7ff fee2 	bl	800342c <_printf_common>
 8003668:	3001      	adds	r0, #1
 800366a:	d14c      	bne.n	8003706 <_printf_i+0x1fe>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	b004      	add	sp, #16
 8003672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003676:	4835      	ldr	r0, [pc, #212]	; (800374c <_printf_i+0x244>)
 8003678:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	680e      	ldr	r6, [r1, #0]
 8003680:	061f      	lsls	r7, r3, #24
 8003682:	f856 5b04 	ldr.w	r5, [r6], #4
 8003686:	600e      	str	r6, [r1, #0]
 8003688:	d514      	bpl.n	80036b4 <_printf_i+0x1ac>
 800368a:	07d9      	lsls	r1, r3, #31
 800368c:	bf44      	itt	mi
 800368e:	f043 0320 	orrmi.w	r3, r3, #32
 8003692:	6023      	strmi	r3, [r4, #0]
 8003694:	b91d      	cbnz	r5, 800369e <_printf_i+0x196>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	f023 0320 	bic.w	r3, r3, #32
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	2310      	movs	r3, #16
 80036a0:	e7b0      	b.n	8003604 <_printf_i+0xfc>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	f043 0320 	orr.w	r3, r3, #32
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	2378      	movs	r3, #120	; 0x78
 80036ac:	4828      	ldr	r0, [pc, #160]	; (8003750 <_printf_i+0x248>)
 80036ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036b2:	e7e3      	b.n	800367c <_printf_i+0x174>
 80036b4:	065e      	lsls	r6, r3, #25
 80036b6:	bf48      	it	mi
 80036b8:	b2ad      	uxthmi	r5, r5
 80036ba:	e7e6      	b.n	800368a <_printf_i+0x182>
 80036bc:	4616      	mov	r6, r2
 80036be:	e7bb      	b.n	8003638 <_printf_i+0x130>
 80036c0:	680b      	ldr	r3, [r1, #0]
 80036c2:	6826      	ldr	r6, [r4, #0]
 80036c4:	6960      	ldr	r0, [r4, #20]
 80036c6:	1d1d      	adds	r5, r3, #4
 80036c8:	600d      	str	r5, [r1, #0]
 80036ca:	0635      	lsls	r5, r6, #24
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	d501      	bpl.n	80036d4 <_printf_i+0x1cc>
 80036d0:	6018      	str	r0, [r3, #0]
 80036d2:	e002      	b.n	80036da <_printf_i+0x1d2>
 80036d4:	0671      	lsls	r1, r6, #25
 80036d6:	d5fb      	bpl.n	80036d0 <_printf_i+0x1c8>
 80036d8:	8018      	strh	r0, [r3, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	6123      	str	r3, [r4, #16]
 80036de:	4616      	mov	r6, r2
 80036e0:	e7ba      	b.n	8003658 <_printf_i+0x150>
 80036e2:	680b      	ldr	r3, [r1, #0]
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	600a      	str	r2, [r1, #0]
 80036e8:	681e      	ldr	r6, [r3, #0]
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	2100      	movs	r1, #0
 80036ee:	4630      	mov	r0, r6
 80036f0:	f7fc fd7e 	bl	80001f0 <memchr>
 80036f4:	b108      	cbz	r0, 80036fa <_printf_i+0x1f2>
 80036f6:	1b80      	subs	r0, r0, r6
 80036f8:	6060      	str	r0, [r4, #4]
 80036fa:	6863      	ldr	r3, [r4, #4]
 80036fc:	6123      	str	r3, [r4, #16]
 80036fe:	2300      	movs	r3, #0
 8003700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003704:	e7a8      	b.n	8003658 <_printf_i+0x150>
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	4632      	mov	r2, r6
 800370a:	4649      	mov	r1, r9
 800370c:	4640      	mov	r0, r8
 800370e:	47d0      	blx	sl
 8003710:	3001      	adds	r0, #1
 8003712:	d0ab      	beq.n	800366c <_printf_i+0x164>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	079b      	lsls	r3, r3, #30
 8003718:	d413      	bmi.n	8003742 <_printf_i+0x23a>
 800371a:	68e0      	ldr	r0, [r4, #12]
 800371c:	9b03      	ldr	r3, [sp, #12]
 800371e:	4298      	cmp	r0, r3
 8003720:	bfb8      	it	lt
 8003722:	4618      	movlt	r0, r3
 8003724:	e7a4      	b.n	8003670 <_printf_i+0x168>
 8003726:	2301      	movs	r3, #1
 8003728:	4632      	mov	r2, r6
 800372a:	4649      	mov	r1, r9
 800372c:	4640      	mov	r0, r8
 800372e:	47d0      	blx	sl
 8003730:	3001      	adds	r0, #1
 8003732:	d09b      	beq.n	800366c <_printf_i+0x164>
 8003734:	3501      	adds	r5, #1
 8003736:	68e3      	ldr	r3, [r4, #12]
 8003738:	9903      	ldr	r1, [sp, #12]
 800373a:	1a5b      	subs	r3, r3, r1
 800373c:	42ab      	cmp	r3, r5
 800373e:	dcf2      	bgt.n	8003726 <_printf_i+0x21e>
 8003740:	e7eb      	b.n	800371a <_printf_i+0x212>
 8003742:	2500      	movs	r5, #0
 8003744:	f104 0619 	add.w	r6, r4, #25
 8003748:	e7f5      	b.n	8003736 <_printf_i+0x22e>
 800374a:	bf00      	nop
 800374c:	08003a11 	.word	0x08003a11
 8003750:	08003a22 	.word	0x08003a22

08003754 <memcpy>:
 8003754:	440a      	add	r2, r1
 8003756:	4291      	cmp	r1, r2
 8003758:	f100 33ff 	add.w	r3, r0, #4294967295
 800375c:	d100      	bne.n	8003760 <memcpy+0xc>
 800375e:	4770      	bx	lr
 8003760:	b510      	push	{r4, lr}
 8003762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800376a:	4291      	cmp	r1, r2
 800376c:	d1f9      	bne.n	8003762 <memcpy+0xe>
 800376e:	bd10      	pop	{r4, pc}

08003770 <memmove>:
 8003770:	4288      	cmp	r0, r1
 8003772:	b510      	push	{r4, lr}
 8003774:	eb01 0402 	add.w	r4, r1, r2
 8003778:	d902      	bls.n	8003780 <memmove+0x10>
 800377a:	4284      	cmp	r4, r0
 800377c:	4623      	mov	r3, r4
 800377e:	d807      	bhi.n	8003790 <memmove+0x20>
 8003780:	1e43      	subs	r3, r0, #1
 8003782:	42a1      	cmp	r1, r4
 8003784:	d008      	beq.n	8003798 <memmove+0x28>
 8003786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800378a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800378e:	e7f8      	b.n	8003782 <memmove+0x12>
 8003790:	4402      	add	r2, r0
 8003792:	4601      	mov	r1, r0
 8003794:	428a      	cmp	r2, r1
 8003796:	d100      	bne.n	800379a <memmove+0x2a>
 8003798:	bd10      	pop	{r4, pc}
 800379a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800379e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037a2:	e7f7      	b.n	8003794 <memmove+0x24>

080037a4 <_free_r>:
 80037a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d048      	beq.n	800383c <_free_r+0x98>
 80037aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ae:	9001      	str	r0, [sp, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f1a1 0404 	sub.w	r4, r1, #4
 80037b6:	bfb8      	it	lt
 80037b8:	18e4      	addlt	r4, r4, r3
 80037ba:	f000 f8d3 	bl	8003964 <__malloc_lock>
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <_free_r+0x9c>)
 80037c0:	9801      	ldr	r0, [sp, #4]
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	4615      	mov	r5, r2
 80037c6:	b933      	cbnz	r3, 80037d6 <_free_r+0x32>
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6014      	str	r4, [r2, #0]
 80037cc:	b003      	add	sp, #12
 80037ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037d2:	f000 b8cd 	b.w	8003970 <__malloc_unlock>
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	d90b      	bls.n	80037f2 <_free_r+0x4e>
 80037da:	6821      	ldr	r1, [r4, #0]
 80037dc:	1862      	adds	r2, r4, r1
 80037de:	4293      	cmp	r3, r2
 80037e0:	bf04      	itt	eq
 80037e2:	681a      	ldreq	r2, [r3, #0]
 80037e4:	685b      	ldreq	r3, [r3, #4]
 80037e6:	6063      	str	r3, [r4, #4]
 80037e8:	bf04      	itt	eq
 80037ea:	1852      	addeq	r2, r2, r1
 80037ec:	6022      	streq	r2, [r4, #0]
 80037ee:	602c      	str	r4, [r5, #0]
 80037f0:	e7ec      	b.n	80037cc <_free_r+0x28>
 80037f2:	461a      	mov	r2, r3
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b10b      	cbz	r3, 80037fc <_free_r+0x58>
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	d9fa      	bls.n	80037f2 <_free_r+0x4e>
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	1855      	adds	r5, r2, r1
 8003800:	42a5      	cmp	r5, r4
 8003802:	d10b      	bne.n	800381c <_free_r+0x78>
 8003804:	6824      	ldr	r4, [r4, #0]
 8003806:	4421      	add	r1, r4
 8003808:	1854      	adds	r4, r2, r1
 800380a:	42a3      	cmp	r3, r4
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	d1dd      	bne.n	80037cc <_free_r+0x28>
 8003810:	681c      	ldr	r4, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	6053      	str	r3, [r2, #4]
 8003816:	4421      	add	r1, r4
 8003818:	6011      	str	r1, [r2, #0]
 800381a:	e7d7      	b.n	80037cc <_free_r+0x28>
 800381c:	d902      	bls.n	8003824 <_free_r+0x80>
 800381e:	230c      	movs	r3, #12
 8003820:	6003      	str	r3, [r0, #0]
 8003822:	e7d3      	b.n	80037cc <_free_r+0x28>
 8003824:	6825      	ldr	r5, [r4, #0]
 8003826:	1961      	adds	r1, r4, r5
 8003828:	428b      	cmp	r3, r1
 800382a:	bf04      	itt	eq
 800382c:	6819      	ldreq	r1, [r3, #0]
 800382e:	685b      	ldreq	r3, [r3, #4]
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	bf04      	itt	eq
 8003834:	1949      	addeq	r1, r1, r5
 8003836:	6021      	streq	r1, [r4, #0]
 8003838:	6054      	str	r4, [r2, #4]
 800383a:	e7c7      	b.n	80037cc <_free_r+0x28>
 800383c:	b003      	add	sp, #12
 800383e:	bd30      	pop	{r4, r5, pc}
 8003840:	200000a4 	.word	0x200000a4

08003844 <_malloc_r>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	1ccd      	adds	r5, r1, #3
 8003848:	f025 0503 	bic.w	r5, r5, #3
 800384c:	3508      	adds	r5, #8
 800384e:	2d0c      	cmp	r5, #12
 8003850:	bf38      	it	cc
 8003852:	250c      	movcc	r5, #12
 8003854:	2d00      	cmp	r5, #0
 8003856:	4606      	mov	r6, r0
 8003858:	db01      	blt.n	800385e <_malloc_r+0x1a>
 800385a:	42a9      	cmp	r1, r5
 800385c:	d903      	bls.n	8003866 <_malloc_r+0x22>
 800385e:	230c      	movs	r3, #12
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	2000      	movs	r0, #0
 8003864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003866:	f000 f87d 	bl	8003964 <__malloc_lock>
 800386a:	4921      	ldr	r1, [pc, #132]	; (80038f0 <_malloc_r+0xac>)
 800386c:	680a      	ldr	r2, [r1, #0]
 800386e:	4614      	mov	r4, r2
 8003870:	b99c      	cbnz	r4, 800389a <_malloc_r+0x56>
 8003872:	4f20      	ldr	r7, [pc, #128]	; (80038f4 <_malloc_r+0xb0>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b923      	cbnz	r3, 8003882 <_malloc_r+0x3e>
 8003878:	4621      	mov	r1, r4
 800387a:	4630      	mov	r0, r6
 800387c:	f000 f862 	bl	8003944 <_sbrk_r>
 8003880:	6038      	str	r0, [r7, #0]
 8003882:	4629      	mov	r1, r5
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f85d 	bl	8003944 <_sbrk_r>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	d123      	bne.n	80038d6 <_malloc_r+0x92>
 800388e:	230c      	movs	r3, #12
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	4630      	mov	r0, r6
 8003894:	f000 f86c 	bl	8003970 <__malloc_unlock>
 8003898:	e7e3      	b.n	8003862 <_malloc_r+0x1e>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	1b5b      	subs	r3, r3, r5
 800389e:	d417      	bmi.n	80038d0 <_malloc_r+0x8c>
 80038a0:	2b0b      	cmp	r3, #11
 80038a2:	d903      	bls.n	80038ac <_malloc_r+0x68>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	441c      	add	r4, r3
 80038a8:	6025      	str	r5, [r4, #0]
 80038aa:	e004      	b.n	80038b6 <_malloc_r+0x72>
 80038ac:	6863      	ldr	r3, [r4, #4]
 80038ae:	42a2      	cmp	r2, r4
 80038b0:	bf0c      	ite	eq
 80038b2:	600b      	streq	r3, [r1, #0]
 80038b4:	6053      	strne	r3, [r2, #4]
 80038b6:	4630      	mov	r0, r6
 80038b8:	f000 f85a 	bl	8003970 <__malloc_unlock>
 80038bc:	f104 000b 	add.w	r0, r4, #11
 80038c0:	1d23      	adds	r3, r4, #4
 80038c2:	f020 0007 	bic.w	r0, r0, #7
 80038c6:	1ac2      	subs	r2, r0, r3
 80038c8:	d0cc      	beq.n	8003864 <_malloc_r+0x20>
 80038ca:	1a1b      	subs	r3, r3, r0
 80038cc:	50a3      	str	r3, [r4, r2]
 80038ce:	e7c9      	b.n	8003864 <_malloc_r+0x20>
 80038d0:	4622      	mov	r2, r4
 80038d2:	6864      	ldr	r4, [r4, #4]
 80038d4:	e7cc      	b.n	8003870 <_malloc_r+0x2c>
 80038d6:	1cc4      	adds	r4, r0, #3
 80038d8:	f024 0403 	bic.w	r4, r4, #3
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d0e3      	beq.n	80038a8 <_malloc_r+0x64>
 80038e0:	1a21      	subs	r1, r4, r0
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f82e 	bl	8003944 <_sbrk_r>
 80038e8:	3001      	adds	r0, #1
 80038ea:	d1dd      	bne.n	80038a8 <_malloc_r+0x64>
 80038ec:	e7cf      	b.n	800388e <_malloc_r+0x4a>
 80038ee:	bf00      	nop
 80038f0:	200000a4 	.word	0x200000a4
 80038f4:	200000a8 	.word	0x200000a8

080038f8 <_realloc_r>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	4607      	mov	r7, r0
 80038fc:	4614      	mov	r4, r2
 80038fe:	460e      	mov	r6, r1
 8003900:	b921      	cbnz	r1, 800390c <_realloc_r+0x14>
 8003902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003906:	4611      	mov	r1, r2
 8003908:	f7ff bf9c 	b.w	8003844 <_malloc_r>
 800390c:	b922      	cbnz	r2, 8003918 <_realloc_r+0x20>
 800390e:	f7ff ff49 	bl	80037a4 <_free_r>
 8003912:	4625      	mov	r5, r4
 8003914:	4628      	mov	r0, r5
 8003916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003918:	f000 f830 	bl	800397c <_malloc_usable_size_r>
 800391c:	42a0      	cmp	r0, r4
 800391e:	d20f      	bcs.n	8003940 <_realloc_r+0x48>
 8003920:	4621      	mov	r1, r4
 8003922:	4638      	mov	r0, r7
 8003924:	f7ff ff8e 	bl	8003844 <_malloc_r>
 8003928:	4605      	mov	r5, r0
 800392a:	2800      	cmp	r0, #0
 800392c:	d0f2      	beq.n	8003914 <_realloc_r+0x1c>
 800392e:	4631      	mov	r1, r6
 8003930:	4622      	mov	r2, r4
 8003932:	f7ff ff0f 	bl	8003754 <memcpy>
 8003936:	4631      	mov	r1, r6
 8003938:	4638      	mov	r0, r7
 800393a:	f7ff ff33 	bl	80037a4 <_free_r>
 800393e:	e7e9      	b.n	8003914 <_realloc_r+0x1c>
 8003940:	4635      	mov	r5, r6
 8003942:	e7e7      	b.n	8003914 <_realloc_r+0x1c>

08003944 <_sbrk_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4d06      	ldr	r5, [pc, #24]	; (8003960 <_sbrk_r+0x1c>)
 8003948:	2300      	movs	r3, #0
 800394a:	4604      	mov	r4, r0
 800394c:	4608      	mov	r0, r1
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	f7fd f804 	bl	800095c <_sbrk>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_sbrk_r+0x1a>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b103      	cbz	r3, 800395e <_sbrk_r+0x1a>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	20000134 	.word	0x20000134

08003964 <__malloc_lock>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__malloc_lock+0x8>)
 8003966:	f000 b811 	b.w	800398c <__retarget_lock_acquire_recursive>
 800396a:	bf00      	nop
 800396c:	2000013c 	.word	0x2000013c

08003970 <__malloc_unlock>:
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <__malloc_unlock+0x8>)
 8003972:	f000 b80c 	b.w	800398e <__retarget_lock_release_recursive>
 8003976:	bf00      	nop
 8003978:	2000013c 	.word	0x2000013c

0800397c <_malloc_usable_size_r>:
 800397c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003980:	1f18      	subs	r0, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	bfbc      	itt	lt
 8003986:	580b      	ldrlt	r3, [r1, r0]
 8003988:	18c0      	addlt	r0, r0, r3
 800398a:	4770      	bx	lr

0800398c <__retarget_lock_acquire_recursive>:
 800398c:	4770      	bx	lr

0800398e <__retarget_lock_release_recursive>:
 800398e:	4770      	bx	lr

08003990 <_init>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr

0800399c <_fini>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr
