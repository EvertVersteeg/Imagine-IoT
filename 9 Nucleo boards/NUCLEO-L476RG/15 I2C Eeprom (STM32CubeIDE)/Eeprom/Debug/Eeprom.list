
Eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003994  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  08003b8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003b8c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7be  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001953  00000000  00000000  0002c7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a79  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090aa  00000000  00000000  000551c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8e6e  00000000  00000000  0005e273  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001470e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f28  00000000  00000000  0014715c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b04 	.word	0x08003b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003b04 	.word	0x08003b04

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <READ>:
/* USER CODE BEGIN 0 */

// This function reads from the specified memory location Memloc
// The upper and lower memory addresses are stored in data[0] and data[1]
void READ (uint16_t Memloc, uint8_t *pData, uint16_t len)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	80fb      	strh	r3, [r7, #6]
 80004e4:	4613      	mov	r3, r2
 80004e6:	80bb      	strh	r3, [r7, #4]
	uint8_t addr[2];
	addr[0] = (uint8_t) ((Memloc & 0xFF00) >> 8);
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	0a1b      	lsrs	r3, r3, #8
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	733b      	strb	r3, [r7, #12]
	addr[1] = (uint8_t) (Memloc & 0xFF);
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, addr, 2, HAL_MAX_DELAY);
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <READ+0x58>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b299      	uxth	r1, r3
 80004fe:	f107 020c 	add.w	r2, r7, #12
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2302      	movs	r3, #2
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <READ+0x5c>)
 800050c:	f000 ff28 	bl	8001360 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, I2C_ADDRESS, pData, len, HAL_MAX_DELAY);
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <READ+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b299      	uxth	r1, r3
 8000516:	88ba      	ldrh	r2, [r7, #4]
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	4613      	mov	r3, r2
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <READ+0x5c>)
 8000524:	f001 f810 	bl	8001548 <HAL_I2C_Master_Receive>
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000000 	.word	0x20000000
 8000534:	2000002c 	.word	0x2000002c

08000538 <WRITE>:

void WRITE (uint16_t Memloc, uint8_t *pData, uint16_t len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af02      	add	r7, sp, #8
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	80bb      	strh	r3, [r7, #4]
	uint8_t data[5];

	data[0] = (uint8_t) ((Memloc & 0xFF00) >> 8);
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	0a1b      	lsrs	r3, r3, #8
 800054c:	b29b      	uxth	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	723b      	strb	r3, [r7, #8]
	data[1] = (uint8_t) (Memloc & 0xFF);
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	727b      	strb	r3, [r7, #9]
	memcpy(data+2, pData, len);
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	3302      	adds	r3, #2
 800055e:	88ba      	ldrh	r2, [r7, #4]
 8000560:	6839      	ldr	r1, [r7, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f003 faba 	bl	8003adc <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data, len + 2, HAL_MAX_DELAY);
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <WRITE+0x74>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b299      	uxth	r1, r3
 800056e:	88bb      	ldrh	r3, [r7, #4]
 8000570:	3302      	adds	r3, #2
 8000572:	b298      	uxth	r0, r3
 8000574:	f107 0208 	add.w	r2, r7, #8
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	4603      	mov	r3, r0
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <WRITE+0x78>)
 8000582:	f000 feed 	bl	8001360 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, 0, 0, HAL_MAX_DELAY) != HAL_OK);
 8000586:	bf00      	nop
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <WRITE+0x74>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b299      	uxth	r1, r3
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	2200      	movs	r2, #0
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <WRITE+0x78>)
 800059a:	f000 fee1 	bl	8001360 <HAL_I2C_Master_Transmit>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f1      	bne.n	8000588 <WRITE+0x50>

}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	2000002c 	.word	0x2000002c

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN 1 */
	int count = 0, i = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
	// data to store (write message)
	char wmsg[] = { '1','2', 'a', '4', '5'};
 80005c2:	4a27      	ldr	r2, [pc, #156]	; (8000660 <main+0xac>)
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	6018      	str	r0, [r3, #0]
 80005ce:	3304      	adds	r3, #4
 80005d0:	7019      	strb	r1, [r3, #0]
	uint8_t len = strlen(wmsg)-1;
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdf6 	bl	80001c8 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 face 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f83c 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f922 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f8f0 	bl	80007d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f4:	f000 f8ae 	bl	8000754 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  WRITE(0x0000, (uint8_t*)wmsg, len);
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	4619      	mov	r1, r3
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff98 	bl	8000538 <WRITE>
  HAL_Delay(5000);
 8000608:	f241 3088 	movw	r0, #5000	; 0x1388
 800060c:	f000 fb36 	bl	8000c7c <HAL_Delay>
  READ(0x0000, (uint8_t*)rmsg, len);
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	b29a      	uxth	r2, r3
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ff5d 	bl	80004d8 <READ>

  count = 10*(rmsg[0]-'0') + rmsg[1]-'0';
 800061e:	783b      	ldrb	r3, [r7, #0]
 8000620:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000624:	4613      	mov	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	461a      	mov	r2, r3
 800062e:	787b      	ldrb	r3, [r7, #1]
 8000630:	4413      	add	r3, r2
 8000632:	3b30      	subs	r3, #48	; 0x30
 8000634:	613b      	str	r3, [r7, #16]
  for(i = 0; i <count; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e00b      	b.n	8000654 <main+0xa0>
  {
	  HAL_GPIO_TogglePin(GPIOA, LED);
 800063c:	2120      	movs	r1, #32
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f000 fde3 	bl	800120c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 fb17 	bl	8000c7c <HAL_Delay>
  for(i = 0; i <count; i++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbef      	blt.n	800063c <main+0x88>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0xa8>
 800065e:	bf00      	nop
 8000660:	08003b1c 	.word	0x08003b1c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0b8      	sub	sp, #224	; 0xe0
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fa3d 	bl	8003af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2288      	movs	r2, #136	; 0x88
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fa2f 	bl	8003af2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ba:	230a      	movs	r3, #10
 80006bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fb08 	bl	8001cec <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006e2:	f000 f90f 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2303      	movs	r3, #3
 80006ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fed4 	bl	80024b8 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000716:	f000 f8f5 	bl	8000904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800071a:	2342      	movs	r3, #66	; 0x42
 800071c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071e:	2300      	movs	r3, #0
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000722:	2300      	movs	r3, #0
 8000724:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f8c9 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000734:	f000 f8e6 	bl	8000904 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000738:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073c:	f001 fa80 	bl	8001c40 <HAL_PWREx_ControlVoltageScaling>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000746:	f000 f8dd 	bl	8000904 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	37e0      	adds	r7, #224	; 0xe0
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C1_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C1_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C1_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C1_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000790:	f000 fd56 	bl	8001240 <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079a:	f000 f8b3 	bl	8000904 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007a2:	f001 f9a7 	bl	8001af4 <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 f8aa 	bl	8000904 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007b4:	f001 f9e9 	bl	8001b8a <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f8a1 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	40005400 	.word	0x40005400
 80007d0:	10909cec 	.word	0x10909cec

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART2_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000818:	f002 fd02 	bl	8003220 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f86f 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000078 	.word	0x20000078
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_GPIO_Init+0xc4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f000 fc93 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_GPIO_Init+0xc8>)
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_GPIO_Init+0xcc>)
 80008cc:	f000 fade 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d0:	2320      	movs	r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 facf 	bl	8000e8c <HAL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	10210000 	.word	0x10210000
 8000900:	48000800 	.word	0x48000800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_I2C_MspInit+0x7c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d128      	bne.n	80009d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_I2C_MspInit+0x80>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_I2C_MspInit+0x80>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_I2C_MspInit+0x80>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a8:	2304      	movs	r3, #4
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <HAL_I2C_MspInit+0x84>)
 80009b4:	f000 fa6a 	bl	8000e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_I2C_MspInit+0x80>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_I2C_MspInit+0x80>)
 80009be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c2:	6593      	str	r3, [r2, #88]	; 0x58
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_I2C_MspInit+0x80>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40005400 	.word	0x40005400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000400 	.word	0x48000400

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0x7c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d128      	bne.n	8000a58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a36:	230c      	movs	r3, #12
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a46:	2307      	movs	r3, #7
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fa1a 	bl	8000e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8be 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <SystemInit+0x64>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <SystemInit+0x64>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <SystemInit+0x68>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <SystemInit+0x68>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <SystemInit+0x68>)
 8000af0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0x68>)
 8000afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <SystemInit+0x68>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SystemInit+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x64>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff ffc6 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b3a:	e003      	b.n	8000b44 <LoopCopyDataInit>

08000b3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b42:	3104      	adds	r1, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b4c:	d3f6      	bcc.n	8000b3c <CopyDataInit>
	ldr	r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b50:	e002      	b.n	8000b58 <LoopFillZerobss>

08000b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b54:	f842 3b04 	str.w	r3, [r2], #4

08000b58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <LoopForever+0x16>)
	cmp	r2, r3
 8000b5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b5c:	d3f9      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 ff99 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fd27 	bl	80005b4 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b6c:	08003b7c 	.word	0x08003b7c
	ldr	r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b74:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b78:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b7c:	200000fc 	.word	0x200000fc

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_Init+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <HAL_Init+0x3c>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f942 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f80f 	bl	8000bc4 <HAL_InitTick>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	e001      	b.n	8000bb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb2:	f7ff feaf 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f93f 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f917 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000000c 	.word	0x2000000c
 8000c34:	20000004 	.word	0x20000004
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000000c 	.word	0x2000000c
 8000c60:	200000f8 	.word	0x200000f8

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200000f8 	.word	0x200000f8

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_Delay+0x40>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffde 	bl	8000c64 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000000c 	.word	0x2000000c

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e17f      	b.n	800119c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8171 	beq.w	8001196 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d00b      	beq.n	8000ed4 <HAL_GPIO_Init+0x48>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	2b11      	cmp	r3, #17
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0201 	and.w	r2, r3, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d118      	bne.n	8000f74 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x128>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b12      	cmp	r3, #18
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	6939      	ldr	r1, [r7, #16]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80ac 	beq.w	8001196 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <HAL_GPIO_Init+0x32c>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	4a5d      	ldr	r2, [pc, #372]	; (80011b8 <HAL_GPIO_Init+0x32c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6613      	str	r3, [r2, #96]	; 0x60
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_GPIO_Init+0x32c>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001056:	4a59      	ldr	r2, [pc, #356]	; (80011bc <HAL_GPIO_Init+0x330>)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001080:	d025      	beq.n	80010ce <HAL_GPIO_Init+0x242>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01f      	beq.n	80010ca <HAL_GPIO_Init+0x23e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x338>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x23a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x33c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x236>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_GPIO_Init+0x340>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x232>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_GPIO_Init+0x344>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x22e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x348>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x22a>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010b6:	2307      	movs	r3, #7
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x244>
 80010ce:	2300      	movs	r3, #0
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e0:	4936      	ldr	r1, [pc, #216]	; (80011bc <HAL_GPIO_Init+0x330>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001112:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800113c:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001190:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f47f ae78 	bne.w	8000e9c <HAL_GPIO_Init+0x10>
  }
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48001400 	.word	0x48001400
 80011d4:	48001800 	.word	0x48001800
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43d9      	mvns	r1, r3
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	400b      	ands	r3, r1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e081      	b.n	8001356 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fb78 	bl	800095c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2224      	movs	r2, #36	; 0x24
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001290:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e006      	b.n	80012c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d104      	bne.n	80012da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	ea42 0103 	orr.w	r1, r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	021a      	lsls	r2, r3, #8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69d9      	ldr	r1, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2220      	movs	r2, #32
 8001342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	460b      	mov	r3, r1
 800136e:	817b      	strh	r3, [r7, #10]
 8001370:	4613      	mov	r3, r2
 8001372:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b20      	cmp	r3, #32
 800137e:	f040 80da 	bne.w	8001536 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_I2C_Master_Transmit+0x30>
 800138c:	2302      	movs	r3, #2
 800138e:	e0d3      	b.n	8001538 <HAL_I2C_Master_Transmit+0x1d8>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001398:	f7ff fc64 	bl	8000c64 <HAL_GetTick>
 800139c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2319      	movs	r3, #25
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f9e6 	bl	800177c <I2C_WaitOnFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0be      	b.n	8001538 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2221      	movs	r2, #33	; 0x21
 80013be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2210      	movs	r2, #16
 80013c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	893a      	ldrh	r2, [r7, #8]
 80013da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	2bff      	cmp	r3, #255	; 0xff
 80013ea:	d90e      	bls.n	800140a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	8979      	ldrh	r1, [r7, #10]
 80013fa:	4b51      	ldr	r3, [pc, #324]	; (8001540 <HAL_I2C_Master_Transmit+0x1e0>)
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fb48 	bl	8001a98 <I2C_TransferConfig>
 8001408:	e06c      	b.n	80014e4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001418:	b2da      	uxtb	r2, r3
 800141a:	8979      	ldrh	r1, [r7, #10]
 800141c:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_I2C_Master_Transmit+0x1e0>)
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 fb37 	bl	8001a98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800142a:	e05b      	b.n	80014e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	6a39      	ldr	r1, [r7, #32]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f9e3 	bl	80017fc <I2C_WaitOnTXISFlagUntilTimeout>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e07b      	b.n	8001538 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d034      	beq.n	80014e4 <HAL_I2C_Master_Transmit+0x184>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147e:	2b00      	cmp	r3, #0
 8001480:	d130      	bne.n	80014e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	2200      	movs	r2, #0
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f975 	bl	800177c <I2C_WaitOnFlagUntilTimeout>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e04d      	b.n	8001538 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d90e      	bls.n	80014c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	22ff      	movs	r2, #255	; 0xff
 80014aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	8979      	ldrh	r1, [r7, #10]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 faeb 	bl	8001a98 <I2C_TransferConfig>
 80014c2:	e00f      	b.n	80014e4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	8979      	ldrh	r1, [r7, #10]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fada 	bl	8001a98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d19e      	bne.n	800142c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f9c2 	bl	800187c <I2C_WaitOnSTOPFlagUntilTimeout>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e01a      	b.n	8001538 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2220      	movs	r2, #32
 8001508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_I2C_Master_Transmit+0x1e4>)
 8001516:	400b      	ands	r3, r1
 8001518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2220      	movs	r2, #32
 800151e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001536:	2302      	movs	r3, #2
  }
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	80002000 	.word	0x80002000
 8001544:	fe00e800 	.word	0xfe00e800

08001548 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	460b      	mov	r3, r1
 8001556:	817b      	strh	r3, [r7, #10]
 8001558:	4613      	mov	r3, r2
 800155a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b20      	cmp	r3, #32
 8001566:	f040 80db 	bne.w	8001720 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_I2C_Master_Receive+0x30>
 8001574:	2302      	movs	r3, #2
 8001576:	e0d4      	b.n	8001722 <HAL_I2C_Master_Receive+0x1da>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001580:	f7ff fb70 	bl	8000c64 <HAL_GetTick>
 8001584:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2319      	movs	r3, #25
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f8f2 	bl	800177c <I2C_WaitOnFlagUntilTimeout>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0bf      	b.n	8001722 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2222      	movs	r2, #34	; 0x22
 80015a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2210      	movs	r2, #16
 80015ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	893a      	ldrh	r2, [r7, #8]
 80015c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2bff      	cmp	r3, #255	; 0xff
 80015d2:	d90e      	bls.n	80015f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	22ff      	movs	r2, #255	; 0xff
 80015d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	8979      	ldrh	r1, [r7, #10]
 80015e2:	4b52      	ldr	r3, [pc, #328]	; (800172c <HAL_I2C_Master_Receive+0x1e4>)
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fa54 	bl	8001a98 <I2C_TransferConfig>
 80015f0:	e06d      	b.n	80016ce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001600:	b2da      	uxtb	r2, r3
 8001602:	8979      	ldrh	r1, [r7, #10]
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_I2C_Master_Receive+0x1e4>)
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 fa43 	bl	8001a98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001612:	e05c      	b.n	80016ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	6a39      	ldr	r1, [r7, #32]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f96b 	bl	80018f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e07c      	b.n	8001722 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d034      	beq.n	80016ce <HAL_I2C_Master_Receive+0x186>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	2b00      	cmp	r3, #0
 800166a:	d130      	bne.n	80016ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	2200      	movs	r2, #0
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f880 	bl	800177c <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e04d      	b.n	8001722 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	2bff      	cmp	r3, #255	; 0xff
 800168e:	d90e      	bls.n	80016ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	22ff      	movs	r2, #255	; 0xff
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169a:	b2da      	uxtb	r2, r3
 800169c:	8979      	ldrh	r1, [r7, #10]
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f9f6 	bl	8001a98 <I2C_TransferConfig>
 80016ac:	e00f      	b.n	80016ce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	8979      	ldrh	r1, [r7, #10]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f9e5 	bl	8001a98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d19d      	bne.n	8001614 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	6a39      	ldr	r1, [r7, #32]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f8cd 	bl	800187c <I2C_WaitOnSTOPFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e01a      	b.n	8001722 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2220      	movs	r2, #32
 80016f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_I2C_Master_Receive+0x1e8>)
 8001700:	400b      	ands	r3, r1
 8001702:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001720:	2302      	movs	r3, #2
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	80002400 	.word	0x80002400
 8001730:	fe00e800 	.word	0xfe00e800

08001734 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b02      	cmp	r3, #2
 8001748:	d103      	bne.n	8001752 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d007      	beq.n	8001770 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	619a      	str	r2, [r3, #24]
  }
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800178c:	e022      	b.n	80017d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d01e      	beq.n	80017d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001796:	f7ff fa65 	bl	8000c64 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d302      	bcc.n	80017ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d113      	bne.n	80017d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f043 0220 	orr.w	r2, r3, #32
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e00f      	b.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	4013      	ands	r3, r2
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d0cd      	beq.n	800178e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001808:	e02c      	b.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f8dc 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e02a      	b.n	8001874 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d01e      	beq.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001826:	f7ff fa1d 	bl	8000c64 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	429a      	cmp	r2, r3
 8001834:	d302      	bcc.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d113      	bne.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	f043 0220 	orr.w	r2, r3, #32
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e007      	b.n	8001874 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d1cb      	bne.n	800180a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001888:	e028      	b.n	80018dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f89c 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e026      	b.n	80018ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189e:	f7ff f9e1 	bl	8000c64 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d302      	bcc.n	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d113      	bne.n	80018dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	f043 0220 	orr.w	r2, r3, #32
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e007      	b.n	80018ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	d1cf      	bne.n	800188a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001900:	e055      	b.n	80019ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f860 	bl	80019cc <I2C_IsAcknowledgeFailed>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e053      	b.n	80019be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b20      	cmp	r3, #32
 8001922:	d129      	bne.n	8001978 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b04      	cmp	r3, #4
 8001930:	d105      	bne.n	800193e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e03f      	b.n	80019be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001952:	400b      	ands	r3, r1
 8001954:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e022      	b.n	80019be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001978:	f7ff f974 	bl	8000c64 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	d302      	bcc.n	800198e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e007      	b.n	80019be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d1a2      	bne.n	8001902 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	fe00e800 	.word	0xfe00e800

080019cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d151      	bne.n	8001a8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e6:	e022      	b.n	8001a2e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ee:	d01e      	beq.n	8001a2e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f0:	f7ff f938 	bl	8000c64 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d302      	bcc.n	8001a06 <I2C_IsAcknowledgeFailed+0x3a>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e02e      	b.n	8001a8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d1d5      	bne.n	80019e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff fe71 	bl	8001734 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a5e:	400b      	ands	r3, r1
 8001a60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f043 0204 	orr.w	r2, r3, #4
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fe00e800 	.word	0xfe00e800

08001a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	817b      	strh	r3, [r7, #10]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	0d5b      	lsrs	r3, r3, #21
 8001ab4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <I2C_TransferConfig+0x58>)
 8001aba:	430b      	orrs	r3, r1
 8001abc:	43db      	mvns	r3, r3
 8001abe:	ea02 0103 	and.w	r1, r2, r3
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ac8:	7a7b      	ldrb	r3, [r7, #9]
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	03ff63ff 	.word	0x03ff63ff

08001af4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d138      	bne.n	8001b7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e032      	b.n	8001b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b7c:	2302      	movs	r3, #2
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d139      	bne.n	8001c14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e033      	b.n	8001c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2224      	movs	r2, #36	; 0x24
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000

08001c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4e:	d130      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d038      	beq.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2232      	movs	r2, #50	; 0x32
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9b      	lsrs	r3, r3, #18
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c84:	e002      	b.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c98:	d102      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f2      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cac:	d110      	bne.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e00f      	b.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d007      	beq.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e3d4      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4ba1      	ldr	r3, [pc, #644]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	4b9e      	ldr	r3, [pc, #632]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80e4 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_RCC_OscConfig+0x4a>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	f040 808b 	bne.w	8001e44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 8087 	bne.w	8001e44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d36:	4b93      	ldr	r3, [pc, #588]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x62>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e3ac      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_RCC_OscConfig+0x7c>
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_OscConfig+0x88>
 8001d68:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d223      	bcs.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fd3f 	bl	8002800 <RCC_SetFlashLatencyFromMSIRange>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e38d      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8c:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a7c      	ldr	r2, [pc, #496]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b7a      	ldr	r3, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4977      	ldr	r1, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	4972      	ldr	r1, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
 8001dbe:	e025      	b.n	8001e0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6f      	ldr	r2, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	496a      	ldr	r1, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dde:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	4965      	ldr	r1, [pc, #404]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fcff 	bl	8002800 <RCC_SetFlashLatencyFromMSIRange>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e34d      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0c:	f000 fc36 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8001e10:	4601      	mov	r1, r0
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	4a5a      	ldr	r2, [pc, #360]	; (8001f88 <HAL_RCC_OscConfig+0x29c>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa21 f303 	lsr.w	r3, r1, r3
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_RCC_OscConfig+0x2a0>)
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e2c:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <HAL_RCC_OscConfig+0x2a4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fec7 	bl	8000bc4 <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d052      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	e331      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff04 	bl	8000c64 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e60:	f7fe ff00 	bl	8000c64 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e31a      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a40      	ldr	r2, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	493b      	ldr	r1, [pc, #236]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4936      	ldr	r1, [pc, #216]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
 8001eb0:	e01a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a33      	ldr	r2, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe fed1 	bl	8000c64 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec6:	f7fe fecd 	bl	8000c64 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e2e7      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x1da>
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d074      	beq.n	8001fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x21a>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d10e      	bne.n	8001f1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d10b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d064      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d160      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e2c4      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x24a>
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e01d      	b.n	8001f72 <HAL_RCC_OscConfig+0x286>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x26e>
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x286>
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fe73 	bl	8000c64 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f80:	e011      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2ba>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003b24 	.word	0x08003b24
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7fe fe66 	bl	8000c64 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e280      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa6:	4baf      	ldr	r3, [pc, #700]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2a8>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fe56 	bl	8000c64 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fe52 	bl	8000c64 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e26c      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fce:	4ba5      	ldr	r3, [pc, #660]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2d0>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d060      	beq.n	80020ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x310>
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d119      	bne.n	800202a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d116      	bne.n	800202a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ffc:	4b99      	ldr	r3, [pc, #612]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_OscConfig+0x328>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e249      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b93      	ldr	r3, [pc, #588]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	061b      	lsls	r3, r3, #24
 8002022:	4990      	ldr	r1, [pc, #576]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002028:	e040      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d023      	beq.n	800207a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002032:	4b8c      	ldr	r3, [pc, #560]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a8b      	ldr	r2, [pc, #556]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7fe fe11 	bl	8000c64 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7fe fe0d 	bl	8000c64 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e227      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	4b82      	ldr	r3, [pc, #520]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	497c      	ldr	r1, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	e018      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b7a      	ldr	r3, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a79      	ldr	r2, [pc, #484]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fded 	bl	8000c64 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe fde9 	bl	8000c64 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e203      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a0:	4b70      	ldr	r3, [pc, #448]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03c      	beq.n	8002132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01c      	beq.n	80020fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c0:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	4a67      	ldr	r2, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fdc8 	bl	8000c64 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7fe fdc4 	bl	8000c64 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1de      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ea:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80020ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ef      	beq.n	80020d8 <HAL_RCC_OscConfig+0x3ec>
 80020f8:	e01b      	b.n	8002132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe fdab 	bl	8000c64 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe fda7 	bl	8000c64 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1c1      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ef      	bne.n	8002112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80a6 	beq.w	800228c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b44      	ldr	r3, [pc, #272]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a43      	ldr	r2, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002168:	2301      	movs	r3, #1
 800216a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216c:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x57c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d118      	bne.n	80021aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x57c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <HAL_RCC_OscConfig+0x57c>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002184:	f7fe fd6e 	bl	8000c64 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe fd6a 	bl	8000c64 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e184      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_RCC_OscConfig+0x57c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4d8>
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c2:	e024      	b.n	800220e <HAL_RCC_OscConfig+0x522>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d110      	bne.n	80021ee <HAL_RCC_OscConfig+0x502>
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	4a24      	ldr	r2, [pc, #144]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ec:	e00f      	b.n	800220e <HAL_RCC_OscConfig+0x522>
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 0304 	bic.w	r3, r3, #4
 800220a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe fd25 	bl	8000c64 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fd21 	bl	8000c64 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e139      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_OscConfig+0x578>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0ed      	beq.n	800221e <HAL_RCC_OscConfig+0x532>
 8002242:	e01a      	b.n	800227a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fd0e 	bl	8000c64 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224a:	e00f      	b.n	800226c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe fd0a 	bl	8000c64 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d906      	bls.n	800226c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e122      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800226c:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e8      	bne.n	800224c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b8b      	ldr	r3, [pc, #556]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8108 	beq.w	80024a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	2b02      	cmp	r3, #2
 800229c:	f040 80d0 	bne.w	8002440 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022a0:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d130      	bne.n	8002316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	3b01      	subs	r3, #1
 80022c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d127      	bne.n	8002316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11f      	bne.n	8002316 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e0:	2a07      	cmp	r2, #7
 80022e2:	bf14      	ite	ne
 80022e4:	2201      	movne	r2, #1
 80022e6:	2200      	moveq	r2, #0
 80022e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d113      	bne.n	8002316 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	3b01      	subs	r3, #1
 80022fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d109      	bne.n	8002316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	3b01      	subs	r3, #1
 8002310:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d06e      	beq.n	80023f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d069      	beq.n	80023f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800231c:	4b64      	ldr	r3, [pc, #400]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002328:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b7      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5c      	ldr	r2, [pc, #368]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800233e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002344:	f7fe fc8e 	bl	8000c64 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fc8a 	bl	8000c64 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0a4      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235e:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236a:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_RCC_OscConfig+0x7c8>)
 8002370:	4013      	ands	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800237a:	3a01      	subs	r2, #1
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002384:	0212      	lsls	r2, r2, #8
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800238c:	0852      	lsrs	r2, r2, #1
 800238e:	3a01      	subs	r2, #1
 8002390:	0552      	lsls	r2, r2, #21
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002398:	0852      	lsrs	r2, r2, #1
 800239a:	3a01      	subs	r2, #1
 800239c:	0652      	lsls	r2, r2, #25
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023a4:	0912      	lsrs	r2, r2, #4
 80023a6:	0452      	lsls	r2, r2, #17
 80023a8:	430a      	orrs	r2, r1
 80023aa:	4941      	ldr	r1, [pc, #260]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023b0:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a3b      	ldr	r2, [pc, #236]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c8:	f7fe fc4c 	bl	8000c64 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fc48 	bl	8000c64 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e062      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ee:	e05a      	b.n	80024a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e059      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d152      	bne.n	80024a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002400:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002418:	f7fe fc24 	bl	8000c64 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe fc20 	bl	8000c64 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e03a      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x734>
 800243e:	e032      	b.n	80024a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d02d      	beq.n	80024a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800244c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002450:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002470:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe fbf3 	bl	8000c64 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe fbef 	bl	8000c64 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e009      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_OscConfig+0x7c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x796>
 80024a0:	e001      	b.n	80024a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	f99d808c 	.word	0xf99d808c

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0c8      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	4961      	ldr	r1, [pc, #388]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b0      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d04c      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d107      	bne.n	8002520 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002510:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d121      	bne.n	8002560 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e09e      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d107      	bne.n	8002538 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002528:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d115      	bne.n	8002560 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e092      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002540:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e086      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e07e      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002560:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 0203 	bic.w	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	493f      	ldr	r1, [pc, #252]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002572:	f7fe fb77 	bl	8000c64 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002578:	e00a      	b.n	8002590 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257a:	f7fe fb73 	bl	8000c64 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e066      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002590:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 020c 	and.w	r2, r3, #12
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	429a      	cmp	r2, r3
 80025a0:	d1eb      	bne.n	800257a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ae:	4b2f      	ldr	r3, [pc, #188]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	492c      	ldr	r1, [pc, #176]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d210      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4924      	ldr	r1, [pc, #144]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_RCC_ClockConfig+0x1b0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e036      	b.n	800265e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4918      	ldr	r1, [pc, #96]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4910      	ldr	r1, [pc, #64]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800262e:	f000 f825 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8002632:	4601      	mov	r1, r0
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	fa21 f303 	lsr.w	r3, r1, r3
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fab6 	bl	8000bc4 <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	72fb      	strb	r3, [r7, #11]

  return status;
 800265c:	7afb      	ldrb	r3, [r7, #11]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40022000 	.word	0x40022000
 800266c:	40021000 	.word	0x40021000
 8002670:	08003b24 	.word	0x08003b24
 8002674:	20000004 	.word	0x20000004
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x34>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d11e      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026bc:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d8:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e004      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_GetSysClockFreq+0x110>)
 8002702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d133      	bne.n	8002772 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xa4>
 800271a:	2b03      	cmp	r3, #3
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0xaa>
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e005      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_GetSysClockFreq+0x110>)
 8002728:	617b      	str	r3, [r7, #20]
      break;
 800272a:	e002      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	617b      	str	r3, [r7, #20]
      break;
 8002730:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	3301      	adds	r3, #1
 800273e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	fb02 f203 	mul.w	r2, r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_GetSysClockFreq+0x104>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0e5b      	lsrs	r3, r3, #25
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002772:	69bb      	ldr	r3, [r7, #24]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3724      	adds	r7, #36	; 0x24
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000
 8002784:	08003b3c 	.word	0x08003b3c
 8002788:	00f42400 	.word	0x00f42400
 800278c:	007a1200 	.word	0x007a1200

08002790 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027ac:	f7ff fff0 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027b0:	4601      	mov	r1, r0
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08003b34 	.word	0x08003b34

080027d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d8:	f7ff ffda 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027dc:	4601      	mov	r1, r0
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0adb      	lsrs	r3, r3, #11
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08003b34 	.word	0x08003b34

08002800 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002818:	f7ff fa04 	bl	8001c24 <HAL_PWREx_GetVoltageRange>
 800281c:	6178      	str	r0, [r7, #20]
 800281e:	e014      	b.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002838:	f7ff f9f4 	bl	8001c24 <HAL_PWREx_GetVoltageRange>
 800283c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002850:	d10b      	bne.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d919      	bls.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2ba0      	cmp	r3, #160	; 0xa0
 800285c:	d902      	bls.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285e:	2302      	movs	r3, #2
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e013      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002864:	2301      	movs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	e010      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d902      	bls.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002870:	2303      	movs	r3, #3
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e00a      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d102      	bne.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800287c:	2302      	movs	r3, #2
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e004      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b70      	cmp	r3, #112	; 0x70
 8002886:	d101      	bne.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 0207 	bic.w	r2, r3, #7
 8002894:	4909      	ldr	r1, [pc, #36]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40022000 	.word	0x40022000

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d03f      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e4:	d01c      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d802      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80028f0:	e01f      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80028f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f6:	d003      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80028f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fc:	d01c      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80028fe:	e018      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002900:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a84      	ldr	r2, [pc, #528]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800290c:	e015      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fab9 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800291e:	e00c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3320      	adds	r3, #32
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fba0 	bl	800306c <RCCEx_PLLSAI2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	74fb      	strb	r3, [r7, #19]
      break;
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002940:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294e:	4972      	ldr	r1, [pc, #456]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002956:	e001      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03f      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	d01c      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002976:	d802      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800297c:	e01f      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800297e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002982:	d003      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002984:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002988:	d01c      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800298a:	e018      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a61      	ldr	r2, [pc, #388]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002998:	e015      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fa73 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029aa:	e00c      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3320      	adds	r3, #32
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fb5a 	bl	800306c <RCCEx_PLLSAI2_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029bc:	e003      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	74fb      	strb	r3, [r7, #19]
      break;
 80029c2:	e000      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029cc:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029da:	494f      	ldr	r1, [pc, #316]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029e2:	e001      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a0 	beq.w	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a40      	ldr	r2, [pc, #256]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1c:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a38:	f7fe f914 	bl	8000c64 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a3e:	e009      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe f910 	bl	8000c64 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d902      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	74fb      	strb	r3, [r7, #19]
        break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a54:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ef      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d15c      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a66:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01f      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d019      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe f8cf 	bl	8000c64 <HAL_GetTick>
 8002ac6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f8cb 	bl	8000c64 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d902      	bls.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	74fb      	strb	r3, [r7, #19]
            break;
 8002ae0:	e006      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ec      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b0e:	e009      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
 8002b14:	e006      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b24:	7c7b      	ldrb	r3, [r7, #17]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d105      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	4b9e      	ldr	r3, [pc, #632]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	4a9d      	ldr	r2, [pc, #628]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b42:	4b98      	ldr	r3, [pc, #608]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f023 0203 	bic.w	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	4994      	ldr	r1, [pc, #592]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 020c 	bic.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	498c      	ldr	r1, [pc, #560]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b86:	4b87      	ldr	r3, [pc, #540]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4983      	ldr	r1, [pc, #524]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	497b      	ldr	r1, [pc, #492]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	4972      	ldr	r1, [pc, #456]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bec:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	496a      	ldr	r1, [pc, #424]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	4961      	ldr	r1, [pc, #388]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c30:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	4959      	ldr	r1, [pc, #356]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c52:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c60:	4950      	ldr	r1, [pc, #320]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c74:	4b4b      	ldr	r3, [pc, #300]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	4948      	ldr	r1, [pc, #288]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	493f      	ldr	r1, [pc, #252]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d028      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb8:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc6:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce2:	60d3      	str	r3, [r2, #12]
 8002ce4:	e011      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f8c8 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	491f      	ldr	r1, [pc, #124]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d40:	60d3      	str	r3, [r2, #12]
 8002d42:	e011      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f899 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02b      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	4908      	ldr	r1, [pc, #32]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d92:	d109      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a02      	ldr	r2, [pc, #8]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
 8002da0:	e014      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f867 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d02f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de6:	4928      	ldr	r1, [pc, #160]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df6:	d10d      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f844 	bl	8002e8c <RCCEx_PLLSAI1_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d014      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	74bb      	strb	r3, [r7, #18]
 8002e12:	e011      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3320      	adds	r3, #32
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f921 	bl	800306c <RCCEx_PLLSAI2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	490d      	ldr	r1, [pc, #52]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e76:	4904      	ldr	r1, [pc, #16]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000

08002e8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10d      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ebe:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d044      	beq.n	8002f5c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e041      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d00c      	beq.n	8002efa <RCCEx_PLLSAI1_Config+0x6e>
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d013      	beq.n	8002f0c <RCCEx_PLLSAI1_Config+0x80>
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d120      	bne.n	8002f2a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11d      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e01a      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0a:	e013      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f28:	e006      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2e:	e004      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f30:	bf00      	nop
 8002f32:	e002      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f34:	bf00      	nop
 8002f36:	e000      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f38:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	430b      	orrs	r3, r1
 8002f56:	4944      	ldr	r1, [pc, #272]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d17d      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a40      	ldr	r2, [pc, #256]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6e:	f7fd fe79 	bl	8000c64 <HAL_GetTick>
 8002f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f74:	e009      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f76:	f7fd fe75 	bl	8000c64 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d902      	bls.n	8002f8a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	73fb      	strb	r3, [r7, #15]
        break;
 8002f88:	e005      	b.n	8002f96 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ef      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d160      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d111      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	0211      	lsls	r1, r2, #8
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68d2      	ldr	r2, [r2, #12]
 8002fb8:	0912      	lsrs	r2, r2, #4
 8002fba:	0452      	lsls	r2, r2, #17
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	492a      	ldr	r1, [pc, #168]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]
 8002fc4:	e027      	b.n	8003016 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d112      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6892      	ldr	r2, [r2, #8]
 8002fdc:	0211      	lsls	r1, r2, #8
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6912      	ldr	r2, [r2, #16]
 8002fe2:	0852      	lsrs	r2, r2, #1
 8002fe4:	3a01      	subs	r2, #1
 8002fe6:	0552      	lsls	r2, r2, #21
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	491f      	ldr	r1, [pc, #124]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	610b      	str	r3, [r1, #16]
 8002ff0:	e011      	b.n	8003016 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6892      	ldr	r2, [r2, #8]
 8003002:	0211      	lsls	r1, r2, #8
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6952      	ldr	r2, [r2, #20]
 8003008:	0852      	lsrs	r2, r2, #1
 800300a:	3a01      	subs	r2, #1
 800300c:	0652      	lsls	r2, r2, #25
 800300e:	430a      	orrs	r2, r1
 8003010:	4915      	ldr	r1, [pc, #84]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003020:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fd fe1f 	bl	8000c64 <HAL_GetTick>
 8003026:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003028:	e009      	b.n	800303e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800302a:	f7fd fe1b 	bl	8000c64 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	73fb      	strb	r3, [r7, #15]
          break;
 800303c:	e005      	b.n	800304a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ef      	beq.n	800302a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000

0800306c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800307a:	4b68      	ldr	r3, [pc, #416]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003086:	4b65      	ldr	r3, [pc, #404]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0203 	and.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
       ||
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800309e:	4b5f      	ldr	r3, [pc, #380]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
       ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d044      	beq.n	800313c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e041      	b.n	800313c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d00c      	beq.n	80030da <RCCEx_PLLSAI2_Config+0x6e>
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d013      	beq.n	80030ec <RCCEx_PLLSAI2_Config+0x80>
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d120      	bne.n	800310a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030c8:	4b54      	ldr	r3, [pc, #336]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d8:	e01a      	b.n	8003110 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ea:	e013      	b.n	8003114 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ec:	4b4b      	ldr	r3, [pc, #300]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030f8:	4b48      	ldr	r3, [pc, #288]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003108:	e006      	b.n	8003118 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      break;
 800310e:	e004      	b.n	800311a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003110:	bf00      	nop
 8003112:	e002      	b.n	800311a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003118:	bf00      	nop
    }

    if(status == HAL_OK)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003120:	4b3e      	ldr	r3, [pc, #248]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	3b01      	subs	r3, #1
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	430b      	orrs	r3, r1
 8003136:	4939      	ldr	r1, [pc, #228]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003138:	4313      	orrs	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d167      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003142:	4b36      	ldr	r3, [pc, #216]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a35      	ldr	r2, [pc, #212]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314e:	f7fd fd89 	bl	8000c64 <HAL_GetTick>
 8003152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003154:	e009      	b.n	800316a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003156:	f7fd fd85 	bl	8000c64 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d902      	bls.n	800316a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	73fb      	strb	r3, [r7, #15]
        break;
 8003168:	e005      	b.n	8003176 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ef      	bne.n	8003156 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d14a      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d111      	bne.n	80031a6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	0211      	lsls	r1, r2, #8
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68d2      	ldr	r2, [r2, #12]
 8003198:	0912      	lsrs	r2, r2, #4
 800319a:	0452      	lsls	r2, r2, #17
 800319c:	430a      	orrs	r2, r1
 800319e:	491f      	ldr	r1, [pc, #124]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	614b      	str	r3, [r1, #20]
 80031a4:	e011      	b.n	80031ca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6892      	ldr	r2, [r2, #8]
 80031b6:	0211      	lsls	r1, r2, #8
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6912      	ldr	r2, [r2, #16]
 80031bc:	0852      	lsrs	r2, r2, #1
 80031be:	3a01      	subs	r2, #1
 80031c0:	0652      	lsls	r2, r2, #25
 80031c2:	430a      	orrs	r2, r1
 80031c4:	4915      	ldr	r1, [pc, #84]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fd fd45 	bl	8000c64 <HAL_GetTick>
 80031da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031dc:	e009      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031de:	f7fd fd41 	bl	8000c64 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d902      	bls.n	80031f2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	73fb      	strb	r3, [r7, #15]
          break;
 80031f0:	e005      	b.n	80031fe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ef      	beq.n	80031de <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <RCCEx_PLLSAI2_Config+0x1b0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e040      	b.n	80032b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fbce 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f82c 	bl	80032bc <UART_SetConfig>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e022      	b.n	80032b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 faaa 	bl	80037d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb31 	bl	8003914 <UART_CheckIdleState>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032c0:	b088      	sub	sp, #32
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4bac      	ldr	r3, [pc, #688]	; (800359c <UART_SetConfig+0x2e0>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	69f9      	ldr	r1, [r7, #28]
 80032f2:	430b      	orrs	r3, r1
 80032f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4aa2      	ldr	r2, [pc, #648]	; (80035a0 <UART_SetConfig+0x2e4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	4313      	orrs	r3, r2
 8003324:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a99      	ldr	r2, [pc, #612]	; (80035a4 <UART_SetConfig+0x2e8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d121      	bne.n	8003388 <UART_SetConfig+0xcc>
 8003344:	4b98      	ldr	r3, [pc, #608]	; (80035a8 <UART_SetConfig+0x2ec>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b03      	cmp	r3, #3
 8003350:	d816      	bhi.n	8003380 <UART_SetConfig+0xc4>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <UART_SetConfig+0x9c>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	08003375 	.word	0x08003375
 8003360:	0800336f 	.word	0x0800336f
 8003364:	0800337b 	.word	0x0800337b
 8003368:	2301      	movs	r3, #1
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	e0e8      	b.n	8003540 <UART_SetConfig+0x284>
 800336e:	2302      	movs	r3, #2
 8003370:	76fb      	strb	r3, [r7, #27]
 8003372:	e0e5      	b.n	8003540 <UART_SetConfig+0x284>
 8003374:	2304      	movs	r3, #4
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e0e2      	b.n	8003540 <UART_SetConfig+0x284>
 800337a:	2308      	movs	r3, #8
 800337c:	76fb      	strb	r3, [r7, #27]
 800337e:	e0df      	b.n	8003540 <UART_SetConfig+0x284>
 8003380:	2310      	movs	r3, #16
 8003382:	76fb      	strb	r3, [r7, #27]
 8003384:	bf00      	nop
 8003386:	e0db      	b.n	8003540 <UART_SetConfig+0x284>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a87      	ldr	r2, [pc, #540]	; (80035ac <UART_SetConfig+0x2f0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d134      	bne.n	80033fc <UART_SetConfig+0x140>
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <UART_SetConfig+0x2ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d829      	bhi.n	80033f4 <UART_SetConfig+0x138>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0xec>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	080033f5 	.word	0x080033f5
 80033b0:	080033f5 	.word	0x080033f5
 80033b4:	080033f5 	.word	0x080033f5
 80033b8:	080033e9 	.word	0x080033e9
 80033bc:	080033f5 	.word	0x080033f5
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	080033f5 	.word	0x080033f5
 80033c8:	080033e3 	.word	0x080033e3
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033f5 	.word	0x080033f5
 80033d8:	080033ef 	.word	0x080033ef
 80033dc:	2300      	movs	r3, #0
 80033de:	76fb      	strb	r3, [r7, #27]
 80033e0:	e0ae      	b.n	8003540 <UART_SetConfig+0x284>
 80033e2:	2302      	movs	r3, #2
 80033e4:	76fb      	strb	r3, [r7, #27]
 80033e6:	e0ab      	b.n	8003540 <UART_SetConfig+0x284>
 80033e8:	2304      	movs	r3, #4
 80033ea:	76fb      	strb	r3, [r7, #27]
 80033ec:	e0a8      	b.n	8003540 <UART_SetConfig+0x284>
 80033ee:	2308      	movs	r3, #8
 80033f0:	76fb      	strb	r3, [r7, #27]
 80033f2:	e0a5      	b.n	8003540 <UART_SetConfig+0x284>
 80033f4:	2310      	movs	r3, #16
 80033f6:	76fb      	strb	r3, [r7, #27]
 80033f8:	bf00      	nop
 80033fa:	e0a1      	b.n	8003540 <UART_SetConfig+0x284>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6b      	ldr	r2, [pc, #428]	; (80035b0 <UART_SetConfig+0x2f4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d120      	bne.n	8003448 <UART_SetConfig+0x18c>
 8003406:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <UART_SetConfig+0x2ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003410:	2b10      	cmp	r3, #16
 8003412:	d00f      	beq.n	8003434 <UART_SetConfig+0x178>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d802      	bhi.n	800341e <UART_SetConfig+0x162>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <UART_SetConfig+0x16c>
 800341c:	e010      	b.n	8003440 <UART_SetConfig+0x184>
 800341e:	2b20      	cmp	r3, #32
 8003420:	d005      	beq.n	800342e <UART_SetConfig+0x172>
 8003422:	2b30      	cmp	r3, #48	; 0x30
 8003424:	d009      	beq.n	800343a <UART_SetConfig+0x17e>
 8003426:	e00b      	b.n	8003440 <UART_SetConfig+0x184>
 8003428:	2300      	movs	r3, #0
 800342a:	76fb      	strb	r3, [r7, #27]
 800342c:	e088      	b.n	8003540 <UART_SetConfig+0x284>
 800342e:	2302      	movs	r3, #2
 8003430:	76fb      	strb	r3, [r7, #27]
 8003432:	e085      	b.n	8003540 <UART_SetConfig+0x284>
 8003434:	2304      	movs	r3, #4
 8003436:	76fb      	strb	r3, [r7, #27]
 8003438:	e082      	b.n	8003540 <UART_SetConfig+0x284>
 800343a:	2308      	movs	r3, #8
 800343c:	76fb      	strb	r3, [r7, #27]
 800343e:	e07f      	b.n	8003540 <UART_SetConfig+0x284>
 8003440:	2310      	movs	r3, #16
 8003442:	76fb      	strb	r3, [r7, #27]
 8003444:	bf00      	nop
 8003446:	e07b      	b.n	8003540 <UART_SetConfig+0x284>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a59      	ldr	r2, [pc, #356]	; (80035b4 <UART_SetConfig+0x2f8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d120      	bne.n	8003494 <UART_SetConfig+0x1d8>
 8003452:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <UART_SetConfig+0x2ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d00f      	beq.n	8003480 <UART_SetConfig+0x1c4>
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d802      	bhi.n	800346a <UART_SetConfig+0x1ae>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <UART_SetConfig+0x1b8>
 8003468:	e010      	b.n	800348c <UART_SetConfig+0x1d0>
 800346a:	2b80      	cmp	r3, #128	; 0x80
 800346c:	d005      	beq.n	800347a <UART_SetConfig+0x1be>
 800346e:	2bc0      	cmp	r3, #192	; 0xc0
 8003470:	d009      	beq.n	8003486 <UART_SetConfig+0x1ca>
 8003472:	e00b      	b.n	800348c <UART_SetConfig+0x1d0>
 8003474:	2300      	movs	r3, #0
 8003476:	76fb      	strb	r3, [r7, #27]
 8003478:	e062      	b.n	8003540 <UART_SetConfig+0x284>
 800347a:	2302      	movs	r3, #2
 800347c:	76fb      	strb	r3, [r7, #27]
 800347e:	e05f      	b.n	8003540 <UART_SetConfig+0x284>
 8003480:	2304      	movs	r3, #4
 8003482:	76fb      	strb	r3, [r7, #27]
 8003484:	e05c      	b.n	8003540 <UART_SetConfig+0x284>
 8003486:	2308      	movs	r3, #8
 8003488:	76fb      	strb	r3, [r7, #27]
 800348a:	e059      	b.n	8003540 <UART_SetConfig+0x284>
 800348c:	2310      	movs	r3, #16
 800348e:	76fb      	strb	r3, [r7, #27]
 8003490:	bf00      	nop
 8003492:	e055      	b.n	8003540 <UART_SetConfig+0x284>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a47      	ldr	r2, [pc, #284]	; (80035b8 <UART_SetConfig+0x2fc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d124      	bne.n	80034e8 <UART_SetConfig+0x22c>
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <UART_SetConfig+0x2ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ac:	d012      	beq.n	80034d4 <UART_SetConfig+0x218>
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b2:	d802      	bhi.n	80034ba <UART_SetConfig+0x1fe>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <UART_SetConfig+0x20c>
 80034b8:	e012      	b.n	80034e0 <UART_SetConfig+0x224>
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034be:	d006      	beq.n	80034ce <UART_SetConfig+0x212>
 80034c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c4:	d009      	beq.n	80034da <UART_SetConfig+0x21e>
 80034c6:	e00b      	b.n	80034e0 <UART_SetConfig+0x224>
 80034c8:	2300      	movs	r3, #0
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	e038      	b.n	8003540 <UART_SetConfig+0x284>
 80034ce:	2302      	movs	r3, #2
 80034d0:	76fb      	strb	r3, [r7, #27]
 80034d2:	e035      	b.n	8003540 <UART_SetConfig+0x284>
 80034d4:	2304      	movs	r3, #4
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	e032      	b.n	8003540 <UART_SetConfig+0x284>
 80034da:	2308      	movs	r3, #8
 80034dc:	76fb      	strb	r3, [r7, #27]
 80034de:	e02f      	b.n	8003540 <UART_SetConfig+0x284>
 80034e0:	2310      	movs	r3, #16
 80034e2:	76fb      	strb	r3, [r7, #27]
 80034e4:	bf00      	nop
 80034e6:	e02b      	b.n	8003540 <UART_SetConfig+0x284>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <UART_SetConfig+0x2e4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d124      	bne.n	800353c <UART_SetConfig+0x280>
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <UART_SetConfig+0x2ec>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003500:	d012      	beq.n	8003528 <UART_SetConfig+0x26c>
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d802      	bhi.n	800350e <UART_SetConfig+0x252>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <UART_SetConfig+0x260>
 800350c:	e012      	b.n	8003534 <UART_SetConfig+0x278>
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d006      	beq.n	8003522 <UART_SetConfig+0x266>
 8003514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003518:	d009      	beq.n	800352e <UART_SetConfig+0x272>
 800351a:	e00b      	b.n	8003534 <UART_SetConfig+0x278>
 800351c:	2300      	movs	r3, #0
 800351e:	76fb      	strb	r3, [r7, #27]
 8003520:	e00e      	b.n	8003540 <UART_SetConfig+0x284>
 8003522:	2302      	movs	r3, #2
 8003524:	76fb      	strb	r3, [r7, #27]
 8003526:	e00b      	b.n	8003540 <UART_SetConfig+0x284>
 8003528:	2304      	movs	r3, #4
 800352a:	76fb      	strb	r3, [r7, #27]
 800352c:	e008      	b.n	8003540 <UART_SetConfig+0x284>
 800352e:	2308      	movs	r3, #8
 8003530:	76fb      	strb	r3, [r7, #27]
 8003532:	e005      	b.n	8003540 <UART_SetConfig+0x284>
 8003534:	2310      	movs	r3, #16
 8003536:	76fb      	strb	r3, [r7, #27]
 8003538:	bf00      	nop
 800353a:	e001      	b.n	8003540 <UART_SetConfig+0x284>
 800353c:	2310      	movs	r3, #16
 800353e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <UART_SetConfig+0x2e4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f040 8087 	bne.w	800365a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800354c:	7efb      	ldrb	r3, [r7, #27]
 800354e:	2b08      	cmp	r3, #8
 8003550:	d836      	bhi.n	80035c0 <UART_SetConfig+0x304>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0x29c>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	0800357d 	.word	0x0800357d
 800355c:	080035c1 	.word	0x080035c1
 8003560:	08003585 	.word	0x08003585
 8003564:	080035c1 	.word	0x080035c1
 8003568:	0800358b 	.word	0x0800358b
 800356c:	080035c1 	.word	0x080035c1
 8003570:	080035c1 	.word	0x080035c1
 8003574:	080035c1 	.word	0x080035c1
 8003578:	08003593 	.word	0x08003593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357c:	f7ff f914 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 8003580:	6178      	str	r0, [r7, #20]
        break;
 8003582:	e022      	b.n	80035ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <UART_SetConfig+0x300>)
 8003586:	617b      	str	r3, [r7, #20]
        break;
 8003588:	e01f      	b.n	80035ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7ff f877 	bl	800267c <HAL_RCC_GetSysClockFreq>
 800358e:	6178      	str	r0, [r7, #20]
        break;
 8003590:	e01b      	b.n	80035ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	617b      	str	r3, [r7, #20]
        break;
 8003598:	e017      	b.n	80035ca <UART_SetConfig+0x30e>
 800359a:	bf00      	nop
 800359c:	efff69f3 	.word	0xefff69f3
 80035a0:	40008000 	.word	0x40008000
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40004400 	.word	0x40004400
 80035b0:	40004800 	.word	0x40004800
 80035b4:	40004c00 	.word	0x40004c00
 80035b8:	40005000 	.word	0x40005000
 80035bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	76bb      	strb	r3, [r7, #26]
        break;
 80035c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80f1 	beq.w	80037b4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d305      	bcc.n	80035ee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d902      	bls.n	80035f4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	76bb      	strb	r3, [r7, #26]
 80035f2:	e0df      	b.n	80037b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f04f 0400 	mov.w	r4, #0
 8003604:	0214      	lsls	r4, r2, #8
 8003606:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800360a:	020b      	lsls	r3, r1, #8
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6852      	ldr	r2, [r2, #4]
 8003610:	0852      	lsrs	r2, r2, #1
 8003612:	4611      	mov	r1, r2
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	eb13 0b01 	adds.w	fp, r3, r1
 800361c:	eb44 0c02 	adc.w	ip, r4, r2
 8003620:	4658      	mov	r0, fp
 8003622:	4661      	mov	r1, ip
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	461a      	mov	r2, r3
 800362e:	4623      	mov	r3, r4
 8003630:	f7fc fdd2 	bl	80001d8 <__aeabi_uldivmod>
 8003634:	4603      	mov	r3, r0
 8003636:	460c      	mov	r4, r1
 8003638:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003640:	d308      	bcc.n	8003654 <UART_SetConfig+0x398>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003648:	d204      	bcs.n	8003654 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	e0af      	b.n	80037b4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	76bb      	strb	r3, [r7, #26]
 8003658:	e0ac      	b.n	80037b4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003662:	d15b      	bne.n	800371c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003664:	7efb      	ldrb	r3, [r7, #27]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d827      	bhi.n	80036ba <UART_SetConfig+0x3fe>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x3b4>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003695 	.word	0x08003695
 8003674:	0800369d 	.word	0x0800369d
 8003678:	080036a5 	.word	0x080036a5
 800367c:	080036bb 	.word	0x080036bb
 8003680:	080036ab 	.word	0x080036ab
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036bb 	.word	0x080036bb
 800368c:	080036bb 	.word	0x080036bb
 8003690:	080036b3 	.word	0x080036b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7ff f888 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 8003698:	6178      	str	r0, [r7, #20]
        break;
 800369a:	e013      	b.n	80036c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800369c:	f7ff f89a 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 80036a0:	6178      	str	r0, [r7, #20]
        break;
 80036a2:	e00f      	b.n	80036c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <UART_SetConfig+0x510>)
 80036a6:	617b      	str	r3, [r7, #20]
        break;
 80036a8:	e00c      	b.n	80036c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036aa:	f7fe ffe7 	bl	800267c <HAL_RCC_GetSysClockFreq>
 80036ae:	6178      	str	r0, [r7, #20]
        break;
 80036b0:	e008      	b.n	80036c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	e004      	b.n	80036c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	76bb      	strb	r3, [r7, #26]
        break;
 80036c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d074      	beq.n	80037b4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005a      	lsls	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d916      	bls.n	8003716 <UART_SetConfig+0x45a>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d212      	bcs.n	8003716 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f023 030f 	bic.w	r3, r3, #15
 80036f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	b29a      	uxth	r2, r3
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	4313      	orrs	r3, r2
 800370a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	89fa      	ldrh	r2, [r7, #14]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e04e      	b.n	80037b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	76bb      	strb	r3, [r7, #26]
 800371a:	e04b      	b.n	80037b4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800371c:	7efb      	ldrb	r3, [r7, #27]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d827      	bhi.n	8003772 <UART_SetConfig+0x4b6>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0x46c>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003755 	.word	0x08003755
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003773 	.word	0x08003773
 8003738:	08003763 	.word	0x08003763
 800373c:	08003773 	.word	0x08003773
 8003740:	08003773 	.word	0x08003773
 8003744:	08003773 	.word	0x08003773
 8003748:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7ff f82c 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 8003750:	6178      	str	r0, [r7, #20]
        break;
 8003752:	e013      	b.n	800377c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff f83e 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 8003758:	6178      	str	r0, [r7, #20]
        break;
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <UART_SetConfig+0x510>)
 800375e:	617b      	str	r3, [r7, #20]
        break;
 8003760:	e00c      	b.n	800377c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7fe ff8b 	bl	800267c <HAL_RCC_GetSysClockFreq>
 8003766:	6178      	str	r0, [r7, #20]
        break;
 8003768:	e008      	b.n	800377c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	617b      	str	r3, [r7, #20]
        break;
 8003770:	e004      	b.n	800377c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	76bb      	strb	r3, [r7, #26]
        break;
 800377a:	bf00      	nop
    }

    if (pclk != 0U)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d018      	beq.n	80037b4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	085a      	lsrs	r2, r3, #1
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d908      	bls.n	80037b0 <UART_SetConfig+0x4f4>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d204      	bcs.n	80037b0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	e001      	b.n	80037b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80037c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80037cc:	00f42400 	.word	0x00f42400

080037d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ce:	d10a      	bne.n	80038e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003922:	f7fd f99f 	bl	8000c64 <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b08      	cmp	r3, #8
 8003934:	d10e      	bne.n	8003954 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003936:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f82a 	bl	800399e <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e020      	b.n	8003996 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d10e      	bne.n	8003980 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f814 	bl	800399e <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e00a      	b.n	8003996 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ae:	e05d      	b.n	8003a6c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d059      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	f7fd f954 	bl	8000c64 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <UART_WaitOnFlagUntilTimeout+0x30>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11b      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e042      	b.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02b      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d123      	bne.n	8003a6c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e00f      	b.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d092      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4e0d      	ldr	r6, [pc, #52]	; (8003acc <__libc_init_array+0x38>)
 8003a98:	4c0d      	ldr	r4, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9a:	1ba4      	subs	r4, r4, r6
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	42a5      	cmp	r5, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	4e0b      	ldr	r6, [pc, #44]	; (8003ad4 <__libc_init_array+0x40>)
 8003aa6:	4c0c      	ldr	r4, [pc, #48]	; (8003ad8 <__libc_init_array+0x44>)
 8003aa8:	f000 f82c 	bl	8003b04 <_init>
 8003aac:	1ba4      	subs	r4, r4, r6
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	42a5      	cmp	r5, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003abc:	4798      	blx	r3
 8003abe:	3501      	adds	r5, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac6:	4798      	blx	r3
 8003ac8:	3501      	adds	r5, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	08003b74 	.word	0x08003b74
 8003ad0:	08003b74 	.word	0x08003b74
 8003ad4:	08003b74 	.word	0x08003b74
 8003ad8:	08003b78 	.word	0x08003b78

08003adc <memcpy>:
 8003adc:	b510      	push	{r4, lr}
 8003ade:	1e43      	subs	r3, r0, #1
 8003ae0:	440a      	add	r2, r1
 8003ae2:	4291      	cmp	r1, r2
 8003ae4:	d100      	bne.n	8003ae8 <memcpy+0xc>
 8003ae6:	bd10      	pop	{r4, pc}
 8003ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af0:	e7f7      	b.n	8003ae2 <memcpy+0x6>

08003af2 <memset>:
 8003af2:	4402      	add	r2, r0
 8003af4:	4603      	mov	r3, r0
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d100      	bne.n	8003afc <memset+0xa>
 8003afa:	4770      	bx	lr
 8003afc:	f803 1b01 	strb.w	r1, [r3], #1
 8003b00:	e7f9      	b.n	8003af6 <memset+0x4>
	...

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
