/*
 * Dali.h
 *
 *  Created on: Aug 27, 2021
 *      Author: evers
 */

#ifndef SRC_DALI_H_
#define SRC_DALI_H_


// DALI coomands
#define BROADCAST_DP 0b11111110
#define BROADCAST_C 0b11111111
#define ON_DP 0b11111110
#define OFF_DP 0b00000000
#define ON_C 0b00000101
#define OFF_C 0b00000000
# define QUERY_STATUS 0b10010000
# define RESET 0b00100000


//setup timing for transmitter
#define HALF_BIT_INTERVAL 1666





//#if defined(ARDUINO) && ARDUINO >= 100
  //#include "Arduino.h"
//#else
  //#include "WProgram.h"
  //#include <pins_arduino.h>
//#endif

class Dali
{
  public:
	Dali(); //the constructor
    void setupTransmit(uint8_t pin); //set up transmission
	void setupAnalogReceive(uint8_t pin);
    void transmit(uint8_t cmd1, uint8_t cmd2); //transmit 16 bits of data
	void scanShortAdd(); //scan for short address
	void busTest(); // bus test
	void initialisation(); //initialization of new luminaries
	bool cmdCheck(String & input, int & cmd1, int & cmd2);
	uint8_t receive(); //get response

	int minResponseLevel();
	int maxResponseLevel();

    uint8_t speedFactor;
    uint16_t delay1;
    uint16_t delay2;
	uint16_t period;
	String errorMsg; //error message of last operation
	bool msgMode; //0 - get only response from dali bus to COM; 1 - response with text (comments)
	bool getResponse;
	uint8_t RxAnalogPin;

	long daliTimeout = 20000; //us, DALI response timeout
	int analogLevel = 870; //analog border level (less - "0"; more - "1")




  private:

	void sendByte(uint8_t b); //transmit 8 bits of data
	void sendBit(int b); //transmit 1 bit of data
	void sendZero(void); //transmit "0"
    void sendOne(void); //transmit "1"
   	void splitAdd(long input, uint8_t &highbyte, uint8_t &middlebyte, uint8_t &lowbyte); //split random address


	int readBinaryString(char *s);



};//end of class Dali

// Cant really do this as a real C++ class, since we need to have
// an ISR
extern "C"
{
   }

extern Dali dali;

#endif /* SRC_DALI_H_ */
