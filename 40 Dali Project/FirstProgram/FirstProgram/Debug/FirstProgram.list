
FirstProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e8c  08005e8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e94  08005e94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08005f0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005f0c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e56  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f0  00000000  00000000  00030ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028be9  00000000  00000000  00034da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e566  00000000  00000000  0005d989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf27  00000000  00000000  0006beef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169e16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004110  00000000  00000000  00169e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d80 	.word	0x08005d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d80 	.word	0x08005d80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d013      	beq.n	80005a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000588:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000590:	e000      	b.n	8000594 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000592:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800059e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffc7 	bl	8000568 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x16>
  return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fc03 	bl	8000e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f83e 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f952 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 f932 	bl	800086c <MX_DMA_Init>
  MX_ADC1_Init();
 8000608:	f000 f88a 	bl	8000720 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f8fe 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000610:	217f      	movs	r1, #127	; 0x7f
 8000612:	4817      	ldr	r0, [pc, #92]	; (8000670 <main+0x7c>)
 8000614:	f001 ff04 	bl	8002420 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value_adc,1);
 8000618:	2201      	movs	r2, #1
 800061a:	4916      	ldr	r1, [pc, #88]	; (8000674 <main+0x80>)
 800061c:	4814      	ldr	r0, [pc, #80]	; (8000670 <main+0x7c>)
 800061e:	f001 f895 	bl	800174c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f002 fcbc 	bl	8002fa8 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f000 fc5b 	bl	8000eec <HAL_Delay>
	 HAL_ADC_Start(&hadc1);
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x7c>)
 8000638:	f000 ffce 	bl	80015d8 <HAL_ADC_Start>
	 printf ("Analog input = %d\r\n", value_adc);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <main+0x80>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	480d      	ldr	r0, [pc, #52]	; (8000678 <main+0x84>)
 8000644:	f004 fc46 	bl	8004ed4 <iprintf>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f002 fca9 	bl	8002fa8 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f000 fc48 	bl	8000eec <HAL_Delay>
	 HAL_ADC_Start(&hadc1);
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <main+0x7c>)
 800065e:	f000 ffbb 	bl	80015d8 <HAL_ADC_Start>
	 printf ("Analog input = %d\r\n", value_adc);
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <main+0x80>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <main+0x84>)
 800066a:	f004 fc33 	bl	8004ed4 <iprintf>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800066e:	e7d8      	b.n	8000622 <main+0x2e>
 8000670:	20000098 	.word	0x20000098
 8000674:	200000fc 	.word	0x200000fc
 8000678:	08005d98 	.word	0x08005d98

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fc1a 	bl	8004ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a2:	f002 fca7 	bl	8002ff4 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 f974 	bl	8000998 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fcde 	bl	80030a0 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f000 f955 	bl	8000998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f003 f8b0 	bl	800386c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f941 	bl	8000998 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000744:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_ADC1_Init+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_ADC1_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000762:	2204      	movs	r2, #4
 8000764:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_ADC1_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ADC1_Init+0xe0>)
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ADC1_Init+0xe0>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <MX_ADC1_Init+0xe0>)
 80007a4:	f000 fdc2 	bl	800132c <HAL_ADC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ae:	f000 f8f3 	bl	8000998 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <MX_ADC1_Init+0xe0>)
 80007be:	f001 fe8f 	bl	80024e0 <HAL_ADCEx_MultiModeConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c8:	f000 f8e6 	bl	8000998 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_ADC1_Init+0xe8>)
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d0:	2306      	movs	r3, #6
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d8:	237f      	movs	r3, #127	; 0x7f
 80007da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007dc:	2304      	movs	r3, #4
 80007de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_ADC1_Init+0xe0>)
 80007ea:	f001 f881 	bl	80018f0 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007f4:	f000 f8d0 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000098 	.word	0x20000098
 8000804:	50040000 	.word	0x50040000
 8000808:	14f00020 	.word	0x14f00020

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART2_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000850:	f003 fece 	bl	80045f0 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f89d 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000148 	.word	0x20000148
 8000868:	40004400 	.word	0x40004400

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_DMA_Init+0x38>)
 8000874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <MX_DMA_Init+0x38>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6493      	str	r3, [r2, #72]	; 0x48
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_DMA_Init+0x38>)
 8000880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	200b      	movs	r0, #11
 8000890:	f001 ffb1 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000894:	200b      	movs	r0, #11
 8000896:	f001 ffca 	bl	800282e <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a31      	ldr	r2, [pc, #196]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_GPIO_Init+0xe0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_GPIO_Init+0xe0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MX_GPIO_Init+0xe0>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_GPIO_Init+0xe0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f002 fb3e 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_GPIO_Init+0xe4>)
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <MX_GPIO_Init+0xe8>)
 8000942:	f002 f987 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000946:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f002 f977 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_GPIO_Init+0xec>)
 800097a:	f002 f96b 	bl	8002c54 <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	10210000 	.word	0x10210000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	; 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	; 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ac      	sub	sp, #176	; 0xb0
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2288      	movs	r2, #136	; 0x88
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 fa59 	bl	8004ec4 <memset>
  if(hadc->Instance==ADC1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <HAL_ADC_MspInit+0x120>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d172      	bne.n	8000b02 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a32:	2308      	movs	r3, #8
 8000a34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 f913 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a58:	f7ff ff9e 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <HAL_ADC_MspInit+0x124>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a2b      	ldr	r2, [pc, #172]	; (8000b10 <HAL_ADC_MspInit+0x124>)
 8000a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <HAL_ADC_MspInit+0x124>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_ADC_MspInit+0x124>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <HAL_ADC_MspInit+0x124>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <HAL_ADC_MspInit+0x124>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a92:	230b      	movs	r3, #11
 8000a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f002 f8d4 	bl	8002c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000aae:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <HAL_ADC_MspInit+0x12c>)
 8000ab0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000ae8:	f001 febc 	bl	8002864 <HAL_DMA_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000af2:	f7ff ff51 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000afa:	64da      	str	r2, [r3, #76]	; 0x4c
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <HAL_ADC_MspInit+0x128>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	37b0      	adds	r7, #176	; 0xb0
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	50040000 	.word	0x50040000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	20000100 	.word	0x20000100
 8000b18:	40020008 	.word	0x40020008

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0ac      	sub	sp, #176	; 0xb0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2288      	movs	r2, #136	; 0x88
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 f9c1 	bl	8004ec4 <memset>
  if(huart->Instance==USART2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <HAL_UART_MspInit+0xb0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d13b      	bne.n	8000bc4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 f88d 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff ff18 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6593      	str	r3, [r2, #88]	; 0x58
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f002 f848 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	37b0      	adds	r7, #176	; 0xb0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f944 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <DMA1_Channel1_IRQHandler+0x10>)
 8000c2e:	f001 ff31 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000100 	.word	0x20000100

08000c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
	}

return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f004 f8ae 	bl	8004e70 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20018000 	.word	0x20018000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	200001e0 	.word	0x200001e0

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <SystemInit+0x5c>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <SystemInit+0x5c>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <SystemInit+0x60>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a11      	ldr	r2, [pc, #68]	; (8000dac <SystemInit+0x60>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <SystemInit+0x60>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <SystemInit+0x60>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <SystemInit+0x60>)
 8000d78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <SystemInit+0x60>)
 8000d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <SystemInit+0x60>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <SystemInit+0x60>)
 8000d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SystemInit+0x60>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	40021000 	.word	0x40021000

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff ffca 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000db8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dc4:	480a      	ldr	r0, [pc, #40]	; (8000df0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
	ldr	r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <LoopForever+0x16>)
	cmp	r2, r3
 8000dda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f004 f84d 	bl	8004e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fc07 	bl	80005f4 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000dec:	08005e9c 	.word	0x08005e9c
	ldr	r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000df4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000df8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000dfc:	200001e0 	.word	0x200001e0

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>

08000e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 fce7 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f80e 	bl	8000e34 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e001      	b.n	8000e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e24:	f7ff fdbe 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_InitTick+0x70>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fcf3 	bl	800284a <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d809      	bhi.n	8000e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f001 fcbd 	bl	80027f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_InitTick+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200001cc 	.word	0x200001cc

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001cc 	.word	0x200001cc

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3360      	adds	r3, #96	; 0x60
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LL_ADC_SetOffset+0x44>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	03fff000 	.word	0x03fff000

08000fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3360      	adds	r3, #96	; 0x60
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3360      	adds	r3, #96	; 0x60
 8001020:	461a      	mov	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	431a      	orrs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3330      	adds	r3, #48	; 0x30
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	4413      	add	r3, r2
 800108a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	211f      	movs	r1, #31
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	0e9b      	lsrs	r3, r3, #26
 80010a4:	f003 011f 	and.w	r1, r3, #31
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3314      	adds	r3, #20
 80010d4:	461a      	mov	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	0e5b      	lsrs	r3, r3, #25
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	0d1b      	lsrs	r3, r3, #20
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	2107      	movs	r1, #7
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	0d1b      	lsrs	r3, r3, #20
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	431a      	orrs	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0318 	and.w	r3, r3, #24
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001140:	40d9      	lsrs	r1, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	400b      	ands	r3, r1
 8001146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	0007ffff 	.word	0x0007ffff

08001164 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 031f 	and.w	r3, r3, #31
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6093      	str	r3, [r2, #8]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b8:	d101      	bne.n	80011be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001208:	d101      	bne.n	800120e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800122c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	f043 0202 	orr.w	r2, r3, #2
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <LL_ADC_IsEnabled+0x18>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <LL_ADC_IsEnabled+0x1a>
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsDisableOngoing+0x18>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsDisableOngoing+0x1a>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012cc:	f043 0204 	orr.w	r2, r3, #4
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d101      	bne.n	80012f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b08      	cmp	r3, #8
 8001318:	d101      	bne.n	800131e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e136      	b.n	80015b4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fb49 	bl	80009ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff19 	bl	80011a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff feff 	bl	8001180 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff34 	bl	80011f4 <LL_ADC_IsInternalRegulatorEnabled>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff18 	bl	80011cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800139c:	4b87      	ldr	r3, [pc, #540]	; (80015bc <HAL_ADC_Init+0x290>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <HAL_ADC_Init+0x294>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff16 	bl	80011f4 <LL_ADC_IsInternalRegulatorEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff76 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 80013f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80cf 	bne.w	80015a2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 80cb 	bne.w	80015a2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff23 	bl	800126c <LL_ADC_IsEnabled>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d115      	bne.n	8001458 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <HAL_ADC_Init+0x298>)
 800142e:	f7ff ff1d 	bl	800126c <LL_ADC_IsEnabled>
 8001432:	4604      	mov	r4, r0
 8001434:	4864      	ldr	r0, [pc, #400]	; (80015c8 <HAL_ADC_Init+0x29c>)
 8001436:	f7ff ff19 	bl	800126c <LL_ADC_IsEnabled>
 800143a:	4603      	mov	r3, r0
 800143c:	431c      	orrs	r4, r3
 800143e:	4863      	ldr	r0, [pc, #396]	; (80015cc <HAL_ADC_Init+0x2a0>)
 8001440:	f7ff ff14 	bl	800126c <LL_ADC_IsEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	4323      	orrs	r3, r4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4619      	mov	r1, r3
 8001452:	485f      	ldr	r0, [pc, #380]	; (80015d0 <HAL_ADC_Init+0x2a4>)
 8001454:	f7ff fd6e 	bl	8000f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7e5b      	ldrb	r3, [r3, #25]
 800145c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001462:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001468:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800146e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001476:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d106      	bne.n	8001494 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	3b01      	subs	r3, #1
 800148c:	045b      	lsls	r3, r3, #17
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_ADC_Init+0x2a8>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	69b9      	ldr	r1, [r7, #24]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff09 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 80014ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff16 	bl	8001306 <LL_ADC_INJ_IsConversionOngoing>
 80014da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d13d      	bne.n	800155e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d13a      	bne.n	800155e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001504:	f023 0302 	bic.w	r3, r3, #2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	69b9      	ldr	r1, [r7, #24]
 800150e:	430b      	orrs	r3, r1
 8001510:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001518:	2b01      	cmp	r3, #1
 800151a:	d118      	bne.n	800154e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001538:	4311      	orrs	r1, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800153e:	430a      	orrs	r2, r1
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	e007      	b.n	800155e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10c      	bne.n	8001580 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f023 010f 	bic.w	r1, r3, #15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
 800157e:	e007      	b.n	8001590 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 020f 	bic.w	r2, r2, #15
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	f023 0303 	bic.w	r3, r3, #3
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	655a      	str	r2, [r3, #84]	; 0x54
 80015a0:	e007      	b.n	80015b2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3724      	adds	r7, #36	; 0x24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	053e2d63 	.word	0x053e2d63
 80015c4:	50040000 	.word	0x50040000
 80015c8:	50040100 	.word	0x50040100
 80015cc:	50040200 	.word	0x50040200
 80015d0:	50040300 	.word	0x50040300
 80015d4:	fff0c007 	.word	0xfff0c007

080015d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015e0:	4857      	ldr	r0, [pc, #348]	; (8001740 <HAL_ADC_Start+0x168>)
 80015e2:	f7ff fdbf 	bl	8001164 <LL_ADC_GetMultimode>
 80015e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fe77 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 809c 	bne.w	8001732 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_Start+0x30>
 8001604:	2302      	movs	r3, #2
 8001606:	e097      	b.n	8001738 <HAL_ADC_Start+0x160>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fd5d 	bl	80020d0 <ADC_Enable>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 8083 	bne.w	8001728 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a42      	ldr	r2, [pc, #264]	; (8001744 <HAL_ADC_Start+0x16c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d002      	beq.n	8001646 <HAL_ADC_Start+0x6e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	e000      	b.n	8001648 <HAL_ADC_Start+0x70>
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_ADC_Start+0x170>)
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	4293      	cmp	r3, r2
 800164e:	d002      	beq.n	8001656 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166e:	d106      	bne.n	800167e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	f023 0206 	bic.w	r2, r3, #6
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	659a      	str	r2, [r3, #88]	; 0x58
 800167c:	e002      	b.n	8001684 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	221c      	movs	r2, #28
 800168a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <HAL_ADC_Start+0x16c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d002      	beq.n	80016a4 <HAL_ADC_Start+0xcc>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e000      	b.n	80016a6 <HAL_ADC_Start+0xce>
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_ADC_Start+0x170>)
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d008      	beq.n	80016c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d002      	beq.n	80016c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d114      	bne.n	80016ea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fde8 	bl	80012b8 <LL_ADC_REG_StartConversion>
 80016e8:	e025      	b.n	8001736 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_ADC_Start+0x16c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d002      	beq.n	8001706 <HAL_ADC_Start+0x12e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	e000      	b.n	8001708 <HAL_ADC_Start+0x130>
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_ADC_Start+0x170>)
 8001708:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800171e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
 8001726:	e006      	b.n	8001736 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001730:	e001      	b.n	8001736 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001732:	2302      	movs	r3, #2
 8001734:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001736:	7dfb      	ldrb	r3, [r7, #23]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	50040300 	.word	0x50040300
 8001744:	50040100 	.word	0x50040100
 8001748:	50040000 	.word	0x50040000

0800174c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001758:	4850      	ldr	r0, [pc, #320]	; (800189c <HAL_ADC_Start_DMA+0x150>)
 800175a:	f7ff fd03 	bl	8001164 <LL_ADC_GetMultimode>
 800175e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fdbb 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 808e 	bne.w	800188e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADC_Start_DMA+0x34>
 800177c:	2302      	movs	r3, #2
 800177e:	e089      	b.n	8001894 <HAL_ADC_Start_DMA+0x148>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d002      	beq.n	800179a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b09      	cmp	r3, #9
 8001798:	d172      	bne.n	8001880 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fc98 	bl	80020d0 <ADC_Enable>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d165      	bne.n	8001876 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a37      	ldr	r2, [pc, #220]	; (80018a0 <HAL_ADC_Start_DMA+0x154>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d002      	beq.n	80017ce <HAL_ADC_Start_DMA+0x82>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e000      	b.n	80017d0 <HAL_ADC_Start_DMA+0x84>
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_ADC_Start_DMA+0x158>)
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d002      	beq.n	80017de <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f023 0206 	bic.w	r2, r3, #6
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
 8001802:	e002      	b.n	800180a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_ADC_Start_DMA+0x15c>)
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a25      	ldr	r2, [pc, #148]	; (80018ac <HAL_ADC_Start_DMA+0x160>)
 8001818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <HAL_ADC_Start_DMA+0x164>)
 8001820:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	221c      	movs	r2, #28
 8001828:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0210 	orr.w	r2, r2, #16
 8001840:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3340      	adds	r3, #64	; 0x40
 800185c:	4619      	mov	r1, r3
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f001 f8b7 	bl	80029d4 <HAL_DMA_Start_IT>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd22 	bl	80012b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001874:	e00d      	b.n	8001892 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800187e:	e008      	b.n	8001892 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800188c:	e001      	b.n	8001892 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800188e:	2302      	movs	r3, #2
 8001890:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	50040300 	.word	0x50040300
 80018a0:	50040100 	.word	0x50040100
 80018a4:	50040000 	.word	0x50040000
 80018a8:	08002253 	.word	0x08002253
 80018ac:	0800232b 	.word	0x0800232b
 80018b0:	08002347 	.word	0x08002347

080018b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0b6      	sub	sp, #216	; 0xd8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x22>
 800190e:	2302      	movs	r3, #2
 8001910:	e3c7      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x7b2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fcde 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 83a8 	bne.w	800207c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d824      	bhi.n	800197e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	3b02      	subs	r3, #2
 800193a:	2b03      	cmp	r3, #3
 800193c:	d81b      	bhi.n	8001976 <HAL_ADC_ConfigChannel+0x86>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <HAL_ADC_ConfigChannel+0x54>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195d 	.word	0x0800195d
 800194c:	08001965 	.word	0x08001965
 8001950:	0800196d 	.word	0x0800196d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	220c      	movs	r2, #12
 8001958:	605a      	str	r2, [r3, #4]
          break;
 800195a:	e011      	b.n	8001980 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2212      	movs	r2, #18
 8001960:	605a      	str	r2, [r3, #4]
          break;
 8001962:	e00d      	b.n	8001980 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2218      	movs	r2, #24
 8001968:	605a      	str	r2, [r3, #4]
          break;
 800196a:	e009      	b.n	8001980 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001972:	605a      	str	r2, [r3, #4]
          break;
 8001974:	e004      	b.n	8001980 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2206      	movs	r2, #6
 800197a:	605a      	str	r2, [r3, #4]
          break;
 800197c:	e000      	b.n	8001980 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800197e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	f7ff fb6d 	bl	800106c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fca2 	bl	80012e0 <LL_ADC_REG_IsConversionOngoing>
 800199c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fcae 	bl	8001306 <LL_ADC_INJ_IsConversionOngoing>
 80019aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 81a6 	bne.w	8001d04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 81a1 	bne.w	8001d04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f7ff fb78 	bl	80010c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d00a      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6919      	ldr	r1, [r3, #16]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a06:	f7ff fac9 	bl	8000f9c <LL_ADC_SetOffset>
 8001a0a:	e17b      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fae6 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10a      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x148>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fadb 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	f003 021f 	and.w	r2, r3, #31
 8001a36:	e01e      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x186>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fad0 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e004      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x19e>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0e9b      	lsrs	r3, r3, #26
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	e018      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d0>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	e004      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d106      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fa9f 	bl	8001010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fa83 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10a      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x20e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa78 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	0e9b      	lsrs	r3, r3, #26
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	e01e      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x24c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2101      	movs	r1, #1
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa6d 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e004      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x264>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	e018      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x296>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e004      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fa3c 	bl	8001010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fa20 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x2d4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fa15 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 021f 	and.w	r2, r3, #31
 8001bc2:	e01e      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x312>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2102      	movs	r1, #2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fa0a 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e004      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x32a>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	e016      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x358>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e004      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f9db 	bl	8001010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f9bf 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10a      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x396>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2103      	movs	r1, #3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f9b4 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	0e9b      	lsrs	r3, r3, #26
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	e017      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x3c6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f9a9 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e003      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x3de>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0e9b      	lsrs	r3, r3, #26
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	e011      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x402>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e003      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d106      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f986 	bl	8001010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff faaf 	bl	800126c <LL_ADC_IsEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 813f 	bne.w	8001f94 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff f9fa 	bl	800111c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a8e      	ldr	r2, [pc, #568]	; (8001f68 <HAL_ADC_ConfigChannel+0x678>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	f040 8130 	bne.w	8001f94 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10b      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x46c>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0e9b      	lsrs	r3, r3, #26
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	bf94      	ite	ls
 8001d54:	2301      	movls	r3, #1
 8001d56:	2300      	movhi	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e019      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x4a0>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	bf94      	ite	ls
 8001d8a:	2301      	movls	r3, #1
 8001d8c:	2300      	movhi	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d079      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x4c0>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	3301      	adds	r3, #1
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dae:	e015      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x4ec>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x50c>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	3301      	adds	r3, #1
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	e017      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x53c>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e003      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	ea42 0103 	orr.w	r1, r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x562>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	051b      	lsls	r3, r3, #20
 8001e50:	e018      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x594>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e003      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e84:	430b      	orrs	r3, r1
 8001e86:	e080      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x5b4>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea2:	e015      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x5e0>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	e003      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	069b      	lsls	r3, r3, #26
 8001ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x600>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	e017      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x630>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	61fb      	str	r3, [r7, #28]
  return result;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	e003      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	ea42 0103 	orr.w	r1, r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x65c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	051b      	lsls	r3, r3, #20
 8001f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	e01d      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x698>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	613b      	str	r3, [r7, #16]
  return result;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e005      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x684>
 8001f68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b1e      	subs	r3, #30
 8001f82:	051b      	lsls	r3, r3, #20
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6892      	ldr	r2, [r2, #8]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7ff f898 	bl	80010c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <HAL_ADC_ConfigChannel+0x7bc>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d07a      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa0:	4843      	ldr	r0, [pc, #268]	; (80020b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fa2:	f7fe ffed 	bl	8000f80 <LL_ADC_GetCommonPathInternalCh>
 8001fa6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d12c      	bne.n	800200e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d126      	bne.n	800200e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a3c      	ldr	r2, [pc, #240]	; (80020b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_ADC_ConfigChannel+0x6e4>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <HAL_ADC_ConfigChannel+0x7cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d15d      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4834      	ldr	r0, [pc, #208]	; (80020b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fe0:	f7fe ffbb 	bl	8000f5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ffe:	e002      	b.n	8002006 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3b01      	subs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800200c:	e040      	b.n	8002090 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d118      	bne.n	800204a <HAL_ADC_ConfigChannel+0x75a>
 8002018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d112      	bne.n	800204a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_ADC_ConfigChannel+0x7c8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d004      	beq.n	8002038 <HAL_ADC_ConfigChannel+0x748>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_ADC_ConfigChannel+0x7cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d12d      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800203c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002040:	4619      	mov	r1, r3
 8002042:	481b      	ldr	r0, [pc, #108]	; (80020b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002044:	f7fe ff89 	bl	8000f5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002048:	e024      	b.n	8002094 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_ADC_ConfigChannel+0x7dc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d120      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11a      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d115      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800206a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002072:	4619      	mov	r1, r3
 8002074:	480e      	ldr	r0, [pc, #56]	; (80020b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002076:	f7fe ff70 	bl	8000f5a <LL_ADC_SetCommonPathInternalCh>
 800207a:	e00c      	b.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800208e:	e002      	b.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002094:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800209e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	37d8      	adds	r7, #216	; 0xd8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	80080000 	.word	0x80080000
 80020b0:	50040300 	.word	0x50040300
 80020b4:	c7520000 	.word	0xc7520000
 80020b8:	50040000 	.word	0x50040000
 80020bc:	50040200 	.word	0x50040200
 80020c0:	20000000 	.word	0x20000000
 80020c4:	053e2d63 	.word	0x053e2d63
 80020c8:	cb840000 	.word	0xcb840000
 80020cc:	80000001 	.word	0x80000001

080020d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f8c5 	bl	800126c <LL_ADC_IsEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d14d      	bne.n	8002184 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <ADC_Enable+0xc0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e039      	b.n	8002186 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f880 	bl	800121c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800211c:	f7fe feda 	bl	8000ed4 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002122:	e028      	b.n	8002176 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f89f 	bl	800126c <LL_ADC_IsEnabled>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff f86f 	bl	800121c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800213e:	f7fe fec9 	bl	8000ed4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d914      	bls.n	8002176 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d00d      	beq.n	8002176 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e007      	b.n	8002186 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d1cf      	bne.n	8002124 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	8000003f 	.word	0x8000003f

08002194 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f876 	bl	8001292 <LL_ADC_IsDisableOngoing>
 80021a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f85d 	bl	800126c <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d047      	beq.n	8002248 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d144      	bne.n	8002248 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030d 	and.w	r3, r3, #13
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10c      	bne.n	80021e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f837 	bl	8001244 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2203      	movs	r2, #3
 80021dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021de:	f7fe fe79 	bl	8000ed4 <HAL_GetTick>
 80021e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021e4:	e029      	b.n	800223a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e023      	b.n	800224a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002202:	f7fe fe67 	bl	8000ed4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d914      	bls.n	800223a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1dc      	bne.n	8002202 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002268:	2b00      	cmp	r3, #0
 800226a:	d14b      	bne.n	8002304 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d021      	beq.n	80022ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fedb 	bl	8001046 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d032      	beq.n	80022fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d12b      	bne.n	80022fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11f      	bne.n	80022fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
 80022c8:	e018      	b.n	80022fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fad9 	bl	80018b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002302:	e00e      	b.n	8002322 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff fae3 	bl	80018dc <HAL_ADC_ErrorCallback>
}
 8002316:	e004      	b.n	8002322 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff fac5 	bl	80018c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff fab5 	bl	80018dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <LL_ADC_IsEnabled>:
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <LL_ADC_IsEnabled+0x18>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_ADC_IsEnabled+0x1a>
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_StartCalibration>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80023b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023bc:	4313      	orrs	r3, r2
 80023be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_ADC_IsCalibrationOnGoing>:
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e6:	d101      	bne.n	80023ec <LL_ADC_IsCalibrationOnGoing+0x1a>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_ADC_IsCalibrationOnGoing+0x1c>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_ADC_REG_IsConversionOngoing>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d101      	bne.n	8002412 <LL_ADC_REG_IsConversionOngoing+0x18>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_ADCEx_Calibration_Start+0x1c>
 8002438:	2302      	movs	r3, #2
 800243a:	e04d      	b.n	80024d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fea5 	bl	8002194 <ADC_Disable>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d136      	bne.n	80024c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800245c:	f023 0302 	bic.w	r3, r3, #2
 8002460:	f043 0202 	orr.w	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff96 	bl	80023a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002474:	e014      	b.n	80024a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3301      	adds	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002482:	d30d      	bcc.n	80024a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f023 0312 	bic.w	r3, r3, #18
 800248c:	f043 0210 	orr.w	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e01b      	b.n	80024d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff94 	bl	80023d2 <LL_ADC_IsCalibrationOnGoing>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e2      	bne.n	8002476 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f023 0303 	bic.w	r3, r3, #3
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
 80024c0:	e005      	b.n	80024ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0210 	orr.w	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b09f      	sub	sp, #124	; 0x7c
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e093      	b.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002506:	2300      	movs	r3, #0
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800250a:	2300      	movs	r3, #0
 800250c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d102      	bne.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	e001      	b.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e072      	b.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff59 	bl	80023fa <LL_ADC_REG_IsConversionOngoing>
 8002548:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff53 	bl	80023fa <LL_ADC_REG_IsConversionOngoing>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d154      	bne.n	8002604 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800255a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255c:	2b00      	cmp	r3, #0
 800255e:	d151      	bne.n	8002604 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002562:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02c      	beq.n	80025c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800257e:	035b      	lsls	r3, r3, #13
 8002580:	430b      	orrs	r3, r1
 8002582:	431a      	orrs	r2, r3
 8002584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002586:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002588:	4829      	ldr	r0, [pc, #164]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800258a:	f7ff fef6 	bl	800237a <LL_ADC_IsEnabled>
 800258e:	4604      	mov	r4, r0
 8002590:	4828      	ldr	r0, [pc, #160]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002592:	f7ff fef2 	bl	800237a <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	431c      	orrs	r4, r3
 800259a:	4828      	ldr	r0, [pc, #160]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800259c:	f7ff feed 	bl	800237a <LL_ADC_IsEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4323      	orrs	r3, r4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d137      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025b0:	f023 030f 	bic.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	6811      	ldr	r1, [r2, #0]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	6892      	ldr	r2, [r2, #8]
 80025bc:	430a      	orrs	r2, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025c4:	e028      	b.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d2:	4817      	ldr	r0, [pc, #92]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025d4:	f7ff fed1 	bl	800237a <LL_ADC_IsEnabled>
 80025d8:	4604      	mov	r4, r0
 80025da:	4816      	ldr	r0, [pc, #88]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025dc:	f7ff fecd 	bl	800237a <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	431c      	orrs	r4, r3
 80025e4:	4815      	ldr	r0, [pc, #84]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025e6:	f7ff fec8 	bl	800237a <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4323      	orrs	r3, r4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d112      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025fa:	f023 030f 	bic.w	r3, r3, #15
 80025fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002600:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002602:	e009      	b.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002616:	e000      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002618:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002622:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002626:	4618      	mov	r0, r3
 8002628:	377c      	adds	r7, #124	; 0x7c
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	50040000 	.word	0x50040000
 8002634:	50040100 	.word	0x50040100
 8002638:	50040300 	.word	0x50040300
 800263c:	50040200 	.word	0x50040200

08002640 <__NVIC_SetPriorityGrouping>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e098      	b.n	80029a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <HAL_DMA_Init+0x150>)
 800287e:	429a      	cmp	r2, r3
 8002880:	d80f      	bhi.n	80028a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_DMA_Init+0x154>)
 800288a:	4413      	add	r3, r2
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_DMA_Init+0x158>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a48      	ldr	r2, [pc, #288]	; (80029c0 <HAL_DMA_Init+0x15c>)
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
 80028a0:	e00e      	b.n	80028c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_DMA_Init+0x160>)
 80028aa:	4413      	add	r3, r2
 80028ac:	4a43      	ldr	r2, [pc, #268]	; (80029bc <HAL_DMA_Init+0x158>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <HAL_DMA_Init+0x164>)
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800291a:	d039      	beq.n	8002990 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <HAL_DMA_Init+0x15c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d11a      	bne.n	800295c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_DMA_Init+0x168>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f003 031c 	and.w	r3, r3, #28
 8002932:	210f      	movs	r1, #15
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4924      	ldr	r1, [pc, #144]	; (80029cc <HAL_DMA_Init+0x168>)
 800293c:	4013      	ands	r3, r2
 800293e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_DMA_Init+0x168>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f003 031c 	and.w	r3, r3, #28
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	491d      	ldr	r1, [pc, #116]	; (80029cc <HAL_DMA_Init+0x168>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
 800295a:	e019      	b.n	8002990 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_DMA_Init+0x16c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	f003 031c 	and.w	r3, r3, #28
 8002968:	210f      	movs	r1, #15
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	4917      	ldr	r1, [pc, #92]	; (80029d0 <HAL_DMA_Init+0x16c>)
 8002972:	4013      	ands	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_DMA_Init+0x16c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f003 031c 	and.w	r3, r3, #28
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	4911      	ldr	r1, [pc, #68]	; (80029d0 <HAL_DMA_Init+0x16c>)
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40020407 	.word	0x40020407
 80029b8:	bffdfff8 	.word	0xbffdfff8
 80029bc:	cccccccd 	.word	0xcccccccd
 80029c0:	40020000 	.word	0x40020000
 80029c4:	bffdfbf8 	.word	0xbffdfbf8
 80029c8:	40020400 	.word	0x40020400
 80029cc:	400200a8 	.word	0x400200a8
 80029d0:	400204a8 	.word	0x400204a8

080029d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Start_IT+0x20>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e04b      	b.n	8002a8c <HAL_DMA_Start_IT+0xb8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d13a      	bne.n	8002a7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f8e0 	bl	8002bf2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 020e 	orr.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00f      	b.n	8002a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 020a 	orr.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f003 031c 	and.w	r3, r3, #28
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d026      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x7a>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d021      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	f003 021c 	and.w	r2, r3, #28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	2104      	movs	r1, #4
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d071      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	e06c      	b.n	8002be8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f003 031c 	and.w	r3, r3, #28
 8002b16:	2202      	movs	r2, #2
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d02e      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xec>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d029      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 020a 	bic.w	r2, r2, #10
 8002b48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f003 021c 	and.w	r2, r3, #28
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2102      	movs	r1, #2
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d038      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b7e:	e033      	b.n	8002be8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f003 031c 	and.w	r3, r3, #28
 8002b88:	2208      	movs	r2, #8
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02a      	beq.n	8002bea <HAL_DMA_IRQHandler+0x156>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d025      	beq.n	8002bea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020e 	bic.w	r2, r2, #14
 8002bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f003 021c 	and.w	r2, r3, #28
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
}
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	f003 021c 	and.w	r2, r3, #28
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d108      	bne.n	8002c36 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c34:	e007      	b.n	8002c46 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e17f      	b.n	8002f64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8171 	beq.w	8002f5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d00b      	beq.n	8002c9c <HAL_GPIO_Init+0x48>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d007      	beq.n	8002c9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c90:	2b11      	cmp	r3, #17
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b12      	cmp	r3, #18
 8002c9a:	d130      	bne.n	8002cfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0201 	and.w	r2, r3, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d118      	bne.n	8002d3c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d10:	2201      	movs	r2, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	08db      	lsrs	r3, r3, #3
 8002d26:	f003 0201 	and.w	r2, r3, #1
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x128>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b12      	cmp	r3, #18
 8002d7a:	d123      	bne.n	8002dc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	6939      	ldr	r1, [r7, #16]
 8002dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ac 	beq.w	8002f5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	4b5f      	ldr	r3, [pc, #380]	; (8002f84 <HAL_GPIO_Init+0x330>)
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	4a5e      	ldr	r2, [pc, #376]	; (8002f84 <HAL_GPIO_Init+0x330>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6613      	str	r3, [r2, #96]	; 0x60
 8002e12:	4b5c      	ldr	r3, [pc, #368]	; (8002f84 <HAL_GPIO_Init+0x330>)
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e1e:	4a5a      	ldr	r2, [pc, #360]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e48:	d025      	beq.n	8002e96 <HAL_GPIO_Init+0x242>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4f      	ldr	r2, [pc, #316]	; (8002f8c <HAL_GPIO_Init+0x338>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <HAL_GPIO_Init+0x23e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4e      	ldr	r2, [pc, #312]	; (8002f90 <HAL_GPIO_Init+0x33c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d019      	beq.n	8002e8e <HAL_GPIO_Init+0x23a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4d      	ldr	r2, [pc, #308]	; (8002f94 <HAL_GPIO_Init+0x340>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0x236>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_GPIO_Init+0x344>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00d      	beq.n	8002e86 <HAL_GPIO_Init+0x232>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_GPIO_Init+0x348>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_GPIO_Init+0x22e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <HAL_GPIO_Init+0x34c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_GPIO_Init+0x22a>
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	e00c      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	e00a      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e82:	2305      	movs	r3, #5
 8002e84:	e008      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x244>
 8002e96:	2300      	movs	r3, #0
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	f002 0203 	and.w	r2, r2, #3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4093      	lsls	r3, r2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ea8:	4937      	ldr	r1, [pc, #220]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eda:	4a32      	ldr	r2, [pc, #200]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <HAL_GPIO_Init+0x350>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	3301      	adds	r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f47f ae78 	bne.w	8002c64 <HAL_GPIO_Init+0x10>
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	48000400 	.word	0x48000400
 8002f90:	48000800 	.word	0x48000800
 8002f94:	48000c00 	.word	0x48000c00
 8002f98:	48001000 	.word	0x48001000
 8002f9c:	48001400 	.word	0x48001400
 8002fa0:	48001800 	.word	0x48001800
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003002:	d130      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003010:	d038      	beq.n	8003084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2232      	movs	r2, #50	; 0x32
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	3301      	adds	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003038:	e002      	b.n	8003040 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3b01      	subs	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304c:	d102      	bne.n	8003054 <HAL_PWREx_ControlVoltageScaling+0x60>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f2      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d110      	bne.n	8003084 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e00f      	b.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d007      	beq.n	8003084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800307c:	4a05      	ldr	r2, [pc, #20]	; (8003094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003082:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40007000 	.word	0x40007000
 8003098:	20000000 	.word	0x20000000
 800309c:	431bde83 	.word	0x431bde83

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e3d4      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b2:	4ba1      	ldr	r3, [pc, #644]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030bc:	4b9e      	ldr	r3, [pc, #632]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80e4 	beq.w	800329c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <HAL_RCC_OscConfig+0x4a>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	f040 808b 	bne.w	80031f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f040 8087 	bne.w	80031f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ea:	4b93      	ldr	r3, [pc, #588]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e3ac      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	4b8c      	ldr	r3, [pc, #560]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCC_OscConfig+0x7c>
 8003112:	4b89      	ldr	r3, [pc, #548]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311a:	e005      	b.n	8003128 <HAL_RCC_OscConfig+0x88>
 800311c:	4b86      	ldr	r3, [pc, #536]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003128:	4293      	cmp	r3, r2
 800312a:	d223      	bcs.n	8003174 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fd41 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e38d      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003140:	4b7d      	ldr	r3, [pc, #500]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7c      	ldr	r2, [pc, #496]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b7a      	ldr	r3, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4977      	ldr	r1, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315e:	4b76      	ldr	r3, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	4972      	ldr	r1, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
 8003172:	e025      	b.n	80031c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6f      	ldr	r2, [pc, #444]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	496a      	ldr	r1, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003192:	4b69      	ldr	r3, [pc, #420]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	4965      	ldr	r1, [pc, #404]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fd01 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e34d      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c0:	f000 fc36 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b5c      	ldr	r3, [pc, #368]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	495a      	ldr	r1, [pc, #360]	; (800333c <HAL_RCC_OscConfig+0x29c>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	4a58      	ldr	r2, [pc, #352]	; (8003340 <HAL_RCC_OscConfig+0x2a0>)
 80031de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031e0:	4b58      	ldr	r3, [pc, #352]	; (8003344 <HAL_RCC_OscConfig+0x2a4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fe25 	bl	8000e34 <HAL_InitTick>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d052      	beq.n	800329a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	e331      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d032      	beq.n	8003266 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003200:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800320c:	f7fd fe62 	bl	8000ed4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003214:	f7fd fe5e 	bl	8000ed4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e31a      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003232:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a40      	ldr	r2, [pc, #256]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	493b      	ldr	r1, [pc, #236]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003250:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	4936      	ldr	r1, [pc, #216]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
 8003264:	e01a      	b.n	800329c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003266:	4b34      	ldr	r3, [pc, #208]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a33      	ldr	r2, [pc, #204]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003272:	f7fd fe2f 	bl	8000ed4 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800327a:	f7fd fe2b 	bl	8000ed4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e2e7      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x1da>
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800329a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d074      	beq.n	8003392 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x21a>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d10e      	bne.n	80032d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d10b      	bne.n	80032d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d064      	beq.n	8003390 <HAL_RCC_OscConfig+0x2f0>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d160      	bne.n	8003390 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e2c4      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x24a>
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e01d      	b.n	8003326 <HAL_RCC_OscConfig+0x286>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f2:	d10c      	bne.n	800330e <HAL_RCC_OscConfig+0x26e>
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 80032fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	e00b      	b.n	8003326 <HAL_RCC_OscConfig+0x286>
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_RCC_OscConfig+0x298>)
 8003320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01c      	beq.n	8003368 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd fdd1 	bl	8000ed4 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003334:	e011      	b.n	800335a <HAL_RCC_OscConfig+0x2ba>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	08005dac 	.word	0x08005dac
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fd fdc4 	bl	8000ed4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e280      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335a:	4baf      	ldr	r3, [pc, #700]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x2a8>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fdb4 	bl	8000ed4 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fd fdb0 	bl	8000ed4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e26c      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003382:	4ba5      	ldr	r3, [pc, #660]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d0>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d060      	beq.n	8003460 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_OscConfig+0x310>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d119      	bne.n	80033de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d116      	bne.n	80033de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b0:	4b99      	ldr	r3, [pc, #612]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_OscConfig+0x328>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e249      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b93      	ldr	r3, [pc, #588]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4990      	ldr	r1, [pc, #576]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033dc:	e040      	b.n	8003460 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d023      	beq.n	800342e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e6:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a8b      	ldr	r2, [pc, #556]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fd fd6f 	bl	8000ed4 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fa:	f7fd fd6b 	bl	8000ed4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e227      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340c:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b7f      	ldr	r3, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	497c      	ldr	r1, [pc, #496]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e018      	b.n	8003460 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342e:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a79      	ldr	r2, [pc, #484]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd fd4b 	bl	8000ed4 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd fd47 	bl	8000ed4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e203      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003454:	4b70      	ldr	r3, [pc, #448]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d03c      	beq.n	80034e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01c      	beq.n	80034ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	4a67      	ldr	r2, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fd fd26 	bl	8000ed4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fd fd22 	bl	8000ed4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e1de      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800349e:	4b5e      	ldr	r3, [pc, #376]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ef      	beq.n	800348c <HAL_RCC_OscConfig+0x3ec>
 80034ac:	e01b      	b.n	80034e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ae:	4b5a      	ldr	r3, [pc, #360]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7fd fd09 	bl	8000ed4 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c6:	f7fd fd05 	bl	8000ed4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1c1      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d8:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ef      	bne.n	80034c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80a6 	beq.w	8003640 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f8:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	4a43      	ldr	r2, [pc, #268]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	6593      	str	r3, [r2, #88]	; 0x58
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCC_OscConfig+0x57c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d118      	bne.n	800355e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_OscConfig+0x57c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a3a      	ldr	r2, [pc, #232]	; (800361c <HAL_RCC_OscConfig+0x57c>)
 8003532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003538:	f7fd fccc 	bl	8000ed4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7fd fcc8 	bl	8000ed4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e184      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003552:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_RCC_OscConfig+0x57c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d108      	bne.n	8003578 <HAL_RCC_OscConfig+0x4d8>
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003576:	e024      	b.n	80035c2 <HAL_RCC_OscConfig+0x522>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d110      	bne.n	80035a2 <HAL_RCC_OscConfig+0x502>
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	4a24      	ldr	r2, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a0:	e00f      	b.n	80035c2 <HAL_RCC_OscConfig+0x522>
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b2:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7fd fc83 	bl	8000ed4 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fd fc7f 	bl	8000ed4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e139      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x578>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ed      	beq.n	80035d2 <HAL_RCC_OscConfig+0x532>
 80035f6:	e01a      	b.n	800362e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fd fc6c 	bl	8000ed4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035fe:	e00f      	b.n	8003620 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd fc68 	bl	8000ed4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d906      	bls.n	8003620 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e122      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003620:	4b90      	ldr	r3, [pc, #576]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e8      	bne.n	8003600 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b8b      	ldr	r3, [pc, #556]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	4a8a      	ldr	r2, [pc, #552]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8108 	beq.w	800385a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	2b02      	cmp	r3, #2
 8003650:	f040 80d0 	bne.w	80037f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003654:	4b83      	ldr	r3, [pc, #524]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	429a      	cmp	r2, r3
 8003666:	d130      	bne.n	80036ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	3b01      	subs	r3, #1
 8003674:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d127      	bne.n	80036ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d11f      	bne.n	80036ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003694:	2a07      	cmp	r2, #7
 8003696:	bf14      	ite	ne
 8003698:	2201      	movne	r2, #1
 800369a:	2200      	moveq	r2, #0
 800369c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800369e:	4293      	cmp	r3, r2
 80036a0:	d113      	bne.n	80036ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	3b01      	subs	r3, #1
 80036c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d06e      	beq.n	80037a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	d069      	beq.n	80037a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036d0:	4b64      	ldr	r3, [pc, #400]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036dc:	4b61      	ldr	r3, [pc, #388]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b7      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036ec:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5c      	ldr	r2, [pc, #368]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f8:	f7fd fbec 	bl	8000ed4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fd fbe8 	bl	8000ed4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e0a4      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003712:	4b54      	ldr	r3, [pc, #336]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371e:	4b51      	ldr	r3, [pc, #324]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	4b51      	ldr	r3, [pc, #324]	; (8003868 <HAL_RCC_OscConfig+0x7c8>)
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800372e:	3a01      	subs	r2, #1
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	4311      	orrs	r1, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003738:	0212      	lsls	r2, r2, #8
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003740:	0852      	lsrs	r2, r2, #1
 8003742:	3a01      	subs	r2, #1
 8003744:	0552      	lsls	r2, r2, #21
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800374c:	0852      	lsrs	r2, r2, #1
 800374e:	3a01      	subs	r2, #1
 8003750:	0652      	lsls	r2, r2, #25
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003758:	0912      	lsrs	r2, r2, #4
 800375a:	0452      	lsls	r2, r2, #17
 800375c:	430a      	orrs	r2, r1
 800375e:	4941      	ldr	r1, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003764:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003770:	4b3c      	ldr	r3, [pc, #240]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800377c:	f7fd fbaa 	bl	8000ed4 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fba6 	bl	8000ed4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e062      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a2:	e05a      	b.n	800385a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e059      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d152      	bne.n	800385a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a27      	ldr	r2, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037cc:	f7fd fb82 	bl	8000ed4 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fb7e 	bl	8000ed4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e03a      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x734>
 80037f2:	e032      	b.n	800385a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d02d      	beq.n	8003856 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003804:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003818:	f023 0303 	bic.w	r3, r3, #3
 800381c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 8003824:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd fb51 	bl	8000ed4 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003836:	f7fd fb4d 	bl	8000ed4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e009      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_OscConfig+0x7c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x796>
 8003854:	e001      	b.n	800385a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	f99d808c 	.word	0xf99d808c

0800386c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0c8      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d910      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b63      	ldr	r3, [pc, #396]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4961      	ldr	r1, [pc, #388]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b0      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d04c      	beq.n	8003956 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c4:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d121      	bne.n	8003914 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e09e      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d107      	bne.n	80038ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038dc:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d115      	bne.n	8003914 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e092      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f4:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e086      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e07e      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 0203 	bic.w	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003926:	f7fd fad5 	bl	8000ed4 <HAL_GetTick>
 800392a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392c:	e00a      	b.n	8003944 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392e:	f7fd fad1 	bl	8000ed4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e066      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 020c 	and.w	r2, r3, #12
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	429a      	cmp	r2, r3
 8003954:	d1eb      	bne.n	800392e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	492c      	ldr	r1, [pc, #176]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d210      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	4924      	ldr	r1, [pc, #144]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_ClockConfig+0x1b0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e036      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4918      	ldr	r1, [pc, #96]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4910      	ldr	r1, [pc, #64]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e2:	f000 f825 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_RCC_ClockConfig+0x1b4>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490c      	ldr	r1, [pc, #48]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fa14 	bl	8000e34 <HAL_InitTick>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a10:	7afb      	ldrb	r3, [r7, #11]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08005dac 	.word	0x08005dac
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d121      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11e      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e004      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d134      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xac>
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad8:	617b      	str	r3, [r7, #20]
      break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ade:	617b      	str	r3, [r7, #20]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	617b      	str	r3, [r7, #20]
      break;
 8003ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	3301      	adds	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	fb02 f203 	mul.w	r2, r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0e5b      	lsrs	r3, r3, #25
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b28:	69bb      	ldr	r3, [r7, #24]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08005dc4 	.word	0x08005dc4
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	007a1200 	.word	0x007a1200

08003b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000000 	.word	0x20000000

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08005dbc 	.word	0x08005dbc

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b90:	f7ff ffda 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0adb      	lsrs	r3, r3, #11
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08005dbc 	.word	0x08005dbc

08003bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff fa02 	bl	8002fd8 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
 8003bd6:	e014      	b.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f9f2 	bl	8002fd8 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d10b      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d919      	bls.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2ba0      	cmp	r3, #160	; 0xa0
 8003c14:	d902      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c16:	2302      	movs	r3, #2
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e013      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e010      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d902      	bls.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c28:	2303      	movs	r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e00a      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d102      	bne.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c34:	2302      	movs	r3, #2
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e004      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d101      	bne.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 0207 	bic.w	r2, r3, #7
 8003c4c:	4909      	ldr	r1, [pc, #36]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40022000 	.word	0x40022000

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d041      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cbc:	4b86      	ldr	r3, [pc, #536]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a85      	ldr	r2, [pc, #532]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fabb 	bl	800424c <RCCEx_PLLSAI1_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fba6 	bl	8004434 <RCCEx_PLLSAI2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cfc:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0a:	4973      	ldr	r1, [pc, #460]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d041      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d2c:	d02a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d32:	d824      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d3e:	d81e      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d010      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d4a:	e018      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d4c:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a61      	ldr	r2, [pc, #388]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d58:	e015      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fa73 	bl	800424c <RCCEx_PLLSAI1_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d6a:	e00c      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3320      	adds	r3, #32
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fb5e 	bl	8004434 <RCCEx_PLLSAI2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	74fb      	strb	r3, [r7, #19]
      break;
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d8c:	4b52      	ldr	r3, [pc, #328]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9a:	494f      	ldr	r1, [pc, #316]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003da2:	e001      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a0 	beq.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df8:	f7fd f86c 	bl	8000ed4 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dfe:	e009      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fd f868 	bl	8000ed4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	74fb      	strb	r3, [r7, #19]
        break;
 8003e12:	e005      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ef      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d15c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e26:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01f      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d019      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd f827 	bl	8000ed4 <HAL_GetTick>
 8003e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fd f823 	bl	8000ed4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d902      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ec      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec6:	4904      	ldr	r1, [pc, #16]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ece:	e009      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee4:	7c7b      	ldrb	r3, [r7, #17]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	4b9e      	ldr	r3, [pc, #632]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	4a9d      	ldr	r2, [pc, #628]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f02:	4b98      	ldr	r3, [pc, #608]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	4994      	ldr	r1, [pc, #592]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f24:	4b8f      	ldr	r3, [pc, #572]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 020c 	bic.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	498c      	ldr	r1, [pc, #560]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f46:	4b87      	ldr	r3, [pc, #540]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	4983      	ldr	r1, [pc, #524]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f68:	4b7e      	ldr	r3, [pc, #504]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	497b      	ldr	r1, [pc, #492]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f8a:	4b76      	ldr	r3, [pc, #472]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	4972      	ldr	r1, [pc, #456]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fac:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	496a      	ldr	r1, [pc, #424]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	4961      	ldr	r1, [pc, #388]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff0:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffe:	4959      	ldr	r1, [pc, #356]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004012:	4b54      	ldr	r3, [pc, #336]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	4950      	ldr	r1, [pc, #320]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004034:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	4948      	ldr	r1, [pc, #288]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004056:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	493f      	ldr	r1, [pc, #252]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d028      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004086:	4937      	ldr	r1, [pc, #220]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004096:	d106      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b32      	ldr	r3, [pc, #200]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a31      	ldr	r2, [pc, #196]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]
 80040a4:	e011      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ae:	d10c      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f8c8 	bl	800424c <RCCEx_PLLSAI1_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d028      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	491f      	ldr	r1, [pc, #124]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f4:	d106      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004100:	60d3      	str	r3, [r2, #12]
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800410c:	d10c      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f899 	bl	800424c <RCCEx_PLLSAI1_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004142:	4908      	ldr	r1, [pc, #32]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004152:	d109      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4a02      	ldr	r2, [pc, #8]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800415e:	60d3      	str	r3, [r2, #12]
 8004160:	e014      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004170:	d10c      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f867 	bl	800424c <RCCEx_PLLSAI1_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004188:	7cfb      	ldrb	r3, [r7, #19]
 800418a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a6:	4928      	ldr	r1, [pc, #160]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	2102      	movs	r1, #2
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f844 	bl	800424c <RCCEx_PLLSAI1_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d014      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	74bb      	strb	r3, [r7, #18]
 80041d2:	e011      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3320      	adds	r3, #32
 80041e2:	2102      	movs	r1, #2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f925 	bl	8004434 <RCCEx_PLLSAI2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004212:	490d      	ldr	r1, [pc, #52]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004236:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800423e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000

0800424c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800425a:	4b75      	ldr	r3, [pc, #468]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d018      	beq.n	8004298 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004266:	4b72      	ldr	r3, [pc, #456]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0203 	and.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d10d      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
       ||
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800427e:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
       ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d047      	beq.n	8004322 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e044      	b.n	8004322 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d018      	beq.n	80042d2 <RCCEx_PLLSAI1_Config+0x86>
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d825      	bhi.n	80042f0 <RCCEx_PLLSAI1_Config+0xa4>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d002      	beq.n	80042ae <RCCEx_PLLSAI1_Config+0x62>
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d009      	beq.n	80042c0 <RCCEx_PLLSAI1_Config+0x74>
 80042ac:	e020      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042ae:	4b60      	ldr	r3, [pc, #384]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11d      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042be:	e01a      	b.n	80042f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042c0:	4b5b      	ldr	r3, [pc, #364]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d116      	bne.n	80042fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d0:	e013      	b.n	80042fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042d2:	4b57      	ldr	r3, [pc, #348]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042de:	4b54      	ldr	r3, [pc, #336]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ee:	e006      	b.n	80042fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e004      	b.n	8004300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042f6:	bf00      	nop
 80042f8:	e002      	b.n	8004300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	430b      	orrs	r3, r1
 800431c:	4944      	ldr	r1, [pc, #272]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d17d      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a40      	ldr	r2, [pc, #256]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004334:	f7fc fdce 	bl	8000ed4 <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800433c:	f7fc fdca 	bl	8000ed4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
        break;
 800434e:	e005      	b.n	800435c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ef      	bne.n	800433c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d160      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d111      	bne.n	800438c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004368:	4b31      	ldr	r3, [pc, #196]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6892      	ldr	r2, [r2, #8]
 8004378:	0211      	lsls	r1, r2, #8
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68d2      	ldr	r2, [r2, #12]
 800437e:	0912      	lsrs	r2, r2, #4
 8004380:	0452      	lsls	r2, r2, #17
 8004382:	430a      	orrs	r2, r1
 8004384:	492a      	ldr	r1, [pc, #168]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	610b      	str	r3, [r1, #16]
 800438a:	e027      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d112      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800439a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6892      	ldr	r2, [r2, #8]
 80043a2:	0211      	lsls	r1, r2, #8
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6912      	ldr	r2, [r2, #16]
 80043a8:	0852      	lsrs	r2, r2, #1
 80043aa:	3a01      	subs	r2, #1
 80043ac:	0552      	lsls	r2, r2, #21
 80043ae:	430a      	orrs	r2, r1
 80043b0:	491f      	ldr	r1, [pc, #124]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	610b      	str	r3, [r1, #16]
 80043b6:	e011      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6892      	ldr	r2, [r2, #8]
 80043c8:	0211      	lsls	r1, r2, #8
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6952      	ldr	r2, [r2, #20]
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0652      	lsls	r2, r2, #25
 80043d4:	430a      	orrs	r2, r1
 80043d6:	4916      	ldr	r1, [pc, #88]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fc fd74 	bl	8000ed4 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043ee:	e009      	b.n	8004404 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f0:	f7fc fd70 	bl	8000ed4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d902      	bls.n	8004404 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	73fb      	strb	r3, [r7, #15]
          break;
 8004402:	e005      	b.n	8004410 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000

08004434 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004442:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800444e:	4b67      	ldr	r3, [pc, #412]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0203 	and.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d10d      	bne.n	800447a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
       ||
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004466:	4b61      	ldr	r3, [pc, #388]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
       ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d047      	beq.n	800450a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	e044      	b.n	800450a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d018      	beq.n	80044ba <RCCEx_PLLSAI2_Config+0x86>
 8004488:	2b03      	cmp	r3, #3
 800448a:	d825      	bhi.n	80044d8 <RCCEx_PLLSAI2_Config+0xa4>
 800448c:	2b01      	cmp	r3, #1
 800448e:	d002      	beq.n	8004496 <RCCEx_PLLSAI2_Config+0x62>
 8004490:	2b02      	cmp	r3, #2
 8004492:	d009      	beq.n	80044a8 <RCCEx_PLLSAI2_Config+0x74>
 8004494:	e020      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004496:	4b55      	ldr	r3, [pc, #340]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11d      	bne.n	80044de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a6:	e01a      	b.n	80044de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b8:	e013      	b.n	80044e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ba:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c6:	4b49      	ldr	r3, [pc, #292]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d6:	e006      	b.n	80044e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e004      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	430b      	orrs	r3, r1
 8004504:	4939      	ldr	r1, [pc, #228]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004506:	4313      	orrs	r3, r2
 8004508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d167      	bne.n	80045e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a35      	ldr	r2, [pc, #212]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fc fcda 	bl	8000ed4 <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004522:	e009      	b.n	8004538 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004524:	f7fc fcd6 	bl	8000ed4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	73fb      	strb	r3, [r7, #15]
        break;
 8004536:	e005      	b.n	8004544 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004538:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ef      	bne.n	8004524 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d14a      	bne.n	80045e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d111      	bne.n	8004574 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6892      	ldr	r2, [r2, #8]
 8004560:	0211      	lsls	r1, r2, #8
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68d2      	ldr	r2, [r2, #12]
 8004566:	0912      	lsrs	r2, r2, #4
 8004568:	0452      	lsls	r2, r2, #17
 800456a:	430a      	orrs	r2, r1
 800456c:	491f      	ldr	r1, [pc, #124]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	614b      	str	r3, [r1, #20]
 8004572:	e011      	b.n	8004598 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800457c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6892      	ldr	r2, [r2, #8]
 8004584:	0211      	lsls	r1, r2, #8
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6912      	ldr	r2, [r2, #16]
 800458a:	0852      	lsrs	r2, r2, #1
 800458c:	3a01      	subs	r2, #1
 800458e:	0652      	lsls	r2, r2, #25
 8004590:	430a      	orrs	r2, r1
 8004592:	4916      	ldr	r1, [pc, #88]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004598:	4b14      	ldr	r3, [pc, #80]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fc fc96 	bl	8000ed4 <HAL_GetTick>
 80045a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045aa:	e009      	b.n	80045c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045ac:	f7fc fc92 	bl	8000ed4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d902      	bls.n	80045c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	73fb      	strb	r3, [r7, #15]
          break;
 80045be:	e005      	b.n	80045cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ef      	beq.n	80045ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4904      	ldr	r1, [pc, #16]	; (80045ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000

080045f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e040      	b.n	8004684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fa82 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f82c 	bl	800468c <UART_SetConfig>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e022      	b.n	8004684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 faaa 	bl	8004ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800465a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800466a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb31 	bl	8004ce4 <UART_CheckIdleState>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4bad      	ldr	r3, [pc, #692]	; (800496c <UART_SetConfig+0x2e0>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4aa2      	ldr	r2, [pc, #648]	; (8004970 <UART_SetConfig+0x2e4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a99      	ldr	r2, [pc, #612]	; (8004974 <UART_SetConfig+0x2e8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d121      	bne.n	8004756 <UART_SetConfig+0xca>
 8004712:	4b99      	ldr	r3, [pc, #612]	; (8004978 <UART_SetConfig+0x2ec>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d817      	bhi.n	8004750 <UART_SetConfig+0xc4>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <UART_SetConfig+0x9c>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004739 	.word	0x08004739
 800472c:	08004745 	.word	0x08004745
 8004730:	0800473f 	.word	0x0800473f
 8004734:	0800474b 	.word	0x0800474b
 8004738:	2301      	movs	r3, #1
 800473a:	76fb      	strb	r3, [r7, #27]
 800473c:	e0e7      	b.n	800490e <UART_SetConfig+0x282>
 800473e:	2302      	movs	r3, #2
 8004740:	76fb      	strb	r3, [r7, #27]
 8004742:	e0e4      	b.n	800490e <UART_SetConfig+0x282>
 8004744:	2304      	movs	r3, #4
 8004746:	76fb      	strb	r3, [r7, #27]
 8004748:	e0e1      	b.n	800490e <UART_SetConfig+0x282>
 800474a:	2308      	movs	r3, #8
 800474c:	76fb      	strb	r3, [r7, #27]
 800474e:	e0de      	b.n	800490e <UART_SetConfig+0x282>
 8004750:	2310      	movs	r3, #16
 8004752:	76fb      	strb	r3, [r7, #27]
 8004754:	e0db      	b.n	800490e <UART_SetConfig+0x282>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a88      	ldr	r2, [pc, #544]	; (800497c <UART_SetConfig+0x2f0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d132      	bne.n	80047c6 <UART_SetConfig+0x13a>
 8004760:	4b85      	ldr	r3, [pc, #532]	; (8004978 <UART_SetConfig+0x2ec>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d828      	bhi.n	80047c0 <UART_SetConfig+0x134>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0xe8>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047c1 	.word	0x080047c1
 800477c:	080047c1 	.word	0x080047c1
 8004780:	080047c1 	.word	0x080047c1
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047c1 	.word	0x080047c1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047c1 	.word	0x080047c1
 8004794:	080047af 	.word	0x080047af
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047bb 	.word	0x080047bb
 80047a8:	2300      	movs	r3, #0
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e0af      	b.n	800490e <UART_SetConfig+0x282>
 80047ae:	2302      	movs	r3, #2
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e0ac      	b.n	800490e <UART_SetConfig+0x282>
 80047b4:	2304      	movs	r3, #4
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e0a9      	b.n	800490e <UART_SetConfig+0x282>
 80047ba:	2308      	movs	r3, #8
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e0a6      	b.n	800490e <UART_SetConfig+0x282>
 80047c0:	2310      	movs	r3, #16
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	e0a3      	b.n	800490e <UART_SetConfig+0x282>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6d      	ldr	r2, [pc, #436]	; (8004980 <UART_SetConfig+0x2f4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d120      	bne.n	8004812 <UART_SetConfig+0x186>
 80047d0:	4b69      	ldr	r3, [pc, #420]	; (8004978 <UART_SetConfig+0x2ec>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047da:	2b30      	cmp	r3, #48	; 0x30
 80047dc:	d013      	beq.n	8004806 <UART_SetConfig+0x17a>
 80047de:	2b30      	cmp	r3, #48	; 0x30
 80047e0:	d814      	bhi.n	800480c <UART_SetConfig+0x180>
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d009      	beq.n	80047fa <UART_SetConfig+0x16e>
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d810      	bhi.n	800480c <UART_SetConfig+0x180>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <UART_SetConfig+0x168>
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d006      	beq.n	8004800 <UART_SetConfig+0x174>
 80047f2:	e00b      	b.n	800480c <UART_SetConfig+0x180>
 80047f4:	2300      	movs	r3, #0
 80047f6:	76fb      	strb	r3, [r7, #27]
 80047f8:	e089      	b.n	800490e <UART_SetConfig+0x282>
 80047fa:	2302      	movs	r3, #2
 80047fc:	76fb      	strb	r3, [r7, #27]
 80047fe:	e086      	b.n	800490e <UART_SetConfig+0x282>
 8004800:	2304      	movs	r3, #4
 8004802:	76fb      	strb	r3, [r7, #27]
 8004804:	e083      	b.n	800490e <UART_SetConfig+0x282>
 8004806:	2308      	movs	r3, #8
 8004808:	76fb      	strb	r3, [r7, #27]
 800480a:	e080      	b.n	800490e <UART_SetConfig+0x282>
 800480c:	2310      	movs	r3, #16
 800480e:	76fb      	strb	r3, [r7, #27]
 8004810:	e07d      	b.n	800490e <UART_SetConfig+0x282>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <UART_SetConfig+0x2f8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d120      	bne.n	800485e <UART_SetConfig+0x1d2>
 800481c:	4b56      	ldr	r3, [pc, #344]	; (8004978 <UART_SetConfig+0x2ec>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004826:	2bc0      	cmp	r3, #192	; 0xc0
 8004828:	d013      	beq.n	8004852 <UART_SetConfig+0x1c6>
 800482a:	2bc0      	cmp	r3, #192	; 0xc0
 800482c:	d814      	bhi.n	8004858 <UART_SetConfig+0x1cc>
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d009      	beq.n	8004846 <UART_SetConfig+0x1ba>
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d810      	bhi.n	8004858 <UART_SetConfig+0x1cc>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <UART_SetConfig+0x1b4>
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d006      	beq.n	800484c <UART_SetConfig+0x1c0>
 800483e:	e00b      	b.n	8004858 <UART_SetConfig+0x1cc>
 8004840:	2300      	movs	r3, #0
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e063      	b.n	800490e <UART_SetConfig+0x282>
 8004846:	2302      	movs	r3, #2
 8004848:	76fb      	strb	r3, [r7, #27]
 800484a:	e060      	b.n	800490e <UART_SetConfig+0x282>
 800484c:	2304      	movs	r3, #4
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	e05d      	b.n	800490e <UART_SetConfig+0x282>
 8004852:	2308      	movs	r3, #8
 8004854:	76fb      	strb	r3, [r7, #27]
 8004856:	e05a      	b.n	800490e <UART_SetConfig+0x282>
 8004858:	2310      	movs	r3, #16
 800485a:	76fb      	strb	r3, [r7, #27]
 800485c:	e057      	b.n	800490e <UART_SetConfig+0x282>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a49      	ldr	r2, [pc, #292]	; (8004988 <UART_SetConfig+0x2fc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d125      	bne.n	80048b4 <UART_SetConfig+0x228>
 8004868:	4b43      	ldr	r3, [pc, #268]	; (8004978 <UART_SetConfig+0x2ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004876:	d017      	beq.n	80048a8 <UART_SetConfig+0x21c>
 8004878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487c:	d817      	bhi.n	80048ae <UART_SetConfig+0x222>
 800487e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004882:	d00b      	beq.n	800489c <UART_SetConfig+0x210>
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d811      	bhi.n	80048ae <UART_SetConfig+0x222>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <UART_SetConfig+0x20a>
 800488e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004892:	d006      	beq.n	80048a2 <UART_SetConfig+0x216>
 8004894:	e00b      	b.n	80048ae <UART_SetConfig+0x222>
 8004896:	2300      	movs	r3, #0
 8004898:	76fb      	strb	r3, [r7, #27]
 800489a:	e038      	b.n	800490e <UART_SetConfig+0x282>
 800489c:	2302      	movs	r3, #2
 800489e:	76fb      	strb	r3, [r7, #27]
 80048a0:	e035      	b.n	800490e <UART_SetConfig+0x282>
 80048a2:	2304      	movs	r3, #4
 80048a4:	76fb      	strb	r3, [r7, #27]
 80048a6:	e032      	b.n	800490e <UART_SetConfig+0x282>
 80048a8:	2308      	movs	r3, #8
 80048aa:	76fb      	strb	r3, [r7, #27]
 80048ac:	e02f      	b.n	800490e <UART_SetConfig+0x282>
 80048ae:	2310      	movs	r3, #16
 80048b0:	76fb      	strb	r3, [r7, #27]
 80048b2:	e02c      	b.n	800490e <UART_SetConfig+0x282>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <UART_SetConfig+0x2e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d125      	bne.n	800490a <UART_SetConfig+0x27e>
 80048be:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <UART_SetConfig+0x2ec>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048cc:	d017      	beq.n	80048fe <UART_SetConfig+0x272>
 80048ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d2:	d817      	bhi.n	8004904 <UART_SetConfig+0x278>
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d8:	d00b      	beq.n	80048f2 <UART_SetConfig+0x266>
 80048da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048de:	d811      	bhi.n	8004904 <UART_SetConfig+0x278>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <UART_SetConfig+0x260>
 80048e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e8:	d006      	beq.n	80048f8 <UART_SetConfig+0x26c>
 80048ea:	e00b      	b.n	8004904 <UART_SetConfig+0x278>
 80048ec:	2300      	movs	r3, #0
 80048ee:	76fb      	strb	r3, [r7, #27]
 80048f0:	e00d      	b.n	800490e <UART_SetConfig+0x282>
 80048f2:	2302      	movs	r3, #2
 80048f4:	76fb      	strb	r3, [r7, #27]
 80048f6:	e00a      	b.n	800490e <UART_SetConfig+0x282>
 80048f8:	2304      	movs	r3, #4
 80048fa:	76fb      	strb	r3, [r7, #27]
 80048fc:	e007      	b.n	800490e <UART_SetConfig+0x282>
 80048fe:	2308      	movs	r3, #8
 8004900:	76fb      	strb	r3, [r7, #27]
 8004902:	e004      	b.n	800490e <UART_SetConfig+0x282>
 8004904:	2310      	movs	r3, #16
 8004906:	76fb      	strb	r3, [r7, #27]
 8004908:	e001      	b.n	800490e <UART_SetConfig+0x282>
 800490a:	2310      	movs	r3, #16
 800490c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <UART_SetConfig+0x2e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	f040 8087 	bne.w	8004a28 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800491a:	7efb      	ldrb	r3, [r7, #27]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d837      	bhi.n	8004990 <UART_SetConfig+0x304>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x29c>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004991 	.word	0x08004991
 8004930:	08004955 	.word	0x08004955
 8004934:	08004991 	.word	0x08004991
 8004938:	0800495b 	.word	0x0800495b
 800493c:	08004991 	.word	0x08004991
 8004940:	08004991 	.word	0x08004991
 8004944:	08004991 	.word	0x08004991
 8004948:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7ff f908 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004950:	6178      	str	r0, [r7, #20]
        break;
 8004952:	e022      	b.n	800499a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <UART_SetConfig+0x300>)
 8004956:	617b      	str	r3, [r7, #20]
        break;
 8004958:	e01f      	b.n	800499a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7ff f869 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 800495e:	6178      	str	r0, [r7, #20]
        break;
 8004960:	e01b      	b.n	800499a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	617b      	str	r3, [r7, #20]
        break;
 8004968:	e017      	b.n	800499a <UART_SetConfig+0x30e>
 800496a:	bf00      	nop
 800496c:	efff69f3 	.word	0xefff69f3
 8004970:	40008000 	.word	0x40008000
 8004974:	40013800 	.word	0x40013800
 8004978:	40021000 	.word	0x40021000
 800497c:	40004400 	.word	0x40004400
 8004980:	40004800 	.word	0x40004800
 8004984:	40004c00 	.word	0x40004c00
 8004988:	40005000 	.word	0x40005000
 800498c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	76bb      	strb	r3, [r7, #26]
        break;
 8004998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80f1 	beq.w	8004b84 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d305      	bcc.n	80049be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d902      	bls.n	80049c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	76bb      	strb	r3, [r7, #26]
 80049c2:	e0df      	b.n	8004b84 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	020b      	lsls	r3, r1, #8
 80049d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049da:	0202      	lsls	r2, r0, #8
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	6849      	ldr	r1, [r1, #4]
 80049e0:	0849      	lsrs	r1, r1, #1
 80049e2:	4608      	mov	r0, r1
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	1814      	adds	r4, r2, r0
 80049ea:	eb43 0501 	adc.w	r5, r3, r1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	4620      	mov	r0, r4
 80049fa:	4629      	mov	r1, r5
 80049fc:	f7fb fc38 	bl	8000270 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d308      	bcc.n	8004a22 <UART_SetConfig+0x396>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d204      	bcs.n	8004a22 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	e0b0      	b.n	8004b84 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	76bb      	strb	r3, [r7, #26]
 8004a26:	e0ad      	b.n	8004b84 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a30:	d15c      	bne.n	8004aec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004a32:	7efb      	ldrb	r3, [r7, #27]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d828      	bhi.n	8004a8a <UART_SetConfig+0x3fe>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x3b4>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a7b 	.word	0x08004a7b
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7ff f87c 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004a68:	6178      	str	r0, [r7, #20]
        break;
 8004a6a:	e013      	b.n	8004a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7ff f88e 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004a70:	6178      	str	r0, [r7, #20]
        break;
 8004a72:	e00f      	b.n	8004a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b49      	ldr	r3, [pc, #292]	; (8004b9c <UART_SetConfig+0x510>)
 8004a76:	617b      	str	r3, [r7, #20]
        break;
 8004a78:	e00c      	b.n	8004a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fe ffd9 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004a7e:	6178      	str	r0, [r7, #20]
        break;
 8004a80:	e008      	b.n	8004a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	617b      	str	r3, [r7, #20]
        break;
 8004a88:	e004      	b.n	8004a94 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	76bb      	strb	r3, [r7, #26]
        break;
 8004a92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d074      	beq.n	8004b84 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005a      	lsls	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	441a      	add	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b0f      	cmp	r3, #15
 8004ab6:	d916      	bls.n	8004ae6 <UART_SetConfig+0x45a>
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abe:	d212      	bcs.n	8004ae6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f023 030f 	bic.w	r3, r3, #15
 8004ac8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	89fa      	ldrh	r2, [r7, #14]
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	e04e      	b.n	8004b84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	76bb      	strb	r3, [r7, #26]
 8004aea:	e04b      	b.n	8004b84 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aec:	7efb      	ldrb	r3, [r7, #27]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d827      	bhi.n	8004b42 <UART_SetConfig+0x4b6>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <UART_SetConfig+0x46c>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b43 	.word	0x08004b43
 8004b08:	08004b33 	.word	0x08004b33
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b43 	.word	0x08004b43
 8004b14:	08004b43 	.word	0x08004b43
 8004b18:	08004b3b 	.word	0x08004b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7ff f820 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004b20:	6178      	str	r0, [r7, #20]
        break;
 8004b22:	e013      	b.n	8004b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7ff f832 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004b28:	6178      	str	r0, [r7, #20]
        break;
 8004b2a:	e00f      	b.n	8004b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <UART_SetConfig+0x510>)
 8004b2e:	617b      	str	r3, [r7, #20]
        break;
 8004b30:	e00c      	b.n	8004b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b32:	f7fe ff7d 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004b36:	6178      	str	r0, [r7, #20]
        break;
 8004b38:	e008      	b.n	8004b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3e:	617b      	str	r3, [r7, #20]
        break;
 8004b40:	e004      	b.n	8004b4c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	76bb      	strb	r3, [r7, #26]
        break;
 8004b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d018      	beq.n	8004b84 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	085a      	lsrs	r2, r3, #1
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	d908      	bls.n	8004b80 <UART_SetConfig+0x4f4>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d204      	bcs.n	8004b80 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	e001      	b.n	8004b84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b90:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bdb0      	pop	{r4, r5, r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	00f42400 	.word	0x00f42400

08004ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9e:	d10a      	bne.n	8004cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf4:	f7fc f8ee 	bl	8000ed4 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d10e      	bne.n	8004d26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f82d 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e023      	b.n	8004d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d10e      	bne.n	8004d52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f817 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00d      	b.n	8004d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	e05e      	b.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d05a      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d90:	f7fc f8a0 	bl	8000ed4 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11b      	bne.n	8004dde <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004db4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e043      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02c      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfa:	d124      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e04:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e14:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e00f      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d091      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <__errno>:
 8004e70:	4b01      	ldr	r3, [pc, #4]	; (8004e78 <__errno+0x8>)
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000000c 	.word	0x2000000c

08004e7c <__libc_init_array>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	4d0d      	ldr	r5, [pc, #52]	; (8004eb4 <__libc_init_array+0x38>)
 8004e80:	4c0d      	ldr	r4, [pc, #52]	; (8004eb8 <__libc_init_array+0x3c>)
 8004e82:	1b64      	subs	r4, r4, r5
 8004e84:	10a4      	asrs	r4, r4, #2
 8004e86:	2600      	movs	r6, #0
 8004e88:	42a6      	cmp	r6, r4
 8004e8a:	d109      	bne.n	8004ea0 <__libc_init_array+0x24>
 8004e8c:	4d0b      	ldr	r5, [pc, #44]	; (8004ebc <__libc_init_array+0x40>)
 8004e8e:	4c0c      	ldr	r4, [pc, #48]	; (8004ec0 <__libc_init_array+0x44>)
 8004e90:	f000 ff76 	bl	8005d80 <_init>
 8004e94:	1b64      	subs	r4, r4, r5
 8004e96:	10a4      	asrs	r4, r4, #2
 8004e98:	2600      	movs	r6, #0
 8004e9a:	42a6      	cmp	r6, r4
 8004e9c:	d105      	bne.n	8004eaa <__libc_init_array+0x2e>
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea4:	4798      	blx	r3
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	e7ee      	b.n	8004e88 <__libc_init_array+0xc>
 8004eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eae:	4798      	blx	r3
 8004eb0:	3601      	adds	r6, #1
 8004eb2:	e7f2      	b.n	8004e9a <__libc_init_array+0x1e>
 8004eb4:	08005e94 	.word	0x08005e94
 8004eb8:	08005e94 	.word	0x08005e94
 8004ebc:	08005e94 	.word	0x08005e94
 8004ec0:	08005e98 	.word	0x08005e98

08004ec4 <memset>:
 8004ec4:	4402      	add	r2, r0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d100      	bne.n	8004ece <memset+0xa>
 8004ecc:	4770      	bx	lr
 8004ece:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed2:	e7f9      	b.n	8004ec8 <memset+0x4>

08004ed4 <iprintf>:
 8004ed4:	b40f      	push	{r0, r1, r2, r3}
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <iprintf+0x2c>)
 8004ed8:	b513      	push	{r0, r1, r4, lr}
 8004eda:	681c      	ldr	r4, [r3, #0]
 8004edc:	b124      	cbz	r4, 8004ee8 <iprintf+0x14>
 8004ede:	69a3      	ldr	r3, [r4, #24]
 8004ee0:	b913      	cbnz	r3, 8004ee8 <iprintf+0x14>
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 f866 	bl	8004fb4 <__sinit>
 8004ee8:	ab05      	add	r3, sp, #20
 8004eea:	9a04      	ldr	r2, [sp, #16]
 8004eec:	68a1      	ldr	r1, [r4, #8]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f983 	bl	80051fc <_vfiprintf_r>
 8004ef6:	b002      	add	sp, #8
 8004ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004efc:	b004      	add	sp, #16
 8004efe:	4770      	bx	lr
 8004f00:	2000000c 	.word	0x2000000c

08004f04 <std>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f12:	6083      	str	r3, [r0, #8]
 8004f14:	8181      	strh	r1, [r0, #12]
 8004f16:	6643      	str	r3, [r0, #100]	; 0x64
 8004f18:	81c2      	strh	r2, [r0, #14]
 8004f1a:	6183      	str	r3, [r0, #24]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	305c      	adds	r0, #92	; 0x5c
 8004f22:	f7ff ffcf 	bl	8004ec4 <memset>
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <std+0x38>)
 8004f28:	6263      	str	r3, [r4, #36]	; 0x24
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <std+0x3c>)
 8004f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <std+0x40>)
 8004f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <std+0x44>)
 8004f34:	6224      	str	r4, [r4, #32]
 8004f36:	6323      	str	r3, [r4, #48]	; 0x30
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	bf00      	nop
 8004f3c:	080057a5 	.word	0x080057a5
 8004f40:	080057c7 	.word	0x080057c7
 8004f44:	080057ff 	.word	0x080057ff
 8004f48:	08005823 	.word	0x08005823

08004f4c <_cleanup_r>:
 8004f4c:	4901      	ldr	r1, [pc, #4]	; (8004f54 <_cleanup_r+0x8>)
 8004f4e:	f000 b8af 	b.w	80050b0 <_fwalk_reent>
 8004f52:	bf00      	nop
 8004f54:	08005afd 	.word	0x08005afd

08004f58 <__sfmoreglue>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	1e4a      	subs	r2, r1, #1
 8004f5c:	2568      	movs	r5, #104	; 0x68
 8004f5e:	4355      	muls	r5, r2
 8004f60:	460e      	mov	r6, r1
 8004f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f66:	f000 f8c5 	bl	80050f4 <_malloc_r>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	b140      	cbz	r0, 8004f80 <__sfmoreglue+0x28>
 8004f6e:	2100      	movs	r1, #0
 8004f70:	e9c0 1600 	strd	r1, r6, [r0]
 8004f74:	300c      	adds	r0, #12
 8004f76:	60a0      	str	r0, [r4, #8]
 8004f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f7c:	f7ff ffa2 	bl	8004ec4 <memset>
 8004f80:	4620      	mov	r0, r4
 8004f82:	bd70      	pop	{r4, r5, r6, pc}

08004f84 <__sfp_lock_acquire>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__sfp_lock_acquire+0x8>)
 8004f86:	f000 b8b3 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	200001d8 	.word	0x200001d8

08004f90 <__sfp_lock_release>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__sfp_lock_release+0x8>)
 8004f92:	f000 b8ae 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004f96:	bf00      	nop
 8004f98:	200001d8 	.word	0x200001d8

08004f9c <__sinit_lock_acquire>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__sinit_lock_acquire+0x8>)
 8004f9e:	f000 b8a7 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200001d3 	.word	0x200001d3

08004fa8 <__sinit_lock_release>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sinit_lock_release+0x8>)
 8004faa:	f000 b8a2 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	200001d3 	.word	0x200001d3

08004fb4 <__sinit>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	f7ff fff0 	bl	8004f9c <__sinit_lock_acquire>
 8004fbc:	69a3      	ldr	r3, [r4, #24]
 8004fbe:	b11b      	cbz	r3, 8004fc8 <__sinit+0x14>
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc4:	f7ff bff0 	b.w	8004fa8 <__sinit_lock_release>
 8004fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <__sinit+0x68>)
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <__sinit+0x6c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	bf04      	itt	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	61a3      	streq	r3, [r4, #24]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f820 	bl	8005024 <__sfp>
 8004fe4:	6060      	str	r0, [r4, #4]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f81c 	bl	8005024 <__sfp>
 8004fec:	60a0      	str	r0, [r4, #8]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 f818 	bl	8005024 <__sfp>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	60e0      	str	r0, [r4, #12]
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	6860      	ldr	r0, [r4, #4]
 8004ffc:	f7ff ff82 	bl	8004f04 <std>
 8005000:	68a0      	ldr	r0, [r4, #8]
 8005002:	2201      	movs	r2, #1
 8005004:	2109      	movs	r1, #9
 8005006:	f7ff ff7d 	bl	8004f04 <std>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	2202      	movs	r2, #2
 800500e:	2112      	movs	r1, #18
 8005010:	f7ff ff78 	bl	8004f04 <std>
 8005014:	2301      	movs	r3, #1
 8005016:	61a3      	str	r3, [r4, #24]
 8005018:	e7d2      	b.n	8004fc0 <__sinit+0xc>
 800501a:	bf00      	nop
 800501c:	08005df4 	.word	0x08005df4
 8005020:	08004f4d 	.word	0x08004f4d

08005024 <__sfp>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	4607      	mov	r7, r0
 8005028:	f7ff ffac 	bl	8004f84 <__sfp_lock_acquire>
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <__sfp+0x84>)
 800502e:	681e      	ldr	r6, [r3, #0]
 8005030:	69b3      	ldr	r3, [r6, #24]
 8005032:	b913      	cbnz	r3, 800503a <__sfp+0x16>
 8005034:	4630      	mov	r0, r6
 8005036:	f7ff ffbd 	bl	8004fb4 <__sinit>
 800503a:	3648      	adds	r6, #72	; 0x48
 800503c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005040:	3b01      	subs	r3, #1
 8005042:	d503      	bpl.n	800504c <__sfp+0x28>
 8005044:	6833      	ldr	r3, [r6, #0]
 8005046:	b30b      	cbz	r3, 800508c <__sfp+0x68>
 8005048:	6836      	ldr	r6, [r6, #0]
 800504a:	e7f7      	b.n	800503c <__sfp+0x18>
 800504c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005050:	b9d5      	cbnz	r5, 8005088 <__sfp+0x64>
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <__sfp+0x88>)
 8005054:	60e3      	str	r3, [r4, #12]
 8005056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800505a:	6665      	str	r5, [r4, #100]	; 0x64
 800505c:	f000 f847 	bl	80050ee <__retarget_lock_init_recursive>
 8005060:	f7ff ff96 	bl	8004f90 <__sfp_lock_release>
 8005064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800506c:	6025      	str	r5, [r4, #0]
 800506e:	61a5      	str	r5, [r4, #24]
 8005070:	2208      	movs	r2, #8
 8005072:	4629      	mov	r1, r5
 8005074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005078:	f7ff ff24 	bl	8004ec4 <memset>
 800507c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005084:	4620      	mov	r0, r4
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005088:	3468      	adds	r4, #104	; 0x68
 800508a:	e7d9      	b.n	8005040 <__sfp+0x1c>
 800508c:	2104      	movs	r1, #4
 800508e:	4638      	mov	r0, r7
 8005090:	f7ff ff62 	bl	8004f58 <__sfmoreglue>
 8005094:	4604      	mov	r4, r0
 8005096:	6030      	str	r0, [r6, #0]
 8005098:	2800      	cmp	r0, #0
 800509a:	d1d5      	bne.n	8005048 <__sfp+0x24>
 800509c:	f7ff ff78 	bl	8004f90 <__sfp_lock_release>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	e7ee      	b.n	8005084 <__sfp+0x60>
 80050a6:	bf00      	nop
 80050a8:	08005df4 	.word	0x08005df4
 80050ac:	ffff0001 	.word	0xffff0001

080050b0 <_fwalk_reent>:
 80050b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b4:	4606      	mov	r6, r0
 80050b6:	4688      	mov	r8, r1
 80050b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050bc:	2700      	movs	r7, #0
 80050be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c2:	f1b9 0901 	subs.w	r9, r9, #1
 80050c6:	d505      	bpl.n	80050d4 <_fwalk_reent+0x24>
 80050c8:	6824      	ldr	r4, [r4, #0]
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	d1f7      	bne.n	80050be <_fwalk_reent+0xe>
 80050ce:	4638      	mov	r0, r7
 80050d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d4:	89ab      	ldrh	r3, [r5, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d907      	bls.n	80050ea <_fwalk_reent+0x3a>
 80050da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050de:	3301      	adds	r3, #1
 80050e0:	d003      	beq.n	80050ea <_fwalk_reent+0x3a>
 80050e2:	4629      	mov	r1, r5
 80050e4:	4630      	mov	r0, r6
 80050e6:	47c0      	blx	r8
 80050e8:	4307      	orrs	r7, r0
 80050ea:	3568      	adds	r5, #104	; 0x68
 80050ec:	e7e9      	b.n	80050c2 <_fwalk_reent+0x12>

080050ee <__retarget_lock_init_recursive>:
 80050ee:	4770      	bx	lr

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <_malloc_r>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	1ccd      	adds	r5, r1, #3
 80050f8:	f025 0503 	bic.w	r5, r5, #3
 80050fc:	3508      	adds	r5, #8
 80050fe:	2d0c      	cmp	r5, #12
 8005100:	bf38      	it	cc
 8005102:	250c      	movcc	r5, #12
 8005104:	2d00      	cmp	r5, #0
 8005106:	4606      	mov	r6, r0
 8005108:	db01      	blt.n	800510e <_malloc_r+0x1a>
 800510a:	42a9      	cmp	r1, r5
 800510c:	d903      	bls.n	8005116 <_malloc_r+0x22>
 800510e:	230c      	movs	r3, #12
 8005110:	6033      	str	r3, [r6, #0]
 8005112:	2000      	movs	r0, #0
 8005114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005116:	f000 fda3 	bl	8005c60 <__malloc_lock>
 800511a:	4921      	ldr	r1, [pc, #132]	; (80051a0 <_malloc_r+0xac>)
 800511c:	680a      	ldr	r2, [r1, #0]
 800511e:	4614      	mov	r4, r2
 8005120:	b99c      	cbnz	r4, 800514a <_malloc_r+0x56>
 8005122:	4f20      	ldr	r7, [pc, #128]	; (80051a4 <_malloc_r+0xb0>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	b923      	cbnz	r3, 8005132 <_malloc_r+0x3e>
 8005128:	4621      	mov	r1, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f000 fb2a 	bl	8005784 <_sbrk_r>
 8005130:	6038      	str	r0, [r7, #0]
 8005132:	4629      	mov	r1, r5
 8005134:	4630      	mov	r0, r6
 8005136:	f000 fb25 	bl	8005784 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d123      	bne.n	8005186 <_malloc_r+0x92>
 800513e:	230c      	movs	r3, #12
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	4630      	mov	r0, r6
 8005144:	f000 fd92 	bl	8005c6c <__malloc_unlock>
 8005148:	e7e3      	b.n	8005112 <_malloc_r+0x1e>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	1b5b      	subs	r3, r3, r5
 800514e:	d417      	bmi.n	8005180 <_malloc_r+0x8c>
 8005150:	2b0b      	cmp	r3, #11
 8005152:	d903      	bls.n	800515c <_malloc_r+0x68>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	441c      	add	r4, r3
 8005158:	6025      	str	r5, [r4, #0]
 800515a:	e004      	b.n	8005166 <_malloc_r+0x72>
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	42a2      	cmp	r2, r4
 8005160:	bf0c      	ite	eq
 8005162:	600b      	streq	r3, [r1, #0]
 8005164:	6053      	strne	r3, [r2, #4]
 8005166:	4630      	mov	r0, r6
 8005168:	f000 fd80 	bl	8005c6c <__malloc_unlock>
 800516c:	f104 000b 	add.w	r0, r4, #11
 8005170:	1d23      	adds	r3, r4, #4
 8005172:	f020 0007 	bic.w	r0, r0, #7
 8005176:	1ac2      	subs	r2, r0, r3
 8005178:	d0cc      	beq.n	8005114 <_malloc_r+0x20>
 800517a:	1a1b      	subs	r3, r3, r0
 800517c:	50a3      	str	r3, [r4, r2]
 800517e:	e7c9      	b.n	8005114 <_malloc_r+0x20>
 8005180:	4622      	mov	r2, r4
 8005182:	6864      	ldr	r4, [r4, #4]
 8005184:	e7cc      	b.n	8005120 <_malloc_r+0x2c>
 8005186:	1cc4      	adds	r4, r0, #3
 8005188:	f024 0403 	bic.w	r4, r4, #3
 800518c:	42a0      	cmp	r0, r4
 800518e:	d0e3      	beq.n	8005158 <_malloc_r+0x64>
 8005190:	1a21      	subs	r1, r4, r0
 8005192:	4630      	mov	r0, r6
 8005194:	f000 faf6 	bl	8005784 <_sbrk_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d1dd      	bne.n	8005158 <_malloc_r+0x64>
 800519c:	e7cf      	b.n	800513e <_malloc_r+0x4a>
 800519e:	bf00      	nop
 80051a0:	20000090 	.word	0x20000090
 80051a4:	20000094 	.word	0x20000094

080051a8 <__sfputc_r>:
 80051a8:	6893      	ldr	r3, [r2, #8]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	b410      	push	{r4}
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	da08      	bge.n	80051c6 <__sfputc_r+0x1e>
 80051b4:	6994      	ldr	r4, [r2, #24]
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	db01      	blt.n	80051be <__sfputc_r+0x16>
 80051ba:	290a      	cmp	r1, #10
 80051bc:	d103      	bne.n	80051c6 <__sfputc_r+0x1e>
 80051be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051c2:	f000 bb33 	b.w	800582c <__swbuf_r>
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	1c58      	adds	r0, r3, #1
 80051ca:	6010      	str	r0, [r2, #0]
 80051cc:	7019      	strb	r1, [r3, #0]
 80051ce:	4608      	mov	r0, r1
 80051d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <__sfputs_r>:
 80051d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d8:	4606      	mov	r6, r0
 80051da:	460f      	mov	r7, r1
 80051dc:	4614      	mov	r4, r2
 80051de:	18d5      	adds	r5, r2, r3
 80051e0:	42ac      	cmp	r4, r5
 80051e2:	d101      	bne.n	80051e8 <__sfputs_r+0x12>
 80051e4:	2000      	movs	r0, #0
 80051e6:	e007      	b.n	80051f8 <__sfputs_r+0x22>
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	463a      	mov	r2, r7
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff ffda 	bl	80051a8 <__sfputc_r>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d1f3      	bne.n	80051e0 <__sfputs_r+0xa>
 80051f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051fc <_vfiprintf_r>:
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	460d      	mov	r5, r1
 8005202:	b09d      	sub	sp, #116	; 0x74
 8005204:	4614      	mov	r4, r2
 8005206:	4698      	mov	r8, r3
 8005208:	4606      	mov	r6, r0
 800520a:	b118      	cbz	r0, 8005214 <_vfiprintf_r+0x18>
 800520c:	6983      	ldr	r3, [r0, #24]
 800520e:	b90b      	cbnz	r3, 8005214 <_vfiprintf_r+0x18>
 8005210:	f7ff fed0 	bl	8004fb4 <__sinit>
 8005214:	4b89      	ldr	r3, [pc, #548]	; (800543c <_vfiprintf_r+0x240>)
 8005216:	429d      	cmp	r5, r3
 8005218:	d11b      	bne.n	8005252 <_vfiprintf_r+0x56>
 800521a:	6875      	ldr	r5, [r6, #4]
 800521c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800521e:	07d9      	lsls	r1, r3, #31
 8005220:	d405      	bmi.n	800522e <_vfiprintf_r+0x32>
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	059a      	lsls	r2, r3, #22
 8005226:	d402      	bmi.n	800522e <_vfiprintf_r+0x32>
 8005228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800522a:	f7ff ff61 	bl	80050f0 <__retarget_lock_acquire_recursive>
 800522e:	89ab      	ldrh	r3, [r5, #12]
 8005230:	071b      	lsls	r3, r3, #28
 8005232:	d501      	bpl.n	8005238 <_vfiprintf_r+0x3c>
 8005234:	692b      	ldr	r3, [r5, #16]
 8005236:	b9eb      	cbnz	r3, 8005274 <_vfiprintf_r+0x78>
 8005238:	4629      	mov	r1, r5
 800523a:	4630      	mov	r0, r6
 800523c:	f000 fb5a 	bl	80058f4 <__swsetup_r>
 8005240:	b1c0      	cbz	r0, 8005274 <_vfiprintf_r+0x78>
 8005242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005244:	07dc      	lsls	r4, r3, #31
 8005246:	d50e      	bpl.n	8005266 <_vfiprintf_r+0x6a>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b01d      	add	sp, #116	; 0x74
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	4b7b      	ldr	r3, [pc, #492]	; (8005440 <_vfiprintf_r+0x244>)
 8005254:	429d      	cmp	r5, r3
 8005256:	d101      	bne.n	800525c <_vfiprintf_r+0x60>
 8005258:	68b5      	ldr	r5, [r6, #8]
 800525a:	e7df      	b.n	800521c <_vfiprintf_r+0x20>
 800525c:	4b79      	ldr	r3, [pc, #484]	; (8005444 <_vfiprintf_r+0x248>)
 800525e:	429d      	cmp	r5, r3
 8005260:	bf08      	it	eq
 8005262:	68f5      	ldreq	r5, [r6, #12]
 8005264:	e7da      	b.n	800521c <_vfiprintf_r+0x20>
 8005266:	89ab      	ldrh	r3, [r5, #12]
 8005268:	0598      	lsls	r0, r3, #22
 800526a:	d4ed      	bmi.n	8005248 <_vfiprintf_r+0x4c>
 800526c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800526e:	f7ff ff40 	bl	80050f2 <__retarget_lock_release_recursive>
 8005272:	e7e9      	b.n	8005248 <_vfiprintf_r+0x4c>
 8005274:	2300      	movs	r3, #0
 8005276:	9309      	str	r3, [sp, #36]	; 0x24
 8005278:	2320      	movs	r3, #32
 800527a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800527e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005282:	2330      	movs	r3, #48	; 0x30
 8005284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005448 <_vfiprintf_r+0x24c>
 8005288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800528c:	f04f 0901 	mov.w	r9, #1
 8005290:	4623      	mov	r3, r4
 8005292:	469a      	mov	sl, r3
 8005294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005298:	b10a      	cbz	r2, 800529e <_vfiprintf_r+0xa2>
 800529a:	2a25      	cmp	r2, #37	; 0x25
 800529c:	d1f9      	bne.n	8005292 <_vfiprintf_r+0x96>
 800529e:	ebba 0b04 	subs.w	fp, sl, r4
 80052a2:	d00b      	beq.n	80052bc <_vfiprintf_r+0xc0>
 80052a4:	465b      	mov	r3, fp
 80052a6:	4622      	mov	r2, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7ff ff93 	bl	80051d6 <__sfputs_r>
 80052b0:	3001      	adds	r0, #1
 80052b2:	f000 80aa 	beq.w	800540a <_vfiprintf_r+0x20e>
 80052b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b8:	445a      	add	r2, fp
 80052ba:	9209      	str	r2, [sp, #36]	; 0x24
 80052bc:	f89a 3000 	ldrb.w	r3, [sl]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80a2 	beq.w	800540a <_vfiprintf_r+0x20e>
 80052c6:	2300      	movs	r3, #0
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d0:	f10a 0a01 	add.w	sl, sl, #1
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	9307      	str	r3, [sp, #28]
 80052d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052dc:	931a      	str	r3, [sp, #104]	; 0x68
 80052de:	4654      	mov	r4, sl
 80052e0:	2205      	movs	r2, #5
 80052e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e6:	4858      	ldr	r0, [pc, #352]	; (8005448 <_vfiprintf_r+0x24c>)
 80052e8:	f7fa ff72 	bl	80001d0 <memchr>
 80052ec:	9a04      	ldr	r2, [sp, #16]
 80052ee:	b9d8      	cbnz	r0, 8005328 <_vfiprintf_r+0x12c>
 80052f0:	06d1      	lsls	r1, r2, #27
 80052f2:	bf44      	itt	mi
 80052f4:	2320      	movmi	r3, #32
 80052f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fa:	0713      	lsls	r3, r2, #28
 80052fc:	bf44      	itt	mi
 80052fe:	232b      	movmi	r3, #43	; 0x2b
 8005300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005304:	f89a 3000 	ldrb.w	r3, [sl]
 8005308:	2b2a      	cmp	r3, #42	; 0x2a
 800530a:	d015      	beq.n	8005338 <_vfiprintf_r+0x13c>
 800530c:	9a07      	ldr	r2, [sp, #28]
 800530e:	4654      	mov	r4, sl
 8005310:	2000      	movs	r0, #0
 8005312:	f04f 0c0a 	mov.w	ip, #10
 8005316:	4621      	mov	r1, r4
 8005318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531c:	3b30      	subs	r3, #48	; 0x30
 800531e:	2b09      	cmp	r3, #9
 8005320:	d94e      	bls.n	80053c0 <_vfiprintf_r+0x1c4>
 8005322:	b1b0      	cbz	r0, 8005352 <_vfiprintf_r+0x156>
 8005324:	9207      	str	r2, [sp, #28]
 8005326:	e014      	b.n	8005352 <_vfiprintf_r+0x156>
 8005328:	eba0 0308 	sub.w	r3, r0, r8
 800532c:	fa09 f303 	lsl.w	r3, r9, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	46a2      	mov	sl, r4
 8005336:	e7d2      	b.n	80052de <_vfiprintf_r+0xe2>
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	1d19      	adds	r1, r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	9103      	str	r1, [sp, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	bfbb      	ittet	lt
 8005344:	425b      	neglt	r3, r3
 8005346:	f042 0202 	orrlt.w	r2, r2, #2
 800534a:	9307      	strge	r3, [sp, #28]
 800534c:	9307      	strlt	r3, [sp, #28]
 800534e:	bfb8      	it	lt
 8005350:	9204      	strlt	r2, [sp, #16]
 8005352:	7823      	ldrb	r3, [r4, #0]
 8005354:	2b2e      	cmp	r3, #46	; 0x2e
 8005356:	d10c      	bne.n	8005372 <_vfiprintf_r+0x176>
 8005358:	7863      	ldrb	r3, [r4, #1]
 800535a:	2b2a      	cmp	r3, #42	; 0x2a
 800535c:	d135      	bne.n	80053ca <_vfiprintf_r+0x1ce>
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	1d1a      	adds	r2, r3, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	9203      	str	r2, [sp, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfb8      	it	lt
 800536a:	f04f 33ff 	movlt.w	r3, #4294967295
 800536e:	3402      	adds	r4, #2
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005458 <_vfiprintf_r+0x25c>
 8005376:	7821      	ldrb	r1, [r4, #0]
 8005378:	2203      	movs	r2, #3
 800537a:	4650      	mov	r0, sl
 800537c:	f7fa ff28 	bl	80001d0 <memchr>
 8005380:	b140      	cbz	r0, 8005394 <_vfiprintf_r+0x198>
 8005382:	2340      	movs	r3, #64	; 0x40
 8005384:	eba0 000a 	sub.w	r0, r0, sl
 8005388:	fa03 f000 	lsl.w	r0, r3, r0
 800538c:	9b04      	ldr	r3, [sp, #16]
 800538e:	4303      	orrs	r3, r0
 8005390:	3401      	adds	r4, #1
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005398:	482c      	ldr	r0, [pc, #176]	; (800544c <_vfiprintf_r+0x250>)
 800539a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800539e:	2206      	movs	r2, #6
 80053a0:	f7fa ff16 	bl	80001d0 <memchr>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d03f      	beq.n	8005428 <_vfiprintf_r+0x22c>
 80053a8:	4b29      	ldr	r3, [pc, #164]	; (8005450 <_vfiprintf_r+0x254>)
 80053aa:	bb1b      	cbnz	r3, 80053f4 <_vfiprintf_r+0x1f8>
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	3307      	adds	r3, #7
 80053b0:	f023 0307 	bic.w	r3, r3, #7
 80053b4:	3308      	adds	r3, #8
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ba:	443b      	add	r3, r7
 80053bc:	9309      	str	r3, [sp, #36]	; 0x24
 80053be:	e767      	b.n	8005290 <_vfiprintf_r+0x94>
 80053c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c4:	460c      	mov	r4, r1
 80053c6:	2001      	movs	r0, #1
 80053c8:	e7a5      	b.n	8005316 <_vfiprintf_r+0x11a>
 80053ca:	2300      	movs	r3, #0
 80053cc:	3401      	adds	r4, #1
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	4619      	mov	r1, r3
 80053d2:	f04f 0c0a 	mov.w	ip, #10
 80053d6:	4620      	mov	r0, r4
 80053d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053dc:	3a30      	subs	r2, #48	; 0x30
 80053de:	2a09      	cmp	r2, #9
 80053e0:	d903      	bls.n	80053ea <_vfiprintf_r+0x1ee>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c5      	beq.n	8005372 <_vfiprintf_r+0x176>
 80053e6:	9105      	str	r1, [sp, #20]
 80053e8:	e7c3      	b.n	8005372 <_vfiprintf_r+0x176>
 80053ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ee:	4604      	mov	r4, r0
 80053f0:	2301      	movs	r3, #1
 80053f2:	e7f0      	b.n	80053d6 <_vfiprintf_r+0x1da>
 80053f4:	ab03      	add	r3, sp, #12
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	462a      	mov	r2, r5
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <_vfiprintf_r+0x258>)
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	4630      	mov	r0, r6
 8005400:	f3af 8000 	nop.w
 8005404:	4607      	mov	r7, r0
 8005406:	1c78      	adds	r0, r7, #1
 8005408:	d1d6      	bne.n	80053b8 <_vfiprintf_r+0x1bc>
 800540a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800540c:	07d9      	lsls	r1, r3, #31
 800540e:	d405      	bmi.n	800541c <_vfiprintf_r+0x220>
 8005410:	89ab      	ldrh	r3, [r5, #12]
 8005412:	059a      	lsls	r2, r3, #22
 8005414:	d402      	bmi.n	800541c <_vfiprintf_r+0x220>
 8005416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005418:	f7ff fe6b 	bl	80050f2 <__retarget_lock_release_recursive>
 800541c:	89ab      	ldrh	r3, [r5, #12]
 800541e:	065b      	lsls	r3, r3, #25
 8005420:	f53f af12 	bmi.w	8005248 <_vfiprintf_r+0x4c>
 8005424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005426:	e711      	b.n	800524c <_vfiprintf_r+0x50>
 8005428:	ab03      	add	r3, sp, #12
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	462a      	mov	r2, r5
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <_vfiprintf_r+0x258>)
 8005430:	a904      	add	r1, sp, #16
 8005432:	4630      	mov	r0, r6
 8005434:	f000 f880 	bl	8005538 <_printf_i>
 8005438:	e7e4      	b.n	8005404 <_vfiprintf_r+0x208>
 800543a:	bf00      	nop
 800543c:	08005e18 	.word	0x08005e18
 8005440:	08005e38 	.word	0x08005e38
 8005444:	08005df8 	.word	0x08005df8
 8005448:	08005e58 	.word	0x08005e58
 800544c:	08005e62 	.word	0x08005e62
 8005450:	00000000 	.word	0x00000000
 8005454:	080051d7 	.word	0x080051d7
 8005458:	08005e5e 	.word	0x08005e5e

0800545c <_printf_common>:
 800545c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	4616      	mov	r6, r2
 8005462:	4699      	mov	r9, r3
 8005464:	688a      	ldr	r2, [r1, #8]
 8005466:	690b      	ldr	r3, [r1, #16]
 8005468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800546c:	4293      	cmp	r3, r2
 800546e:	bfb8      	it	lt
 8005470:	4613      	movlt	r3, r2
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005478:	4607      	mov	r7, r0
 800547a:	460c      	mov	r4, r1
 800547c:	b10a      	cbz	r2, 8005482 <_printf_common+0x26>
 800547e:	3301      	adds	r3, #1
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	0699      	lsls	r1, r3, #26
 8005486:	bf42      	ittt	mi
 8005488:	6833      	ldrmi	r3, [r6, #0]
 800548a:	3302      	addmi	r3, #2
 800548c:	6033      	strmi	r3, [r6, #0]
 800548e:	6825      	ldr	r5, [r4, #0]
 8005490:	f015 0506 	ands.w	r5, r5, #6
 8005494:	d106      	bne.n	80054a4 <_printf_common+0x48>
 8005496:	f104 0a19 	add.w	sl, r4, #25
 800549a:	68e3      	ldr	r3, [r4, #12]
 800549c:	6832      	ldr	r2, [r6, #0]
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	dc26      	bgt.n	80054f2 <_printf_common+0x96>
 80054a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054a8:	1e13      	subs	r3, r2, #0
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	bf18      	it	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	0692      	lsls	r2, r2, #26
 80054b2:	d42b      	bmi.n	800550c <_printf_common+0xb0>
 80054b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b8:	4649      	mov	r1, r9
 80054ba:	4638      	mov	r0, r7
 80054bc:	47c0      	blx	r8
 80054be:	3001      	adds	r0, #1
 80054c0:	d01e      	beq.n	8005500 <_printf_common+0xa4>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	68e5      	ldr	r5, [r4, #12]
 80054c6:	6832      	ldr	r2, [r6, #0]
 80054c8:	f003 0306 	and.w	r3, r3, #6
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	bf08      	it	eq
 80054d0:	1aad      	subeq	r5, r5, r2
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	6922      	ldr	r2, [r4, #16]
 80054d6:	bf0c      	ite	eq
 80054d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054dc:	2500      	movne	r5, #0
 80054de:	4293      	cmp	r3, r2
 80054e0:	bfc4      	itt	gt
 80054e2:	1a9b      	subgt	r3, r3, r2
 80054e4:	18ed      	addgt	r5, r5, r3
 80054e6:	2600      	movs	r6, #0
 80054e8:	341a      	adds	r4, #26
 80054ea:	42b5      	cmp	r5, r6
 80054ec:	d11a      	bne.n	8005524 <_printf_common+0xc8>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e008      	b.n	8005504 <_printf_common+0xa8>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4652      	mov	r2, sl
 80054f6:	4649      	mov	r1, r9
 80054f8:	4638      	mov	r0, r7
 80054fa:	47c0      	blx	r8
 80054fc:	3001      	adds	r0, #1
 80054fe:	d103      	bne.n	8005508 <_printf_common+0xac>
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005508:	3501      	adds	r5, #1
 800550a:	e7c6      	b.n	800549a <_printf_common+0x3e>
 800550c:	18e1      	adds	r1, r4, r3
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	2030      	movs	r0, #48	; 0x30
 8005512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005516:	4422      	add	r2, r4
 8005518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800551c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005520:	3302      	adds	r3, #2
 8005522:	e7c7      	b.n	80054b4 <_printf_common+0x58>
 8005524:	2301      	movs	r3, #1
 8005526:	4622      	mov	r2, r4
 8005528:	4649      	mov	r1, r9
 800552a:	4638      	mov	r0, r7
 800552c:	47c0      	blx	r8
 800552e:	3001      	adds	r0, #1
 8005530:	d0e6      	beq.n	8005500 <_printf_common+0xa4>
 8005532:	3601      	adds	r6, #1
 8005534:	e7d9      	b.n	80054ea <_printf_common+0x8e>
	...

08005538 <_printf_i>:
 8005538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	460c      	mov	r4, r1
 800553e:	4691      	mov	r9, r2
 8005540:	7e27      	ldrb	r7, [r4, #24]
 8005542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005544:	2f78      	cmp	r7, #120	; 0x78
 8005546:	4680      	mov	r8, r0
 8005548:	469a      	mov	sl, r3
 800554a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800554e:	d807      	bhi.n	8005560 <_printf_i+0x28>
 8005550:	2f62      	cmp	r7, #98	; 0x62
 8005552:	d80a      	bhi.n	800556a <_printf_i+0x32>
 8005554:	2f00      	cmp	r7, #0
 8005556:	f000 80d8 	beq.w	800570a <_printf_i+0x1d2>
 800555a:	2f58      	cmp	r7, #88	; 0x58
 800555c:	f000 80a3 	beq.w	80056a6 <_printf_i+0x16e>
 8005560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005568:	e03a      	b.n	80055e0 <_printf_i+0xa8>
 800556a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800556e:	2b15      	cmp	r3, #21
 8005570:	d8f6      	bhi.n	8005560 <_printf_i+0x28>
 8005572:	a001      	add	r0, pc, #4	; (adr r0, 8005578 <_printf_i+0x40>)
 8005574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005578:	080055d1 	.word	0x080055d1
 800557c:	080055e5 	.word	0x080055e5
 8005580:	08005561 	.word	0x08005561
 8005584:	08005561 	.word	0x08005561
 8005588:	08005561 	.word	0x08005561
 800558c:	08005561 	.word	0x08005561
 8005590:	080055e5 	.word	0x080055e5
 8005594:	08005561 	.word	0x08005561
 8005598:	08005561 	.word	0x08005561
 800559c:	08005561 	.word	0x08005561
 80055a0:	08005561 	.word	0x08005561
 80055a4:	080056f1 	.word	0x080056f1
 80055a8:	08005615 	.word	0x08005615
 80055ac:	080056d3 	.word	0x080056d3
 80055b0:	08005561 	.word	0x08005561
 80055b4:	08005561 	.word	0x08005561
 80055b8:	08005713 	.word	0x08005713
 80055bc:	08005561 	.word	0x08005561
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005561 	.word	0x08005561
 80055c8:	08005561 	.word	0x08005561
 80055cc:	080056db 	.word	0x080056db
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	600a      	str	r2, [r1, #0]
 80055d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0a3      	b.n	800572c <_printf_i+0x1f4>
 80055e4:	6825      	ldr	r5, [r4, #0]
 80055e6:	6808      	ldr	r0, [r1, #0]
 80055e8:	062e      	lsls	r6, r5, #24
 80055ea:	f100 0304 	add.w	r3, r0, #4
 80055ee:	d50a      	bpl.n	8005606 <_printf_i+0xce>
 80055f0:	6805      	ldr	r5, [r0, #0]
 80055f2:	600b      	str	r3, [r1, #0]
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	da03      	bge.n	8005600 <_printf_i+0xc8>
 80055f8:	232d      	movs	r3, #45	; 0x2d
 80055fa:	426d      	negs	r5, r5
 80055fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005600:	485e      	ldr	r0, [pc, #376]	; (800577c <_printf_i+0x244>)
 8005602:	230a      	movs	r3, #10
 8005604:	e019      	b.n	800563a <_printf_i+0x102>
 8005606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800560a:	6805      	ldr	r5, [r0, #0]
 800560c:	600b      	str	r3, [r1, #0]
 800560e:	bf18      	it	ne
 8005610:	b22d      	sxthne	r5, r5
 8005612:	e7ef      	b.n	80055f4 <_printf_i+0xbc>
 8005614:	680b      	ldr	r3, [r1, #0]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	1d18      	adds	r0, r3, #4
 800561a:	6008      	str	r0, [r1, #0]
 800561c:	0628      	lsls	r0, r5, #24
 800561e:	d501      	bpl.n	8005624 <_printf_i+0xec>
 8005620:	681d      	ldr	r5, [r3, #0]
 8005622:	e002      	b.n	800562a <_printf_i+0xf2>
 8005624:	0669      	lsls	r1, r5, #25
 8005626:	d5fb      	bpl.n	8005620 <_printf_i+0xe8>
 8005628:	881d      	ldrh	r5, [r3, #0]
 800562a:	4854      	ldr	r0, [pc, #336]	; (800577c <_printf_i+0x244>)
 800562c:	2f6f      	cmp	r7, #111	; 0x6f
 800562e:	bf0c      	ite	eq
 8005630:	2308      	moveq	r3, #8
 8005632:	230a      	movne	r3, #10
 8005634:	2100      	movs	r1, #0
 8005636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800563a:	6866      	ldr	r6, [r4, #4]
 800563c:	60a6      	str	r6, [r4, #8]
 800563e:	2e00      	cmp	r6, #0
 8005640:	bfa2      	ittt	ge
 8005642:	6821      	ldrge	r1, [r4, #0]
 8005644:	f021 0104 	bicge.w	r1, r1, #4
 8005648:	6021      	strge	r1, [r4, #0]
 800564a:	b90d      	cbnz	r5, 8005650 <_printf_i+0x118>
 800564c:	2e00      	cmp	r6, #0
 800564e:	d04d      	beq.n	80056ec <_printf_i+0x1b4>
 8005650:	4616      	mov	r6, r2
 8005652:	fbb5 f1f3 	udiv	r1, r5, r3
 8005656:	fb03 5711 	mls	r7, r3, r1, r5
 800565a:	5dc7      	ldrb	r7, [r0, r7]
 800565c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005660:	462f      	mov	r7, r5
 8005662:	42bb      	cmp	r3, r7
 8005664:	460d      	mov	r5, r1
 8005666:	d9f4      	bls.n	8005652 <_printf_i+0x11a>
 8005668:	2b08      	cmp	r3, #8
 800566a:	d10b      	bne.n	8005684 <_printf_i+0x14c>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	07df      	lsls	r7, r3, #31
 8005670:	d508      	bpl.n	8005684 <_printf_i+0x14c>
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6861      	ldr	r1, [r4, #4]
 8005676:	4299      	cmp	r1, r3
 8005678:	bfde      	ittt	le
 800567a:	2330      	movle	r3, #48	; 0x30
 800567c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005684:	1b92      	subs	r2, r2, r6
 8005686:	6122      	str	r2, [r4, #16]
 8005688:	f8cd a000 	str.w	sl, [sp]
 800568c:	464b      	mov	r3, r9
 800568e:	aa03      	add	r2, sp, #12
 8005690:	4621      	mov	r1, r4
 8005692:	4640      	mov	r0, r8
 8005694:	f7ff fee2 	bl	800545c <_printf_common>
 8005698:	3001      	adds	r0, #1
 800569a:	d14c      	bne.n	8005736 <_printf_i+0x1fe>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	b004      	add	sp, #16
 80056a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a6:	4835      	ldr	r0, [pc, #212]	; (800577c <_printf_i+0x244>)
 80056a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	680e      	ldr	r6, [r1, #0]
 80056b0:	061f      	lsls	r7, r3, #24
 80056b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80056b6:	600e      	str	r6, [r1, #0]
 80056b8:	d514      	bpl.n	80056e4 <_printf_i+0x1ac>
 80056ba:	07d9      	lsls	r1, r3, #31
 80056bc:	bf44      	itt	mi
 80056be:	f043 0320 	orrmi.w	r3, r3, #32
 80056c2:	6023      	strmi	r3, [r4, #0]
 80056c4:	b91d      	cbnz	r5, 80056ce <_printf_i+0x196>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f023 0320 	bic.w	r3, r3, #32
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	2310      	movs	r3, #16
 80056d0:	e7b0      	b.n	8005634 <_printf_i+0xfc>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f043 0320 	orr.w	r3, r3, #32
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	2378      	movs	r3, #120	; 0x78
 80056dc:	4828      	ldr	r0, [pc, #160]	; (8005780 <_printf_i+0x248>)
 80056de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056e2:	e7e3      	b.n	80056ac <_printf_i+0x174>
 80056e4:	065e      	lsls	r6, r3, #25
 80056e6:	bf48      	it	mi
 80056e8:	b2ad      	uxthmi	r5, r5
 80056ea:	e7e6      	b.n	80056ba <_printf_i+0x182>
 80056ec:	4616      	mov	r6, r2
 80056ee:	e7bb      	b.n	8005668 <_printf_i+0x130>
 80056f0:	680b      	ldr	r3, [r1, #0]
 80056f2:	6826      	ldr	r6, [r4, #0]
 80056f4:	6960      	ldr	r0, [r4, #20]
 80056f6:	1d1d      	adds	r5, r3, #4
 80056f8:	600d      	str	r5, [r1, #0]
 80056fa:	0635      	lsls	r5, r6, #24
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	d501      	bpl.n	8005704 <_printf_i+0x1cc>
 8005700:	6018      	str	r0, [r3, #0]
 8005702:	e002      	b.n	800570a <_printf_i+0x1d2>
 8005704:	0671      	lsls	r1, r6, #25
 8005706:	d5fb      	bpl.n	8005700 <_printf_i+0x1c8>
 8005708:	8018      	strh	r0, [r3, #0]
 800570a:	2300      	movs	r3, #0
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	4616      	mov	r6, r2
 8005710:	e7ba      	b.n	8005688 <_printf_i+0x150>
 8005712:	680b      	ldr	r3, [r1, #0]
 8005714:	1d1a      	adds	r2, r3, #4
 8005716:	600a      	str	r2, [r1, #0]
 8005718:	681e      	ldr	r6, [r3, #0]
 800571a:	6862      	ldr	r2, [r4, #4]
 800571c:	2100      	movs	r1, #0
 800571e:	4630      	mov	r0, r6
 8005720:	f7fa fd56 	bl	80001d0 <memchr>
 8005724:	b108      	cbz	r0, 800572a <_printf_i+0x1f2>
 8005726:	1b80      	subs	r0, r0, r6
 8005728:	6060      	str	r0, [r4, #4]
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	2300      	movs	r3, #0
 8005730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005734:	e7a8      	b.n	8005688 <_printf_i+0x150>
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	4632      	mov	r2, r6
 800573a:	4649      	mov	r1, r9
 800573c:	4640      	mov	r0, r8
 800573e:	47d0      	blx	sl
 8005740:	3001      	adds	r0, #1
 8005742:	d0ab      	beq.n	800569c <_printf_i+0x164>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	079b      	lsls	r3, r3, #30
 8005748:	d413      	bmi.n	8005772 <_printf_i+0x23a>
 800574a:	68e0      	ldr	r0, [r4, #12]
 800574c:	9b03      	ldr	r3, [sp, #12]
 800574e:	4298      	cmp	r0, r3
 8005750:	bfb8      	it	lt
 8005752:	4618      	movlt	r0, r3
 8005754:	e7a4      	b.n	80056a0 <_printf_i+0x168>
 8005756:	2301      	movs	r3, #1
 8005758:	4632      	mov	r2, r6
 800575a:	4649      	mov	r1, r9
 800575c:	4640      	mov	r0, r8
 800575e:	47d0      	blx	sl
 8005760:	3001      	adds	r0, #1
 8005762:	d09b      	beq.n	800569c <_printf_i+0x164>
 8005764:	3501      	adds	r5, #1
 8005766:	68e3      	ldr	r3, [r4, #12]
 8005768:	9903      	ldr	r1, [sp, #12]
 800576a:	1a5b      	subs	r3, r3, r1
 800576c:	42ab      	cmp	r3, r5
 800576e:	dcf2      	bgt.n	8005756 <_printf_i+0x21e>
 8005770:	e7eb      	b.n	800574a <_printf_i+0x212>
 8005772:	2500      	movs	r5, #0
 8005774:	f104 0619 	add.w	r6, r4, #25
 8005778:	e7f5      	b.n	8005766 <_printf_i+0x22e>
 800577a:	bf00      	nop
 800577c:	08005e69 	.word	0x08005e69
 8005780:	08005e7a 	.word	0x08005e7a

08005784 <_sbrk_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d06      	ldr	r5, [pc, #24]	; (80057a0 <_sbrk_r+0x1c>)
 8005788:	2300      	movs	r3, #0
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	602b      	str	r3, [r5, #0]
 8005790:	f7fb faa6 	bl	8000ce0 <_sbrk>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_sbrk_r+0x1a>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_sbrk_r+0x1a>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	200001dc 	.word	0x200001dc

080057a4 <__sread>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	460c      	mov	r4, r1
 80057a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ac:	f000 fab4 	bl	8005d18 <_read_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	bfab      	itete	ge
 80057b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057b6:	89a3      	ldrhlt	r3, [r4, #12]
 80057b8:	181b      	addge	r3, r3, r0
 80057ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057be:	bfac      	ite	ge
 80057c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057c2:	81a3      	strhlt	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__swrite>:
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	461f      	mov	r7, r3
 80057cc:	898b      	ldrh	r3, [r1, #12]
 80057ce:	05db      	lsls	r3, r3, #23
 80057d0:	4605      	mov	r5, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4616      	mov	r6, r2
 80057d6:	d505      	bpl.n	80057e4 <__swrite+0x1e>
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	2302      	movs	r3, #2
 80057de:	2200      	movs	r2, #0
 80057e0:	f000 f9c8 	bl	8005b74 <_lseek_r>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	4628      	mov	r0, r5
 80057f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	f000 b869 	b.w	80058d0 <_write_r>

080057fe <__sseek>:
 80057fe:	b510      	push	{r4, lr}
 8005800:	460c      	mov	r4, r1
 8005802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005806:	f000 f9b5 	bl	8005b74 <_lseek_r>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	bf15      	itete	ne
 8005810:	6560      	strne	r0, [r4, #84]	; 0x54
 8005812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800581a:	81a3      	strheq	r3, [r4, #12]
 800581c:	bf18      	it	ne
 800581e:	81a3      	strhne	r3, [r4, #12]
 8005820:	bd10      	pop	{r4, pc}

08005822 <__sclose>:
 8005822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005826:	f000 b8d3 	b.w	80059d0 <_close_r>
	...

0800582c <__swbuf_r>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	460e      	mov	r6, r1
 8005830:	4614      	mov	r4, r2
 8005832:	4605      	mov	r5, r0
 8005834:	b118      	cbz	r0, 800583e <__swbuf_r+0x12>
 8005836:	6983      	ldr	r3, [r0, #24]
 8005838:	b90b      	cbnz	r3, 800583e <__swbuf_r+0x12>
 800583a:	f7ff fbbb 	bl	8004fb4 <__sinit>
 800583e:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <__swbuf_r+0x98>)
 8005840:	429c      	cmp	r4, r3
 8005842:	d12b      	bne.n	800589c <__swbuf_r+0x70>
 8005844:	686c      	ldr	r4, [r5, #4]
 8005846:	69a3      	ldr	r3, [r4, #24]
 8005848:	60a3      	str	r3, [r4, #8]
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	071a      	lsls	r2, r3, #28
 800584e:	d52f      	bpl.n	80058b0 <__swbuf_r+0x84>
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	b36b      	cbz	r3, 80058b0 <__swbuf_r+0x84>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	1ac0      	subs	r0, r0, r3
 800585a:	6963      	ldr	r3, [r4, #20]
 800585c:	b2f6      	uxtb	r6, r6
 800585e:	4283      	cmp	r3, r0
 8005860:	4637      	mov	r7, r6
 8005862:	dc04      	bgt.n	800586e <__swbuf_r+0x42>
 8005864:	4621      	mov	r1, r4
 8005866:	4628      	mov	r0, r5
 8005868:	f000 f948 	bl	8005afc <_fflush_r>
 800586c:	bb30      	cbnz	r0, 80058bc <__swbuf_r+0x90>
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	3b01      	subs	r3, #1
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	701e      	strb	r6, [r3, #0]
 800587c:	6963      	ldr	r3, [r4, #20]
 800587e:	3001      	adds	r0, #1
 8005880:	4283      	cmp	r3, r0
 8005882:	d004      	beq.n	800588e <__swbuf_r+0x62>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d506      	bpl.n	8005898 <__swbuf_r+0x6c>
 800588a:	2e0a      	cmp	r6, #10
 800588c:	d104      	bne.n	8005898 <__swbuf_r+0x6c>
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f000 f933 	bl	8005afc <_fflush_r>
 8005896:	b988      	cbnz	r0, 80058bc <__swbuf_r+0x90>
 8005898:	4638      	mov	r0, r7
 800589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <__swbuf_r+0x9c>)
 800589e:	429c      	cmp	r4, r3
 80058a0:	d101      	bne.n	80058a6 <__swbuf_r+0x7a>
 80058a2:	68ac      	ldr	r4, [r5, #8]
 80058a4:	e7cf      	b.n	8005846 <__swbuf_r+0x1a>
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <__swbuf_r+0xa0>)
 80058a8:	429c      	cmp	r4, r3
 80058aa:	bf08      	it	eq
 80058ac:	68ec      	ldreq	r4, [r5, #12]
 80058ae:	e7ca      	b.n	8005846 <__swbuf_r+0x1a>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f81e 	bl	80058f4 <__swsetup_r>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d0cb      	beq.n	8005854 <__swbuf_r+0x28>
 80058bc:	f04f 37ff 	mov.w	r7, #4294967295
 80058c0:	e7ea      	b.n	8005898 <__swbuf_r+0x6c>
 80058c2:	bf00      	nop
 80058c4:	08005e18 	.word	0x08005e18
 80058c8:	08005e38 	.word	0x08005e38
 80058cc:	08005df8 	.word	0x08005df8

080058d0 <_write_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	; (80058f0 <_write_r+0x20>)
 80058d4:	4604      	mov	r4, r0
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fa fe69 	bl	80005b6 <_write>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_write_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_write_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	200001dc 	.word	0x200001dc

080058f4 <__swsetup_r>:
 80058f4:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <__swsetup_r+0xcc>)
 80058f6:	b570      	push	{r4, r5, r6, lr}
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	4606      	mov	r6, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	b125      	cbz	r5, 800590a <__swsetup_r+0x16>
 8005900:	69ab      	ldr	r3, [r5, #24]
 8005902:	b913      	cbnz	r3, 800590a <__swsetup_r+0x16>
 8005904:	4628      	mov	r0, r5
 8005906:	f7ff fb55 	bl	8004fb4 <__sinit>
 800590a:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <__swsetup_r+0xd0>)
 800590c:	429c      	cmp	r4, r3
 800590e:	d10f      	bne.n	8005930 <__swsetup_r+0x3c>
 8005910:	686c      	ldr	r4, [r5, #4]
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005918:	0719      	lsls	r1, r3, #28
 800591a:	d42c      	bmi.n	8005976 <__swsetup_r+0x82>
 800591c:	06dd      	lsls	r5, r3, #27
 800591e:	d411      	bmi.n	8005944 <__swsetup_r+0x50>
 8005920:	2309      	movs	r3, #9
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	e03e      	b.n	80059ae <__swsetup_r+0xba>
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <__swsetup_r+0xd4>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <__swsetup_r+0x46>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7eb      	b.n	8005912 <__swsetup_r+0x1e>
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <__swsetup_r+0xd8>)
 800593c:	429c      	cmp	r4, r3
 800593e:	bf08      	it	eq
 8005940:	68ec      	ldreq	r4, [r5, #12]
 8005942:	e7e6      	b.n	8005912 <__swsetup_r+0x1e>
 8005944:	0758      	lsls	r0, r3, #29
 8005946:	d512      	bpl.n	800596e <__swsetup_r+0x7a>
 8005948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594a:	b141      	cbz	r1, 800595e <__swsetup_r+0x6a>
 800594c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <__swsetup_r+0x66>
 8005954:	4630      	mov	r0, r6
 8005956:	f000 f98f 	bl	8005c78 <_free_r>
 800595a:	2300      	movs	r3, #0
 800595c:	6363      	str	r3, [r4, #52]	; 0x34
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	2300      	movs	r3, #0
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	b94b      	cbnz	r3, 800598e <__swsetup_r+0x9a>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005984:	d003      	beq.n	800598e <__swsetup_r+0x9a>
 8005986:	4621      	mov	r1, r4
 8005988:	4630      	mov	r0, r6
 800598a:	f000 f929 	bl	8005be0 <__smakebuf_r>
 800598e:	89a0      	ldrh	r0, [r4, #12]
 8005990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005994:	f010 0301 	ands.w	r3, r0, #1
 8005998:	d00a      	beq.n	80059b0 <__swsetup_r+0xbc>
 800599a:	2300      	movs	r3, #0
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6963      	ldr	r3, [r4, #20]
 80059a0:	425b      	negs	r3, r3
 80059a2:	61a3      	str	r3, [r4, #24]
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	b943      	cbnz	r3, 80059ba <__swsetup_r+0xc6>
 80059a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059ac:	d1ba      	bne.n	8005924 <__swsetup_r+0x30>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	0781      	lsls	r1, r0, #30
 80059b2:	bf58      	it	pl
 80059b4:	6963      	ldrpl	r3, [r4, #20]
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	e7f4      	b.n	80059a4 <__swsetup_r+0xb0>
 80059ba:	2000      	movs	r0, #0
 80059bc:	e7f7      	b.n	80059ae <__swsetup_r+0xba>
 80059be:	bf00      	nop
 80059c0:	2000000c 	.word	0x2000000c
 80059c4:	08005e18 	.word	0x08005e18
 80059c8:	08005e38 	.word	0x08005e38
 80059cc:	08005df8 	.word	0x08005df8

080059d0 <_close_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_close_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb f94b 	bl	8000c76 <_close>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_close_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_close_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	200001dc 	.word	0x200001dc

080059f0 <__sflush_r>:
 80059f0:	898a      	ldrh	r2, [r1, #12]
 80059f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	4605      	mov	r5, r0
 80059f8:	0710      	lsls	r0, r2, #28
 80059fa:	460c      	mov	r4, r1
 80059fc:	d458      	bmi.n	8005ab0 <__sflush_r+0xc0>
 80059fe:	684b      	ldr	r3, [r1, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dc05      	bgt.n	8005a10 <__sflush_r+0x20>
 8005a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dc02      	bgt.n	8005a10 <__sflush_r+0x20>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d0f9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a1c:	682f      	ldr	r7, [r5, #0]
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	d032      	beq.n	8005a88 <__sflush_r+0x98>
 8005a22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	075a      	lsls	r2, r3, #29
 8005a28:	d505      	bpl.n	8005a36 <__sflush_r+0x46>
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	1ac0      	subs	r0, r0, r3
 8005a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a30:	b10b      	cbz	r3, 8005a36 <__sflush_r+0x46>
 8005a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a34:	1ac0      	subs	r0, r0, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3c:	6a21      	ldr	r1, [r4, #32]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b0      	blx	r6
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	d106      	bne.n	8005a56 <__sflush_r+0x66>
 8005a48:	6829      	ldr	r1, [r5, #0]
 8005a4a:	291d      	cmp	r1, #29
 8005a4c:	d82c      	bhi.n	8005aa8 <__sflush_r+0xb8>
 8005a4e:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <__sflush_r+0x108>)
 8005a50:	40ca      	lsrs	r2, r1
 8005a52:	07d6      	lsls	r6, r2, #31
 8005a54:	d528      	bpl.n	8005aa8 <__sflush_r+0xb8>
 8005a56:	2200      	movs	r2, #0
 8005a58:	6062      	str	r2, [r4, #4]
 8005a5a:	04d9      	lsls	r1, r3, #19
 8005a5c:	6922      	ldr	r2, [r4, #16]
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	d504      	bpl.n	8005a6c <__sflush_r+0x7c>
 8005a62:	1c42      	adds	r2, r0, #1
 8005a64:	d101      	bne.n	8005a6a <__sflush_r+0x7a>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	b903      	cbnz	r3, 8005a6c <__sflush_r+0x7c>
 8005a6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a6e:	602f      	str	r7, [r5, #0]
 8005a70:	2900      	cmp	r1, #0
 8005a72:	d0ca      	beq.n	8005a0a <__sflush_r+0x1a>
 8005a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d002      	beq.n	8005a82 <__sflush_r+0x92>
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f8fb 	bl	8005c78 <_free_r>
 8005a82:	2000      	movs	r0, #0
 8005a84:	6360      	str	r0, [r4, #52]	; 0x34
 8005a86:	e7c1      	b.n	8005a0c <__sflush_r+0x1c>
 8005a88:	6a21      	ldr	r1, [r4, #32]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b0      	blx	r6
 8005a90:	1c41      	adds	r1, r0, #1
 8005a92:	d1c7      	bne.n	8005a24 <__sflush_r+0x34>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0c4      	beq.n	8005a24 <__sflush_r+0x34>
 8005a9a:	2b1d      	cmp	r3, #29
 8005a9c:	d001      	beq.n	8005aa2 <__sflush_r+0xb2>
 8005a9e:	2b16      	cmp	r3, #22
 8005aa0:	d101      	bne.n	8005aa6 <__sflush_r+0xb6>
 8005aa2:	602f      	str	r7, [r5, #0]
 8005aa4:	e7b1      	b.n	8005a0a <__sflush_r+0x1a>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	e7ad      	b.n	8005a0c <__sflush_r+0x1c>
 8005ab0:	690f      	ldr	r7, [r1, #16]
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	d0a9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005ab6:	0793      	lsls	r3, r2, #30
 8005ab8:	680e      	ldr	r6, [r1, #0]
 8005aba:	bf08      	it	eq
 8005abc:	694b      	ldreq	r3, [r1, #20]
 8005abe:	600f      	str	r7, [r1, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	eba6 0807 	sub.w	r8, r6, r7
 8005ac8:	608b      	str	r3, [r1, #8]
 8005aca:	f1b8 0f00 	cmp.w	r8, #0
 8005ace:	dd9c      	ble.n	8005a0a <__sflush_r+0x1a>
 8005ad0:	6a21      	ldr	r1, [r4, #32]
 8005ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	463a      	mov	r2, r7
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b0      	blx	r6
 8005adc:	2800      	cmp	r0, #0
 8005ade:	dc06      	bgt.n	8005aee <__sflush_r+0xfe>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	e78e      	b.n	8005a0c <__sflush_r+0x1c>
 8005aee:	4407      	add	r7, r0
 8005af0:	eba8 0800 	sub.w	r8, r8, r0
 8005af4:	e7e9      	b.n	8005aca <__sflush_r+0xda>
 8005af6:	bf00      	nop
 8005af8:	20400001 	.word	0x20400001

08005afc <_fflush_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b913      	cbnz	r3, 8005b0c <_fflush_r+0x10>
 8005b06:	2500      	movs	r5, #0
 8005b08:	4628      	mov	r0, r5
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	b118      	cbz	r0, 8005b16 <_fflush_r+0x1a>
 8005b0e:	6983      	ldr	r3, [r0, #24]
 8005b10:	b90b      	cbnz	r3, 8005b16 <_fflush_r+0x1a>
 8005b12:	f7ff fa4f 	bl	8004fb4 <__sinit>
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <_fflush_r+0x6c>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	d11b      	bne.n	8005b54 <_fflush_r+0x58>
 8005b1c:	686c      	ldr	r4, [r5, #4]
 8005b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ef      	beq.n	8005b06 <_fflush_r+0xa>
 8005b26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b28:	07d0      	lsls	r0, r2, #31
 8005b2a:	d404      	bmi.n	8005b36 <_fflush_r+0x3a>
 8005b2c:	0599      	lsls	r1, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_fflush_r+0x3a>
 8005b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b32:	f7ff fadd 	bl	80050f0 <__retarget_lock_acquire_recursive>
 8005b36:	4628      	mov	r0, r5
 8005b38:	4621      	mov	r1, r4
 8005b3a:	f7ff ff59 	bl	80059f0 <__sflush_r>
 8005b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b40:	07da      	lsls	r2, r3, #31
 8005b42:	4605      	mov	r5, r0
 8005b44:	d4e0      	bmi.n	8005b08 <_fflush_r+0xc>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	059b      	lsls	r3, r3, #22
 8005b4a:	d4dd      	bmi.n	8005b08 <_fflush_r+0xc>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4e:	f7ff fad0 	bl	80050f2 <__retarget_lock_release_recursive>
 8005b52:	e7d9      	b.n	8005b08 <_fflush_r+0xc>
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <_fflush_r+0x70>)
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d101      	bne.n	8005b5e <_fflush_r+0x62>
 8005b5a:	68ac      	ldr	r4, [r5, #8]
 8005b5c:	e7df      	b.n	8005b1e <_fflush_r+0x22>
 8005b5e:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <_fflush_r+0x74>)
 8005b60:	429c      	cmp	r4, r3
 8005b62:	bf08      	it	eq
 8005b64:	68ec      	ldreq	r4, [r5, #12]
 8005b66:	e7da      	b.n	8005b1e <_fflush_r+0x22>
 8005b68:	08005e18 	.word	0x08005e18
 8005b6c:	08005e38 	.word	0x08005e38
 8005b70:	08005df8 	.word	0x08005df8

08005b74 <_lseek_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	; (8005b94 <_lseek_r+0x20>)
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fb f89e 	bl	8000cc4 <_lseek>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_lseek_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_lseek_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	200001dc 	.word	0x200001dc

08005b98 <__swhatbuf_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	460e      	mov	r6, r1
 8005b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	b096      	sub	sp, #88	; 0x58
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	461d      	mov	r5, r3
 8005ba8:	da07      	bge.n	8005bba <__swhatbuf_r+0x22>
 8005baa:	2300      	movs	r3, #0
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	89b3      	ldrh	r3, [r6, #12]
 8005bb0:	061a      	lsls	r2, r3, #24
 8005bb2:	d410      	bmi.n	8005bd6 <__swhatbuf_r+0x3e>
 8005bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb8:	e00e      	b.n	8005bd8 <__swhatbuf_r+0x40>
 8005bba:	466a      	mov	r2, sp
 8005bbc:	f000 f8be 	bl	8005d3c <_fstat_r>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	dbf2      	blt.n	8005baa <__swhatbuf_r+0x12>
 8005bc4:	9a01      	ldr	r2, [sp, #4]
 8005bc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bce:	425a      	negs	r2, r3
 8005bd0:	415a      	adcs	r2, r3
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	e7ee      	b.n	8005bb4 <__swhatbuf_r+0x1c>
 8005bd6:	2340      	movs	r3, #64	; 0x40
 8005bd8:	2000      	movs	r0, #0
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	b016      	add	sp, #88	; 0x58
 8005bde:	bd70      	pop	{r4, r5, r6, pc}

08005be0 <__smakebuf_r>:
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005be4:	079d      	lsls	r5, r3, #30
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d507      	bpl.n	8005bfc <__smakebuf_r+0x1c>
 8005bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	ab01      	add	r3, sp, #4
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f7ff ffca 	bl	8005b98 <__swhatbuf_r>
 8005c04:	9900      	ldr	r1, [sp, #0]
 8005c06:	4605      	mov	r5, r0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fa73 	bl	80050f4 <_malloc_r>
 8005c0e:	b948      	cbnz	r0, 8005c24 <__smakebuf_r+0x44>
 8005c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c14:	059a      	lsls	r2, r3, #22
 8005c16:	d4ef      	bmi.n	8005bf8 <__smakebuf_r+0x18>
 8005c18:	f023 0303 	bic.w	r3, r3, #3
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	e7e3      	b.n	8005bec <__smakebuf_r+0xc>
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <__smakebuf_r+0x7c>)
 8005c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	6020      	str	r0, [r4, #0]
 8005c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	9b00      	ldr	r3, [sp, #0]
 8005c34:	6163      	str	r3, [r4, #20]
 8005c36:	9b01      	ldr	r3, [sp, #4]
 8005c38:	6120      	str	r0, [r4, #16]
 8005c3a:	b15b      	cbz	r3, 8005c54 <__smakebuf_r+0x74>
 8005c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 f88d 	bl	8005d60 <_isatty_r>
 8005c46:	b128      	cbz	r0, 8005c54 <__smakebuf_r+0x74>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	89a0      	ldrh	r0, [r4, #12]
 8005c56:	4305      	orrs	r5, r0
 8005c58:	81a5      	strh	r5, [r4, #12]
 8005c5a:	e7cd      	b.n	8005bf8 <__smakebuf_r+0x18>
 8005c5c:	08004f4d 	.word	0x08004f4d

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f7ff ba45 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	200001d4 	.word	0x200001d4

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f7ff ba40 	b.w	80050f2 <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	200001d4 	.word	0x200001d4

08005c78 <_free_r>:
 8005c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c7a:	2900      	cmp	r1, #0
 8005c7c:	d048      	beq.n	8005d10 <_free_r+0x98>
 8005c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c82:	9001      	str	r0, [sp, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f1a1 0404 	sub.w	r4, r1, #4
 8005c8a:	bfb8      	it	lt
 8005c8c:	18e4      	addlt	r4, r4, r3
 8005c8e:	f7ff ffe7 	bl	8005c60 <__malloc_lock>
 8005c92:	4a20      	ldr	r2, [pc, #128]	; (8005d14 <_free_r+0x9c>)
 8005c94:	9801      	ldr	r0, [sp, #4]
 8005c96:	6813      	ldr	r3, [r2, #0]
 8005c98:	4615      	mov	r5, r2
 8005c9a:	b933      	cbnz	r3, 8005caa <_free_r+0x32>
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	6014      	str	r4, [r2, #0]
 8005ca0:	b003      	add	sp, #12
 8005ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ca6:	f7ff bfe1 	b.w	8005c6c <__malloc_unlock>
 8005caa:	42a3      	cmp	r3, r4
 8005cac:	d90b      	bls.n	8005cc6 <_free_r+0x4e>
 8005cae:	6821      	ldr	r1, [r4, #0]
 8005cb0:	1862      	adds	r2, r4, r1
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	bf04      	itt	eq
 8005cb6:	681a      	ldreq	r2, [r3, #0]
 8005cb8:	685b      	ldreq	r3, [r3, #4]
 8005cba:	6063      	str	r3, [r4, #4]
 8005cbc:	bf04      	itt	eq
 8005cbe:	1852      	addeq	r2, r2, r1
 8005cc0:	6022      	streq	r2, [r4, #0]
 8005cc2:	602c      	str	r4, [r5, #0]
 8005cc4:	e7ec      	b.n	8005ca0 <_free_r+0x28>
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	b10b      	cbz	r3, 8005cd0 <_free_r+0x58>
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	d9fa      	bls.n	8005cc6 <_free_r+0x4e>
 8005cd0:	6811      	ldr	r1, [r2, #0]
 8005cd2:	1855      	adds	r5, r2, r1
 8005cd4:	42a5      	cmp	r5, r4
 8005cd6:	d10b      	bne.n	8005cf0 <_free_r+0x78>
 8005cd8:	6824      	ldr	r4, [r4, #0]
 8005cda:	4421      	add	r1, r4
 8005cdc:	1854      	adds	r4, r2, r1
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	6011      	str	r1, [r2, #0]
 8005ce2:	d1dd      	bne.n	8005ca0 <_free_r+0x28>
 8005ce4:	681c      	ldr	r4, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	6053      	str	r3, [r2, #4]
 8005cea:	4421      	add	r1, r4
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	e7d7      	b.n	8005ca0 <_free_r+0x28>
 8005cf0:	d902      	bls.n	8005cf8 <_free_r+0x80>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	e7d3      	b.n	8005ca0 <_free_r+0x28>
 8005cf8:	6825      	ldr	r5, [r4, #0]
 8005cfa:	1961      	adds	r1, r4, r5
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	bf04      	itt	eq
 8005d00:	6819      	ldreq	r1, [r3, #0]
 8005d02:	685b      	ldreq	r3, [r3, #4]
 8005d04:	6063      	str	r3, [r4, #4]
 8005d06:	bf04      	itt	eq
 8005d08:	1949      	addeq	r1, r1, r5
 8005d0a:	6021      	streq	r1, [r4, #0]
 8005d0c:	6054      	str	r4, [r2, #4]
 8005d0e:	e7c7      	b.n	8005ca0 <_free_r+0x28>
 8005d10:	b003      	add	sp, #12
 8005d12:	bd30      	pop	{r4, r5, pc}
 8005d14:	20000090 	.word	0x20000090

08005d18 <_read_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	; (8005d38 <_read_r+0x20>)
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	4611      	mov	r1, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	602a      	str	r2, [r5, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f7fa ff88 	bl	8000c3c <_read>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_read_r+0x1e>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_read_r+0x1e>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	200001dc 	.word	0x200001dc

08005d3c <_fstat_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	; (8005d5c <_fstat_r+0x20>)
 8005d40:	2300      	movs	r3, #0
 8005d42:	4604      	mov	r4, r0
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	602b      	str	r3, [r5, #0]
 8005d4a:	f7fa ffa0 	bl	8000c8e <_fstat>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	d102      	bne.n	8005d58 <_fstat_r+0x1c>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	b103      	cbz	r3, 8005d58 <_fstat_r+0x1c>
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	bd38      	pop	{r3, r4, r5, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200001dc 	.word	0x200001dc

08005d60 <_isatty_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d06      	ldr	r5, [pc, #24]	; (8005d7c <_isatty_r+0x1c>)
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	f7fa ff9f 	bl	8000cae <_isatty>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d102      	bne.n	8005d7a <_isatty_r+0x1a>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b103      	cbz	r3, 8005d7a <_isatty_r+0x1a>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	200001dc 	.word	0x200001dc

08005d80 <_init>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr

08005d8c <_fini>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr
