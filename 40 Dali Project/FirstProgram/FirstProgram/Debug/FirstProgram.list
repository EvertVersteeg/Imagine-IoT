
FirstProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000500c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  080051f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080051f8  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001397e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248e  00000000  00000000  000339ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00035e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  000370c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280aa  00000000  00000000  00038270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001329b  00000000  00000000  0006031a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103171  00000000  00000000  000735b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  0017677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800517c 	.word	0x0800517c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800517c 	.word	0x0800517c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <delay_us>:
    ITM_SendChar((*ptr++));
  return len;
}

void delay_us(uint16_t us)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <delay_us+0x40>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <delay_us+0x40>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <delay_us+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f042 0201 	orr.w	r2, r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 80004e2:	bf00      	nop
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <delay_us+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3f9      	bcc.n	80004e4 <delay_us+0x24>
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fbd9 	bl	8000cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f82e 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f990 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 f970 	bl	80007f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000518:	f000 f87a 	bl	8000610 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f93c 	bl	8000798 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000520:	f000 f8ec 	bl	80006fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000524:	217f      	movs	r1, #127	; 0x7f
 8000526:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0x60>)
 8000528:	f001 fdfa 	bl	8002120 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value_adc,1);
 800052c:	2201      	movs	r2, #1
 800052e:	490e      	ldr	r1, [pc, #56]	; (8000568 <main+0x64>)
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x60>)
 8000532:	f000 ff8b 	bl	800144c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f002 fbb2 	bl	8002ca8 <HAL_GPIO_WritePin>
	 delay_us(417);
 8000544:	f240 10a1 	movw	r0, #417	; 0x1a1
 8000548:	f7ff ffba 	bl	80004c0 <delay_us>

	 //HAL_ADC_Start(&hadc1);
	 //printf ("Analog input = %d\r\n", value_adc);

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f002 fba7 	bl	8002ca8 <HAL_GPIO_WritePin>
	 delay_us(417);
 800055a:	f240 10a1 	movw	r0, #417	; 0x1a1
 800055e:	f7ff ffaf 	bl	80004c0 <delay_us>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000562:	e7e8      	b.n	8000536 <main+0x32>
 8000564:	20000074 	.word	0x20000074
 8000568:	200000d8 	.word	0x200000d8

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fdf6 	bl	800516c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f002 fbaf 	bl	8002cf4 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f9c2 	bl	8000924 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ba:	230a      	movs	r3, #10
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fbe6 	bl	8002da0 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005da:	f000 f9a3 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 ffb8 	bl	800356c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f98f 	bl	8000924 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	; 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000634:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000664:	2201      	movs	r2, #1
 8000666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800067e:	2201      	movs	r2, #1
 8000680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000694:	f000 fd84 	bl	80011a0 <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800069e:	f000 f941 	bl	8000924 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <MX_ADC1_Init+0xe0>)
 80006ae:	f001 fd97 	bl	80021e0 <HAL_ADCEx_MultiModeConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b8:	f000 f934 	bl	8000924 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ADC1_Init+0xe8>)
 80006be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	2306      	movs	r3, #6
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c8:	237f      	movs	r3, #127	; 0x7f
 80006ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006cc:	2304      	movs	r3, #4
 80006ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC1_Init+0xe0>)
 80006da:	f000 ff89 	bl	80015f0 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006e4:	f000 f91e 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000074 	.word	0x20000074
 80006f4:	50040000 	.word	0x50040000
 80006f8:	14f00020 	.word	0x14f00020

080006fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM4_Init+0x94>)
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_TIM4_Init+0x98>)
 800071e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM4_Init+0x94>)
 8000722:	224f      	movs	r2, #79	; 0x4f
 8000724:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_TIM4_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_TIM4_Init+0x94>)
 800072e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000732:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_TIM4_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM4_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <MX_TIM4_Init+0x94>)
 8000742:	f003 fdd5 	bl	80042f0 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800074c:	f000 f8ea 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_TIM4_Init+0x94>)
 800075e:	f003 fe1e 	bl	800439e <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f8dc 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM4_Init+0x94>)
 800077a:	f004 f80b 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000784:	f000 f8ce 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000028 	.word	0x20000028
 8000794:	40000800 	.word	0x40000800

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007dc:	f004 f862 	bl	80048a4 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f89d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000124 	.word	0x20000124
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_DMA_Init+0x38>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <MX_DMA_Init+0x38>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6493      	str	r3, [r2, #72]	; 0x48
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_DMA_Init+0x38>)
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200b      	movs	r0, #11
 800081c:	f001 fe6b 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000820:	200b      	movs	r0, #11
 8000822:	f001 fe84 	bl	800252e <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <MX_GPIO_Init+0xe0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0xe0>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a25      	ldr	r2, [pc, #148]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a1f      	ldr	r2, [pc, #124]	; (8000914 <MX_GPIO_Init+0xe0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_GPIO_Init+0xe0>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f002 f9f8 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_GPIO_Init+0xe4>)
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_GPIO_Init+0xe8>)
 80008ce:	f002 f841 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80008d2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f002 f831 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f2:	2301      	movs	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_GPIO_Init+0xec>)
 8000906:	f002 f825 	bl	8002954 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	10210000 	.word	0x10210000
 800091c:	48000800 	.word	0x48000800
 8000920:	48000400 	.word	0x48000400

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ac      	sub	sp, #176	; 0xb0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2288      	movs	r2, #136	; 0x88
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f004 fbe7 	bl	800516c <memset>
  if(hadc->Instance==ADC1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a3d      	ldr	r2, [pc, #244]	; (8000a98 <HAL_ADC_MspInit+0x120>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d172      	bne.n	8000a8e <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009be:	2308      	movs	r3, #8
 80009c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 ffcd 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009e4:	f7ff ff9e 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <HAL_ADC_MspInit+0x124>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <HAL_ADC_MspInit+0x124>)
 80009ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_ADC_MspInit+0x124>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <HAL_ADC_MspInit+0x124>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <HAL_ADC_MspInit+0x124>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_ADC_MspInit+0x124>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a1e:	230b      	movs	r3, #11
 8000a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f001 ff8e 	bl	8002954 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a3a:	4a1a      	ldr	r2, [pc, #104]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a68:	2220      	movs	r2, #32
 8000a6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a74:	f001 fd76 	bl	8002564 <HAL_DMA_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000a7e:	f7ff ff51 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a88:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	37b0      	adds	r7, #176	; 0xb0
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	50040000 	.word	0x50040000
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	200000dc 	.word	0x200000dc
 8000aa4:	40020008 	.word	0x40020008

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40000800 	.word	0x40000800
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ac      	sub	sp, #176	; 0xb0
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2288      	movs	r2, #136	; 0x88
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fb2f 	bl	800516c <memset>
  if(huart->Instance==USART2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <HAL_UART_MspInit+0xb0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d13b      	bne.n	8000b90 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 ff27 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b30:	f7ff fef8 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_UART_MspInit+0xb4>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b64:	230c      	movs	r3, #12
 8000b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fee2 	bl	8002954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	37b0      	adds	r7, #176	; 0xb0
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8bc 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA1_Channel1_IRQHandler+0x10>)
 8000bfa:	f001 fdcb 	bl	8002794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000dc 	.word	0x200000dc

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <SystemInit+0x5c>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <SystemInit+0x5c>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <SystemInit+0x60>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <SystemInit+0x60>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <SystemInit+0x60>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <SystemInit+0x60>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <SystemInit+0x60>)
 8000c34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <SystemInit+0x60>)
 8000c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <SystemInit+0x60>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <SystemInit+0x60>)
 8000c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SystemInit+0x60>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	40021000 	.word	0x40021000

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffca 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c76:	e003      	b.n	8000c80 <LoopCopyDataInit>

08000c78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c7e:	3104      	adds	r1, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c80:	480a      	ldr	r0, [pc, #40]	; (8000cac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c88:	d3f6      	bcc.n	8000c78 <CopyDataInit>
	ldr	r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c8c:	e002      	b.n	8000c94 <LoopFillZerobss>

08000c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c90:	f842 3b04 	str.w	r3, [r2], #4

08000c94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <LoopForever+0x16>)
	cmp	r2, r3
 8000c96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c98:	d3f9      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f004 fa43 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc31 	bl	8000504 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ca8:	080051ec 	.word	0x080051ec
	ldr	r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cb0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cb4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cb8:	200001ac 	.word	0x200001ac

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f001 fc09 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fe26 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d023      	beq.n	8000d4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_InitTick+0x70>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_InitTick+0x6c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc15 	bl	800254a <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10f      	bne.n	8000d46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d809      	bhi.n	8000d40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f001 fbdf 	bl	80024f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0x74>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e004      	b.n	8000d50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e001      	b.n	8000d50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200001a8 	.word	0x200001a8

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200001a8 	.word	0x200001a8

08000da8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3360      	adds	r3, #96	; 0x60
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LL_ADC_SetOffset+0x44>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	03fff000 	.word	0x03fff000

08000e58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3360      	adds	r3, #96	; 0x60
 8000e66:	461a      	mov	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3360      	adds	r3, #96	; 0x60
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eae:	bf00      	nop
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3330      	adds	r3, #48	; 0x30
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	4413      	add	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	211f      	movs	r1, #31
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	0e9b      	lsrs	r3, r3, #26
 8000f18:	f003 011f 	and.w	r1, r3, #31
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	431a      	orrs	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3314      	adds	r3, #20
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	0e5b      	lsrs	r3, r3, #25
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	4413      	add	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	0d1b      	lsrs	r3, r3, #20
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	2107      	movs	r1, #7
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	0d1b      	lsrs	r3, r3, #20
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	401a      	ands	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0318 	and.w	r3, r3, #24
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fb4:	40d9      	lsrs	r1, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	400b      	ands	r3, r1
 8000fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	0007ffff 	.word	0x0007ffff

08000fd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6093      	str	r3, [r2, #8]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800102c:	d101      	bne.n	8001032 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001054:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800107c:	d101      	bne.n	8001082 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_IsEnabled+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_IsEnabled+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d101      	bne.n	800111e <LL_ADC_IsDisableOngoing+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_IsDisableOngoing+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800113c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001140:	f043 0204 	orr.w	r2, r3, #4
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b04      	cmp	r3, #4
 8001166:	d101      	bne.n	800116c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b08      	cmp	r3, #8
 800118c:	d101      	bne.n	8001192 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e136      	b.n	8001428 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fbd5 	bl	8000978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff19 	bl	8001018 <LL_ADC_IsDeepPowerDownEnabled>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff feff 	bl	8000ff4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff34 	bl	8001068 <LL_ADC_IsInternalRegulatorEnabled>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d115      	bne.n	8001232 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff18 	bl	8001040 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001210:	4b87      	ldr	r3, [pc, #540]	; (8001430 <HAL_ADC_Init+0x290>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	4a87      	ldr	r2, [pc, #540]	; (8001434 <HAL_ADC_Init+0x294>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	3301      	adds	r3, #1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001224:	e002      	b.n	800122c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff16 	bl	8001068 <LL_ADC_IsInternalRegulatorEnabled>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	f043 0210 	orr.w	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff76 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 8001268:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 80cf 	bne.w	8001416 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80cb 	bne.w	8001416 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff23 	bl	80010e0 <LL_ADC_IsEnabled>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d115      	bne.n	80012cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012a0:	4865      	ldr	r0, [pc, #404]	; (8001438 <HAL_ADC_Init+0x298>)
 80012a2:	f7ff ff1d 	bl	80010e0 <LL_ADC_IsEnabled>
 80012a6:	4604      	mov	r4, r0
 80012a8:	4864      	ldr	r0, [pc, #400]	; (800143c <HAL_ADC_Init+0x29c>)
 80012aa:	f7ff ff19 	bl	80010e0 <LL_ADC_IsEnabled>
 80012ae:	4603      	mov	r3, r0
 80012b0:	431c      	orrs	r4, r3
 80012b2:	4863      	ldr	r0, [pc, #396]	; (8001440 <HAL_ADC_Init+0x2a0>)
 80012b4:	f7ff ff14 	bl	80010e0 <LL_ADC_IsEnabled>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4323      	orrs	r3, r4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	485f      	ldr	r0, [pc, #380]	; (8001444 <HAL_ADC_Init+0x2a4>)
 80012c8:	f7ff fd6e 	bl	8000da8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	3b01      	subs	r3, #1
 8001300:	045b      	lsls	r3, r3, #17
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_ADC_Init+0x2a8>)
 800132c:	4013      	ands	r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	430b      	orrs	r3, r1
 8001336:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff09 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 8001342:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff16 	bl	800117a <LL_ADC_INJ_IsConversionOngoing>
 800134e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d13d      	bne.n	80013d2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d13a      	bne.n	80013d2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001360:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001368:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001378:	f023 0302 	bic.w	r3, r3, #2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	430b      	orrs	r3, r1
 8001384:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800138c:	2b01      	cmp	r3, #1
 800138e:	d118      	bne.n	80013c2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800139a:	f023 0304 	bic.w	r3, r3, #4
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013a6:	4311      	orrs	r1, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013ac:	4311      	orrs	r1, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013b2:	430a      	orrs	r2, r1
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	e007      	b.n	80013d2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10c      	bne.n	80013f4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f023 010f 	bic.w	r1, r3, #15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
 80013f2:	e007      	b.n	8001404 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 020f 	bic.w	r2, r2, #15
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f023 0303 	bic.w	r3, r3, #3
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
 8001414:	e007      	b.n	8001426 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001426:	7ffb      	ldrb	r3, [r7, #31]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3724      	adds	r7, #36	; 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000000 	.word	0x20000000
 8001434:	053e2d63 	.word	0x053e2d63
 8001438:	50040000 	.word	0x50040000
 800143c:	50040100 	.word	0x50040100
 8001440:	50040200 	.word	0x50040200
 8001444:	50040300 	.word	0x50040300
 8001448:	fff0c007 	.word	0xfff0c007

0800144c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001458:	4850      	ldr	r0, [pc, #320]	; (800159c <HAL_ADC_Start_DMA+0x150>)
 800145a:	f7ff fdbd 	bl	8000fd8 <LL_ADC_GetMultimode>
 800145e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe75 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 808e 	bne.w	800158e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_ADC_Start_DMA+0x34>
 800147c:	2302      	movs	r3, #2
 800147e:	e089      	b.n	8001594 <HAL_ADC_Start_DMA+0x148>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d002      	beq.n	800149a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b09      	cmp	r3, #9
 8001498:	d172      	bne.n	8001580 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fc98 	bl	8001dd0 <ADC_Enable>
 80014a0:	4603      	mov	r3, r0
 80014a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d165      	bne.n	8001576 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a37      	ldr	r2, [pc, #220]	; (80015a0 <HAL_ADC_Start_DMA+0x154>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d002      	beq.n	80014ce <HAL_ADC_Start_DMA+0x82>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	e000      	b.n	80014d0 <HAL_ADC_Start_DMA+0x84>
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_ADC_Start_DMA+0x158>)
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d002      	beq.n	80014de <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f023 0206 	bic.w	r2, r3, #6
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	659a      	str	r2, [r3, #88]	; 0x58
 8001502:	e002      	b.n	800150a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_ADC_Start_DMA+0x15c>)
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <HAL_ADC_Start_DMA+0x160>)
 8001518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_ADC_Start_DMA+0x164>)
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	221c      	movs	r2, #28
 8001528:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0210 	orr.w	r2, r2, #16
 8001540:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3340      	adds	r3, #64	; 0x40
 800155c:	4619      	mov	r1, r3
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f001 f8b7 	bl	80026d4 <HAL_DMA_Start_IT>
 8001566:	4603      	mov	r3, r0
 8001568:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fddc 	bl	800112c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001574:	e00d      	b.n	8001592 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800157e:	e008      	b.n	8001592 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800158c:	e001      	b.n	8001592 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800158e:	2302      	movs	r3, #2
 8001590:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001592:	7dfb      	ldrb	r3, [r7, #23]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	50040300 	.word	0x50040300
 80015a0:	50040100 	.word	0x50040100
 80015a4:	50040000 	.word	0x50040000
 80015a8:	08001f53 	.word	0x08001f53
 80015ac:	0800202b 	.word	0x0800202b
 80015b0:	08002047 	.word	0x08002047

080015b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0b6      	sub	sp, #216	; 0xd8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x22>
 800160e:	2302      	movs	r3, #2
 8001610:	e3c7      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x7b2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd98 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 83a8 	bne.w	8001d7c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d824      	bhi.n	800167e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	3b02      	subs	r3, #2
 800163a:	2b03      	cmp	r3, #3
 800163c:	d81b      	bhi.n	8001676 <HAL_ADC_ConfigChannel+0x86>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <HAL_ADC_ConfigChannel+0x54>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	08001655 	.word	0x08001655
 8001648:	0800165d 	.word	0x0800165d
 800164c:	08001665 	.word	0x08001665
 8001650:	0800166d 	.word	0x0800166d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	220c      	movs	r2, #12
 8001658:	605a      	str	r2, [r3, #4]
          break;
 800165a:	e011      	b.n	8001680 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2212      	movs	r2, #18
 8001660:	605a      	str	r2, [r3, #4]
          break;
 8001662:	e00d      	b.n	8001680 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2218      	movs	r2, #24
 8001668:	605a      	str	r2, [r3, #4]
          break;
 800166a:	e009      	b.n	8001680 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001672:	605a      	str	r2, [r3, #4]
          break;
 8001674:	e004      	b.n	8001680 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2206      	movs	r2, #6
 800167a:	605a      	str	r2, [r3, #4]
          break;
 800167c:	e000      	b.n	8001680 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800167e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	f7ff fc27 	bl	8000ee0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd5c 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 800169c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fd68 	bl	800117a <LL_ADC_INJ_IsConversionOngoing>
 80016aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 81a6 	bne.w	8001a04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 81a1 	bne.w	8001a04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f7ff fc32 	bl	8000f38 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d00a      	beq.n	800170c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6919      	ldr	r1, [r3, #16]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001706:	f7ff fb83 	bl	8000e10 <LL_ADC_SetOffset>
 800170a:	e17b      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fba0 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10a      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x148>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fb95 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	0e9b      	lsrs	r3, r3, #26
 8001732:	f003 021f 	and.w	r2, r3, #31
 8001736:	e01e      	b.n	8001776 <HAL_ADC_ConfigChannel+0x186>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb8a 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800175a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800175e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001766:	2320      	movs	r3, #32
 8001768:	e004      	b.n	8001774 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800176a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_ADC_ConfigChannel+0x19e>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0e9b      	lsrs	r3, r3, #26
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	e018      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x1d0>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80017b2:	2320      	movs	r3, #32
 80017b4:	e004      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80017b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d106      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fb59 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2101      	movs	r1, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fb3d 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10a      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x20e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fb32 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	0e9b      	lsrs	r3, r3, #26
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	e01e      	b.n	800183c <HAL_ADC_ConfigChannel+0x24c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2101      	movs	r1, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb27 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800181c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	e004      	b.n	800183a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x264>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	e018      	b.n	8001886 <HAL_ADC_ConfigChannel+0x296>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001868:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800186c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001878:	2320      	movs	r3, #32
 800187a:	e004      	b.n	8001886 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800187c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001886:	429a      	cmp	r2, r3
 8001888:	d106      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff faf6 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fada 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x2d4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2102      	movs	r1, #2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff facf 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	0e9b      	lsrs	r3, r3, #26
 80018be:	f003 021f 	and.w	r2, r3, #31
 80018c2:	e01e      	b.n	8001902 <HAL_ADC_ConfigChannel+0x312>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2102      	movs	r1, #2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fac4 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80018f2:	2320      	movs	r3, #32
 80018f4:	e004      	b.n	8001900 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80018f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <HAL_ADC_ConfigChannel+0x32a>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	e016      	b.n	8001948 <HAL_ADC_ConfigChannel+0x358>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800192c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800192e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800193a:	2320      	movs	r3, #32
 800193c:	e004      	b.n	8001948 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800193e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001948:	429a      	cmp	r2, r3
 800194a:	d106      	bne.n	800195a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	2102      	movs	r1, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa95 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2103      	movs	r1, #3
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa79 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10a      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x396>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2103      	movs	r1, #3
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fa6e 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	0e9b      	lsrs	r3, r3, #26
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	e017      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x3c6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2103      	movs	r1, #3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa63 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800199e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80019a8:	2320      	movs	r3, #32
 80019aa:	e003      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80019ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x3de>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	e011      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x402>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80019e6:	2320      	movs	r3, #32
 80019e8:	e003      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80019ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d106      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	2103      	movs	r1, #3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa40 	bl	8000e84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fb69 	bl	80010e0 <LL_ADC_IsEnabled>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f040 813f 	bne.w	8001c94 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6819      	ldr	r1, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	f7ff fab4 	bl	8000f90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a8e      	ldr	r2, [pc, #568]	; (8001c68 <HAL_ADC_ConfigChannel+0x678>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	f040 8130 	bne.w	8001c94 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x46c>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0e9b      	lsrs	r3, r3, #26
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2b09      	cmp	r3, #9
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e019      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x4a0>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e003      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2b09      	cmp	r3, #9
 8001a88:	bf94      	ite	ls
 8001a8a:	2301      	movls	r3, #1
 8001a8c:	2300      	movhi	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d079      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x4c0>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	069b      	lsls	r3, r3, #26
 8001aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aae:	e015      	b.n	8001adc <HAL_ADC_ConfigChannel+0x4ec>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	e003      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	069b      	lsls	r3, r3, #26
 8001ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x50c>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	3301      	adds	r3, #1
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	e017      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x53c>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b14:	2320      	movs	r3, #32
 8001b16:	e003      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	ea42 0103 	orr.w	r1, r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x562>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	3301      	adds	r3, #1
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	051b      	lsls	r3, r3, #20
 8001b50:	e018      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x594>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e003      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b84:	430b      	orrs	r3, r1
 8001b86:	e080      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d107      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x5b4>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	069b      	lsls	r3, r3, #26
 8001b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba2:	e015      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x5e0>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e003      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	069b      	lsls	r3, r3, #26
 8001bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x600>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	3301      	adds	r3, #1
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	e017      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x630>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e003      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	ea42 0103 	orr.w	r1, r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x65c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	3301      	adds	r3, #1
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	051b      	lsls	r3, r3, #20
 8001c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	e01d      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x698>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	613b      	str	r3, [r7, #16]
  return result;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d103      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e005      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x684>
 8001c68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 021f 	and.w	r2, r3, #31
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b1e      	subs	r3, #30
 8001c82:	051b      	lsls	r3, r3, #20
 8001c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7ff f952 	bl	8000f38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_ADC_ConfigChannel+0x7bc>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d07a      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca0:	4843      	ldr	r0, [pc, #268]	; (8001db0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ca2:	f7ff f8a7 	bl	8000df4 <LL_ADC_GetCommonPathInternalCh>
 8001ca6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a41      	ldr	r2, [pc, #260]	; (8001db4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d12c      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d126      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3c      	ldr	r2, [pc, #240]	; (8001db8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0x6e4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_ADC_ConfigChannel+0x7cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d15d      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4834      	ldr	r0, [pc, #208]	; (8001db0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ce0:	f7ff f875 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cfe:	e002      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f9      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d0c:	e040      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d118      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x75a>
 8001d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d112      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x748>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_ADC_ConfigChannel+0x7cc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d12d      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d40:	4619      	mov	r1, r3
 8001d42:	481b      	ldr	r0, [pc, #108]	; (8001db0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d44:	f7ff f843 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d48:	e024      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_ADC_ConfigChannel+0x7dc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d120      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d11a      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d115      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d72:	4619      	mov	r1, r3
 8001d74:	480e      	ldr	r0, [pc, #56]	; (8001db0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d76:	f7ff f82a 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
 8001d7a:	e00c      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	37d8      	adds	r7, #216	; 0xd8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	80080000 	.word	0x80080000
 8001db0:	50040300 	.word	0x50040300
 8001db4:	c7520000 	.word	0xc7520000
 8001db8:	50040000 	.word	0x50040000
 8001dbc:	50040200 	.word	0x50040200
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	053e2d63 	.word	0x053e2d63
 8001dc8:	cb840000 	.word	0xcb840000
 8001dcc:	80000001 	.word	0x80000001

08001dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f97f 	bl	80010e0 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d14d      	bne.n	8001e84 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <ADC_Enable+0xc0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e039      	b.n	8001e86 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f93a 	bl	8001090 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe ffb8 	bl	8000d90 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e22:	e028      	b.n	8001e76 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f959 	bl	80010e0 <LL_ADC_IsEnabled>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d104      	bne.n	8001e3e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f929 	bl	8001090 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e3e:	f7fe ffa7 	bl	8000d90 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d914      	bls.n	8001e76 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00d      	beq.n	8001e76 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e007      	b.n	8001e86 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d1cf      	bne.n	8001e24 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	8000003f 	.word	0x8000003f

08001e94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f930 	bl	8001106 <LL_ADC_IsDisableOngoing>
 8001ea6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f917 	bl	80010e0 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d047      	beq.n	8001f48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d144      	bne.n	8001f48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030d 	and.w	r3, r3, #13
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10c      	bne.n	8001ee6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f8f1 	bl	80010b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2203      	movs	r2, #3
 8001edc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ede:	f7fe ff57 	bl	8000d90 <HAL_GetTick>
 8001ee2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ee4:	e029      	b.n	8001f3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e023      	b.n	8001f4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f02:	f7fe ff45 	bl	8000d90 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d914      	bls.n	8001f3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e007      	b.n	8001f4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1dc      	bne.n	8001f02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d14b      	bne.n	8002004 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d021      	beq.n	8001fca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ff95 	bl	8000eba <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d032      	beq.n	8001ffc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d12b      	bne.n	8001ffc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11f      	bne.n	8001ffc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
 8001fc8:	e018      	b.n	8001ffc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff fad9 	bl	80015b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002002:	e00e      	b.n	8002022 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fae3 	bl	80015dc <HAL_ADC_ErrorCallback>
}
 8002016:	e004      	b.n	8002022 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff fac5 	bl	80015c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f043 0204 	orr.w	r2, r3, #4
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff fab5 	bl	80015dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <LL_ADC_IsEnabled>:
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <LL_ADC_IsEnabled+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_IsEnabled+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_StartCalibration>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020bc:	4313      	orrs	r3, r2
 80020be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_IsCalibrationOnGoing>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e6:	d101      	bne.n	80020ec <LL_ADC_IsCalibrationOnGoing+0x1a>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <LL_ADC_IsCalibrationOnGoing+0x1c>
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_REG_IsConversionOngoing>:
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d101      	bne.n	8002112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_ADCEx_Calibration_Start+0x1c>
 8002138:	2302      	movs	r3, #2
 800213a:	e04d      	b.n	80021d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fea5 	bl	8001e94 <ADC_Disable>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d136      	bne.n	80021c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215c:	f023 0302 	bic.w	r3, r3, #2
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff96 	bl	80020a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002174:	e014      	b.n	80021a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002182:	d30d      	bcc.n	80021a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f023 0312 	bic.w	r3, r3, #18
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01b      	b.n	80021d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff94 	bl	80020d2 <LL_ADC_IsCalibrationOnGoing>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e2      	bne.n	8002176 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	f023 0303 	bic.w	r3, r3, #3
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
 80021c0:	e005      	b.n	80021ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b09f      	sub	sp, #124	; 0x7c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e093      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002206:	2300      	movs	r3, #0
 8002208:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800220a:	2300      	movs	r3, #0
 800220c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a47      	ldr	r2, [pc, #284]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d102      	bne.n	800221e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002218:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	e001      	b.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e072      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff59 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 8002248:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff53 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d154      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800225a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800225c:	2b00      	cmp	r3, #0
 800225e:	d151      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002262:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02c      	beq.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800227e:	035b      	lsls	r3, r3, #13
 8002280:	430b      	orrs	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002288:	4829      	ldr	r0, [pc, #164]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800228a:	f7ff fef6 	bl	800207a <LL_ADC_IsEnabled>
 800228e:	4604      	mov	r4, r0
 8002290:	4828      	ldr	r0, [pc, #160]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002292:	f7ff fef2 	bl	800207a <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	431c      	orrs	r4, r3
 800229a:	4828      	ldr	r0, [pc, #160]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800229c:	f7ff feed 	bl	800207a <LL_ADC_IsEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4323      	orrs	r3, r4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d137      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022b0:	f023 030f 	bic.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	6811      	ldr	r1, [r2, #0]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	6892      	ldr	r2, [r2, #8]
 80022bc:	430a      	orrs	r2, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c4:	e028      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d2:	4817      	ldr	r0, [pc, #92]	; (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022d4:	f7ff fed1 	bl	800207a <LL_ADC_IsEnabled>
 80022d8:	4604      	mov	r4, r0
 80022da:	4816      	ldr	r0, [pc, #88]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022dc:	f7ff fecd 	bl	800207a <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	431c      	orrs	r4, r3
 80022e4:	4815      	ldr	r0, [pc, #84]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022e6:	f7ff fec8 	bl	800207a <LL_ADC_IsEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4323      	orrs	r3, r4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022fa:	f023 030f 	bic.w	r3, r3, #15
 80022fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002300:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002302:	e009      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002316:	e000      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002318:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002322:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002326:	4618      	mov	r0, r3
 8002328:	377c      	adds	r7, #124	; 0x7c
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	50040000 	.word	0x50040000
 8002334:	50040100 	.word	0x50040100
 8002338:	50040300 	.word	0x50040300
 800233c:	50040200 	.word	0x50040200

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	; (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff29 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff3e 	bl	8002388 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff31 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e098      	b.n	80026a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_DMA_Init+0x150>)
 800257e:	429a      	cmp	r2, r3
 8002580:	d80f      	bhi.n	80025a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_DMA_Init+0x154>)
 800258a:	4413      	add	r3, r2
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <HAL_DMA_Init+0x158>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	009a      	lsls	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_DMA_Init+0x15c>)
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
 80025a0:	e00e      	b.n	80025c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <HAL_DMA_Init+0x160>)
 80025aa:	4413      	add	r3, r2
 80025ac:	4a43      	ldr	r2, [pc, #268]	; (80026bc <HAL_DMA_Init+0x158>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	009a      	lsls	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <HAL_DMA_Init+0x164>)
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800261a:	d039      	beq.n	8002690 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_DMA_Init+0x15c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d11a      	bne.n	800265c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_DMA_Init+0x168>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 031c 	and.w	r3, r3, #28
 8002632:	210f      	movs	r1, #15
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4924      	ldr	r1, [pc, #144]	; (80026cc <HAL_DMA_Init+0x168>)
 800263c:	4013      	ands	r3, r2
 800263e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_DMA_Init+0x168>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f003 031c 	and.w	r3, r3, #28
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	491d      	ldr	r1, [pc, #116]	; (80026cc <HAL_DMA_Init+0x168>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
 800265a:	e019      	b.n	8002690 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_DMA_Init+0x16c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f003 031c 	and.w	r3, r3, #28
 8002668:	210f      	movs	r1, #15
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	4917      	ldr	r1, [pc, #92]	; (80026d0 <HAL_DMA_Init+0x16c>)
 8002672:	4013      	ands	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_DMA_Init+0x16c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f003 031c 	and.w	r3, r3, #28
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	4911      	ldr	r1, [pc, #68]	; (80026d0 <HAL_DMA_Init+0x16c>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40020407 	.word	0x40020407
 80026b8:	bffdfff8 	.word	0xbffdfff8
 80026bc:	cccccccd 	.word	0xcccccccd
 80026c0:	40020000 	.word	0x40020000
 80026c4:	bffdfbf8 	.word	0xbffdfbf8
 80026c8:	40020400 	.word	0x40020400
 80026cc:	400200a8 	.word	0x400200a8
 80026d0:	400204a8 	.word	0x400204a8

080026d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Start_IT+0x20>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e04b      	b.n	800278c <HAL_DMA_Start_IT+0xb8>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d13a      	bne.n	800277e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f8e0 	bl	80028f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 020e 	orr.w	r2, r2, #14
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00f      	b.n	800276c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0204 	bic.w	r2, r2, #4
 800275a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 020a 	orr.w	r2, r2, #10
 800276a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e005      	b.n	800278a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f003 031c 	and.w	r3, r3, #28
 80027b4:	2204      	movs	r2, #4
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d026      	beq.n	800280e <HAL_DMA_IRQHandler+0x7a>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d021      	beq.n	800280e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0204 	bic.w	r2, r2, #4
 80027e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f003 021c 	and.w	r2, r3, #28
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2104      	movs	r1, #4
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b00      	cmp	r3, #0
 8002802:	d071      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800280c:	e06c      	b.n	80028e8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f003 031c 	and.w	r3, r3, #28
 8002816:	2202      	movs	r2, #2
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02e      	beq.n	8002880 <HAL_DMA_IRQHandler+0xec>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d029      	beq.n	8002880 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 020a 	bic.w	r2, r2, #10
 8002848:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f003 021c 	and.w	r2, r3, #28
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2102      	movs	r1, #2
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d038      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800287e:	e033      	b.n	80028e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f003 031c 	and.w	r3, r3, #28
 8002888:	2208      	movs	r2, #8
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d02a      	beq.n	80028ea <HAL_DMA_IRQHandler+0x156>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d025      	beq.n	80028ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 020e 	bic.w	r2, r2, #14
 80028ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f003 021c 	and.w	r2, r3, #28
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
}
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f003 021c 	and.w	r2, r3, #28
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b10      	cmp	r3, #16
 8002922:	d108      	bne.n	8002936 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002934:	e007      	b.n	8002946 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	60da      	str	r2, [r3, #12]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	e17f      	b.n	8002c64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8171 	beq.w	8002c5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d00b      	beq.n	800299c <HAL_GPIO_Init+0x48>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d007      	beq.n	800299c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002990:	2b11      	cmp	r3, #17
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b12      	cmp	r3, #18
 800299a:	d130      	bne.n	80029fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d2:	2201      	movs	r2, #1
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0201 	and.w	r2, r3, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d118      	bne.n	8002a3c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x128>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d123      	bne.n	8002ac4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	6939      	ldr	r1, [r7, #16]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80ac 	beq.w	8002c5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_GPIO_Init+0x330>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	; (8002c84 <HAL_GPIO_Init+0x330>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6613      	str	r3, [r2, #96]	; 0x60
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_GPIO_Init+0x330>)
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <HAL_GPIO_Init+0x334>)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x242>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_GPIO_Init+0x338>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x23e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_GPIO_Init+0x33c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x23a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <HAL_GPIO_Init+0x340>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x236>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_GPIO_Init+0x344>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x232>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <HAL_GPIO_Init+0x348>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x22e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_GPIO_Init+0x34c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x22a>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b96:	2300      	movs	r3, #0
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba8:	4937      	ldr	r1, [pc, #220]	; (8002c88 <HAL_GPIO_Init+0x334>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bda:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c04:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f ae78 	bne.w	8002964 <HAL_GPIO_Init+0x10>
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48001000 	.word	0x48001000
 8002c9c:	48001400 	.word	0x48001400
 8002ca0:	48001800 	.word	0x48001800
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d02:	d130      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d038      	beq.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2232      	movs	r2, #50	; 0x32
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d38:	e002      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4c:	d102      	bne.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f2      	bne.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d110      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e00f      	b.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d007      	beq.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7c:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	431bde83 	.word	0x431bde83

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e3d4      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4ba1      	ldr	r3, [pc, #644]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b9e      	ldr	r3, [pc, #632]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80e4 	beq.w	8002f9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_RCC_OscConfig+0x4a>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	f040 808b 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 8087 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dea:	4b93      	ldr	r3, [pc, #588]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e3ac      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_RCC_OscConfig+0x7c>
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1a:	e005      	b.n	8002e28 <HAL_RCC_OscConfig+0x88>
 8002e1c:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d223      	bcs.n	8002e74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fd41 	bl	80038b8 <RCC_SetFlashLatencyFromMSIRange>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e38d      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4977      	ldr	r1, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	4972      	ldr	r1, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
 8002e72:	e025      	b.n	8002ec0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	496a      	ldr	r1, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e92:	4b69      	ldr	r3, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	4965      	ldr	r1, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fd01 	bl	80038b8 <RCC_SetFlashLatencyFromMSIRange>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e34d      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec0:	f000 fc36 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	495a      	ldr	r1, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x29c>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_OscConfig+0x2a0>)
 8002ede:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x2a4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd ff03 	bl	8000cf0 <HAL_InitTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d052      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	e331      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd ff40 	bl	8000d90 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7fd ff3c 	bl	8000d90 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e31a      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	493b      	ldr	r1, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	4936      	ldr	r1, [pc, #216]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	e01a      	b.n	8002f9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a33      	ldr	r2, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7fd ff0d 	bl	8000d90 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fd ff09 	bl	8000d90 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e2e7      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x1da>
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d074      	beq.n	8003092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x21a>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d064      	beq.n	8003090 <HAL_RCC_OscConfig+0x2f0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d160      	bne.n	8003090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e2c4      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x24a>
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e01d      	b.n	8003026 <HAL_RCC_OscConfig+0x286>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x26e>
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8002ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e00b      	b.n	8003026 <HAL_RCC_OscConfig+0x286>
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a06      	ldr	r2, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x298>)
 8003020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01c      	beq.n	8003068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fd feaf 	bl	8000d90 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003034:	e011      	b.n	800305a <HAL_RCC_OscConfig+0x2ba>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	08005194 	.word	0x08005194
 8003040:	20000000 	.word	0x20000000
 8003044:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fd fea2 	bl	8000d90 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e280      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	4baf      	ldr	r3, [pc, #700]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x2a8>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd fe92 	bl	8000d90 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fd fe8e 	bl	8000d90 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e26c      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	4ba5      	ldr	r3, [pc, #660]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x2d0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d060      	beq.n	8003160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x310>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d119      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d116      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	4b99      	ldr	r3, [pc, #612]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x328>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e249      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b93      	ldr	r3, [pc, #588]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4990      	ldr	r1, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030dc:	e040      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d023      	beq.n	800312e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e6:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a8b      	ldr	r2, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd fe4d 	bl	8000d90 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fd fe49 	bl	8000d90 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e227      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	497c      	ldr	r1, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e018      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fd fe29 	bl	8000d90 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fd fe25 	bl	8000d90 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e203      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01c      	beq.n	80031ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fd fe04 	bl	8000d90 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fd fe00 	bl	8000d90 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1de      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319e:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <HAL_RCC_OscConfig+0x3ec>
 80031ac:	e01b      	b.n	80031e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fd fde7 	bl	8000d90 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fd fde3 	bl	8000d90 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1c1      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ef      	bne.n	80031c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80a6 	beq.w	8003340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4a43      	ldr	r2, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d118      	bne.n	800325e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3a      	ldr	r2, [pc, #232]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003238:	f7fd fdaa 	bl	8000d90 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fd fda6 	bl	8000d90 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e184      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCC_OscConfig+0x57c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x4d8>
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	e024      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d110      	bne.n	80032a2 <HAL_RCC_OscConfig+0x502>
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a24      	ldr	r2, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a0:	e00f      	b.n	80032c2 <HAL_RCC_OscConfig+0x522>
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032ba:	f023 0304 	bic.w	r3, r3, #4
 80032be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fd fd61 	bl	8000d90 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd fd5d 	bl	8000d90 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e139      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x578>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ed      	beq.n	80032d2 <HAL_RCC_OscConfig+0x532>
 80032f6:	e01a      	b.n	800332e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fd fd4a 	bl	8000d90 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fd fd46 	bl	8000d90 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d906      	bls.n	8003320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e122      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e8      	bne.n	8003300 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a8a      	ldr	r2, [pc, #552]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8108 	beq.w	800355a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	2b02      	cmp	r3, #2
 8003350:	f040 80d0 	bne.w	80034f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003354:	4b83      	ldr	r3, [pc, #524]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	429a      	cmp	r2, r3
 8003366:	d130      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d127      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11f      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003394:	2a07      	cmp	r2, #7
 8003396:	bf14      	ite	ne
 8003398:	2201      	movne	r2, #1
 800339a:	2200      	moveq	r2, #0
 800339c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	4293      	cmp	r3, r2
 80033a0:	d113      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d06e      	beq.n	80034a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d069      	beq.n	80034a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b7      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f8:	f7fd fcca 	bl	8000d90 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd fcc6 	bl	8000d90 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0a4      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341e:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_OscConfig+0x7c8>)
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800342e:	3a01      	subs	r2, #1
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003438:	0212      	lsls	r2, r2, #8
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0552      	lsls	r2, r2, #21
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800344c:	0852      	lsrs	r2, r2, #1
 800344e:	3a01      	subs	r2, #1
 8003450:	0652      	lsls	r2, r2, #25
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003458:	0912      	lsrs	r2, r2, #4
 800345a:	0452      	lsls	r2, r2, #17
 800345c:	430a      	orrs	r2, r1
 800345e:	4941      	ldr	r1, [pc, #260]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3e      	ldr	r2, [pc, #248]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800347c:	f7fd fc88 	bl	8000d90 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd fc84 	bl	8000d90 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e062      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a2:	e05a      	b.n	800355a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e059      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a8:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d152      	bne.n	800355a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a27      	ldr	r2, [pc, #156]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034cc:	f7fd fc60 	bl	8000d90 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd fc5c 	bl	8000d90 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e03a      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x734>
 80034f2:	e032      	b.n	800355a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d02d      	beq.n	8003556 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a13      	ldr	r2, [pc, #76]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 8003524:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd fc2f 	bl	8000d90 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd fc2b 	bl	8000d90 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e009      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x7c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x796>
 8003554:	e001      	b.n	800355a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	f99d808c 	.word	0xf99d808c

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0c8      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d910      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 0207 	bic.w	r2, r3, #7
 8003596:	4961      	ldr	r1, [pc, #388]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b0      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d04c      	beq.n	8003656 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c4:	4b56      	ldr	r3, [pc, #344]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e09e      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e092      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f4:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e086      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003604:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e07e      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 0203 	bic.w	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	493f      	ldr	r1, [pc, #252]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd fbb3 	bl	8000d90 <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	e00a      	b.n	8003644 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fd fbaf 	bl	8000d90 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e066      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 020c 	and.w	r2, r3, #12
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	429a      	cmp	r2, r3
 8003654:	d1eb      	bne.n	800362e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	492c      	ldr	r1, [pc, #176]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d210      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 0207 	bic.w	r2, r3, #7
 800368a:	4924      	ldr	r1, [pc, #144]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <HAL_RCC_ClockConfig+0x1b0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e036      	b.n	8003712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4918      	ldr	r1, [pc, #96]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4910      	ldr	r1, [pc, #64]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e2:	f000 f825 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	490c      	ldr	r1, [pc, #48]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	5ccb      	ldrb	r3, [r1, r3]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd faf2 	bl	8000cf0 <HAL_InitTick>
 800370c:	4603      	mov	r3, r0
 800370e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003710:	7afb      	ldrb	r3, [r7, #11]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	08005194 	.word	0x08005194
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373e:	4b3e      	ldr	r3, [pc, #248]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x34>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d121      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11e      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003770:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e005      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_RCC_GetSysClockFreq+0x10c>)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_GetSysClockFreq+0x110>)
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e004      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCC_GetSysClockFreq+0x114>)
 80037b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d134      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d003      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0xac>
 80037d4:	e005      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_RCC_GetSysClockFreq+0x110>)
 80037d8:	617b      	str	r3, [r7, #20]
      break;
 80037da:	e005      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_GetSysClockFreq+0x114>)
 80037de:	617b      	str	r3, [r7, #20]
      break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	617b      	str	r3, [r7, #20]
      break;
 80037e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	3301      	adds	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	fb02 f203 	mul.w	r2, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_RCC_GetSysClockFreq+0x108>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0e5b      	lsrs	r3, r3, #25
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	3301      	adds	r3, #1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003828:	69bb      	ldr	r3, [r7, #24]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	080051ac 	.word	0x080051ac
 8003840:	00f42400 	.word	0x00f42400
 8003844:	007a1200 	.word	0x007a1200

08003848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_RCC_GetHCLKFreq+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003864:	f7ff fff0 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	080051a4 	.word	0x080051a4

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003890:	f7ff ffda 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0adb      	lsrs	r3, r3, #11
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	080051a4 	.word	0x080051a4

080038b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038d0:	f7ff fa02 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 80038d4:	6178      	str	r0, [r7, #20]
 80038d6:	e014      	b.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6593      	str	r3, [r2, #88]	; 0x58
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038f0:	f7ff f9f2 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 80038f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d10b      	bne.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d919      	bls.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2ba0      	cmp	r3, #160	; 0xa0
 8003914:	d902      	bls.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003916:	2302      	movs	r3, #2
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e013      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800391c:	2301      	movs	r3, #1
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e010      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d902      	bls.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003928:	2303      	movs	r3, #3
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e00a      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d102      	bne.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003934:	2302      	movs	r3, #2
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	e004      	b.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b70      	cmp	r3, #112	; 0x70
 800393e:	d101      	bne.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003940:	2301      	movs	r3, #1
 8003942:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	4909      	ldr	r1, [pc, #36]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	40022000 	.word	0x40022000

08003978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003980:	2300      	movs	r3, #0
 8003982:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003984:	2300      	movs	r3, #0
 8003986:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d041      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003998:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800399c:	d02a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800399e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a2:	d824      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ae:	d81e      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b8:	d010      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039ba:	e018      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039bc:	4b86      	ldr	r3, [pc, #536]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a85      	ldr	r2, [pc, #532]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c8:	e015      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fabb 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039da:	e00c      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3320      	adds	r3, #32
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fba6 	bl	8004134 <RCCEx_PLLSAI2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	74fb      	strb	r3, [r7, #19]
      break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039fc:	4b76      	ldr	r3, [pc, #472]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0a:	4973      	ldr	r1, [pc, #460]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a12:	e001      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d041      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a2c:	d02a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a32:	d824      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a38:	d008      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a3e:	d81e      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a48:	d010      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a4c:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a58:	e015      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fa73 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6a:	e00c      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3320      	adds	r3, #32
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fb5e 	bl	8004134 <RCCEx_PLLSAI2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	74fb      	strb	r3, [r7, #19]
      break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8c:	4b52      	ldr	r3, [pc, #328]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9a:	494f      	ldr	r1, [pc, #316]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aa2:	e001      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80a0 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003aca:	2300      	movs	r3, #0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	4a40      	ldr	r2, [pc, #256]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6593      	str	r3, [r2, #88]	; 0x58
 8003adc:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aec:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af8:	f7fd f94a 	bl	8000d90 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003afe:	e009      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fd f946 	bl	8000d90 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	74fb      	strb	r3, [r7, #19]
        break;
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d15c      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d019      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b50:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd f905 	bl	8000d90 <HAL_GetTick>
 8003b86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd f901 	bl	8000d90 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d902      	bls.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ec      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	4904      	ldr	r1, [pc, #16]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bce:	e009      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be4:	7c7b      	ldrb	r3, [r7, #17]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b9e      	ldr	r3, [pc, #632]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a9d      	ldr	r2, [pc, #628]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c02:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f023 0203 	bic.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	4994      	ldr	r1, [pc, #592]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c24:	4b8f      	ldr	r3, [pc, #572]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f023 020c 	bic.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	498c      	ldr	r1, [pc, #560]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c46:	4b87      	ldr	r3, [pc, #540]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	4983      	ldr	r1, [pc, #524]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c68:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	497b      	ldr	r1, [pc, #492]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c8a:	4b76      	ldr	r3, [pc, #472]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c98:	4972      	ldr	r1, [pc, #456]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cac:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	496a      	ldr	r1, [pc, #424]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cce:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	4961      	ldr	r1, [pc, #388]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf0:	4b5c      	ldr	r3, [pc, #368]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	4959      	ldr	r1, [pc, #356]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d12:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d20:	4950      	ldr	r1, [pc, #320]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d34:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	4948      	ldr	r1, [pc, #288]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d56:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	493f      	ldr	r1, [pc, #252]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d028      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d78:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	4937      	ldr	r1, [pc, #220]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d98:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da2:	60d3      	str	r3, [r2, #12]
 8003da4:	e011      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003daa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dae:	d10c      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f8c8 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d028      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dd6:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	491f      	ldr	r1, [pc, #124]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003df4:	d106      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e00:	60d3      	str	r3, [r2, #12]
 8003e02:	e011      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 f899 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	4908      	ldr	r1, [pc, #32]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e52:	d109      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a02      	ldr	r2, [pc, #8]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5e:	60d3      	str	r3, [r2, #12]
 8003e60:	e014      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2101      	movs	r1, #1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f867 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02f      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea6:	4928      	ldr	r1, [pc, #160]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f844 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d014      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	74bb      	strb	r3, [r7, #18]
 8003ed2:	e011      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3320      	adds	r3, #32
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f925 	bl	8004134 <RCCEx_PLLSAI2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f12:	490d      	ldr	r1, [pc, #52]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f36:	4904      	ldr	r1, [pc, #16]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000

08003f4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f5a:	4b75      	ldr	r3, [pc, #468]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d018      	beq.n	8003f98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f66:	4b72      	ldr	r3, [pc, #456]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d10d      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
       ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d047      	beq.n	8004022 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
 8003f96:	e044      	b.n	8004022 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d018      	beq.n	8003fd2 <RCCEx_PLLSAI1_Config+0x86>
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d825      	bhi.n	8003ff0 <RCCEx_PLLSAI1_Config+0xa4>
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d002      	beq.n	8003fae <RCCEx_PLLSAI1_Config+0x62>
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d009      	beq.n	8003fc0 <RCCEx_PLLSAI1_Config+0x74>
 8003fac:	e020      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fae:	4b60      	ldr	r3, [pc, #384]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11d      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbe:	e01a      	b.n	8003ff6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fc0:	4b5b      	ldr	r3, [pc, #364]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d116      	bne.n	8003ffa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd0:	e013      	b.n	8003ffa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fd2:	4b57      	ldr	r3, [pc, #348]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fde:	4b54      	ldr	r3, [pc, #336]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fee:	e006      	b.n	8003ffe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e004      	b.n	8004000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004006:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	430b      	orrs	r3, r1
 800401c:	4944      	ldr	r1, [pc, #272]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d17d      	bne.n	8004124 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004028:	4b41      	ldr	r3, [pc, #260]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a40      	ldr	r2, [pc, #256]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fc feac 	bl	8000d90 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800403a:	e009      	b.n	8004050 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800403c:	f7fc fea8 	bl	8000d90 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d902      	bls.n	8004050 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	73fb      	strb	r3, [r7, #15]
        break;
 800404e:	e005      	b.n	800405c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ef      	bne.n	800403c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d160      	bne.n	8004124 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d111      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	0912      	lsrs	r2, r2, #4
 8004080:	0452      	lsls	r2, r2, #17
 8004082:	430a      	orrs	r2, r1
 8004084:	492a      	ldr	r1, [pc, #168]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	610b      	str	r3, [r1, #16]
 800408a:	e027      	b.n	80040dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d112      	bne.n	80040b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004092:	4b27      	ldr	r3, [pc, #156]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800409a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	0211      	lsls	r1, r2, #8
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6912      	ldr	r2, [r2, #16]
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0552      	lsls	r2, r2, #21
 80040ae:	430a      	orrs	r2, r1
 80040b0:	491f      	ldr	r1, [pc, #124]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	610b      	str	r3, [r1, #16]
 80040b6:	e011      	b.n	80040dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6892      	ldr	r2, [r2, #8]
 80040c8:	0211      	lsls	r1, r2, #8
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6952      	ldr	r2, [r2, #20]
 80040ce:	0852      	lsrs	r2, r2, #1
 80040d0:	3a01      	subs	r2, #1
 80040d2:	0652      	lsls	r2, r2, #25
 80040d4:	430a      	orrs	r2, r1
 80040d6:	4916      	ldr	r1, [pc, #88]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a13      	ldr	r2, [pc, #76]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fc fe52 	bl	8000d90 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ee:	e009      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f0:	f7fc fe4e 	bl	8000d90 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	73fb      	strb	r3, [r7, #15]
          break;
 8004102:	e005      	b.n	8004110 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ef      	beq.n	80040f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	4904      	ldr	r1, [pc, #16]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000

08004134 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004142:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d018      	beq.n	8004180 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0203 	and.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d10d      	bne.n	800417a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
       ||
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004166:	4b61      	ldr	r3, [pc, #388]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
       ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d047      	beq.n	800420a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
 800417e:	e044      	b.n	800420a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d018      	beq.n	80041ba <RCCEx_PLLSAI2_Config+0x86>
 8004188:	2b03      	cmp	r3, #3
 800418a:	d825      	bhi.n	80041d8 <RCCEx_PLLSAI2_Config+0xa4>
 800418c:	2b01      	cmp	r3, #1
 800418e:	d002      	beq.n	8004196 <RCCEx_PLLSAI2_Config+0x62>
 8004190:	2b02      	cmp	r3, #2
 8004192:	d009      	beq.n	80041a8 <RCCEx_PLLSAI2_Config+0x74>
 8004194:	e020      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004196:	4b55      	ldr	r3, [pc, #340]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d11d      	bne.n	80041de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a6:	e01a      	b.n	80041de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d116      	bne.n	80041e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b8:	e013      	b.n	80041e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ba:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041c6:	4b49      	ldr	r3, [pc, #292]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041d6:	e006      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      break;
 80041dc:	e004      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041de:	bf00      	nop
 80041e0:	e002      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041e2:	bf00      	nop
 80041e4:	e000      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	3b01      	subs	r3, #1
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	430b      	orrs	r3, r1
 8004204:	4939      	ldr	r1, [pc, #228]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d167      	bne.n	80042e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004210:	4b36      	ldr	r3, [pc, #216]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a35      	ldr	r2, [pc, #212]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fc fdb8 	bl	8000d90 <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004222:	e009      	b.n	8004238 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004224:	f7fc fdb4 	bl	8000d90 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d902      	bls.n	8004238 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	73fb      	strb	r3, [r7, #15]
        break;
 8004236:	e005      	b.n	8004244 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004238:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ef      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d14a      	bne.n	80042e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6892      	ldr	r2, [r2, #8]
 8004260:	0211      	lsls	r1, r2, #8
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68d2      	ldr	r2, [r2, #12]
 8004266:	0912      	lsrs	r2, r2, #4
 8004268:	0452      	lsls	r2, r2, #17
 800426a:	430a      	orrs	r2, r1
 800426c:	491f      	ldr	r1, [pc, #124]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	614b      	str	r3, [r1, #20]
 8004272:	e011      	b.n	8004298 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800427c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6892      	ldr	r2, [r2, #8]
 8004284:	0211      	lsls	r1, r2, #8
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6912      	ldr	r2, [r2, #16]
 800428a:	0852      	lsrs	r2, r2, #1
 800428c:	3a01      	subs	r2, #1
 800428e:	0652      	lsls	r2, r2, #25
 8004290:	430a      	orrs	r2, r1
 8004292:	4916      	ldr	r1, [pc, #88]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8004294:	4313      	orrs	r3, r2
 8004296:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004298:	4b14      	ldr	r3, [pc, #80]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fc fd74 	bl	8000d90 <HAL_GetTick>
 80042a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042aa:	e009      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042ac:	f7fc fd70 	bl	8000d90 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d902      	bls.n	80042c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	73fb      	strb	r3, [r7, #15]
          break;
 80042be:	e005      	b.n	80042cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ef      	beq.n	80042ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4904      	ldr	r1, [pc, #16]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e049      	b.n	8004396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fbc6 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 f8fc 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_ConfigClockSource+0x18>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0b5      	b.n	8004522 <HAL_TIM_ConfigClockSource+0x184>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	d03e      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0xd4>
 80043f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f8:	f200 8087 	bhi.w	800450a <HAL_TIM_ConfigClockSource+0x16c>
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	f000 8085 	beq.w	800450e <HAL_TIM_ConfigClockSource+0x170>
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004408:	d87f      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 800440a:	2b70      	cmp	r3, #112	; 0x70
 800440c:	d01a      	beq.n	8004444 <HAL_TIM_ConfigClockSource+0xa6>
 800440e:	2b70      	cmp	r3, #112	; 0x70
 8004410:	d87b      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 8004412:	2b60      	cmp	r3, #96	; 0x60
 8004414:	d050      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x11a>
 8004416:	2b60      	cmp	r3, #96	; 0x60
 8004418:	d877      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 800441a:	2b50      	cmp	r3, #80	; 0x50
 800441c:	d03c      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0xfa>
 800441e:	2b50      	cmp	r3, #80	; 0x50
 8004420:	d873      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d058      	beq.n	80044d8 <HAL_TIM_ConfigClockSource+0x13a>
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d86f      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 800442a:	2b30      	cmp	r3, #48	; 0x30
 800442c:	d064      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0x15a>
 800442e:	2b30      	cmp	r3, #48	; 0x30
 8004430:	d86b      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 8004432:	2b20      	cmp	r3, #32
 8004434:	d060      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0x15a>
 8004436:	2b20      	cmp	r3, #32
 8004438:	d867      	bhi.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d05c      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0x15a>
 800443e:	2b10      	cmp	r3, #16
 8004440:	d05a      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004442:	e062      	b.n	800450a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f000 f97e 	bl	8004754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004466:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]
      break;
 8004470:	e04e      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f000 f967 	bl	8004754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004494:	609a      	str	r2, [r3, #8]
      break;
 8004496:	e03b      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	461a      	mov	r2, r3
 80044a6:	f000 f8db 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2150      	movs	r1, #80	; 0x50
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f934 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 80044b6:	e02b      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	461a      	mov	r2, r3
 80044c6:	f000 f8fa 	bl	80046be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2160      	movs	r1, #96	; 0x60
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f924 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 80044d6:	e01b      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	461a      	mov	r2, r3
 80044e6:	f000 f8bb 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2140      	movs	r1, #64	; 0x40
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f914 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 80044f6:	e00b      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 f90b 	bl	800471e <TIM_ITRx_SetConfig>
        break;
 8004508:	e002      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800450e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <TIM_Base_SetConfig+0x118>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3c      	ldr	r2, [pc, #240]	; (8004648 <TIM_Base_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3b      	ldr	r2, [pc, #236]	; (800464c <TIM_Base_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3a      	ldr	r2, [pc, #232]	; (8004650 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01f      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d01b      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <TIM_Base_SetConfig+0x118>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d017      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <TIM_Base_SetConfig+0x11c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <TIM_Base_SetConfig+0x120>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <TIM_Base_SetConfig+0x124>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a28      	ldr	r2, [pc, #160]	; (8004654 <TIM_Base_SetConfig+0x128>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a27      	ldr	r2, [pc, #156]	; (8004658 <TIM_Base_SetConfig+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a26      	ldr	r2, [pc, #152]	; (800465c <TIM_Base_SetConfig+0x130>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <TIM_Base_SetConfig+0x124>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a11      	ldr	r2, [pc, #68]	; (8004654 <TIM_Base_SetConfig+0x128>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a10      	ldr	r2, [pc, #64]	; (8004658 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <TIM_Base_SetConfig+0x130>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	615a      	str	r2, [r3, #20]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 030a 	bic.w	r3, r3, #10
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	031b      	lsls	r3, r3, #12
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	f043 0307 	orr.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e068      	b.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2e      	ldr	r2, [pc, #184]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2d      	ldr	r2, [pc, #180]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d108      	bne.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1e      	ldr	r2, [pc, #120]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d018      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a13      	ldr	r2, [pc, #76]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10c      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40013400 	.word	0x40013400
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40014000 	.word	0x40014000

080048a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e040      	b.n	8004938 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc f90e 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	; 0x24
 80048d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f82c 	bl	8004940 <UART_SetConfig>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e022      	b.n	8004938 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 faaa 	bl	8004e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb31 	bl	8004f98 <UART_CheckIdleState>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4bad      	ldr	r3, [pc, #692]	; (8004c20 <UART_SetConfig+0x2e0>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4aa2      	ldr	r2, [pc, #648]	; (8004c24 <UART_SetConfig+0x2e4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a99      	ldr	r2, [pc, #612]	; (8004c28 <UART_SetConfig+0x2e8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d121      	bne.n	8004a0a <UART_SetConfig+0xca>
 80049c6:	4b99      	ldr	r3, [pc, #612]	; (8004c2c <UART_SetConfig+0x2ec>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d817      	bhi.n	8004a04 <UART_SetConfig+0xc4>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x9c>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	080049f3 	.word	0x080049f3
 80049e8:	080049ff 	.word	0x080049ff
 80049ec:	2301      	movs	r3, #1
 80049ee:	76fb      	strb	r3, [r7, #27]
 80049f0:	e0e7      	b.n	8004bc2 <UART_SetConfig+0x282>
 80049f2:	2302      	movs	r3, #2
 80049f4:	76fb      	strb	r3, [r7, #27]
 80049f6:	e0e4      	b.n	8004bc2 <UART_SetConfig+0x282>
 80049f8:	2304      	movs	r3, #4
 80049fa:	76fb      	strb	r3, [r7, #27]
 80049fc:	e0e1      	b.n	8004bc2 <UART_SetConfig+0x282>
 80049fe:	2308      	movs	r3, #8
 8004a00:	76fb      	strb	r3, [r7, #27]
 8004a02:	e0de      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a04:	2310      	movs	r3, #16
 8004a06:	76fb      	strb	r3, [r7, #27]
 8004a08:	e0db      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a88      	ldr	r2, [pc, #544]	; (8004c30 <UART_SetConfig+0x2f0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d132      	bne.n	8004a7a <UART_SetConfig+0x13a>
 8004a14:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <UART_SetConfig+0x2ec>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d828      	bhi.n	8004a74 <UART_SetConfig+0x134>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0xe8>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004a75 	.word	0x08004a75
 8004a30:	08004a75 	.word	0x08004a75
 8004a34:	08004a75 	.word	0x08004a75
 8004a38:	08004a69 	.word	0x08004a69
 8004a3c:	08004a75 	.word	0x08004a75
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004a75 	.word	0x08004a75
 8004a48:	08004a63 	.word	0x08004a63
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a75 	.word	0x08004a75
 8004a58:	08004a6f 	.word	0x08004a6f
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	76fb      	strb	r3, [r7, #27]
 8004a60:	e0af      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a62:	2302      	movs	r3, #2
 8004a64:	76fb      	strb	r3, [r7, #27]
 8004a66:	e0ac      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e0a9      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	76fb      	strb	r3, [r7, #27]
 8004a72:	e0a6      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a74:	2310      	movs	r3, #16
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e0a3      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a6d      	ldr	r2, [pc, #436]	; (8004c34 <UART_SetConfig+0x2f4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d120      	bne.n	8004ac6 <UART_SetConfig+0x186>
 8004a84:	4b69      	ldr	r3, [pc, #420]	; (8004c2c <UART_SetConfig+0x2ec>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d013      	beq.n	8004aba <UART_SetConfig+0x17a>
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d814      	bhi.n	8004ac0 <UART_SetConfig+0x180>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d009      	beq.n	8004aae <UART_SetConfig+0x16e>
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d810      	bhi.n	8004ac0 <UART_SetConfig+0x180>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <UART_SetConfig+0x168>
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d006      	beq.n	8004ab4 <UART_SetConfig+0x174>
 8004aa6:	e00b      	b.n	8004ac0 <UART_SetConfig+0x180>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	76fb      	strb	r3, [r7, #27]
 8004aac:	e089      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	76fb      	strb	r3, [r7, #27]
 8004ab2:	e086      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	76fb      	strb	r3, [r7, #27]
 8004ab8:	e083      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004aba:	2308      	movs	r3, #8
 8004abc:	76fb      	strb	r3, [r7, #27]
 8004abe:	e080      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	76fb      	strb	r3, [r7, #27]
 8004ac4:	e07d      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5b      	ldr	r2, [pc, #364]	; (8004c38 <UART_SetConfig+0x2f8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d120      	bne.n	8004b12 <UART_SetConfig+0x1d2>
 8004ad0:	4b56      	ldr	r3, [pc, #344]	; (8004c2c <UART_SetConfig+0x2ec>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d013      	beq.n	8004b06 <UART_SetConfig+0x1c6>
 8004ade:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae0:	d814      	bhi.n	8004b0c <UART_SetConfig+0x1cc>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d009      	beq.n	8004afa <UART_SetConfig+0x1ba>
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d810      	bhi.n	8004b0c <UART_SetConfig+0x1cc>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <UART_SetConfig+0x1b4>
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d006      	beq.n	8004b00 <UART_SetConfig+0x1c0>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x1cc>
 8004af4:	2300      	movs	r3, #0
 8004af6:	76fb      	strb	r3, [r7, #27]
 8004af8:	e063      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004afa:	2302      	movs	r3, #2
 8004afc:	76fb      	strb	r3, [r7, #27]
 8004afe:	e060      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b00:	2304      	movs	r3, #4
 8004b02:	76fb      	strb	r3, [r7, #27]
 8004b04:	e05d      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b06:	2308      	movs	r3, #8
 8004b08:	76fb      	strb	r3, [r7, #27]
 8004b0a:	e05a      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	76fb      	strb	r3, [r7, #27]
 8004b10:	e057      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a49      	ldr	r2, [pc, #292]	; (8004c3c <UART_SetConfig+0x2fc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d125      	bne.n	8004b68 <UART_SetConfig+0x228>
 8004b1c:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <UART_SetConfig+0x2ec>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2a:	d017      	beq.n	8004b5c <UART_SetConfig+0x21c>
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d817      	bhi.n	8004b62 <UART_SetConfig+0x222>
 8004b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b36:	d00b      	beq.n	8004b50 <UART_SetConfig+0x210>
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d811      	bhi.n	8004b62 <UART_SetConfig+0x222>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <UART_SetConfig+0x20a>
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b46:	d006      	beq.n	8004b56 <UART_SetConfig+0x216>
 8004b48:	e00b      	b.n	8004b62 <UART_SetConfig+0x222>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	76fb      	strb	r3, [r7, #27]
 8004b4e:	e038      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b50:	2302      	movs	r3, #2
 8004b52:	76fb      	strb	r3, [r7, #27]
 8004b54:	e035      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b56:	2304      	movs	r3, #4
 8004b58:	76fb      	strb	r3, [r7, #27]
 8004b5a:	e032      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	76fb      	strb	r3, [r7, #27]
 8004b60:	e02f      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b62:	2310      	movs	r3, #16
 8004b64:	76fb      	strb	r3, [r7, #27]
 8004b66:	e02c      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <UART_SetConfig+0x2e4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d125      	bne.n	8004bbe <UART_SetConfig+0x27e>
 8004b72:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <UART_SetConfig+0x2ec>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b80:	d017      	beq.n	8004bb2 <UART_SetConfig+0x272>
 8004b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b86:	d817      	bhi.n	8004bb8 <UART_SetConfig+0x278>
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d00b      	beq.n	8004ba6 <UART_SetConfig+0x266>
 8004b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b92:	d811      	bhi.n	8004bb8 <UART_SetConfig+0x278>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <UART_SetConfig+0x260>
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d006      	beq.n	8004bac <UART_SetConfig+0x26c>
 8004b9e:	e00b      	b.n	8004bb8 <UART_SetConfig+0x278>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e00d      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	76fb      	strb	r3, [r7, #27]
 8004baa:	e00a      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004bac:	2304      	movs	r3, #4
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e007      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	76fb      	strb	r3, [r7, #27]
 8004bb6:	e004      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	76fb      	strb	r3, [r7, #27]
 8004bbc:	e001      	b.n	8004bc2 <UART_SetConfig+0x282>
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <UART_SetConfig+0x2e4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	f040 8087 	bne.w	8004cdc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bce:	7efb      	ldrb	r3, [r7, #27]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d837      	bhi.n	8004c44 <UART_SetConfig+0x304>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x29c>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c45 	.word	0x08004c45
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c45 	.word	0x08004c45
 8004bec:	08004c0f 	.word	0x08004c0f
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004c45 	.word	0x08004c45
 8004bf8:	08004c45 	.word	0x08004c45
 8004bfc:	08004c17 	.word	0x08004c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fe fe2e 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8004c04:	6178      	str	r0, [r7, #20]
        break;
 8004c06:	e022      	b.n	8004c4e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <UART_SetConfig+0x300>)
 8004c0a:	617b      	str	r3, [r7, #20]
        break;
 8004c0c:	e01f      	b.n	8004c4e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0e:	f7fe fd8f 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8004c12:	6178      	str	r0, [r7, #20]
        break;
 8004c14:	e01b      	b.n	8004c4e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1a:	617b      	str	r3, [r7, #20]
        break;
 8004c1c:	e017      	b.n	8004c4e <UART_SetConfig+0x30e>
 8004c1e:	bf00      	nop
 8004c20:	efff69f3 	.word	0xefff69f3
 8004c24:	40008000 	.word	0x40008000
 8004c28:	40013800 	.word	0x40013800
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40004400 	.word	0x40004400
 8004c34:	40004800 	.word	0x40004800
 8004c38:	40004c00 	.word	0x40004c00
 8004c3c:	40005000 	.word	0x40005000
 8004c40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	76bb      	strb	r3, [r7, #26]
        break;
 8004c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80f1 	beq.w	8004e38 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d305      	bcc.n	8004c72 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d902      	bls.n	8004c78 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	76bb      	strb	r3, [r7, #26]
 8004c76:	e0df      	b.n	8004e38 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	020b      	lsls	r3, r1, #8
 8004c8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c8e:	0202      	lsls	r2, r0, #8
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	6849      	ldr	r1, [r1, #4]
 8004c94:	0849      	lsrs	r1, r1, #1
 8004c96:	4608      	mov	r0, r1
 8004c98:	f04f 0100 	mov.w	r1, #0
 8004c9c:	1814      	adds	r4, r2, r0
 8004c9e:	eb43 0501 	adc.w	r5, r3, r1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	4620      	mov	r0, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	f7fb fa8a 	bl	80001c8 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc2:	d308      	bcc.n	8004cd6 <UART_SetConfig+0x396>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cca:	d204      	bcs.n	8004cd6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	e0b0      	b.n	8004e38 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	76bb      	strb	r3, [r7, #26]
 8004cda:	e0ad      	b.n	8004e38 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d15c      	bne.n	8004da0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004ce6:	7efb      	ldrb	r3, [r7, #27]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d828      	bhi.n	8004d3e <UART_SetConfig+0x3fe>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x3b4>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d21 	.word	0x08004d21
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d2f 	.word	0x08004d2f
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d3f 	.word	0x08004d3f
 8004d14:	08004d37 	.word	0x08004d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fe fda2 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	6178      	str	r0, [r7, #20]
        break;
 8004d1e:	e013      	b.n	8004d48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fe fdb4 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004d24:	6178      	str	r0, [r7, #20]
        break;
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <UART_SetConfig+0x510>)
 8004d2a:	617b      	str	r3, [r7, #20]
        break;
 8004d2c:	e00c      	b.n	8004d48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fe fcff 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8004d32:	6178      	str	r0, [r7, #20]
        break;
 8004d34:	e008      	b.n	8004d48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3a:	617b      	str	r3, [r7, #20]
        break;
 8004d3c:	e004      	b.n	8004d48 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	76bb      	strb	r3, [r7, #26]
        break;
 8004d46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d074      	beq.n	8004e38 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	005a      	lsls	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b0f      	cmp	r3, #15
 8004d6a:	d916      	bls.n	8004d9a <UART_SetConfig+0x45a>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d72:	d212      	bcs.n	8004d9a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f023 030f 	bic.w	r3, r3, #15
 8004d7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	89fb      	ldrh	r3, [r7, #14]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	89fa      	ldrh	r2, [r7, #14]
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e04e      	b.n	8004e38 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	76bb      	strb	r3, [r7, #26]
 8004d9e:	e04b      	b.n	8004e38 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da0:	7efb      	ldrb	r3, [r7, #27]
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d827      	bhi.n	8004df6 <UART_SetConfig+0x4b6>
 8004da6:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x46c>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004df7 	.word	0x08004df7
 8004dbc:	08004de7 	.word	0x08004de7
 8004dc0:	08004df7 	.word	0x08004df7
 8004dc4:	08004df7 	.word	0x08004df7
 8004dc8:	08004df7 	.word	0x08004df7
 8004dcc:	08004def 	.word	0x08004def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7fe fd46 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	6178      	str	r0, [r7, #20]
        break;
 8004dd6:	e013      	b.n	8004e00 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7fe fd58 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004ddc:	6178      	str	r0, [r7, #20]
        break;
 8004dde:	e00f      	b.n	8004e00 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <UART_SetConfig+0x510>)
 8004de2:	617b      	str	r3, [r7, #20]
        break;
 8004de4:	e00c      	b.n	8004e00 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de6:	f7fe fca3 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8004dea:	6178      	str	r0, [r7, #20]
        break;
 8004dec:	e008      	b.n	8004e00 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	617b      	str	r3, [r7, #20]
        break;
 8004df4:	e004      	b.n	8004e00 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76bb      	strb	r3, [r7, #26]
        break;
 8004dfe:	bf00      	nop
    }

    if (pclk != 0U)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	085a      	lsrs	r2, r3, #1
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	441a      	add	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b0f      	cmp	r3, #15
 8004e20:	d908      	bls.n	8004e34 <UART_SetConfig+0x4f4>
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d204      	bcs.n	8004e34 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	e001      	b.n	8004e38 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e44:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f52:	d10a      	bne.n	8004f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa8:	f7fb fef2 	bl	8000d90 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d10e      	bne.n	8004fda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f82d 	bl	800502a <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e023      	b.n	8005022 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d10e      	bne.n	8005006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f817 	bl	800502a <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e00d      	b.n	8005022 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503a:	e05e      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d05a      	beq.n	80050fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fb fea4 	bl	8000d90 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <UART_WaitOnFlagUntilTimeout+0x30>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11b      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005068:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e043      	b.n	800511a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02c      	beq.n	80050fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ae:	d124      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e00f      	b.n	800511a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4013      	ands	r3, r2
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	429a      	cmp	r2, r3
 8005116:	d091      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4d0d      	ldr	r5, [pc, #52]	; (800515c <__libc_init_array+0x38>)
 8005128:	4c0d      	ldr	r4, [pc, #52]	; (8005160 <__libc_init_array+0x3c>)
 800512a:	1b64      	subs	r4, r4, r5
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	2600      	movs	r6, #0
 8005130:	42a6      	cmp	r6, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	4d0b      	ldr	r5, [pc, #44]	; (8005164 <__libc_init_array+0x40>)
 8005136:	4c0c      	ldr	r4, [pc, #48]	; (8005168 <__libc_init_array+0x44>)
 8005138:	f000 f820 	bl	800517c <_init>
 800513c:	1b64      	subs	r4, r4, r5
 800513e:	10a4      	asrs	r4, r4, #2
 8005140:	2600      	movs	r6, #0
 8005142:	42a6      	cmp	r6, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f855 3b04 	ldr.w	r3, [r5], #4
 800514c:	4798      	blx	r3
 800514e:	3601      	adds	r6, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f855 3b04 	ldr.w	r3, [r5], #4
 8005156:	4798      	blx	r3
 8005158:	3601      	adds	r6, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	080051e4 	.word	0x080051e4
 8005160:	080051e4 	.word	0x080051e4
 8005164:	080051e4 	.word	0x080051e4
 8005168:	080051e8 	.word	0x080051e8

0800516c <memset>:
 800516c:	4402      	add	r2, r0
 800516e:	4603      	mov	r3, r0
 8005170:	4293      	cmp	r3, r2
 8005172:	d100      	bne.n	8005176 <memset+0xa>
 8005174:	4770      	bx	lr
 8005176:	f803 1b01 	strb.w	r1, [r3], #1
 800517a:	e7f9      	b.n	8005170 <memset+0x4>

0800517c <_init>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr

08005188 <_fini>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr
