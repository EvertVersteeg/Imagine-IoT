
SecondProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb4  08006eb4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ebc  08006ebc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000007c  08006f40  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08006f40  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016250  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f4  00000000  00000000  000362fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00038cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e01  00000000  00000000  0003b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014694  00000000  00000000  00065169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d31  00000000  00000000  000797fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018252e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e40  00000000  00000000  00182584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c64 	.word	0x08006c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006c64 	.word	0x08006c64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b96e 	b.w	8000c40 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	4604      	mov	r4, r0
 8000984:	468c      	mov	ip, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	f040 8083 	bne.w	8000a92 <__udivmoddi4+0x116>
 800098c:	428a      	cmp	r2, r1
 800098e:	4617      	mov	r7, r2
 8000990:	d947      	bls.n	8000a22 <__udivmoddi4+0xa6>
 8000992:	fab2 f282 	clz	r2, r2
 8000996:	b142      	cbz	r2, 80009aa <__udivmoddi4+0x2e>
 8000998:	f1c2 0020 	rsb	r0, r2, #32
 800099c:	fa24 f000 	lsr.w	r0, r4, r0
 80009a0:	4091      	lsls	r1, r2
 80009a2:	4097      	lsls	r7, r2
 80009a4:	ea40 0c01 	orr.w	ip, r0, r1
 80009a8:	4094      	lsls	r4, r2
 80009aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009ae:	0c23      	lsrs	r3, r4, #16
 80009b0:	fbbc f6f8 	udiv	r6, ip, r8
 80009b4:	fa1f fe87 	uxth.w	lr, r7
 80009b8:	fb08 c116 	mls	r1, r8, r6, ip
 80009bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009c0:	fb06 f10e 	mul.w	r1, r6, lr
 80009c4:	4299      	cmp	r1, r3
 80009c6:	d909      	bls.n	80009dc <__udivmoddi4+0x60>
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80009ce:	f080 8119 	bcs.w	8000c04 <__udivmoddi4+0x288>
 80009d2:	4299      	cmp	r1, r3
 80009d4:	f240 8116 	bls.w	8000c04 <__udivmoddi4+0x288>
 80009d8:	3e02      	subs	r6, #2
 80009da:	443b      	add	r3, r7
 80009dc:	1a5b      	subs	r3, r3, r1
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e4:	fb08 3310 	mls	r3, r8, r0, r3
 80009e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d909      	bls.n	8000a08 <__udivmoddi4+0x8c>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fa:	f080 8105 	bcs.w	8000c08 <__udivmoddi4+0x28c>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	f240 8102 	bls.w	8000c08 <__udivmoddi4+0x28c>
 8000a04:	3802      	subs	r0, #2
 8000a06:	443c      	add	r4, r7
 8000a08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0c:	eba4 040e 	sub.w	r4, r4, lr
 8000a10:	2600      	movs	r6, #0
 8000a12:	b11d      	cbz	r5, 8000a1c <__udivmoddi4+0xa0>
 8000a14:	40d4      	lsrs	r4, r2
 8000a16:	2300      	movs	r3, #0
 8000a18:	e9c5 4300 	strd	r4, r3, [r5]
 8000a1c:	4631      	mov	r1, r6
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	b902      	cbnz	r2, 8000a26 <__udivmoddi4+0xaa>
 8000a24:	deff      	udf	#255	; 0xff
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d150      	bne.n	8000ad0 <__udivmoddi4+0x154>
 8000a2e:	1bcb      	subs	r3, r1, r7
 8000a30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a34:	fa1f f887 	uxth.w	r8, r7
 8000a38:	2601      	movs	r6, #1
 8000a3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a3e:	0c21      	lsrs	r1, r4, #16
 8000a40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb08 f30c 	mul.w	r3, r8, ip
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d907      	bls.n	8000a60 <__udivmoddi4+0xe4>
 8000a50:	1879      	adds	r1, r7, r1
 8000a52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0xe2>
 8000a58:	428b      	cmp	r3, r1
 8000a5a:	f200 80e9 	bhi.w	8000c30 <__udivmoddi4+0x2b4>
 8000a5e:	4684      	mov	ip, r0
 8000a60:	1ac9      	subs	r1, r1, r3
 8000a62:	b2a3      	uxth	r3, r4
 8000a64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a70:	fb08 f800 	mul.w	r8, r8, r0
 8000a74:	45a0      	cmp	r8, r4
 8000a76:	d907      	bls.n	8000a88 <__udivmoddi4+0x10c>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x10a>
 8000a80:	45a0      	cmp	r8, r4
 8000a82:	f200 80d9 	bhi.w	8000c38 <__udivmoddi4+0x2bc>
 8000a86:	4618      	mov	r0, r3
 8000a88:	eba4 0408 	sub.w	r4, r4, r8
 8000a8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a90:	e7bf      	b.n	8000a12 <__udivmoddi4+0x96>
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d909      	bls.n	8000aaa <__udivmoddi4+0x12e>
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	f000 80b1 	beq.w	8000bfe <__udivmoddi4+0x282>
 8000a9c:	2600      	movs	r6, #0
 8000a9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	4631      	mov	r1, r6
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	fab3 f683 	clz	r6, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d14a      	bne.n	8000b48 <__udivmoddi4+0x1cc>
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0x140>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 80b8 	bhi.w	8000c2c <__udivmoddi4+0x2b0>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb61 0103 	sbc.w	r1, r1, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	468c      	mov	ip, r1
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d0a8      	beq.n	8000a1c <__udivmoddi4+0xa0>
 8000aca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ace:	e7a5      	b.n	8000a1c <__udivmoddi4+0xa0>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ad8:	4097      	lsls	r7, r2
 8000ada:	fa01 f002 	lsl.w	r0, r1, r2
 8000ade:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae2:	40d9      	lsrs	r1, r3
 8000ae4:	4330      	orrs	r0, r6
 8000ae6:	0c03      	lsrs	r3, r0, #16
 8000ae8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000af4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af8:	fb06 f108 	mul.w	r1, r6, r8
 8000afc:	4299      	cmp	r1, r3
 8000afe:	fa04 f402 	lsl.w	r4, r4, r2
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x19c>
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b0a:	f080 808d 	bcs.w	8000c28 <__udivmoddi4+0x2ac>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 808a 	bls.w	8000c28 <__udivmoddi4+0x2ac>
 8000b14:	3e02      	subs	r6, #2
 8000b16:	443b      	add	r3, r7
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b281      	uxth	r1, r0
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b28:	fb00 f308 	mul.w	r3, r0, r8
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x1c4>
 8000b30:	1879      	adds	r1, r7, r1
 8000b32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b36:	d273      	bcs.n	8000c20 <__udivmoddi4+0x2a4>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d971      	bls.n	8000c20 <__udivmoddi4+0x2a4>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	4439      	add	r1, r7
 8000b40:	1acb      	subs	r3, r1, r3
 8000b42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b46:	e778      	b.n	8000a3a <__udivmoddi4+0xbe>
 8000b48:	f1c6 0c20 	rsb	ip, r6, #32
 8000b4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b54:	431c      	orrs	r4, r3
 8000b56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b66:	431f      	orrs	r7, r3
 8000b68:	0c3b      	lsrs	r3, r7, #16
 8000b6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b6e:	fa1f f884 	uxth.w	r8, r4
 8000b72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b7e:	458a      	cmp	sl, r1
 8000b80:	fa02 f206 	lsl.w	r2, r2, r6
 8000b84:	fa00 f306 	lsl.w	r3, r0, r6
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x220>
 8000b8a:	1861      	adds	r1, r4, r1
 8000b8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b90:	d248      	bcs.n	8000c24 <__udivmoddi4+0x2a8>
 8000b92:	458a      	cmp	sl, r1
 8000b94:	d946      	bls.n	8000c24 <__udivmoddi4+0x2a8>
 8000b96:	f1a9 0902 	sub.w	r9, r9, #2
 8000b9a:	4421      	add	r1, r4
 8000b9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ba0:	b2bf      	uxth	r7, r7
 8000ba2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000baa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bae:	fb00 f808 	mul.w	r8, r0, r8
 8000bb2:	45b8      	cmp	r8, r7
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x24a>
 8000bb6:	19e7      	adds	r7, r4, r7
 8000bb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bbc:	d22e      	bcs.n	8000c1c <__udivmoddi4+0x2a0>
 8000bbe:	45b8      	cmp	r8, r7
 8000bc0:	d92c      	bls.n	8000c1c <__udivmoddi4+0x2a0>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4427      	add	r7, r4
 8000bc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bca:	eba7 0708 	sub.w	r7, r7, r8
 8000bce:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd2:	454f      	cmp	r7, r9
 8000bd4:	46c6      	mov	lr, r8
 8000bd6:	4649      	mov	r1, r9
 8000bd8:	d31a      	bcc.n	8000c10 <__udivmoddi4+0x294>
 8000bda:	d017      	beq.n	8000c0c <__udivmoddi4+0x290>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x27a>
 8000bde:	ebb3 020e 	subs.w	r2, r3, lr
 8000be2:	eb67 0701 	sbc.w	r7, r7, r1
 8000be6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bea:	40f2      	lsrs	r2, r6
 8000bec:	ea4c 0202 	orr.w	r2, ip, r2
 8000bf0:	40f7      	lsrs	r7, r6
 8000bf2:	e9c5 2700 	strd	r2, r7, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	462e      	mov	r6, r5
 8000c00:	4628      	mov	r0, r5
 8000c02:	e70b      	b.n	8000a1c <__udivmoddi4+0xa0>
 8000c04:	4606      	mov	r6, r0
 8000c06:	e6e9      	b.n	80009dc <__udivmoddi4+0x60>
 8000c08:	4618      	mov	r0, r3
 8000c0a:	e6fd      	b.n	8000a08 <__udivmoddi4+0x8c>
 8000c0c:	4543      	cmp	r3, r8
 8000c0e:	d2e5      	bcs.n	8000bdc <__udivmoddi4+0x260>
 8000c10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c14:	eb69 0104 	sbc.w	r1, r9, r4
 8000c18:	3801      	subs	r0, #1
 8000c1a:	e7df      	b.n	8000bdc <__udivmoddi4+0x260>
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	e7d2      	b.n	8000bc6 <__udivmoddi4+0x24a>
 8000c20:	4660      	mov	r0, ip
 8000c22:	e78d      	b.n	8000b40 <__udivmoddi4+0x1c4>
 8000c24:	4681      	mov	r9, r0
 8000c26:	e7b9      	b.n	8000b9c <__udivmoddi4+0x220>
 8000c28:	4666      	mov	r6, ip
 8000c2a:	e775      	b.n	8000b18 <__udivmoddi4+0x19c>
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	e74a      	b.n	8000ac6 <__udivmoddi4+0x14a>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	4439      	add	r1, r7
 8000c36:	e713      	b.n	8000a60 <__udivmoddi4+0xe4>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	e724      	b.n	8000a88 <__udivmoddi4+0x10c>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_idiv0>:
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00b      	beq.n	8000c84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c6c:	e000      	b.n	8000c70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f9      	beq.n	8000c6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_write>:
#ifndef SRC_DEBUG_H_
#define SRC_DEBUG_H_


int _write(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e009      	b.n	8000cbc <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffc7 	bl	8000c44 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf1      	blt.n	8000ca8 <_write+0x16>
  return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 ffbe 	bl	8001c54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f842 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 f9a4 	bl	8001028 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ce0:	f000 f954 	bl	8000f8c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000ce4:	f000 f982 	bl	8000fec <MX_DMA_Init>
  MX_ADC1_Init();
 8000ce8:	f000 f88c 	bl	8000e04 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000cec:	f000 f900 	bl	8000ef0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\r\n");
 8000cf0:	4817      	ldr	r0, [pc, #92]	; (8000d50 <main+0x80>)
 8000cf2:	f005 f871 	bl	8005dd8 <puts>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f002 fd74 	bl	80037ec <HAL_GPIO_WritePin>
  msgMode = true;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <main+0x84>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]

  //test();
  busTest();
 8000d0a:	f000 fa05 	bl	8001118 <busTest>
  //initialisation();
  //msgMode = true;
  scanShortAdd();
 8000d0e:	f000 fb9f 	bl	8001450 <scanShortAdd>
  getResponse = false;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <main+0x88>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf ("Main loop start\r\n");
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <main+0x8c>)
 8000d1a:	f005 f85d 	bl	8005dd8 <puts>

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f002 fd60 	bl	80037ec <HAL_GPIO_WritePin>
		 transmit(BROADCAST_C, OFF_C);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	f000 fb04 	bl	800133c <transmit>

		 HAL_Delay(2000);
 8000d34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d38:	f001 f808 	bl	8001d4c <HAL_Delay>
		 transmit(BROADCAST_C, ON_AND_STEP_UP_C);
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	20ff      	movs	r0, #255	; 0xff
 8000d40:	f000 fafc 	bl	800133c <transmit>
		 //transmit(0x01, 0xA1);
		 HAL_Delay(2000);
 8000d44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d48:	f001 f800 	bl	8001d4c <HAL_Delay>
	  printf ("Main loop start\r\n");
 8000d4c:	e7e4      	b.n	8000d18 <main+0x48>
 8000d4e:	bf00      	nop
 8000d50:	08006c7c 	.word	0x08006c7c
 8000d54:	20000100 	.word	0x20000100
 8000d58:	20000168 	.word	0x20000168
 8000d5c:	08006c84 	.word	0x08006c84

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	2244      	movs	r2, #68	; 0x44
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 ffa4 	bl	8005cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d86:	f002 fd57 	bl	8003838 <HAL_PWREx_ControlVoltageScaling>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d90:	f000 fd0a 	bl	80017a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	2302      	movs	r3, #2
 8000da8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dae:	230a      	movs	r3, #10
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fd8e 	bl	80038e4 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dce:	f000 fceb 	bl	80017a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	2104      	movs	r1, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f960 	bl	80040b0 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000df6:	f000 fcd7 	bl	80017a8 <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3758      	adds	r7, #88	; 0x58
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e28:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <MX_ADC1_Init+0xe4>)
 8000e2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000e88:	f001 f946 	bl	8002118 <HAL_ADC_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e92:	f000 fc89 	bl	80017a8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000ea2:	f001 ffcf 	bl	8002e44 <HAL_ADCEx_MultiModeConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000eac:	f000 fc7c 	bl	80017a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_ADC1_Init+0xe8>)
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ebc:	237f      	movs	r3, #127	; 0x7f
 8000ebe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_ADC1_Init+0xe0>)
 8000ece:	f001 fb41 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ed8:	f000 fc66 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000104 	.word	0x20000104
 8000ee8:	50040000 	.word	0x50040000
 8000eec:	14f00020 	.word	0x14f00020

08000ef0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <MX_TIM4_Init+0x98>)
 8000f12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f16:	224f      	movs	r2, #79	; 0x4f
 8000f18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f36:	f003 ff7d 	bl	8004e34 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f40:	f000 fc32 	bl	80017a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f52:	f003 ffc6 	bl	8004ee2 <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f5c:	f000 fc24 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM4_Init+0x94>)
 8000f6e:	f004 f9b3 	bl	80052d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f000 fc16 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000ac 	.word	0x200000ac
 8000f88:	40000800 	.word	0x40000800

08000f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_USART2_UART_Init+0x5c>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fd0:	f004 fa0a 	bl	80053e8 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 fbe5 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001b4 	.word	0x200001b4
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_DMA_Init+0x38>)
 8000ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <MX_DMA_Init+0x38>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_DMA_Init+0x38>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	200b      	movs	r0, #11
 8001010:	f002 f8a3 	bl	800315a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001014:	200b      	movs	r0, #11
 8001016:	f002 f8bc 	bl	8003192 <HAL_NVIC_EnableIRQ>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <MX_GPIO_Init+0xe4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a32      	ldr	r2, [pc, #200]	; (800110c <MX_GPIO_Init+0xe4>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <MX_GPIO_Init+0xe4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <MX_GPIO_Init+0xe4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a2c      	ldr	r2, [pc, #176]	; (800110c <MX_GPIO_Init+0xe4>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_GPIO_Init+0xe4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_GPIO_Init+0xe4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a26      	ldr	r2, [pc, #152]	; (800110c <MX_GPIO_Init+0xe4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_GPIO_Init+0xe4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_GPIO_Init+0xe4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <MX_GPIO_Init+0xe4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_GPIO_Init+0xe4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f002 fba0 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_GPIO_Init+0xe8>)
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <MX_GPIO_Init+0xec>)
 80010c2:	f002 f9e9 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80010c6:	f44f 7390 	mov.w	r3, #288	; 0x120
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f002 f9d9 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f002 f9cb 	bl	8003498 <HAL_GPIO_Init>

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	10210000 	.word	0x10210000
 8001114:	48000800 	.word	0x48000800

08001118 <busTest>:
	middlebyte = input >> 8;
	lowbyte = input;
}

void busTest(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	//Luminaries must turn on and turn off. If not, check connection.
	printf("Start bus test\r\n");
 800111c:	482e      	ldr	r0, [pc, #184]	; (80011d8 <busTest+0xc0>)
 800111e:	f004 fe5b 	bl	8005dd8 <puts>
	HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f000 fe12 	bl	8001d4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f002 fb5b 	bl	80037ec <HAL_GPIO_WritePin>
	transmit(BROADCAST_C, OFF_C);  //0x00 FE
 8001136:	2100      	movs	r1, #0
 8001138:	20ff      	movs	r0, #255	; 0xff
 800113a:	f000 f8ff 	bl	800133c <transmit>
	printf ("Lampen 2s uit\r\n");
 800113e:	4827      	ldr	r0, [pc, #156]	; (80011dc <busTest+0xc4>)
 8001140:	f004 fe4a 	bl	8005dd8 <puts>
	HAL_Delay(2000);
 8001144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001148:	f000 fe00 	bl	8001d4c <HAL_Delay>
	transmit(BROADCAST_C, ON_AND_STEP_UP_C);
 800114c:	2108      	movs	r1, #8
 800114e:	20ff      	movs	r0, #255	; 0xff
 8001150:	f000 f8f4 	bl	800133c <transmit>
	printf ("Lampen 2s aan\r\n");  //0x00 DE
 8001154:	4822      	ldr	r0, [pc, #136]	; (80011e0 <busTest+0xc8>)
 8001156:	f004 fe3f 	bl	8005dd8 <puts>
	HAL_Delay(2000);
 800115a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800115e:	f000 fdf5 	bl	8001d4c <HAL_Delay>
	transmit(BROADCAST_C, OFF_C);
 8001162:	2100      	movs	r1, #0
 8001164:	20ff      	movs	r0, #255	; 0xff
 8001166:	f000 f8e9 	bl	800133c <transmit>
	printf ("Lampen 2s uit\r\n");
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <busTest+0xc4>)
 800116c:	f004 fe34 	bl	8005dd8 <puts>
	HAL_Delay(2000);
 8001170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001174:	f000 fdea 	bl	8001d4c <HAL_Delay>
	printf("Einde aansturing lampen\r\n");
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <busTest+0xcc>)
 800117a:	f004 fe2d 	bl	8005dd8 <puts>

	//Receive response from luminaries: max and min level
	//transmit(BROADCAST_C, QUERY_STATUS);
	maxLevel = maxResponseLevel();
 800117e:	f000 f841 	bl	8001204 <maxResponseLevel>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <busTest+0xd0>)
 8001188:	801a      	strh	r2, [r3, #0]
	printf("maxResponseLevel = %d\r\n", maxLevel); //0x00 EC EB
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <busTest+0xd0>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <busTest+0xd4>)
 8001192:	f004 fd9b 	bl	8005ccc <iprintf>
	//transmit(BROADCAST_C, QUERY_STATUS);
	minLevel = minResponseLevel();
 8001196:	f000 f867 	bl	8001268 <minResponseLevel>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <busTest+0xd8>)
 80011a0:	801a      	strh	r2, [r3, #0]
	printf("minResponseLevel = %d\r\n", minLevel); //0x00 EC EB
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <busTest+0xd8>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <busTest+0xdc>)
 80011aa:	f004 fd8f 	bl	8005ccc <iprintf>

	analogLevel = (uint16_t)(maxLevel + minLevel) / 2;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <busTest+0xd0>)
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <busTest+0xd8>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	085b      	lsrs	r3, r3, #1
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <busTest+0xe0>)
 80011c0:	801a      	strh	r2, [r3, #0]
	printf("analogLevel = %d\r\n", analogLevel);
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <busTest+0xe0>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <busTest+0xe4>)
 80011ca:	f004 fd7f 	bl	8005ccc <iprintf>
	printf("Einde bus test\r\n");
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <busTest+0xe8>)
 80011d0:	f004 fe02 	bl	8005dd8 <puts>

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08006d0c 	.word	0x08006d0c
 80011dc:	08006d1c 	.word	0x08006d1c
 80011e0:	08006d2c 	.word	0x08006d2c
 80011e4:	08006d3c 	.word	0x08006d3c
 80011e8:	200000aa 	.word	0x200000aa
 80011ec:	08006d58 	.word	0x08006d58
 80011f0:	200000a8 	.word	0x200000a8
 80011f4:	08006d70 	.word	0x08006d70
 80011f8:	20000006 	.word	0x20000006
 80011fc:	08006d88 	.word	0x08006d88
 8001200:	08006d9c 	.word	0x08006d9c

08001204 <maxResponseLevel>:
	transmit(number,  QUERY_STATUS);

}

uint16_t maxResponseLevel(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
	const uint8_t dalistep = 40; //us
 800120a:	2328      	movs	r3, #40	; 0x28
 800120c:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start(&hadc1);
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <maxResponseLevel+0x5c>)
 8001210:	f001 f8d8 	bl	80023c4 <HAL_ADC_Start>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	uint16_t rxmax = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	81fb      	strh	r3, [r7, #14]
	uint32_t dalidata;
	uint32_t idalistep;
	transmit(BROADCAST_C, QUERY_STATUS);
 8001218:	2190      	movs	r1, #144	; 0x90
 800121a:	20ff      	movs	r0, #255	; 0xff
 800121c:	f000 f88e 	bl	800133c <transmit>
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	e012      	b.n	800124c <maxResponseLevel+0x48>

		dalidata = HAL_ADC_GetValue(&hadc1);
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <maxResponseLevel+0x5c>)
 8001228:	f001 f986 	bl	8002538 <HAL_ADC_GetValue>
 800122c:	6038      	str	r0, [r7, #0]

		if (dalidata > rxmax) {
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d901      	bls.n	800123a <maxResponseLevel+0x36>
			rxmax = dalidata;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	81fb      	strh	r3, [r7, #14]
			};
		delay_us(dalistep);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f846 	bl	80012d0 <delay_us>
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4413      	add	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <maxResponseLevel+0x60>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3e7      	bcc.n	8001226 <maxResponseLevel+0x22>
		}
		return rxmax;
 8001256:	89fb      	ldrh	r3, [r7, #14]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000104 	.word	0x20000104
 8001264:	20000008 	.word	0x20000008

08001268 <minResponseLevel>:

uint16_t minResponseLevel(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
	const uint8_t dalistep = 40; //us
 800126e:	2328      	movs	r3, #40	; 0x28
 8001270:	71fb      	strb	r3, [r7, #7]
	uint16_t rxmin = 4095;
 8001272:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001276:	81fb      	strh	r3, [r7, #14]
	uint16_t dalidata;
	uint32_t idalistep;
	transmit(BROADCAST_C, QUERY_STATUS);
 8001278:	2190      	movs	r1, #144	; 0x90
 800127a:	20ff      	movs	r0, #255	; 0xff
 800127c:	f000 f85e 	bl	800133c <transmit>
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	e016      	b.n	80012b4 <minResponseLevel+0x4c>
		HAL_ADC_Start(&hadc1);
 8001286:	4810      	ldr	r0, [pc, #64]	; (80012c8 <minResponseLevel+0x60>)
 8001288:	f001 f89c 	bl	80023c4 <HAL_ADC_Start>
		dalidata = HAL_ADC_GetValue(&hadc1);
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <minResponseLevel+0x60>)
 800128e:	f001 f953 	bl	8002538 <HAL_ADC_GetValue>
 8001292:	4603      	mov	r3, r0
 8001294:	80bb      	strh	r3, [r7, #4]

		if (dalidata < rxmin) {
 8001296:	88ba      	ldrh	r2, [r7, #4]
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	429a      	cmp	r2, r3
 800129c:	d201      	bcs.n	80012a2 <minResponseLevel+0x3a>
			rxmin = dalidata;
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	81fb      	strh	r3, [r7, #14]
			};
		delay_us(dalistep);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f812 	bl	80012d0 <delay_us>
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	4413      	add	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <minResponseLevel+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3e3      	bcc.n	8001286 <minResponseLevel+0x1e>
		}
		return rxmin;
 80012be:	89fb      	ldrh	r3, [r7, #14]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000104 	.word	0x20000104
 80012cc:	20000008 	.word	0x20000008

080012d0 <delay_us>:
/**
  * @brief Setup us delay function with timer 4
  * @retval None
  */
void delay_us(uint16_t us)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <delay_us+0x40>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <delay_us+0x40>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <delay_us+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 80012f2:	bf00      	nop
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <delay_us+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3f9      	bcc.n	80012f4 <delay_us+0x24>
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200000ac 	.word	0x200000ac

08001314 <micros>:

uint32_t micros(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    systemMillis = __HAL_TIM_GET_COUNTER(&htim4);
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <micros+0x20>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <micros+0x24>)
 8001322:	801a      	strh	r2, [r3, #0]


     //systemMillis = systemMillis + currentMillis;
     //__HAL_TIM_SET_COUNTER (&htim4, 0);

    return systemMillis;
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <micros+0x24>)
 8001326:	881b      	ldrh	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200000ac 	.word	0x200000ac
 8001338:	20000098 	.word	0x20000098

0800133c <transmit>:

void transmit(uint8_t cmd1, uint8_t cmd2) // transmit commands to DALI bus (address byte, command byte)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
	sendBit(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 f82f 	bl	80013b0 <sendBit>
	sendByte(cmd1);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f80f 	bl	8001378 <sendByte>
	sendByte(cmd2);
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f80b 	bl	8001378 <sendByte>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//digitalWrite(TxPin, HIGH); Set signaal weer hoog wanneer verzonden (STOP)
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f002 fa3e 	bl	80037ec <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <sendByte>:


void sendByte(uint8_t b)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	for (int i = 7; i >= 0; i--)
 8001382:	2307      	movs	r3, #7
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e00b      	b.n	80013a0 <sendByte+0x28>
	{
		sendBit((b >> i) & 1);
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	fa42 f303 	asr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f80b 	bl	80013b0 <sendBit>
	for (int i = 7; i >= 0; i--)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3b01      	subs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	daf0      	bge.n	8001388 <sendByte+0x10>
	}
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <sendBit>:


void sendBit(int b)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 if (b) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <sendBit+0x14>
		sendOne();
 80013be:	f000 f827 	bl	8001410 <sendOne>
	}
	else {
		sendZero();
	}
}
 80013c2:	e001      	b.n	80013c8 <sendBit+0x18>
		sendZero();
 80013c4:	f000 f804 	bl	80013d0 <sendZero>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <sendZero>:


void sendZero(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//digitalWrite(TxPin, HIGH);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f002 fa05 	bl	80037ec <HAL_GPIO_WritePin>
	delay_us(delay2);											//delayMicroseconds(delay2);
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <sendZero+0x38>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff72 	bl	80012d0 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//digitalWrite(TxPin, LOW);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f002 f9f9 	bl	80037ec <HAL_GPIO_WritePin>
	delay_us(delay1);											//delayMicroseconds(delay1);
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <sendZero+0x3c>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff66 	bl	80012d0 <delay_us>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000002 	.word	0x20000002
 800140c:	20000000 	.word	0x20000000

08001410 <sendOne>:

void sendOne(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//digitalWrite(TxPin, LOW);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f002 f9e5 	bl	80037ec <HAL_GPIO_WritePin>
	delay_us(delay2); 											//delayMicroseconds(delay2);
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <sendOne+0x38>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff52 	bl	80012d0 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); 		//digitalWrite(TxPin, HIGH);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f002 f9d9 	bl	80037ec <HAL_GPIO_WritePin>
	delay_us(delay1);											//delayMicroseconds(delay1);
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <sendOne+0x3c>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff46 	bl	80012d0 <delay_us>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000002 	.word	0x20000002
 800144c:	20000000 	.word	0x20000000

08001450 <scanShortAdd>:

void scanShortAdd()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	const uint8_t delayTime = 10;
 8001456:	230a      	movs	r3, #10
 8001458:	71bb      	strb	r3, [r7, #6]
	const uint8_t start_ind_adres = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	717b      	strb	r3, [r7, #5]
	//const uint8_t finish_ind_adres =127;
	uint8_t add_byte;
	uint8_t device_short_add;

	transmit(BROADCAST_C, OFF_C);
 800145e:	2100      	movs	r1, #0
 8001460:	20ff      	movs	r0, #255	; 0xff
 8001462:	f7ff ff6b 	bl	800133c <transmit>
	delay_us(delayTime);
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff30 	bl	80012d0 <delay_us>
	if(msgMode)
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <scanShortAdd+0xb4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <scanShortAdd+0x2e>
	{
		printf ("Short addresses:\r\n");
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <scanShortAdd+0xb8>)
 800147a:	f004 fcad 	bl	8005dd8 <puts>
	}
	for (device_short_add = start_ind_adres; device_short_add <=63; device_short_add++)
 800147e:	797b      	ldrb	r3, [r7, #5]
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e036      	b.n	80014f2 <scanShortAdd+0xa2>
	{
		add_byte = 1 + (device_short_add << 1);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	713b      	strb	r3, [r7, #4]
		transmit(add_byte, 0xA1);    //1010 0001 ?? A1 moet zijn 91
 800148e:	793b      	ldrb	r3, [r7, #4]
 8001490:	21a1      	movs	r1, #161	; 0xa1
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff52 	bl	800133c <transmit>
		uint32_t response = recieve();
 8001498:	f000 f83a 	bl	8001510 <recieve>
 800149c:	4603      	mov	r3, r0
 800149e:	603b      	str	r3, [r7, #0]
		if(getResponse){
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <scanShortAdd+0xbc>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <scanShortAdd+0x90>
			transmit(add_byte, OFF_C);
 80014a8:	793b      	ldrb	r3, [r7, #4]
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff45 	bl	800133c <transmit>
			HAL_Delay(1000);
 80014b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b6:	f000 fc49 	bl	8001d4c <HAL_Delay>
			transmit(add_byte, ON_AND_STEP_UP_C);
 80014ba:	793b      	ldrb	r3, [r7, #4]
 80014bc:	2108      	movs	r1, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff3c 	bl	800133c <transmit>
			HAL_Delay(1000);
 80014c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c8:	f000 fc40 	bl	8001d4c <HAL_Delay>
			transmit(add_byte, OFF_C);
 80014cc:	793b      	ldrb	r3, [r7, #4]
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff33 	bl	800133c <transmit>
			HAL_Delay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014da:	f000 fc37 	bl	8001d4c <HAL_Delay>
 80014de:	e001      	b.n	80014e4 <scanShortAdd+0x94>
		}else {response = 0;}
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
		HAL_Delay(500);
 80014e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e8:	f000 fc30 	bl	8001d4c <HAL_Delay>
	for (device_short_add = start_ind_adres; device_short_add <=63; device_short_add++)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3301      	adds	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b3f      	cmp	r3, #63	; 0x3f
 80014f6:	d9c5      	bls.n	8001484 <scanShortAdd+0x34>
	}

}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000100 	.word	0x20000100
 8001508:	08006dac 	.word	0x08006dac
 800150c:	20000168 	.word	0x20000168

08001510 <recieve>:

uint8_t recieve()
{
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	b08b      	sub	sp, #44	; 0x2c
 8001514:	af00      	add	r7, sp, #0
 8001516:	466b      	mov	r3, sp
 8001518:	461e      	mov	r6, r3

	bool previousLogicLevel = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	bool currentLogicLevel = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t arrLength = 20;
 8001526:	2314      	movs	r3, #20
 8001528:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t timeArray[arrLength];
 800152c:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8001530:	4623      	mov	r3, r4
 8001532:	3b01      	subs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	b2e0      	uxtb	r0, r4
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	00cb      	lsls	r3, r1, #3
 8001546:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800154a:	00c2      	lsls	r2, r0, #3
 800154c:	b2e0      	uxtb	r0, r4
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	00cb      	lsls	r3, r1, #3
 800155c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001560:	00c2      	lsls	r2, r0, #3
 8001562:	4623      	mov	r3, r4
 8001564:	3307      	adds	r3, #7
 8001566:	08db      	lsrs	r3, r3, #3
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	ebad 0d03 	sub.w	sp, sp, r3
 800156e:	466b      	mov	r3, sp
 8001570:	3300      	adds	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t k = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool logicLevelArray[arrLength];
 8001580:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8001584:	4623      	mov	r3, r4
 8001586:	3b01      	subs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	b2e0      	uxtb	r0, r4
 800158c:	f04f 0100 	mov.w	r1, #0
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	00cb      	lsls	r3, r1, #3
 800159a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800159e:	00c2      	lsls	r2, r0, #3
 80015a0:	b2e0      	uxtb	r0, r4
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	00cb      	lsls	r3, r1, #3
 80015b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015b4:	00c2      	lsls	r2, r0, #3
 80015b6:	4623      	mov	r3, r4
 80015b8:	3307      	adds	r3, #7
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	ebad 0d03 	sub.w	sp, sp, r3
 80015c2:	466b      	mov	r3, sp
 80015c4:	3300      	adds	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
	uint32_t response = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
	getResponse=false;
 80015cc:	4b6e      	ldr	r3, [pc, #440]	; (8001788 <recieve+0x278>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 80015d2:	4b6e      	ldr	r3, [pc, #440]	; (800178c <recieve+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 80015da:	4b6c      	ldr	r3, [pc, #432]	; (800178c <recieve+0x27c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <recieve+0x27c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
	uint32_t startFuncTime = micros();
 80015ea:	f7ff fe93 	bl	8001314 <micros>
 80015ee:	60b8      	str	r0, [r7, #8]

	while (micros() - startFuncTime < daliTimeout && i < arrLength)
 80015f0:	e0ae      	b.n	8001750 <recieve+0x240>
	{
		HAL_ADC_Start(&hadc1);
 80015f2:	4867      	ldr	r0, [pc, #412]	; (8001790 <recieve+0x280>)
 80015f4:	f000 fee6 	bl	80023c4 <HAL_ADC_Start>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 80015f8:	4865      	ldr	r0, [pc, #404]	; (8001790 <recieve+0x280>)
 80015fa:	f000 ff9d 	bl	8002538 <HAL_ADC_GetValue>
 80015fe:	6078      	str	r0, [r7, #4]
		//printf("value = %ld\r\n", value);
		if(value > analogLevel){currentLogicLevel = 1;}else{currentLogicLevel = 0;}
 8001600:	4b64      	ldr	r3, [pc, #400]	; (8001794 <recieve+0x284>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4293      	cmp	r3, r2
 800160a:	d903      	bls.n	8001614 <recieve+0x104>
 800160c:	2301      	movs	r3, #1
 800160e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001612:	e002      	b.n	800161a <recieve+0x10a>
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (previousLogicLevel != currentLogicLevel){
 800161a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800161e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001622:	429a      	cmp	r2, r3
 8001624:	d018      	beq.n	8001658 <recieve+0x148>
			timeArray[i] = micros() - startFuncTime;
 8001626:	f7ff fe75 	bl	8001314 <micros>
 800162a:	4603      	mov	r3, r0
 800162c:	b2d9      	uxtb	r1, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001636:	1a8a      	subs	r2, r1, r2
 8001638:	b2d1      	uxtb	r1, r2
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	54d1      	strb	r1, [r2, r3]
			logicLevelArray[i] = currentLogicLevel;
 800163e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001648:	54d1      	strb	r1, [r2, r3]
			previousLogicLevel = currentLogicLevel;
 800164a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			getResponse = true;
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <recieve+0x278>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
		}
		arrLength = i;
 8001658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800165c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		//decoding to manchester
		for (i = 0; i < arrLength - 1; i++) {
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001666:	e06c      	b.n	8001742 <recieve+0x232>
			if ((timeArray[i + 1] - timeArray[i]) > 0.75 * period) {
 8001668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800166c:	3301      	adds	r3, #1
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	4619      	mov	r1, r3
 8001674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f872 	bl	8000768 <__aeabi_i2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <recieve+0x288>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f86b 	bl	8000768 <__aeabi_i2d>
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <recieve+0x28c>)
 8001698:	f7fe fdea 	bl	8000270 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7ff f948 	bl	8000938 <__aeabi_dcmpgt>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d044      	beq.n	8001738 <recieve+0x228>
				for (k = arrLength; k > i; k--) {
 80016ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016b6:	e016      	b.n	80016e6 <recieve+0x1d6>
					timeArray[k] = timeArray[k - 1];
 80016b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	5c89      	ldrb	r1, [r1, r2]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	54d1      	strb	r1, [r2, r3]
					logicLevelArray[k] = logicLevelArray[k - 1];
 80016ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ce:	1e5a      	subs	r2, r3, #1
 80016d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	5c89      	ldrb	r1, [r1, r2]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	54d1      	strb	r1, [r2, r3]
				for (k = arrLength; k > i; k--) {
 80016dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e0:	3b01      	subs	r3, #1
 80016e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d8e2      	bhi.n	80016b8 <recieve+0x1a8>
				}
				arrLength++;
 80016f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016f6:	3301      	adds	r3, #1
 80016f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				timeArray[i + 1] = (timeArray[i] + timeArray[i + 2]) / 2;
 80016fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	4619      	mov	r1, r3
 8001706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	440b      	add	r3, r1
 8001712:	0fda      	lsrs	r2, r3, #31
 8001714:	4413      	add	r3, r2
 8001716:	105b      	asrs	r3, r3, #1
 8001718:	461a      	mov	r2, r3
 800171a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171e:	3301      	adds	r3, #1
 8001720:	b2d1      	uxtb	r1, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	54d1      	strb	r1, [r2, r3]
				logicLevelArray[i + 1] = logicLevelArray[i];
 8001726:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800172a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800172e:	3301      	adds	r3, #1
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	5c89      	ldrb	r1, [r1, r2]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < arrLength - 1; i++) {
 8001738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800173c:	3301      	adds	r3, #1
 800173e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001742:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001746:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800174a:	3b01      	subs	r3, #1
 800174c:	429a      	cmp	r2, r3
 800174e:	db8b      	blt.n	8001668 <recieve+0x158>
	while (micros() - startFuncTime < daliTimeout && i < arrLength)
 8001750:	f7ff fde0 	bl	8001314 <micros>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad2      	subs	r2, r2, r3
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <recieve+0x290>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d206      	bcs.n	8001770 <recieve+0x260>
 8001762:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001766:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800176a:	429a      	cmp	r2, r3
 800176c:	f4ff af41 	bcc.w	80015f2 <recieve+0xe2>
			}

		}
	}
	printf("response = %ld\r\n", response);
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <recieve+0x294>)
 8001774:	f004 faaa 	bl	8005ccc <iprintf>
	return response;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	46b5      	mov	sp, r6
}
 800177e:	4618      	mov	r0, r3
 8001780:	372c      	adds	r7, #44	; 0x2c
 8001782:	46bd      	mov	sp, r7
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001786:	bf00      	nop
 8001788:	20000168 	.word	0x20000168
 800178c:	200000ac 	.word	0x200000ac
 8001790:	20000104 	.word	0x20000104
 8001794:	20000006 	.word	0x20000006
 8001798:	20000004 	.word	0x20000004
 800179c:	3fe80000 	.word	0x3fe80000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	08006dc0 	.word	0x08006dc0

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <Error_Handler+0x8>
	...

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x44>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x44>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6613      	str	r3, [r2, #96]	; 0x60
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x44>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_MspInit+0x44>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_MspInit+0x44>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_MspInit+0x44>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0ac      	sub	sp, #176	; 0xb0
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2288      	movs	r2, #136	; 0x88
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f004 fa4d 	bl	8005cbc <memset>
  if(hadc->Instance==ADC1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_ADC_MspInit+0x120>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d172      	bne.n	8001912 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800182c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001830:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001842:	2308      	movs	r3, #8
 8001844:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fe2d 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001868:	f7ff ff9e 	bl	80017a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_ADC_MspInit+0x124>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <HAL_ADC_MspInit+0x124>)
 8001872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_ADC_MspInit+0x124>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_ADC_MspInit+0x124>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_ADC_MspInit+0x124>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_ADC_MspInit+0x124>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189c:	2301      	movs	r3, #1
 800189e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018a2:	230b      	movs	r3, #11
 80018a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f001 fdee 	bl	8003498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_ADC_MspInit+0x12c>)
 80018c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <HAL_ADC_MspInit+0x128>)
 80018f8:	f001 fc66 	bl	80031c8 <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001902:	f7ff ff51 	bl	80017a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_ADC_MspInit+0x128>)
 800190a:	64da      	str	r2, [r3, #76]	; 0x4c
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <HAL_ADC_MspInit+0x128>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	37b0      	adds	r7, #176	; 0xb0
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	50040000 	.word	0x50040000
 8001920:	40021000 	.word	0x40021000
 8001924:	2000016c 	.word	0x2000016c
 8001928:	40020008 	.word	0x40020008

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_TIM_Base_MspInit+0x38>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_TIM_Base_MspInit+0x3c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x3c>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40000800 	.word	0x40000800
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0ac      	sub	sp, #176	; 0xb0
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2288      	movs	r2, #136	; 0x88
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f004 f995 	bl	8005cbc <memset>
  if(huart->Instance==USART2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_UART_MspInit+0xb0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d13b      	bne.n	8001a14 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800199c:	2302      	movs	r3, #2
 800199e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fd87 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b4:	f7ff fef8 	bl	80017a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_UART_MspInit+0xb4>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_UART_MspInit+0xb4>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_UART_MspInit+0xb4>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_UART_MspInit+0xb4>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_UART_MspInit+0xb4>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_UART_MspInit+0xb4>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019e8:	230c      	movs	r3, #12
 80019ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a00:	2307      	movs	r3, #7
 8001a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f001 fd42 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	37b0      	adds	r7, #176	; 0xb0
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40021000 	.word	0x40021000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f94c 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <DMA1_Channel1_IRQHandler+0x10>)
 8001a7e:	f001 fc5b 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000016c 	.word	0x2000016c

08001a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e00a      	b.n	8001ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a9e:	f3af 8000 	nop.w
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf0      	blt.n	8001a9e <_read+0x12>
	}

return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f004 f882 	bl	8005c68 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20018000 	.word	0x20018000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	2000009c 	.word	0x2000009c
 8001b98:	20000250 	.word	0x20000250

08001b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <SystemInit+0x5c>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <SystemInit+0x5c>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <SystemInit+0x60>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <SystemInit+0x60>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <SystemInit+0x60>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <SystemInit+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <SystemInit+0x60>)
 8001bc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <SystemInit+0x60>)
 8001bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <SystemInit+0x60>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <SystemInit+0x60>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SystemInit+0x60>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	40021000 	.word	0x40021000

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffca 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c0a:	e003      	b.n	8001c14 <LoopCopyDataInit>

08001c0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c12:	3104      	adds	r1, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c1c:	d3f6      	bcc.n	8001c0c <CopyDataInit>
	ldr	r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c20:	e002      	b.n	8001c28 <LoopFillZerobss>

08001c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c24:	f842 3b04 	str.w	r3, [r2], #4

08001c28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LoopForever+0x16>)
	cmp	r2, r3
 8001c2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c2c:	d3f9      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f004 f821 	bl	8005c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff f84d 	bl	8000cd0 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c3c:	08006ec4 	.word	0x08006ec4
	ldr	r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c44:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001c48:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8001c4c:	2000024c 	.word	0x2000024c

08001c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_2_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_Init+0x3c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_Init+0x3c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f001 fa6a 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 f80f 	bl	8001c94 <HAL_InitTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	e001      	b.n	8001c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c82:	f7ff fd97 	bl	80017b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_InitTick+0x70>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_InitTick+0x6c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 fa75 	bl	80031ae <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d809      	bhi.n	8001ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f001 fa3f 	bl	800315a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_InitTick+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e004      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e001      	b.n	8001cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000014 	.word	0x20000014
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000010 	.word	0x20000010

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000014 	.word	0x20000014
 8001d30:	20000238 	.word	0x20000238

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000238 	.word	0x20000238

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000014 	.word	0x20000014

08001d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <LL_ADC_SetOffset+0x44>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	03fff000 	.word	0x03fff000

08001e44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3360      	adds	r3, #96	; 0x60
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3330      	adds	r3, #48	; 0x30
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	4413      	add	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	211f      	movs	r1, #31
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	f003 011f 	and.w	r1, r3, #31
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	0e5b      	lsrs	r3, r3, #25
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	0d1b      	lsrs	r3, r3, #20
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	2107      	movs	r1, #7
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0d1b      	lsrs	r3, r3, #20
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	431a      	orrs	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	401a      	ands	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0318 	and.w	r3, r3, #24
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f78:	40d9      	lsrs	r1, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f82:	431a      	orrs	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	0007ffff 	.word	0x0007ffff

08001f9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6093      	str	r3, [r2, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002018:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002040:	d101      	bne.n	8002046 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <LL_ADC_IsEnabled+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_ADC_IsEnabled+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b6:	f043 0204 	orr.w	r2, r3, #4
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d101      	bne.n	8002108 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e136      	b.n	80023a0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fb5b 	bl	80017fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff3f 	bl	8001fdc <LL_ADC_IsDeepPowerDownEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff25 	bl	8001fb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff5a 	bl	800202c <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff3e 	bl	8002004 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002188:	4b87      	ldr	r3, [pc, #540]	; (80023a8 <HAL_ADC_Init+0x290>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4a87      	ldr	r2, [pc, #540]	; (80023ac <HAL_ADC_Init+0x294>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff3c 	bl	800202c <LL_ADC_IsInternalRegulatorEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff75 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80cf 	bne.w	800238e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80cb 	bne.w	800238e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff35 	bl	800207c <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d115      	bne.n	8002244 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	4865      	ldr	r0, [pc, #404]	; (80023b0 <HAL_ADC_Init+0x298>)
 800221a:	f7ff ff2f 	bl	800207c <LL_ADC_IsEnabled>
 800221e:	4604      	mov	r4, r0
 8002220:	4864      	ldr	r0, [pc, #400]	; (80023b4 <HAL_ADC_Init+0x29c>)
 8002222:	f7ff ff2b 	bl	800207c <LL_ADC_IsEnabled>
 8002226:	4603      	mov	r3, r0
 8002228:	431c      	orrs	r4, r3
 800222a:	4863      	ldr	r0, [pc, #396]	; (80023b8 <HAL_ADC_Init+0x2a0>)
 800222c:	f7ff ff26 	bl	800207c <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	4323      	orrs	r3, r4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4619      	mov	r1, r3
 800223e:	485f      	ldr	r0, [pc, #380]	; (80023bc <HAL_ADC_Init+0x2a4>)
 8002240:	f7ff fda8 	bl	8001d94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e5b      	ldrb	r3, [r3, #25]
 8002248:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800224e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002254:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800225a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002262:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d106      	bne.n	8002280 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	3b01      	subs	r3, #1
 8002278:	045b      	lsls	r3, r3, #17
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_ADC_Init+0x2a8>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff08 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 80022ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff15 	bl	80020f0 <LL_ADC_INJ_IsConversionOngoing>
 80022c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d13d      	bne.n	800234a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d13a      	bne.n	800234a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f0:	f023 0302 	bic.w	r3, r3, #2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	430b      	orrs	r3, r1
 80022fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002304:	2b01      	cmp	r3, #1
 8002306:	d118      	bne.n	800233a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800232a:	430a      	orrs	r2, r1
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	e007      	b.n	800234a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10c      	bne.n	800236c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f023 010f 	bic.w	r1, r3, #15
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
 800236a:	e007      	b.n	800237c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 020f 	bic.w	r2, r2, #15
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f023 0303 	bic.w	r3, r3, #3
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
 800238c:	e007      	b.n	800239e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800239e:	7ffb      	ldrb	r3, [r7, #31]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3724      	adds	r7, #36	; 0x24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	053e2d63 	.word	0x053e2d63
 80023b0:	50040000 	.word	0x50040000
 80023b4:	50040100 	.word	0x50040100
 80023b8:	50040200 	.word	0x50040200
 80023bc:	50040300 	.word	0x50040300
 80023c0:	fff0c007 	.word	0xfff0c007

080023c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023cc:	4857      	ldr	r0, [pc, #348]	; (800252c <HAL_ADC_Start+0x168>)
 80023ce:	f7ff fde5 	bl	8001f9c <LL_ADC_GetMultimode>
 80023d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe76 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 809c 	bne.w	800251e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_Start+0x30>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e097      	b.n	8002524 <HAL_ADC_Start+0x160>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fc99 	bl	8002d34 <ADC_Enable>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 8083 	bne.w	8002514 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a42      	ldr	r2, [pc, #264]	; (8002530 <HAL_ADC_Start+0x16c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d002      	beq.n	8002432 <HAL_ADC_Start+0x6e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	e000      	b.n	8002434 <HAL_ADC_Start+0x70>
 8002432:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_ADC_Start+0x170>)
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4293      	cmp	r3, r2
 800243a:	d002      	beq.n	8002442 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245a:	d106      	bne.n	800246a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f023 0206 	bic.w	r2, r3, #6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	; 0x58
 8002468:	e002      	b.n	8002470 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	221c      	movs	r2, #28
 8002476:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <HAL_ADC_Start+0x16c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d002      	beq.n	8002490 <HAL_ADC_Start+0xcc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	e000      	b.n	8002492 <HAL_ADC_Start+0xce>
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_ADC_Start+0x170>)
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4293      	cmp	r3, r2
 8002498:	d008      	beq.n	80024ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d002      	beq.n	80024ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d114      	bne.n	80024d6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fde7 	bl	80020a2 <LL_ADC_REG_StartConversion>
 80024d4:	e025      	b.n	8002522 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_ADC_Start+0x16c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_Start+0x12e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_Start+0x130>
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_ADC_Start+0x170>)
 80024f4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00f      	beq.n	8002522 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800250a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
 8002512:	e006      	b.n	8002522 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800251c:	e001      	b.n	8002522 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800251e:	2302      	movs	r3, #2
 8002520:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002522:	7dfb      	ldrb	r3, [r7, #23]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	50040300 	.word	0x50040300
 8002530:	50040100 	.word	0x50040100
 8002534:	50040000 	.word	0x50040000

08002538 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b6      	sub	sp, #216	; 0xd8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x22>
 8002572:	2302      	movs	r3, #2
 8002574:	e3c7      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x7b2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fda1 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 83a8 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	3b02      	subs	r3, #2
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d81b      	bhi.n	80025da <HAL_ADC_ConfigChannel+0x86>
 80025a2:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <HAL_ADC_ConfigChannel+0x54>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025c1 	.word	0x080025c1
 80025b0:	080025c9 	.word	0x080025c9
 80025b4:	080025d1 	.word	0x080025d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	220c      	movs	r2, #12
 80025bc:	605a      	str	r2, [r3, #4]
          break;
 80025be:	e011      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2212      	movs	r2, #18
 80025c4:	605a      	str	r2, [r3, #4]
          break;
 80025c6:	e00d      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2218      	movs	r2, #24
 80025cc:	605a      	str	r2, [r3, #4]
          break;
 80025ce:	e009      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d6:	605a      	str	r2, [r3, #4]
          break;
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2206      	movs	r2, #6
 80025de:	605a      	str	r2, [r3, #4]
          break;
 80025e0:	e000      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80025e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f7ff fc58 	bl	8001ea6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fd65 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002600:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fd71 	bl	80020f0 <LL_ADC_INJ_IsConversionOngoing>
 800260e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 81a6 	bne.w	8002968 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 81a1 	bne.w	8002968 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	461a      	mov	r2, r3
 8002634:	f7ff fc63 	bl	8001efe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	08db      	lsrs	r3, r3, #3
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d00a      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6919      	ldr	r1, [r3, #16]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800266a:	f7ff fbc7 	bl	8001dfc <LL_ADC_SetOffset>
 800266e:	e17b      	b.n	8002968 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fbe4 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <HAL_ADC_ConfigChannel+0x148>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fbd9 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	f003 021f 	and.w	r2, r3, #31
 800269a:	e01e      	b.n	80026da <HAL_ADC_ConfigChannel+0x186>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fbce 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e004      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80026ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x19e>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	e018      	b.n	8002724 <HAL_ADC_ConfigChannel+0x1d0>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800270a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800270e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e004      	b.n	8002724 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800271a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002724:	429a      	cmp	r2, r3
 8002726:	d106      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb9d 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fb81 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x20e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fb76 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	0e9b      	lsrs	r3, r3, #26
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	e01e      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x24c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fb6b 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e004      	b.n	800279e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x264>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	e018      	b.n	80027ea <HAL_ADC_ConfigChannel+0x296>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e004      	b.n	80027ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80027e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d106      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	2101      	movs	r1, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fb3a 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb1e 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x2d4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fb13 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	f003 021f 	and.w	r2, r3, #31
 8002826:	e01e      	b.n	8002866 <HAL_ADC_ConfigChannel+0x312>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb08 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800284a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800284e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e004      	b.n	8002864 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800285a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_ADC_ConfigChannel+0x32a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	e016      	b.n	80028ac <HAL_ADC_ConfigChannel+0x358>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002890:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d106      	bne.n	80028be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2102      	movs	r1, #2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fad9 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2103      	movs	r1, #3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fabd 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x396>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2103      	movs	r1, #3
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fab2 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	e017      	b.n	800291a <HAL_ADC_ConfigChannel+0x3c6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2103      	movs	r1, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff faa7 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002904:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e003      	b.n	8002918 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x3de>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	e011      	b.n	8002956 <HAL_ADC_ConfigChannel+0x402>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002942:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e003      	b.n	8002956 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002956:	429a      	cmp	r2, r3
 8002958:	d106      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	2103      	movs	r1, #3
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fa84 	bl	8001e70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fb85 	bl	800207c <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 813f 	bne.w	8002bf8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff fae4 	bl	8001f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a8e      	ldr	r2, [pc, #568]	; (8002bcc <HAL_ADC_ConfigChannel+0x678>)
 8002992:	4293      	cmp	r3, r2
 8002994:	f040 8130 	bne.w	8002bf8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x46c>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	3301      	adds	r3, #1
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2b09      	cmp	r3, #9
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e019      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x4a0>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80029d8:	2320      	movs	r3, #32
 80029da:	e003      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80029dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	bf94      	ite	ls
 80029ee:	2301      	movls	r3, #1
 80029f0:	2300      	movhi	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d079      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x4c0>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	069b      	lsls	r3, r3, #26
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	e015      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x4ec>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a24:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x50c>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	e017      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x53c>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e003      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	ea42 0103 	orr.w	r1, r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x562>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	e018      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x594>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	e080      	b.n	8002bee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x5b4>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b06:	e015      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x5e0>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x600>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x630>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	61fb      	str	r3, [r7, #28]
  return result;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x65c>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	051b      	lsls	r3, r3, #20
 8002baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bae:	e01d      	b.n	8002bec <HAL_ADC_ConfigChannel+0x698>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	613b      	str	r3, [r7, #16]
  return result;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e005      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x684>
 8002bcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	3b1e      	subs	r3, #30
 8002be6:	051b      	lsls	r3, r3, #20
 8002be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bec:	430b      	orrs	r3, r1
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7ff f983 	bl	8001efe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d07a      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c04:	4843      	ldr	r0, [pc, #268]	; (8002d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c06:	f7ff f8eb 	bl	8001de0 <LL_ADC_GetCommonPathInternalCh>
 8002c0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a41      	ldr	r2, [pc, #260]	; (8002d18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d12c      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d126      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x6e4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d15d      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c40:	4619      	mov	r1, r3
 8002c42:	4834      	ldr	r0, [pc, #208]	; (8002d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c44:	f7ff f8b9 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c48:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c62:	e002      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f9      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c70:	e040      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d118      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x75a>
 8002c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d112      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x748>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d12d      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	481b      	ldr	r0, [pc, #108]	; (8002d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ca8:	f7ff f887 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cac:	e024      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d120      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11a      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d115      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480e      	ldr	r0, [pc, #56]	; (8002d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cda:	f7ff f86e 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
 8002cde:	e00c      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002cf2:	e002      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	37d8      	adds	r7, #216	; 0xd8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	80080000 	.word	0x80080000
 8002d14:	50040300 	.word	0x50040300
 8002d18:	c7520000 	.word	0xc7520000
 8002d1c:	50040000 	.word	0x50040000
 8002d20:	50040200 	.word	0x50040200
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	053e2d63 	.word	0x053e2d63
 8002d2c:	cb840000 	.word	0xcb840000
 8002d30:	80000001 	.word	0x80000001

08002d34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f99b 	bl	800207c <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d14d      	bne.n	8002de8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <ADC_Enable+0xc0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e039      	b.n	8002dea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f96a 	bl	8002054 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d80:	f7fe ffd8 	bl	8001d34 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d86:	e028      	b.n	8002dda <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f975 	bl	800207c <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f959 	bl	8002054 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002da2:	f7fe ffc7 	bl	8001d34 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d914      	bls.n	8002dda <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d00d      	beq.n	8002dda <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d1cf      	bne.n	8002d88 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	8000003f 	.word	0x8000003f

08002df8 <LL_ADC_IsEnabled>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <LL_ADC_IsEnabled+0x18>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <LL_ADC_IsEnabled+0x1a>
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d101      	bne.n	8002e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b09f      	sub	sp, #124	; 0x7c
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e093      	b.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d102      	bne.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	e001      	b.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e072      	b.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ffb9 	bl	8002e1e <LL_ADC_REG_IsConversionOngoing>
 8002eac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ffb3 	bl	8002e1e <LL_ADC_REG_IsConversionOngoing>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d154      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d151      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ec6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d02c      	beq.n	8002f2a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee2:	035b      	lsls	r3, r3, #13
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eec:	4829      	ldr	r0, [pc, #164]	; (8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002eee:	f7ff ff83 	bl	8002df8 <LL_ADC_IsEnabled>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4828      	ldr	r0, [pc, #160]	; (8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ef6:	f7ff ff7f 	bl	8002df8 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	431c      	orrs	r4, r3
 8002efe:	4828      	ldr	r0, [pc, #160]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f00:	f7ff ff7a 	bl	8002df8 <LL_ADC_IsEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4323      	orrs	r3, r4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d137      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f14:	f023 030f 	bic.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	6811      	ldr	r1, [r2, #0]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6892      	ldr	r2, [r2, #8]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f28:	e028      	b.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f36:	4817      	ldr	r0, [pc, #92]	; (8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f38:	f7ff ff5e 	bl	8002df8 <LL_ADC_IsEnabled>
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	4816      	ldr	r0, [pc, #88]	; (8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f40:	f7ff ff5a 	bl	8002df8 <LL_ADC_IsEnabled>
 8002f44:	4603      	mov	r3, r0
 8002f46:	431c      	orrs	r4, r3
 8002f48:	4815      	ldr	r0, [pc, #84]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f4a:	f7ff ff55 	bl	8002df8 <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4323      	orrs	r3, r4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d112      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f5e:	f023 030f 	bic.w	r3, r3, #15
 8002f62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f66:	e009      	b.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f7a:	e000      	b.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	377c      	adds	r7, #124	; 0x7c
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	bf00      	nop
 8002f94:	50040000 	.word	0x50040000
 8002f98:	50040100 	.word	0x50040100
 8002f9c:	50040300 	.word	0x50040300
 8002fa0:	50040200 	.word	0x50040200

08002fa4 <__NVIC_SetPriorityGrouping>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fd6:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	60d3      	str	r3, [r2, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_GetPriorityGrouping>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 0307 	and.w	r3, r3, #7
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_EnableIRQ>:
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	2b00      	cmp	r3, #0
 8003018:	db0b      	blt.n	8003032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <__NVIC_EnableIRQ+0x38>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2001      	movs	r0, #1
 800302a:	fa00 f202 	lsl.w	r2, r0, r2
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000e100 	.word	0xe000e100

08003044 <__NVIC_SetPriority>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	db0a      	blt.n	800306e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	490c      	ldr	r1, [pc, #48]	; (8003090 <__NVIC_SetPriority+0x4c>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	440b      	add	r3, r1
 8003068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800306c:	e00a      	b.n	8003084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4908      	ldr	r1, [pc, #32]	; (8003094 <__NVIC_SetPriority+0x50>)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3b04      	subs	r3, #4
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	440b      	add	r3, r1
 8003082:	761a      	strb	r2, [r3, #24]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000e100 	.word	0xe000e100
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <NVIC_EncodePriority>:
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf28      	it	cs
 80030b6:	2304      	movcs	r3, #4
 80030b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3304      	adds	r3, #4
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <NVIC_EncodePriority+0x30>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3b03      	subs	r3, #3
 80030c6:	e000      	b.n	80030ca <NVIC_EncodePriority+0x32>
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	401a      	ands	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	4313      	orrs	r3, r2
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <SysTick_Config>:
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d301      	bcc.n	8003116 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003112:	2301      	movs	r3, #1
 8003114:	e00f      	b.n	8003136 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <SysTick_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311e:	210f      	movs	r1, #15
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f7ff ff8e 	bl	8003044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <SysTick_Config+0x40>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <SysTick_Config+0x40>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff29 	bl	8002fa4 <__NVIC_SetPriorityGrouping>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff3e 	bl	8002fec <__NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff8e 	bl	8003098 <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5d 	bl	8003044 <__NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff31 	bl	8003008 <__NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffa2 	bl	8003100 <SysTick_Config>
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e098      	b.n	800330c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4b4d      	ldr	r3, [pc, #308]	; (8003318 <HAL_DMA_Init+0x150>)
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d80f      	bhi.n	8003206 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b4b      	ldr	r3, [pc, #300]	; (800331c <HAL_DMA_Init+0x154>)
 80031ee:	4413      	add	r3, r2
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <HAL_DMA_Init+0x158>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	009a      	lsls	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_DMA_Init+0x15c>)
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
 8003204:	e00e      	b.n	8003224 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_DMA_Init+0x160>)
 800320e:	4413      	add	r3, r2
 8003210:	4a43      	ldr	r2, [pc, #268]	; (8003320 <HAL_DMA_Init+0x158>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	009a      	lsls	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_DMA_Init+0x164>)
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327e:	d039      	beq.n	80032f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <HAL_DMA_Init+0x15c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d11a      	bne.n	80032c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800328a:	4b29      	ldr	r3, [pc, #164]	; (8003330 <HAL_DMA_Init+0x168>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f003 031c 	and.w	r3, r3, #28
 8003296:	210f      	movs	r1, #15
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	4924      	ldr	r1, [pc, #144]	; (8003330 <HAL_DMA_Init+0x168>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_DMA_Init+0x168>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f003 031c 	and.w	r3, r3, #28
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	491d      	ldr	r1, [pc, #116]	; (8003330 <HAL_DMA_Init+0x168>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
 80032be:	e019      	b.n	80032f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_DMA_Init+0x16c>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	f003 031c 	and.w	r3, r3, #28
 80032cc:	210f      	movs	r1, #15
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	4917      	ldr	r1, [pc, #92]	; (8003334 <HAL_DMA_Init+0x16c>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_DMA_Init+0x16c>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f003 031c 	and.w	r3, r3, #28
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	4911      	ldr	r1, [pc, #68]	; (8003334 <HAL_DMA_Init+0x16c>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40020407 	.word	0x40020407
 800331c:	bffdfff8 	.word	0xbffdfff8
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	40020000 	.word	0x40020000
 8003328:	bffdfbf8 	.word	0xbffdfbf8
 800332c:	40020400 	.word	0x40020400
 8003330:	400200a8 	.word	0x400200a8
 8003334:	400204a8 	.word	0x400204a8

08003338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f003 031c 	and.w	r3, r3, #28
 8003358:	2204      	movs	r2, #4
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d026      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x7a>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d021      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f003 021c 	and.w	r2, r3, #28
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2104      	movs	r1, #4
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d071      	beq.n	800348c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80033b0:	e06c      	b.n	800348c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f003 031c 	and.w	r3, r3, #28
 80033ba:	2202      	movs	r2, #2
 80033bc:	409a      	lsls	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_DMA_IRQHandler+0xec>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d029      	beq.n	8003424 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020a 	bic.w	r2, r2, #10
 80033ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f003 021c 	and.w	r2, r3, #28
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2102      	movs	r1, #2
 8003404:	fa01 f202 	lsl.w	r2, r1, r2
 8003408:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d038      	beq.n	800348c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003422:	e033      	b.n	800348c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f003 031c 	and.w	r3, r3, #28
 800342c:	2208      	movs	r2, #8
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02a      	beq.n	800348e <HAL_DMA_IRQHandler+0x156>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d025      	beq.n	800348e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 020e 	bic.w	r2, r2, #14
 8003450:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f003 021c 	and.w	r2, r3, #28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800348c:	bf00      	nop
 800348e:	bf00      	nop
}
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a6:	e17f      	b.n	80037a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8171 	beq.w	80037a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d00b      	beq.n	80034e0 <HAL_GPIO_Init+0x48>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d007      	beq.n	80034e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034d4:	2b11      	cmp	r3, #17
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b12      	cmp	r3, #18
 80034de:	d130      	bne.n	8003542 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003516:	2201      	movs	r2, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0201 	and.w	r2, r3, #1
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b03      	cmp	r3, #3
 800354c:	d118      	bne.n	8003580 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003554:	2201      	movs	r2, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f003 0201 	and.w	r2, r3, #1
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x128>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b12      	cmp	r3, #18
 80035be:	d123      	bne.n	8003608 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	6939      	ldr	r1, [r7, #16]
 8003604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80ac 	beq.w	80037a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <HAL_GPIO_Init+0x330>)
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	4a5e      	ldr	r2, [pc, #376]	; (80037c8 <HAL_GPIO_Init+0x330>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6613      	str	r3, [r2, #96]	; 0x60
 8003656:	4b5c      	ldr	r3, [pc, #368]	; (80037c8 <HAL_GPIO_Init+0x330>)
 8003658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003662:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_GPIO_Init+0x334>)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	3302      	adds	r3, #2
 800366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	220f      	movs	r2, #15
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800368c:	d025      	beq.n	80036da <HAL_GPIO_Init+0x242>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x338>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01f      	beq.n	80036d6 <HAL_GPIO_Init+0x23e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4e      	ldr	r2, [pc, #312]	; (80037d4 <HAL_GPIO_Init+0x33c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x23a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <HAL_GPIO_Init+0x340>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x236>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4c      	ldr	r2, [pc, #304]	; (80037dc <HAL_GPIO_Init+0x344>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x232>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4b      	ldr	r2, [pc, #300]	; (80037e0 <HAL_GPIO_Init+0x348>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x22e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4a      	ldr	r2, [pc, #296]	; (80037e4 <HAL_GPIO_Init+0x34c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x22a>
 80036be:	2306      	movs	r3, #6
 80036c0:	e00c      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e00a      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036c6:	2305      	movs	r3, #5
 80036c8:	e008      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e006      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036ce:	2303      	movs	r3, #3
 80036d0:	e004      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e002      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_GPIO_Init+0x244>
 80036da:	2300      	movs	r3, #0
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	f002 0203 	and.w	r2, r2, #3
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	4093      	lsls	r3, r2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ec:	4937      	ldr	r1, [pc, #220]	; (80037cc <HAL_GPIO_Init+0x334>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_GPIO_Init+0x350>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800371e:	4a32      	ldr	r2, [pc, #200]	; (80037e8 <HAL_GPIO_Init+0x350>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003724:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_GPIO_Init+0x350>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <HAL_GPIO_Init+0x350>)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800374e:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <HAL_GPIO_Init+0x350>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_GPIO_Init+0x350>)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_GPIO_Init+0x350>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_GPIO_Init+0x350>)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3301      	adds	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f47f ae78 	bne.w	80034a8 <HAL_GPIO_Init+0x10>
  }
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010000 	.word	0x40010000
 80037d0:	48000400 	.word	0x48000400
 80037d4:	48000800 	.word	0x48000800
 80037d8:	48000c00 	.word	0x48000c00
 80037dc:	48001000 	.word	0x48001000
 80037e0:	48001400 	.word	0x48001400
 80037e4:	48001800 	.word	0x48001800
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003808:	e002      	b.n	8003810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_PWREx_GetVoltageRange+0x18>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40007000 	.word	0x40007000

08003838 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003846:	d130      	bne.n	80038aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003854:	d038      	beq.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800385e:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2232      	movs	r2, #50	; 0x32
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387c:	e002      	b.n	8003884 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3b01      	subs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003890:	d102      	bne.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f2      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d110      	bne.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d007      	beq.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038c0:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40007000 	.word	0x40007000
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	431bde83 	.word	0x431bde83

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e3d4      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4ba1      	ldr	r3, [pc, #644]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003900:	4b9e      	ldr	r3, [pc, #632]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80e4 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_RCC_OscConfig+0x4a>
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	f040 808b 	bne.w	8003a3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b01      	cmp	r3, #1
 800392a:	f040 8087 	bne.w	8003a3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800392e:	4b93      	ldr	r3, [pc, #588]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_RCC_OscConfig+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e3ac      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	4b8c      	ldr	r3, [pc, #560]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_RCC_OscConfig+0x7c>
 8003956:	4b89      	ldr	r3, [pc, #548]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395e:	e005      	b.n	800396c <HAL_RCC_OscConfig+0x88>
 8003960:	4b86      	ldr	r3, [pc, #536]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	4293      	cmp	r3, r2
 800396e:	d223      	bcs.n	80039b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd41 	bl	80043fc <RCC_SetFlashLatencyFromMSIRange>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e38d      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003984:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7c      	ldr	r2, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b7a      	ldr	r3, [pc, #488]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4977      	ldr	r1, [pc, #476]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	4972      	ldr	r1, [pc, #456]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 80039b6:	e025      	b.n	8003a04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b8:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6f      	ldr	r2, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039be:	f043 0308 	orr.w	r3, r3, #8
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	496a      	ldr	r1, [pc, #424]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d6:	4b69      	ldr	r3, [pc, #420]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	4965      	ldr	r1, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fd01 	bl	80043fc <RCC_SetFlashLatencyFromMSIRange>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e34d      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a04:	f000 fc36 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	495a      	ldr	r1, [pc, #360]	; (8003b80 <HAL_RCC_OscConfig+0x29c>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_RCC_OscConfig+0x2a0>)
 8003a22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a24:	4b58      	ldr	r3, [pc, #352]	; (8003b88 <HAL_RCC_OscConfig+0x2a4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe f933 	bl	8001c94 <HAL_InitTick>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d052      	beq.n	8003ade <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	e331      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d032      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a44:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a50:	f7fe f970 	bl	8001d34 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a58:	f7fe f96c 	bl	8001d34 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e31a      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a7c:	f043 0308 	orr.w	r3, r3, #8
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	493b      	ldr	r1, [pc, #236]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	4936      	ldr	r1, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
 8003aa8:	e01a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe f93d 	bl	8001d34 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003abe:	f7fe f939 	bl	8001d34 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e2e7      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x1da>
 8003adc:	e000      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ade:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d074      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d005      	beq.n	8003afe <HAL_RCC_OscConfig+0x21a>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	d10e      	bne.n	8003b16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d064      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2f0>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d160      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e2c4      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x24a>
 8003b20:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e01d      	b.n	8003b6a <HAL_RCC_OscConfig+0x286>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b36:	d10c      	bne.n	8003b52 <HAL_RCC_OscConfig+0x26e>
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0f      	ldr	r2, [pc, #60]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e00b      	b.n	8003b6a <HAL_RCC_OscConfig+0x286>
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x298>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01c      	beq.n	8003bac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe f8df 	bl	8001d34 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	e011      	b.n	8003b9e <HAL_RCC_OscConfig+0x2ba>
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08006dd4 	.word	0x08006dd4
 8003b84:	2000000c 	.word	0x2000000c
 8003b88:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f8d2 	bl	8001d34 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e280      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9e:	4baf      	ldr	r3, [pc, #700]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2a8>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f8c2 	bl	8001d34 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f8be 	bl	8001d34 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e26c      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc6:	4ba5      	ldr	r3, [pc, #660]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2d0>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d060      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x310>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d119      	bne.n	8003c22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d116      	bne.n	8003c22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf4:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_OscConfig+0x328>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e249      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b93      	ldr	r3, [pc, #588]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	4990      	ldr	r1, [pc, #576]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	e040      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d023      	beq.n	8003c72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2a:	4b8c      	ldr	r3, [pc, #560]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a8b      	ldr	r2, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fe f87d 	bl	8001d34 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3e:	f7fe f879 	bl	8001d34 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e227      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c50:	4b82      	ldr	r3, [pc, #520]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5c:	4b7f      	ldr	r3, [pc, #508]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	497c      	ldr	r1, [pc, #496]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
 8003c70:	e018      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c72:	4b7a      	ldr	r3, [pc, #488]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a79      	ldr	r2, [pc, #484]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fe f859 	bl	8001d34 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c86:	f7fe f855 	bl	8001d34 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e203      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c98:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d03c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe f834 	bl	8001d34 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f830 	bl	8001d34 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1de      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce2:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ef      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x3ec>
 8003cf0:	e01b      	b.n	8003d2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf2:	4b5a      	ldr	r3, [pc, #360]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf8:	4a58      	ldr	r2, [pc, #352]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d02:	f7fe f817 	bl	8001d34 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fe f813 	bl	8001d34 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1c1      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ef      	bne.n	8003d0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80a6 	beq.w	8003e84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d3c:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4a43      	ldr	r2, [pc, #268]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
 8003d54:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d60:	2301      	movs	r3, #1
 8003d62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d64:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <HAL_RCC_OscConfig+0x57c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d118      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d70:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_RCC_OscConfig+0x57c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <HAL_RCC_OscConfig+0x57c>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7c:	f7fd ffda 	bl	8001d34 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d84:	f7fd ffd6 	bl	8001d34 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e184      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d96:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_RCC_OscConfig+0x57c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d108      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4d8>
 8003daa:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dba:	e024      	b.n	8003e06 <HAL_RCC_OscConfig+0x522>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d110      	bne.n	8003de6 <HAL_RCC_OscConfig+0x502>
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd4:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de4:	e00f      	b.n	8003e06 <HAL_RCC_OscConfig+0x522>
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fd ff91 	bl	8001d34 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd ff8d 	bl	8001d34 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e139      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x578>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ed      	beq.n	8003e16 <HAL_RCC_OscConfig+0x532>
 8003e3a:	e01a      	b.n	8003e72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd ff7a 	bl	8001d34 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e42:	e00f      	b.n	8003e64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd ff76 	bl	8001d34 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d906      	bls.n	8003e64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e122      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e64:	4b90      	ldr	r3, [pc, #576]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e8      	bne.n	8003e44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e72:	7ffb      	ldrb	r3, [r7, #31]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e78:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	4a8a      	ldr	r2, [pc, #552]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8108 	beq.w	800409e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	f040 80d0 	bne.w	8004038 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e98:	4b83      	ldr	r3, [pc, #524]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d130      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d127      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d11f      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ed8:	2a07      	cmp	r2, #7
 8003eda:	bf14      	ite	ne
 8003edc:	2201      	movne	r2, #1
 8003ede:	2200      	moveq	r2, #0
 8003ee0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d113      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d06e      	beq.n	8003fec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	d069      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f14:	4b64      	ldr	r3, [pc, #400]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0b7      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f30:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a5c      	ldr	r2, [pc, #368]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f3c:	f7fd fefa 	bl	8001d34 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd fef6 	bl	8001d34 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0a4      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f56:	4b54      	ldr	r3, [pc, #336]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f62:	4b51      	ldr	r3, [pc, #324]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	4b51      	ldr	r3, [pc, #324]	; (80040ac <HAL_RCC_OscConfig+0x7c8>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f72:	3a01      	subs	r2, #1
 8003f74:	0112      	lsls	r2, r2, #4
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f7c:	0212      	lsls	r2, r2, #8
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f84:	0852      	lsrs	r2, r2, #1
 8003f86:	3a01      	subs	r2, #1
 8003f88:	0552      	lsls	r2, r2, #21
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f90:	0852      	lsrs	r2, r2, #1
 8003f92:	3a01      	subs	r2, #1
 8003f94:	0652      	lsls	r2, r2, #25
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f9c:	0912      	lsrs	r2, r2, #4
 8003f9e:	0452      	lsls	r2, r2, #17
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	4941      	ldr	r1, [pc, #260]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3e      	ldr	r2, [pc, #248]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb4:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc0:	f7fd feb8 	bl	8001d34 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd feb4 	bl	8001d34 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e062      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe6:	e05a      	b.n	800409e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e059      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d152      	bne.n	800409e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 800400a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004010:	f7fd fe90 	bl	8001d34 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004018:	f7fd fe8c 	bl	8001d34 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e03a      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x734>
 8004036:	e032      	b.n	800409e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d02d      	beq.n	800409a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403e:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8004044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004048:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 800405c:	f023 0303 	bic.w	r3, r3, #3
 8004060:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 8004068:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800406c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004070:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd fe5f 	bl	8001d34 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407a:	f7fd fe5b 	bl	8001d34 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e009      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x7c4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x796>
 8004098:	e001      	b.n	800409e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021000 	.word	0x40021000
 80040ac:	f99d808c 	.word	0xf99d808c

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0c8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b66      	ldr	r3, [pc, #408]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4961      	ldr	r1, [pc, #388]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d04c      	beq.n	800419a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004108:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d121      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e09e      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d107      	bne.n	8004130 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d115      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e092      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004138:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e086      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004148:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e07e      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004158:	4b42      	ldr	r3, [pc, #264]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416a:	f7fd fde3 	bl	8001d34 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004170:	e00a      	b.n	8004188 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004172:	f7fd fddf 	bl	8001d34 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e066      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 020c 	and.w	r2, r3, #12
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	429a      	cmp	r2, r3
 8004198:	d1eb      	bne.n	8004172 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	492c      	ldr	r1, [pc, #176]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d210      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4924      	ldr	r1, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1b0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e036      	b.n	8004256 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4918      	ldr	r1, [pc, #96]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4910      	ldr	r1, [pc, #64]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004226:	f000 f825 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCC_ClockConfig+0x1b4>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490c      	ldr	r1, [pc, #48]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd fd22 	bl	8001c94 <HAL_InitTick>
 8004250:	4603      	mov	r3, r0
 8004252:	72fb      	strb	r3, [r7, #11]

  return status;
 8004254:	7afb      	ldrb	r3, [r7, #11]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
 8004268:	08006dd4 	.word	0x08006dd4
 800426c:	2000000c 	.word	0x2000000c
 8004270:	20000010 	.word	0x20000010

08004274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004282:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428c:	4b3b      	ldr	r3, [pc, #236]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x34>
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d121      	bne.n	80042e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d11e      	bne.n	80042e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042a8:	4b34      	ldr	r3, [pc, #208]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 80042b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e005      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042c4:	4b2d      	ldr	r3, [pc, #180]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042d0:	4a2b      	ldr	r2, [pc, #172]	; (8004380 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d102      	bne.n	80042f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e004      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042f8:	4b23      	ldr	r3, [pc, #140]	; (8004388 <HAL_RCC_GetSysClockFreq+0x114>)
 80042fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d134      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d003      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0xa6>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d003      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0xac>
 8004318:	e005      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_RCC_GetSysClockFreq+0x110>)
 800431c:	617b      	str	r3, [r7, #20]
      break;
 800431e:	e005      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_GetSysClockFreq+0x114>)
 8004322:	617b      	str	r3, [r7, #20]
      break;
 8004324:	e002      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	617b      	str	r3, [r7, #20]
      break;
 800432a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	3301      	adds	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	fb02 f203 	mul.w	r2, r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_RCC_GetSysClockFreq+0x108>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	0e5b      	lsrs	r3, r3, #25
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	3301      	adds	r3, #1
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800436c:	69bb      	ldr	r3, [r7, #24]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	08006dec 	.word	0x08006dec
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200

0800438c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043a8:	f7ff fff0 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4904      	ldr	r1, [pc, #16]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	08006de4 	.word	0x08006de4

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043d4:	f7ff ffda 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0adb      	lsrs	r3, r3, #11
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4904      	ldr	r1, [pc, #16]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08006de4 	.word	0x08006de4

080043fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004408:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004414:	f7ff fa02 	bl	800381c <HAL_PWREx_GetVoltageRange>
 8004418:	6178      	str	r0, [r7, #20]
 800441a:	e014      	b.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6593      	str	r3, [r2, #88]	; 0x58
 8004428:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004434:	f7ff f9f2 	bl	800381c <HAL_PWREx_GetVoltageRange>
 8004438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004444:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444c:	d10b      	bne.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d919      	bls.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2ba0      	cmp	r3, #160	; 0xa0
 8004458:	d902      	bls.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800445a:	2302      	movs	r3, #2
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e013      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004460:	2301      	movs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e010      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d902      	bls.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800446c:	2303      	movs	r3, #3
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e00a      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d102      	bne.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004478:	2302      	movs	r3, #2
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e004      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b70      	cmp	r3, #112	; 0x70
 8004482:	d101      	bne.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004484:	2301      	movs	r3, #1
 8004486:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 0207 	bic.w	r2, r3, #7
 8004490:	4909      	ldr	r1, [pc, #36]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004498:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d001      	beq.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40022000 	.word	0x40022000

080044bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044c4:	2300      	movs	r3, #0
 80044c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c8:	2300      	movs	r3, #0
 80044ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d041      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044e0:	d02a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044e6:	d824      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ec:	d008      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044f2:	d81e      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fc:	d010      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044fe:	e018      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004500:	4b86      	ldr	r3, [pc, #536]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a85      	ldr	r2, [pc, #532]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800450c:	e015      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fabb 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800451e:	e00c      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3320      	adds	r3, #32
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fba6 	bl	8004c78 <RCCEx_PLLSAI2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	74fb      	strb	r3, [r7, #19]
      break;
 8004536:	e000      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453a:	7cfb      	ldrb	r3, [r7, #19]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004540:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454e:	4973      	ldr	r1, [pc, #460]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004556:	e001      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d041      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004570:	d02a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004572:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004576:	d824      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800457c:	d008      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800457e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004582:	d81e      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800458c:	d010      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800458e:	e018      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004590:	4b62      	ldr	r3, [pc, #392]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a61      	ldr	r2, [pc, #388]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800459c:	e015      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fa73 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ae:	e00c      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3320      	adds	r3, #32
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fb5e 	bl	8004c78 <RCCEx_PLLSAI2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045c0:	e003      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	74fb      	strb	r3, [r7, #19]
      break;
 80045c6:	e000      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045d0:	4b52      	ldr	r3, [pc, #328]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045de:	494f      	ldr	r1, [pc, #316]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045e6:	e001      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80a0 	beq.w	800473a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a40      	ldr	r2, [pc, #256]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
 8004620:	4b3e      	ldr	r3, [pc, #248]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462c:	2301      	movs	r3, #1
 800462e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004630:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a3a      	ldr	r2, [pc, #232]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800463c:	f7fd fb7a 	bl	8001d34 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004642:	e009      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004644:	f7fd fb76 	bl	8001d34 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	74fb      	strb	r3, [r7, #19]
        break;
 8004656:	e005      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d15c      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800466a:	4b2c      	ldr	r3, [pc, #176]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004674:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	429a      	cmp	r2, r3
 8004686:	d019      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004692:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004694:	4b21      	ldr	r3, [pc, #132]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	4a20      	ldr	r2, [pc, #128]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	4a1c      	ldr	r2, [pc, #112]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fb35 	bl	8001d34 <HAL_GetTick>
 80046ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046cc:	e00b      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fd fb31 	bl	8001d34 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d902      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	74fb      	strb	r3, [r7, #19]
            break;
 80046e4:	e006      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ec      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470a:	4904      	ldr	r1, [pc, #16]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004712:	e009      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004728:	7c7b      	ldrb	r3, [r7, #17]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472e:	4b9e      	ldr	r3, [pc, #632]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	4a9d      	ldr	r2, [pc, #628]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004738:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004746:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f023 0203 	bic.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	4994      	ldr	r1, [pc, #592]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004768:	4b8f      	ldr	r3, [pc, #572]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 020c 	bic.w	r2, r3, #12
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	498c      	ldr	r1, [pc, #560]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800478a:	4b87      	ldr	r3, [pc, #540]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	4983      	ldr	r1, [pc, #524]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047ac:	4b7e      	ldr	r3, [pc, #504]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	497b      	ldr	r1, [pc, #492]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ce:	4b76      	ldr	r3, [pc, #472]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047dc:	4972      	ldr	r1, [pc, #456]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f0:	4b6d      	ldr	r3, [pc, #436]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	496a      	ldr	r1, [pc, #424]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	4961      	ldr	r1, [pc, #388]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004834:	4b5c      	ldr	r3, [pc, #368]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	4959      	ldr	r1, [pc, #356]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004856:	4b54      	ldr	r3, [pc, #336]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	4950      	ldr	r1, [pc, #320]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004878:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	4948      	ldr	r1, [pc, #288]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800489a:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	493f      	ldr	r1, [pc, #252]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d028      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048bc:	4b3a      	ldr	r3, [pc, #232]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ca:	4937      	ldr	r1, [pc, #220]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048da:	d106      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048dc:	4b32      	ldr	r3, [pc, #200]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a31      	ldr	r2, [pc, #196]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048e6:	60d3      	str	r3, [r2, #12]
 80048e8:	e011      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f2:	d10c      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f8c8 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d028      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800491a:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	491f      	ldr	r1, [pc, #124]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004938:	d106      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800493a:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004944:	60d3      	str	r3, [r2, #12]
 8004946:	e011      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004950:	d10c      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f899 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02b      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	4908      	ldr	r1, [pc, #32]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004996:	d109      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a02      	ldr	r2, [pc, #8]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a2:	60d3      	str	r3, [r2, #12]
 80049a4:	e014      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f867 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049c6:	7cfb      	ldrb	r3, [r7, #19]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02f      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049fa:	d10d      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f844 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a12:	7cfb      	ldrb	r3, [r7, #19]
 8004a14:	74bb      	strb	r3, [r7, #18]
 8004a16:	e011      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3320      	adds	r3, #32
 8004a26:	2102      	movs	r1, #2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f925 	bl	8004c78 <RCCEx_PLLSAI2_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a48:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a56:	490d      	ldr	r1, [pc, #52]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7a:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a82:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40021000 	.word	0x40021000

08004a90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9e:	4b75      	ldr	r3, [pc, #468]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aaa:	4b72      	ldr	r3, [pc, #456]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10d      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
       ||
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ac2:	4b6c      	ldr	r3, [pc, #432]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d047      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	e044      	b.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d018      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x86>
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d825      	bhi.n	8004b34 <RCCEx_PLLSAI1_Config+0xa4>
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d002      	beq.n	8004af2 <RCCEx_PLLSAI1_Config+0x62>
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d009      	beq.n	8004b04 <RCCEx_PLLSAI1_Config+0x74>
 8004af0:	e020      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004af2:	4b60      	ldr	r3, [pc, #384]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11d      	bne.n	8004b3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b02:	e01a      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b04:	4b5b      	ldr	r3, [pc, #364]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d116      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b14:	e013      	b.n	8004b3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b16:	4b57      	ldr	r3, [pc, #348]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b32:	e006      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e004      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b42:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	4944      	ldr	r1, [pc, #272]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d17d      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b6c:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fd f8dc 	bl	8001d34 <HAL_GetTick>
 8004b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b7e:	e009      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b80:	f7fd f8d8 	bl	8001d34 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d902      	bls.n	8004b94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	73fb      	strb	r3, [r7, #15]
        break;
 8004b92:	e005      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b94:	4b37      	ldr	r3, [pc, #220]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ef      	bne.n	8004b80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d111      	bne.n	8004bd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bac:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6892      	ldr	r2, [r2, #8]
 8004bbc:	0211      	lsls	r1, r2, #8
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	0912      	lsrs	r2, r2, #4
 8004bc4:	0452      	lsls	r2, r2, #17
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	492a      	ldr	r1, [pc, #168]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	610b      	str	r3, [r1, #16]
 8004bce:	e027      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d112      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	0211      	lsls	r1, r2, #8
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6912      	ldr	r2, [r2, #16]
 8004bec:	0852      	lsrs	r2, r2, #1
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	0552      	lsls	r2, r2, #21
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	491f      	ldr	r1, [pc, #124]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]
 8004bfa:	e011      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6892      	ldr	r2, [r2, #8]
 8004c0c:	0211      	lsls	r1, r2, #8
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6952      	ldr	r2, [r2, #20]
 8004c12:	0852      	lsrs	r2, r2, #1
 8004c14:	3a01      	subs	r2, #1
 8004c16:	0652      	lsls	r2, r2, #25
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	4916      	ldr	r1, [pc, #88]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd f882 	bl	8001d34 <HAL_GetTick>
 8004c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c32:	e009      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c34:	f7fd f87e 	bl	8001d34 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d902      	bls.n	8004c48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	73fb      	strb	r3, [r7, #15]
          break;
 8004c46:	e005      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	4904      	ldr	r1, [pc, #16]	; (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000

08004c78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c86:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c92:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0203 	and.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d10d      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004caa:	4b61      	ldr	r3, [pc, #388]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d047      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	e044      	b.n	8004d4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d018      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0x86>
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d825      	bhi.n	8004d1c <RCCEx_PLLSAI2_Config+0xa4>
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d002      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x62>
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d009      	beq.n	8004cec <RCCEx_PLLSAI2_Config+0x74>
 8004cd8:	e020      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cda:	4b55      	ldr	r3, [pc, #340]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11d      	bne.n	8004d22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cea:	e01a      	b.n	8004d22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cec:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfc:	e013      	b.n	8004d26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10f      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d0a:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d1a:	e006      	b.n	8004d2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d20:	e004      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d22:	bf00      	nop
 8004d24:	e002      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d32:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	430b      	orrs	r3, r1
 8004d48:	4939      	ldr	r1, [pc, #228]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d167      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a35      	ldr	r2, [pc, #212]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d60:	f7fc ffe8 	bl	8001d34 <HAL_GetTick>
 8004d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d66:	e009      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d68:	f7fc ffe4 	bl	8001d34 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d902      	bls.n	8004d7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	73fb      	strb	r3, [r7, #15]
        break;
 8004d7a:	e005      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ef      	bne.n	8004d68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d14a      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d111      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	0211      	lsls	r1, r2, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	0912      	lsrs	r2, r2, #4
 8004dac:	0452      	lsls	r2, r2, #17
 8004dae:	430a      	orrs	r2, r1
 8004db0:	491f      	ldr	r1, [pc, #124]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	614b      	str	r3, [r1, #20]
 8004db6:	e011      	b.n	8004ddc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	0211      	lsls	r1, r2, #8
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6912      	ldr	r2, [r2, #16]
 8004dce:	0852      	lsrs	r2, r2, #1
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	0652      	lsls	r2, r2, #25
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4916      	ldr	r1, [pc, #88]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fc ffa4 	bl	8001d34 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004df0:	f7fc ffa0 	bl	8001d34 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
          break;
 8004e02:	e005      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4904      	ldr	r1, [pc, #16]	; (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e049      	b.n	8004eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fc fd66 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f000 f8fc 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_ConfigClockSource+0x18>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0b5      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x184>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f24:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f36:	d03e      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0xd4>
 8004f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3c:	f200 8087 	bhi.w	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f44:	f000 8085 	beq.w	8005052 <HAL_TIM_ConfigClockSource+0x170>
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d87f      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f4e:	2b70      	cmp	r3, #112	; 0x70
 8004f50:	d01a      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0xa6>
 8004f52:	2b70      	cmp	r3, #112	; 0x70
 8004f54:	d87b      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f56:	2b60      	cmp	r3, #96	; 0x60
 8004f58:	d050      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x11a>
 8004f5a:	2b60      	cmp	r3, #96	; 0x60
 8004f5c:	d877      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f5e:	2b50      	cmp	r3, #80	; 0x50
 8004f60:	d03c      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0xfa>
 8004f62:	2b50      	cmp	r3, #80	; 0x50
 8004f64:	d873      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f66:	2b40      	cmp	r3, #64	; 0x40
 8004f68:	d058      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x13a>
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d86f      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d064      	beq.n	800503c <HAL_TIM_ConfigClockSource+0x15a>
 8004f72:	2b30      	cmp	r3, #48	; 0x30
 8004f74:	d86b      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d060      	beq.n	800503c <HAL_TIM_ConfigClockSource+0x15a>
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d867      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05c      	beq.n	800503c <HAL_TIM_ConfigClockSource+0x15a>
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d05a      	beq.n	800503c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f86:	e062      	b.n	800504e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f000 f97e 	bl	8005298 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004faa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
      break;
 8004fb4:	e04e      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f000 f967 	bl	8005298 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e03b      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f000 f8db 	bl	80051a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2150      	movs	r1, #80	; 0x50
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f934 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8004ffa:	e02b      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	461a      	mov	r2, r3
 800500a:	f000 f8fa 	bl	8005202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2160      	movs	r1, #96	; 0x60
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f924 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 800501a:	e01b      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	461a      	mov	r2, r3
 800502a:	f000 f8bb 	bl	80051a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2140      	movs	r1, #64	; 0x40
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f914 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 800503a:	e00b      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 f90b 	bl	8005262 <TIM_ITRx_SetConfig>
        break;
 800504c:	e002      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a40      	ldr	r2, [pc, #256]	; (8005184 <TIM_Base_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3d      	ldr	r2, [pc, #244]	; (8005188 <TIM_Base_SetConfig+0x118>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <TIM_Base_SetConfig+0x11c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <TIM_Base_SetConfig+0x114>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d01b      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2c      	ldr	r2, [pc, #176]	; (8005188 <TIM_Base_SetConfig+0x118>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d017      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2b      	ldr	r2, [pc, #172]	; (800518c <TIM_Base_SetConfig+0x11c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a28      	ldr	r2, [pc, #160]	; (8005198 <TIM_Base_SetConfig+0x128>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <TIM_Base_SetConfig+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a10      	ldr	r2, [pc, #64]	; (8005184 <TIM_Base_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a12      	ldr	r2, [pc, #72]	; (8005194 <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a11      	ldr	r2, [pc, #68]	; (8005198 <TIM_Base_SetConfig+0x128>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <TIM_Base_SetConfig+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 030a 	bic.w	r3, r3, #10
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005202:	b480      	push	{r7}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0210 	bic.w	r2, r3, #16
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800522c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	f043 0307 	orr.w	r3, r3, #7
 8005284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4313      	orrs	r3, r2
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e068      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000

080053e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e040      	b.n	800547c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fc faae 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f82c 	bl	8005484 <UART_SetConfig>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e022      	b.n	800547c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 faaa 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb31 	bl	8005adc <UART_CheckIdleState>
 800547a:	4603      	mov	r3, r0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4bad      	ldr	r3, [pc, #692]	; (8005764 <UART_SetConfig+0x2e0>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	69f9      	ldr	r1, [r7, #28]
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4aa2      	ldr	r2, [pc, #648]	; (8005768 <UART_SetConfig+0x2e4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a99      	ldr	r2, [pc, #612]	; (800576c <UART_SetConfig+0x2e8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d121      	bne.n	800554e <UART_SetConfig+0xca>
 800550a:	4b99      	ldr	r3, [pc, #612]	; (8005770 <UART_SetConfig+0x2ec>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d817      	bhi.n	8005548 <UART_SetConfig+0xc4>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x9c>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005531 	.word	0x08005531
 8005524:	0800553d 	.word	0x0800553d
 8005528:	08005537 	.word	0x08005537
 800552c:	08005543 	.word	0x08005543
 8005530:	2301      	movs	r3, #1
 8005532:	76fb      	strb	r3, [r7, #27]
 8005534:	e0e7      	b.n	8005706 <UART_SetConfig+0x282>
 8005536:	2302      	movs	r3, #2
 8005538:	76fb      	strb	r3, [r7, #27]
 800553a:	e0e4      	b.n	8005706 <UART_SetConfig+0x282>
 800553c:	2304      	movs	r3, #4
 800553e:	76fb      	strb	r3, [r7, #27]
 8005540:	e0e1      	b.n	8005706 <UART_SetConfig+0x282>
 8005542:	2308      	movs	r3, #8
 8005544:	76fb      	strb	r3, [r7, #27]
 8005546:	e0de      	b.n	8005706 <UART_SetConfig+0x282>
 8005548:	2310      	movs	r3, #16
 800554a:	76fb      	strb	r3, [r7, #27]
 800554c:	e0db      	b.n	8005706 <UART_SetConfig+0x282>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a88      	ldr	r2, [pc, #544]	; (8005774 <UART_SetConfig+0x2f0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d132      	bne.n	80055be <UART_SetConfig+0x13a>
 8005558:	4b85      	ldr	r3, [pc, #532]	; (8005770 <UART_SetConfig+0x2ec>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d828      	bhi.n	80055b8 <UART_SetConfig+0x134>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <UART_SetConfig+0xe8>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	080055a1 	.word	0x080055a1
 8005570:	080055b9 	.word	0x080055b9
 8005574:	080055b9 	.word	0x080055b9
 8005578:	080055b9 	.word	0x080055b9
 800557c:	080055ad 	.word	0x080055ad
 8005580:	080055b9 	.word	0x080055b9
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080055b9 	.word	0x080055b9
 800558c:	080055a7 	.word	0x080055a7
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055b9 	.word	0x080055b9
 800559c:	080055b3 	.word	0x080055b3
 80055a0:	2300      	movs	r3, #0
 80055a2:	76fb      	strb	r3, [r7, #27]
 80055a4:	e0af      	b.n	8005706 <UART_SetConfig+0x282>
 80055a6:	2302      	movs	r3, #2
 80055a8:	76fb      	strb	r3, [r7, #27]
 80055aa:	e0ac      	b.n	8005706 <UART_SetConfig+0x282>
 80055ac:	2304      	movs	r3, #4
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e0a9      	b.n	8005706 <UART_SetConfig+0x282>
 80055b2:	2308      	movs	r3, #8
 80055b4:	76fb      	strb	r3, [r7, #27]
 80055b6:	e0a6      	b.n	8005706 <UART_SetConfig+0x282>
 80055b8:	2310      	movs	r3, #16
 80055ba:	76fb      	strb	r3, [r7, #27]
 80055bc:	e0a3      	b.n	8005706 <UART_SetConfig+0x282>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6d      	ldr	r2, [pc, #436]	; (8005778 <UART_SetConfig+0x2f4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d120      	bne.n	800560a <UART_SetConfig+0x186>
 80055c8:	4b69      	ldr	r3, [pc, #420]	; (8005770 <UART_SetConfig+0x2ec>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055d2:	2b30      	cmp	r3, #48	; 0x30
 80055d4:	d013      	beq.n	80055fe <UART_SetConfig+0x17a>
 80055d6:	2b30      	cmp	r3, #48	; 0x30
 80055d8:	d814      	bhi.n	8005604 <UART_SetConfig+0x180>
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d009      	beq.n	80055f2 <UART_SetConfig+0x16e>
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d810      	bhi.n	8005604 <UART_SetConfig+0x180>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <UART_SetConfig+0x168>
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	d006      	beq.n	80055f8 <UART_SetConfig+0x174>
 80055ea:	e00b      	b.n	8005604 <UART_SetConfig+0x180>
 80055ec:	2300      	movs	r3, #0
 80055ee:	76fb      	strb	r3, [r7, #27]
 80055f0:	e089      	b.n	8005706 <UART_SetConfig+0x282>
 80055f2:	2302      	movs	r3, #2
 80055f4:	76fb      	strb	r3, [r7, #27]
 80055f6:	e086      	b.n	8005706 <UART_SetConfig+0x282>
 80055f8:	2304      	movs	r3, #4
 80055fa:	76fb      	strb	r3, [r7, #27]
 80055fc:	e083      	b.n	8005706 <UART_SetConfig+0x282>
 80055fe:	2308      	movs	r3, #8
 8005600:	76fb      	strb	r3, [r7, #27]
 8005602:	e080      	b.n	8005706 <UART_SetConfig+0x282>
 8005604:	2310      	movs	r3, #16
 8005606:	76fb      	strb	r3, [r7, #27]
 8005608:	e07d      	b.n	8005706 <UART_SetConfig+0x282>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5b      	ldr	r2, [pc, #364]	; (800577c <UART_SetConfig+0x2f8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d120      	bne.n	8005656 <UART_SetConfig+0x1d2>
 8005614:	4b56      	ldr	r3, [pc, #344]	; (8005770 <UART_SetConfig+0x2ec>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800561e:	2bc0      	cmp	r3, #192	; 0xc0
 8005620:	d013      	beq.n	800564a <UART_SetConfig+0x1c6>
 8005622:	2bc0      	cmp	r3, #192	; 0xc0
 8005624:	d814      	bhi.n	8005650 <UART_SetConfig+0x1cc>
 8005626:	2b80      	cmp	r3, #128	; 0x80
 8005628:	d009      	beq.n	800563e <UART_SetConfig+0x1ba>
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d810      	bhi.n	8005650 <UART_SetConfig+0x1cc>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <UART_SetConfig+0x1b4>
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d006      	beq.n	8005644 <UART_SetConfig+0x1c0>
 8005636:	e00b      	b.n	8005650 <UART_SetConfig+0x1cc>
 8005638:	2300      	movs	r3, #0
 800563a:	76fb      	strb	r3, [r7, #27]
 800563c:	e063      	b.n	8005706 <UART_SetConfig+0x282>
 800563e:	2302      	movs	r3, #2
 8005640:	76fb      	strb	r3, [r7, #27]
 8005642:	e060      	b.n	8005706 <UART_SetConfig+0x282>
 8005644:	2304      	movs	r3, #4
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e05d      	b.n	8005706 <UART_SetConfig+0x282>
 800564a:	2308      	movs	r3, #8
 800564c:	76fb      	strb	r3, [r7, #27]
 800564e:	e05a      	b.n	8005706 <UART_SetConfig+0x282>
 8005650:	2310      	movs	r3, #16
 8005652:	76fb      	strb	r3, [r7, #27]
 8005654:	e057      	b.n	8005706 <UART_SetConfig+0x282>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a49      	ldr	r2, [pc, #292]	; (8005780 <UART_SetConfig+0x2fc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d125      	bne.n	80056ac <UART_SetConfig+0x228>
 8005660:	4b43      	ldr	r3, [pc, #268]	; (8005770 <UART_SetConfig+0x2ec>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800566e:	d017      	beq.n	80056a0 <UART_SetConfig+0x21c>
 8005670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005674:	d817      	bhi.n	80056a6 <UART_SetConfig+0x222>
 8005676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567a:	d00b      	beq.n	8005694 <UART_SetConfig+0x210>
 800567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005680:	d811      	bhi.n	80056a6 <UART_SetConfig+0x222>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <UART_SetConfig+0x20a>
 8005686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568a:	d006      	beq.n	800569a <UART_SetConfig+0x216>
 800568c:	e00b      	b.n	80056a6 <UART_SetConfig+0x222>
 800568e:	2300      	movs	r3, #0
 8005690:	76fb      	strb	r3, [r7, #27]
 8005692:	e038      	b.n	8005706 <UART_SetConfig+0x282>
 8005694:	2302      	movs	r3, #2
 8005696:	76fb      	strb	r3, [r7, #27]
 8005698:	e035      	b.n	8005706 <UART_SetConfig+0x282>
 800569a:	2304      	movs	r3, #4
 800569c:	76fb      	strb	r3, [r7, #27]
 800569e:	e032      	b.n	8005706 <UART_SetConfig+0x282>
 80056a0:	2308      	movs	r3, #8
 80056a2:	76fb      	strb	r3, [r7, #27]
 80056a4:	e02f      	b.n	8005706 <UART_SetConfig+0x282>
 80056a6:	2310      	movs	r3, #16
 80056a8:	76fb      	strb	r3, [r7, #27]
 80056aa:	e02c      	b.n	8005706 <UART_SetConfig+0x282>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2d      	ldr	r2, [pc, #180]	; (8005768 <UART_SetConfig+0x2e4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d125      	bne.n	8005702 <UART_SetConfig+0x27e>
 80056b6:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <UART_SetConfig+0x2ec>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056c4:	d017      	beq.n	80056f6 <UART_SetConfig+0x272>
 80056c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ca:	d817      	bhi.n	80056fc <UART_SetConfig+0x278>
 80056cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d0:	d00b      	beq.n	80056ea <UART_SetConfig+0x266>
 80056d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d6:	d811      	bhi.n	80056fc <UART_SetConfig+0x278>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <UART_SetConfig+0x260>
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	d006      	beq.n	80056f0 <UART_SetConfig+0x26c>
 80056e2:	e00b      	b.n	80056fc <UART_SetConfig+0x278>
 80056e4:	2300      	movs	r3, #0
 80056e6:	76fb      	strb	r3, [r7, #27]
 80056e8:	e00d      	b.n	8005706 <UART_SetConfig+0x282>
 80056ea:	2302      	movs	r3, #2
 80056ec:	76fb      	strb	r3, [r7, #27]
 80056ee:	e00a      	b.n	8005706 <UART_SetConfig+0x282>
 80056f0:	2304      	movs	r3, #4
 80056f2:	76fb      	strb	r3, [r7, #27]
 80056f4:	e007      	b.n	8005706 <UART_SetConfig+0x282>
 80056f6:	2308      	movs	r3, #8
 80056f8:	76fb      	strb	r3, [r7, #27]
 80056fa:	e004      	b.n	8005706 <UART_SetConfig+0x282>
 80056fc:	2310      	movs	r3, #16
 80056fe:	76fb      	strb	r3, [r7, #27]
 8005700:	e001      	b.n	8005706 <UART_SetConfig+0x282>
 8005702:	2310      	movs	r3, #16
 8005704:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <UART_SetConfig+0x2e4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	f040 8087 	bne.w	8005820 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005712:	7efb      	ldrb	r3, [r7, #27]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d837      	bhi.n	8005788 <UART_SetConfig+0x304>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x29c>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005745 	.word	0x08005745
 8005724:	08005789 	.word	0x08005789
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005789 	.word	0x08005789
 8005730:	08005753 	.word	0x08005753
 8005734:	08005789 	.word	0x08005789
 8005738:	08005789 	.word	0x08005789
 800573c:	08005789 	.word	0x08005789
 8005740:	0800575b 	.word	0x0800575b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fe fe2e 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8005748:	6178      	str	r0, [r7, #20]
        break;
 800574a:	e022      	b.n	8005792 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <UART_SetConfig+0x300>)
 800574e:	617b      	str	r3, [r7, #20]
        break;
 8005750:	e01f      	b.n	8005792 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005752:	f7fe fd8f 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8005756:	6178      	str	r0, [r7, #20]
        break;
 8005758:	e01b      	b.n	8005792 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575e:	617b      	str	r3, [r7, #20]
        break;
 8005760:	e017      	b.n	8005792 <UART_SetConfig+0x30e>
 8005762:	bf00      	nop
 8005764:	efff69f3 	.word	0xefff69f3
 8005768:	40008000 	.word	0x40008000
 800576c:	40013800 	.word	0x40013800
 8005770:	40021000 	.word	0x40021000
 8005774:	40004400 	.word	0x40004400
 8005778:	40004800 	.word	0x40004800
 800577c:	40004c00 	.word	0x40004c00
 8005780:	40005000 	.word	0x40005000
 8005784:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	76bb      	strb	r3, [r7, #26]
        break;
 8005790:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80f1 	beq.w	800597c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d305      	bcc.n	80057b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d902      	bls.n	80057bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	76bb      	strb	r3, [r7, #26]
 80057ba:	e0df      	b.n	800597c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4618      	mov	r0, r3
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	020b      	lsls	r3, r1, #8
 80057ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057d2:	0202      	lsls	r2, r0, #8
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	6849      	ldr	r1, [r1, #4]
 80057d8:	0849      	lsrs	r1, r1, #1
 80057da:	4608      	mov	r0, r1
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	1814      	adds	r4, r2, r0
 80057e2:	eb43 0501 	adc.w	r5, r3, r1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	4620      	mov	r0, r4
 80057f2:	4629      	mov	r1, r5
 80057f4:	f7fb f8aa 	bl	800094c <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4613      	mov	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005806:	d308      	bcc.n	800581a <UART_SetConfig+0x396>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800580e:	d204      	bcs.n	800581a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	e0b0      	b.n	800597c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	76bb      	strb	r3, [r7, #26]
 800581e:	e0ad      	b.n	800597c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005828:	d15c      	bne.n	80058e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800582a:	7efb      	ldrb	r3, [r7, #27]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d828      	bhi.n	8005882 <UART_SetConfig+0x3fe>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0x3b4>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800585d 	.word	0x0800585d
 800583c:	08005865 	.word	0x08005865
 8005840:	0800586d 	.word	0x0800586d
 8005844:	08005883 	.word	0x08005883
 8005848:	08005873 	.word	0x08005873
 800584c:	08005883 	.word	0x08005883
 8005850:	08005883 	.word	0x08005883
 8005854:	08005883 	.word	0x08005883
 8005858:	0800587b 	.word	0x0800587b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800585c:	f7fe fda2 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8005860:	6178      	str	r0, [r7, #20]
        break;
 8005862:	e013      	b.n	800588c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005864:	f7fe fdb4 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8005868:	6178      	str	r0, [r7, #20]
        break;
 800586a:	e00f      	b.n	800588c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800586c:	4b49      	ldr	r3, [pc, #292]	; (8005994 <UART_SetConfig+0x510>)
 800586e:	617b      	str	r3, [r7, #20]
        break;
 8005870:	e00c      	b.n	800588c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005872:	f7fe fcff 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8005876:	6178      	str	r0, [r7, #20]
        break;
 8005878:	e008      	b.n	800588c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587e:	617b      	str	r3, [r7, #20]
        break;
 8005880:	e004      	b.n	800588c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	76bb      	strb	r3, [r7, #26]
        break;
 800588a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d074      	beq.n	800597c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	005a      	lsls	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	441a      	add	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b0f      	cmp	r3, #15
 80058ae:	d916      	bls.n	80058de <UART_SetConfig+0x45a>
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b6:	d212      	bcs.n	80058de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f023 030f 	bic.w	r3, r3, #15
 80058c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	89fb      	ldrh	r3, [r7, #14]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	89fa      	ldrh	r2, [r7, #14]
 80058da:	60da      	str	r2, [r3, #12]
 80058dc:	e04e      	b.n	800597c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	76bb      	strb	r3, [r7, #26]
 80058e2:	e04b      	b.n	800597c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e4:	7efb      	ldrb	r3, [r7, #27]
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d827      	bhi.n	800593a <UART_SetConfig+0x4b6>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x46c>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fe fd46 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8005918:	6178      	str	r0, [r7, #20]
        break;
 800591a:	e013      	b.n	8005944 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fe fd58 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8005920:	6178      	str	r0, [r7, #20]
        break;
 8005922:	e00f      	b.n	8005944 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <UART_SetConfig+0x510>)
 8005926:	617b      	str	r3, [r7, #20]
        break;
 8005928:	e00c      	b.n	8005944 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fca3 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 800592e:	6178      	str	r0, [r7, #20]
        break;
 8005930:	e008      	b.n	8005944 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	617b      	str	r3, [r7, #20]
        break;
 8005938:	e004      	b.n	8005944 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	76bb      	strb	r3, [r7, #26]
        break;
 8005942:	bf00      	nop
    }

    if (pclk != 0U)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	085a      	lsrs	r2, r3, #1
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	b29b      	uxth	r3, r3
 800595e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	d908      	bls.n	8005978 <UART_SetConfig+0x4f4>
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d204      	bcs.n	8005978 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	e001      	b.n	800597c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005988:	7ebb      	ldrb	r3, [r7, #26]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bdb0      	pop	{r4, r5, r7, pc}
 8005992:	bf00      	nop
 8005994:	00f42400 	.word	0x00f42400

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a96:	d10a      	bne.n	8005aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fc f922 	bl	8001d34 <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d10e      	bne.n	8005b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f82d 	bl	8005b6e <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e023      	b.n	8005b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d10e      	bne.n	8005b4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f817 	bl	8005b6e <UART_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e00d      	b.n	8005b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7e:	e05e      	b.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d05a      	beq.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b88:	f7fc f8d4 	bl	8001d34 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11b      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e043      	b.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d02c      	beq.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf2:	d124      	bne.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e00f      	b.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	2300      	movne	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d091      	beq.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <__errno>:
 8005c68:	4b01      	ldr	r3, [pc, #4]	; (8005c70 <__errno+0x8>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000018 	.word	0x20000018

08005c74 <__libc_init_array>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4d0d      	ldr	r5, [pc, #52]	; (8005cac <__libc_init_array+0x38>)
 8005c78:	4c0d      	ldr	r4, [pc, #52]	; (8005cb0 <__libc_init_array+0x3c>)
 8005c7a:	1b64      	subs	r4, r4, r5
 8005c7c:	10a4      	asrs	r4, r4, #2
 8005c7e:	2600      	movs	r6, #0
 8005c80:	42a6      	cmp	r6, r4
 8005c82:	d109      	bne.n	8005c98 <__libc_init_array+0x24>
 8005c84:	4d0b      	ldr	r5, [pc, #44]	; (8005cb4 <__libc_init_array+0x40>)
 8005c86:	4c0c      	ldr	r4, [pc, #48]	; (8005cb8 <__libc_init_array+0x44>)
 8005c88:	f000 ffec 	bl	8006c64 <_init>
 8005c8c:	1b64      	subs	r4, r4, r5
 8005c8e:	10a4      	asrs	r4, r4, #2
 8005c90:	2600      	movs	r6, #0
 8005c92:	42a6      	cmp	r6, r4
 8005c94:	d105      	bne.n	8005ca2 <__libc_init_array+0x2e>
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9c:	4798      	blx	r3
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7ee      	b.n	8005c80 <__libc_init_array+0xc>
 8005ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca6:	4798      	blx	r3
 8005ca8:	3601      	adds	r6, #1
 8005caa:	e7f2      	b.n	8005c92 <__libc_init_array+0x1e>
 8005cac:	08006ebc 	.word	0x08006ebc
 8005cb0:	08006ebc 	.word	0x08006ebc
 8005cb4:	08006ebc 	.word	0x08006ebc
 8005cb8:	08006ec0 	.word	0x08006ec0

08005cbc <memset>:
 8005cbc:	4402      	add	r2, r0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <iprintf>:
 8005ccc:	b40f      	push	{r0, r1, r2, r3}
 8005cce:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <iprintf+0x2c>)
 8005cd0:	b513      	push	{r0, r1, r4, lr}
 8005cd2:	681c      	ldr	r4, [r3, #0]
 8005cd4:	b124      	cbz	r4, 8005ce0 <iprintf+0x14>
 8005cd6:	69a3      	ldr	r3, [r4, #24]
 8005cd8:	b913      	cbnz	r3, 8005ce0 <iprintf+0x14>
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 fa5e 	bl	800619c <__sinit>
 8005ce0:	ab05      	add	r3, sp, #20
 8005ce2:	9a04      	ldr	r2, [sp, #16]
 8005ce4:	68a1      	ldr	r1, [r4, #8]
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fc2f 	bl	800654c <_vfiprintf_r>
 8005cee:	b002      	add	sp, #8
 8005cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf4:	b004      	add	sp, #16
 8005cf6:	4770      	bx	lr
 8005cf8:	20000018 	.word	0x20000018

08005cfc <_puts_r>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	460e      	mov	r6, r1
 8005d00:	4605      	mov	r5, r0
 8005d02:	b118      	cbz	r0, 8005d0c <_puts_r+0x10>
 8005d04:	6983      	ldr	r3, [r0, #24]
 8005d06:	b90b      	cbnz	r3, 8005d0c <_puts_r+0x10>
 8005d08:	f000 fa48 	bl	800619c <__sinit>
 8005d0c:	69ab      	ldr	r3, [r5, #24]
 8005d0e:	68ac      	ldr	r4, [r5, #8]
 8005d10:	b913      	cbnz	r3, 8005d18 <_puts_r+0x1c>
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 fa42 	bl	800619c <__sinit>
 8005d18:	4b2c      	ldr	r3, [pc, #176]	; (8005dcc <_puts_r+0xd0>)
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	d120      	bne.n	8005d60 <_puts_r+0x64>
 8005d1e:	686c      	ldr	r4, [r5, #4]
 8005d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d22:	07db      	lsls	r3, r3, #31
 8005d24:	d405      	bmi.n	8005d32 <_puts_r+0x36>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	0598      	lsls	r0, r3, #22
 8005d2a:	d402      	bmi.n	8005d32 <_puts_r+0x36>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d2e:	f000 fad3 	bl	80062d8 <__retarget_lock_acquire_recursive>
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	0719      	lsls	r1, r3, #28
 8005d36:	d51d      	bpl.n	8005d74 <_puts_r+0x78>
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	b1db      	cbz	r3, 8005d74 <_puts_r+0x78>
 8005d3c:	3e01      	subs	r6, #1
 8005d3e:	68a3      	ldr	r3, [r4, #8]
 8005d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d44:	3b01      	subs	r3, #1
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	bb39      	cbnz	r1, 8005d9a <_puts_r+0x9e>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da38      	bge.n	8005dc0 <_puts_r+0xc4>
 8005d4e:	4622      	mov	r2, r4
 8005d50:	210a      	movs	r1, #10
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f848 	bl	8005de8 <__swbuf_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d011      	beq.n	8005d80 <_puts_r+0x84>
 8005d5c:	250a      	movs	r5, #10
 8005d5e:	e011      	b.n	8005d84 <_puts_r+0x88>
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <_puts_r+0xd4>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d101      	bne.n	8005d6a <_puts_r+0x6e>
 8005d66:	68ac      	ldr	r4, [r5, #8]
 8005d68:	e7da      	b.n	8005d20 <_puts_r+0x24>
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <_puts_r+0xd8>)
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	bf08      	it	eq
 8005d70:	68ec      	ldreq	r4, [r5, #12]
 8005d72:	e7d5      	b.n	8005d20 <_puts_r+0x24>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f888 	bl	8005e8c <__swsetup_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d0dd      	beq.n	8005d3c <_puts_r+0x40>
 8005d80:	f04f 35ff 	mov.w	r5, #4294967295
 8005d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d86:	07da      	lsls	r2, r3, #31
 8005d88:	d405      	bmi.n	8005d96 <_puts_r+0x9a>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	059b      	lsls	r3, r3, #22
 8005d8e:	d402      	bmi.n	8005d96 <_puts_r+0x9a>
 8005d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d92:	f000 faa2 	bl	80062da <__retarget_lock_release_recursive>
 8005d96:	4628      	mov	r0, r5
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da04      	bge.n	8005da8 <_puts_r+0xac>
 8005d9e:	69a2      	ldr	r2, [r4, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	dc06      	bgt.n	8005db2 <_puts_r+0xb6>
 8005da4:	290a      	cmp	r1, #10
 8005da6:	d004      	beq.n	8005db2 <_puts_r+0xb6>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	7019      	strb	r1, [r3, #0]
 8005db0:	e7c5      	b.n	8005d3e <_puts_r+0x42>
 8005db2:	4622      	mov	r2, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f817 	bl	8005de8 <__swbuf_r>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d1bf      	bne.n	8005d3e <_puts_r+0x42>
 8005dbe:	e7df      	b.n	8005d80 <_puts_r+0x84>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	250a      	movs	r5, #10
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	6022      	str	r2, [r4, #0]
 8005dc8:	701d      	strb	r5, [r3, #0]
 8005dca:	e7db      	b.n	8005d84 <_puts_r+0x88>
 8005dcc:	08006e40 	.word	0x08006e40
 8005dd0:	08006e60 	.word	0x08006e60
 8005dd4:	08006e20 	.word	0x08006e20

08005dd8 <puts>:
 8005dd8:	4b02      	ldr	r3, [pc, #8]	; (8005de4 <puts+0xc>)
 8005dda:	4601      	mov	r1, r0
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	f7ff bf8d 	b.w	8005cfc <_puts_r>
 8005de2:	bf00      	nop
 8005de4:	20000018 	.word	0x20000018

08005de8 <__swbuf_r>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	460e      	mov	r6, r1
 8005dec:	4614      	mov	r4, r2
 8005dee:	4605      	mov	r5, r0
 8005df0:	b118      	cbz	r0, 8005dfa <__swbuf_r+0x12>
 8005df2:	6983      	ldr	r3, [r0, #24]
 8005df4:	b90b      	cbnz	r3, 8005dfa <__swbuf_r+0x12>
 8005df6:	f000 f9d1 	bl	800619c <__sinit>
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <__swbuf_r+0x98>)
 8005dfc:	429c      	cmp	r4, r3
 8005dfe:	d12b      	bne.n	8005e58 <__swbuf_r+0x70>
 8005e00:	686c      	ldr	r4, [r5, #4]
 8005e02:	69a3      	ldr	r3, [r4, #24]
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	071a      	lsls	r2, r3, #28
 8005e0a:	d52f      	bpl.n	8005e6c <__swbuf_r+0x84>
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	b36b      	cbz	r3, 8005e6c <__swbuf_r+0x84>
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1ac0      	subs	r0, r0, r3
 8005e16:	6963      	ldr	r3, [r4, #20]
 8005e18:	b2f6      	uxtb	r6, r6
 8005e1a:	4283      	cmp	r3, r0
 8005e1c:	4637      	mov	r7, r6
 8005e1e:	dc04      	bgt.n	8005e2a <__swbuf_r+0x42>
 8005e20:	4621      	mov	r1, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f926 	bl	8006074 <_fflush_r>
 8005e28:	bb30      	cbnz	r0, 8005e78 <__swbuf_r+0x90>
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	60a3      	str	r3, [r4, #8]
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	6022      	str	r2, [r4, #0]
 8005e36:	701e      	strb	r6, [r3, #0]
 8005e38:	6963      	ldr	r3, [r4, #20]
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	4283      	cmp	r3, r0
 8005e3e:	d004      	beq.n	8005e4a <__swbuf_r+0x62>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	07db      	lsls	r3, r3, #31
 8005e44:	d506      	bpl.n	8005e54 <__swbuf_r+0x6c>
 8005e46:	2e0a      	cmp	r6, #10
 8005e48:	d104      	bne.n	8005e54 <__swbuf_r+0x6c>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 f911 	bl	8006074 <_fflush_r>
 8005e52:	b988      	cbnz	r0, 8005e78 <__swbuf_r+0x90>
 8005e54:	4638      	mov	r0, r7
 8005e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <__swbuf_r+0x9c>)
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	d101      	bne.n	8005e62 <__swbuf_r+0x7a>
 8005e5e:	68ac      	ldr	r4, [r5, #8]
 8005e60:	e7cf      	b.n	8005e02 <__swbuf_r+0x1a>
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <__swbuf_r+0xa0>)
 8005e64:	429c      	cmp	r4, r3
 8005e66:	bf08      	it	eq
 8005e68:	68ec      	ldreq	r4, [r5, #12]
 8005e6a:	e7ca      	b.n	8005e02 <__swbuf_r+0x1a>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f80c 	bl	8005e8c <__swsetup_r>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d0cb      	beq.n	8005e10 <__swbuf_r+0x28>
 8005e78:	f04f 37ff 	mov.w	r7, #4294967295
 8005e7c:	e7ea      	b.n	8005e54 <__swbuf_r+0x6c>
 8005e7e:	bf00      	nop
 8005e80:	08006e40 	.word	0x08006e40
 8005e84:	08006e60 	.word	0x08006e60
 8005e88:	08006e20 	.word	0x08006e20

08005e8c <__swsetup_r>:
 8005e8c:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <__swsetup_r+0xcc>)
 8005e8e:	b570      	push	{r4, r5, r6, lr}
 8005e90:	681d      	ldr	r5, [r3, #0]
 8005e92:	4606      	mov	r6, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	b125      	cbz	r5, 8005ea2 <__swsetup_r+0x16>
 8005e98:	69ab      	ldr	r3, [r5, #24]
 8005e9a:	b913      	cbnz	r3, 8005ea2 <__swsetup_r+0x16>
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f000 f97d 	bl	800619c <__sinit>
 8005ea2:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <__swsetup_r+0xd0>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d10f      	bne.n	8005ec8 <__swsetup_r+0x3c>
 8005ea8:	686c      	ldr	r4, [r5, #4]
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb0:	0719      	lsls	r1, r3, #28
 8005eb2:	d42c      	bmi.n	8005f0e <__swsetup_r+0x82>
 8005eb4:	06dd      	lsls	r5, r3, #27
 8005eb6:	d411      	bmi.n	8005edc <__swsetup_r+0x50>
 8005eb8:	2309      	movs	r3, #9
 8005eba:	6033      	str	r3, [r6, #0]
 8005ebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec6:	e03e      	b.n	8005f46 <__swsetup_r+0xba>
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <__swsetup_r+0xd4>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d101      	bne.n	8005ed2 <__swsetup_r+0x46>
 8005ece:	68ac      	ldr	r4, [r5, #8]
 8005ed0:	e7eb      	b.n	8005eaa <__swsetup_r+0x1e>
 8005ed2:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <__swsetup_r+0xd8>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	bf08      	it	eq
 8005ed8:	68ec      	ldreq	r4, [r5, #12]
 8005eda:	e7e6      	b.n	8005eaa <__swsetup_r+0x1e>
 8005edc:	0758      	lsls	r0, r3, #29
 8005ede:	d512      	bpl.n	8005f06 <__swsetup_r+0x7a>
 8005ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ee2:	b141      	cbz	r1, 8005ef6 <__swsetup_r+0x6a>
 8005ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	d002      	beq.n	8005ef2 <__swsetup_r+0x66>
 8005eec:	4630      	mov	r0, r6
 8005eee:	f000 fa59 	bl	80063a4 <_free_r>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6063      	str	r3, [r4, #4]
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	f043 0308 	orr.w	r3, r3, #8
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	b94b      	cbnz	r3, 8005f26 <__swsetup_r+0x9a>
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1c:	d003      	beq.n	8005f26 <__swsetup_r+0x9a>
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f9ff 	bl	8006324 <__smakebuf_r>
 8005f26:	89a0      	ldrh	r0, [r4, #12]
 8005f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f2c:	f010 0301 	ands.w	r3, r0, #1
 8005f30:	d00a      	beq.n	8005f48 <__swsetup_r+0xbc>
 8005f32:	2300      	movs	r3, #0
 8005f34:	60a3      	str	r3, [r4, #8]
 8005f36:	6963      	ldr	r3, [r4, #20]
 8005f38:	425b      	negs	r3, r3
 8005f3a:	61a3      	str	r3, [r4, #24]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	b943      	cbnz	r3, 8005f52 <__swsetup_r+0xc6>
 8005f40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f44:	d1ba      	bne.n	8005ebc <__swsetup_r+0x30>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	0781      	lsls	r1, r0, #30
 8005f4a:	bf58      	it	pl
 8005f4c:	6963      	ldrpl	r3, [r4, #20]
 8005f4e:	60a3      	str	r3, [r4, #8]
 8005f50:	e7f4      	b.n	8005f3c <__swsetup_r+0xb0>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e7f7      	b.n	8005f46 <__swsetup_r+0xba>
 8005f56:	bf00      	nop
 8005f58:	20000018 	.word	0x20000018
 8005f5c:	08006e40 	.word	0x08006e40
 8005f60:	08006e60 	.word	0x08006e60
 8005f64:	08006e20 	.word	0x08006e20

08005f68 <__sflush_r>:
 8005f68:	898a      	ldrh	r2, [r1, #12]
 8005f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	4605      	mov	r5, r0
 8005f70:	0710      	lsls	r0, r2, #28
 8005f72:	460c      	mov	r4, r1
 8005f74:	d458      	bmi.n	8006028 <__sflush_r+0xc0>
 8005f76:	684b      	ldr	r3, [r1, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	dc05      	bgt.n	8005f88 <__sflush_r+0x20>
 8005f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	dc02      	bgt.n	8005f88 <__sflush_r+0x20>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f8a:	2e00      	cmp	r6, #0
 8005f8c:	d0f9      	beq.n	8005f82 <__sflush_r+0x1a>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f94:	682f      	ldr	r7, [r5, #0]
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	d032      	beq.n	8006000 <__sflush_r+0x98>
 8005f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	075a      	lsls	r2, r3, #29
 8005fa0:	d505      	bpl.n	8005fae <__sflush_r+0x46>
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	1ac0      	subs	r0, r0, r3
 8005fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fa8:	b10b      	cbz	r3, 8005fae <__sflush_r+0x46>
 8005faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fac:	1ac0      	subs	r0, r0, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fb4:	6a21      	ldr	r1, [r4, #32]
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b0      	blx	r6
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	d106      	bne.n	8005fce <__sflush_r+0x66>
 8005fc0:	6829      	ldr	r1, [r5, #0]
 8005fc2:	291d      	cmp	r1, #29
 8005fc4:	d82c      	bhi.n	8006020 <__sflush_r+0xb8>
 8005fc6:	4a2a      	ldr	r2, [pc, #168]	; (8006070 <__sflush_r+0x108>)
 8005fc8:	40ca      	lsrs	r2, r1
 8005fca:	07d6      	lsls	r6, r2, #31
 8005fcc:	d528      	bpl.n	8006020 <__sflush_r+0xb8>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	6062      	str	r2, [r4, #4]
 8005fd2:	04d9      	lsls	r1, r3, #19
 8005fd4:	6922      	ldr	r2, [r4, #16]
 8005fd6:	6022      	str	r2, [r4, #0]
 8005fd8:	d504      	bpl.n	8005fe4 <__sflush_r+0x7c>
 8005fda:	1c42      	adds	r2, r0, #1
 8005fdc:	d101      	bne.n	8005fe2 <__sflush_r+0x7a>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	b903      	cbnz	r3, 8005fe4 <__sflush_r+0x7c>
 8005fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8005fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fe6:	602f      	str	r7, [r5, #0]
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	d0ca      	beq.n	8005f82 <__sflush_r+0x1a>
 8005fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d002      	beq.n	8005ffa <__sflush_r+0x92>
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f9d5 	bl	80063a4 <_free_r>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8005ffe:	e7c1      	b.n	8005f84 <__sflush_r+0x1c>
 8006000:	6a21      	ldr	r1, [r4, #32]
 8006002:	2301      	movs	r3, #1
 8006004:	4628      	mov	r0, r5
 8006006:	47b0      	blx	r6
 8006008:	1c41      	adds	r1, r0, #1
 800600a:	d1c7      	bne.n	8005f9c <__sflush_r+0x34>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0c4      	beq.n	8005f9c <__sflush_r+0x34>
 8006012:	2b1d      	cmp	r3, #29
 8006014:	d001      	beq.n	800601a <__sflush_r+0xb2>
 8006016:	2b16      	cmp	r3, #22
 8006018:	d101      	bne.n	800601e <__sflush_r+0xb6>
 800601a:	602f      	str	r7, [r5, #0]
 800601c:	e7b1      	b.n	8005f82 <__sflush_r+0x1a>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	e7ad      	b.n	8005f84 <__sflush_r+0x1c>
 8006028:	690f      	ldr	r7, [r1, #16]
 800602a:	2f00      	cmp	r7, #0
 800602c:	d0a9      	beq.n	8005f82 <__sflush_r+0x1a>
 800602e:	0793      	lsls	r3, r2, #30
 8006030:	680e      	ldr	r6, [r1, #0]
 8006032:	bf08      	it	eq
 8006034:	694b      	ldreq	r3, [r1, #20]
 8006036:	600f      	str	r7, [r1, #0]
 8006038:	bf18      	it	ne
 800603a:	2300      	movne	r3, #0
 800603c:	eba6 0807 	sub.w	r8, r6, r7
 8006040:	608b      	str	r3, [r1, #8]
 8006042:	f1b8 0f00 	cmp.w	r8, #0
 8006046:	dd9c      	ble.n	8005f82 <__sflush_r+0x1a>
 8006048:	6a21      	ldr	r1, [r4, #32]
 800604a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800604c:	4643      	mov	r3, r8
 800604e:	463a      	mov	r2, r7
 8006050:	4628      	mov	r0, r5
 8006052:	47b0      	blx	r6
 8006054:	2800      	cmp	r0, #0
 8006056:	dc06      	bgt.n	8006066 <__sflush_r+0xfe>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	e78e      	b.n	8005f84 <__sflush_r+0x1c>
 8006066:	4407      	add	r7, r0
 8006068:	eba8 0800 	sub.w	r8, r8, r0
 800606c:	e7e9      	b.n	8006042 <__sflush_r+0xda>
 800606e:	bf00      	nop
 8006070:	20400001 	.word	0x20400001

08006074 <_fflush_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	690b      	ldr	r3, [r1, #16]
 8006078:	4605      	mov	r5, r0
 800607a:	460c      	mov	r4, r1
 800607c:	b913      	cbnz	r3, 8006084 <_fflush_r+0x10>
 800607e:	2500      	movs	r5, #0
 8006080:	4628      	mov	r0, r5
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	b118      	cbz	r0, 800608e <_fflush_r+0x1a>
 8006086:	6983      	ldr	r3, [r0, #24]
 8006088:	b90b      	cbnz	r3, 800608e <_fflush_r+0x1a>
 800608a:	f000 f887 	bl	800619c <__sinit>
 800608e:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <_fflush_r+0x6c>)
 8006090:	429c      	cmp	r4, r3
 8006092:	d11b      	bne.n	80060cc <_fflush_r+0x58>
 8006094:	686c      	ldr	r4, [r5, #4]
 8006096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ef      	beq.n	800607e <_fflush_r+0xa>
 800609e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060a0:	07d0      	lsls	r0, r2, #31
 80060a2:	d404      	bmi.n	80060ae <_fflush_r+0x3a>
 80060a4:	0599      	lsls	r1, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_fflush_r+0x3a>
 80060a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060aa:	f000 f915 	bl	80062d8 <__retarget_lock_acquire_recursive>
 80060ae:	4628      	mov	r0, r5
 80060b0:	4621      	mov	r1, r4
 80060b2:	f7ff ff59 	bl	8005f68 <__sflush_r>
 80060b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060b8:	07da      	lsls	r2, r3, #31
 80060ba:	4605      	mov	r5, r0
 80060bc:	d4e0      	bmi.n	8006080 <_fflush_r+0xc>
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	059b      	lsls	r3, r3, #22
 80060c2:	d4dd      	bmi.n	8006080 <_fflush_r+0xc>
 80060c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060c6:	f000 f908 	bl	80062da <__retarget_lock_release_recursive>
 80060ca:	e7d9      	b.n	8006080 <_fflush_r+0xc>
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <_fflush_r+0x70>)
 80060ce:	429c      	cmp	r4, r3
 80060d0:	d101      	bne.n	80060d6 <_fflush_r+0x62>
 80060d2:	68ac      	ldr	r4, [r5, #8]
 80060d4:	e7df      	b.n	8006096 <_fflush_r+0x22>
 80060d6:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <_fflush_r+0x74>)
 80060d8:	429c      	cmp	r4, r3
 80060da:	bf08      	it	eq
 80060dc:	68ec      	ldreq	r4, [r5, #12]
 80060de:	e7da      	b.n	8006096 <_fflush_r+0x22>
 80060e0:	08006e40 	.word	0x08006e40
 80060e4:	08006e60 	.word	0x08006e60
 80060e8:	08006e20 	.word	0x08006e20

080060ec <std>:
 80060ec:	2300      	movs	r3, #0
 80060ee:	b510      	push	{r4, lr}
 80060f0:	4604      	mov	r4, r0
 80060f2:	e9c0 3300 	strd	r3, r3, [r0]
 80060f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060fa:	6083      	str	r3, [r0, #8]
 80060fc:	8181      	strh	r1, [r0, #12]
 80060fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006100:	81c2      	strh	r2, [r0, #14]
 8006102:	6183      	str	r3, [r0, #24]
 8006104:	4619      	mov	r1, r3
 8006106:	2208      	movs	r2, #8
 8006108:	305c      	adds	r0, #92	; 0x5c
 800610a:	f7ff fdd7 	bl	8005cbc <memset>
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <std+0x38>)
 8006110:	6263      	str	r3, [r4, #36]	; 0x24
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <std+0x3c>)
 8006114:	62a3      	str	r3, [r4, #40]	; 0x28
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <std+0x40>)
 8006118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <std+0x44>)
 800611c:	6224      	str	r4, [r4, #32]
 800611e:	6323      	str	r3, [r4, #48]	; 0x30
 8006120:	bd10      	pop	{r4, pc}
 8006122:	bf00      	nop
 8006124:	08006af5 	.word	0x08006af5
 8006128:	08006b17 	.word	0x08006b17
 800612c:	08006b4f 	.word	0x08006b4f
 8006130:	08006b73 	.word	0x08006b73

08006134 <_cleanup_r>:
 8006134:	4901      	ldr	r1, [pc, #4]	; (800613c <_cleanup_r+0x8>)
 8006136:	f000 b8af 	b.w	8006298 <_fwalk_reent>
 800613a:	bf00      	nop
 800613c:	08006075 	.word	0x08006075

08006140 <__sfmoreglue>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	1e4a      	subs	r2, r1, #1
 8006144:	2568      	movs	r5, #104	; 0x68
 8006146:	4355      	muls	r5, r2
 8006148:	460e      	mov	r6, r1
 800614a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800614e:	f000 f979 	bl	8006444 <_malloc_r>
 8006152:	4604      	mov	r4, r0
 8006154:	b140      	cbz	r0, 8006168 <__sfmoreglue+0x28>
 8006156:	2100      	movs	r1, #0
 8006158:	e9c0 1600 	strd	r1, r6, [r0]
 800615c:	300c      	adds	r0, #12
 800615e:	60a0      	str	r0, [r4, #8]
 8006160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006164:	f7ff fdaa 	bl	8005cbc <memset>
 8006168:	4620      	mov	r0, r4
 800616a:	bd70      	pop	{r4, r5, r6, pc}

0800616c <__sfp_lock_acquire>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__sfp_lock_acquire+0x8>)
 800616e:	f000 b8b3 	b.w	80062d8 <__retarget_lock_acquire_recursive>
 8006172:	bf00      	nop
 8006174:	20000244 	.word	0x20000244

08006178 <__sfp_lock_release>:
 8006178:	4801      	ldr	r0, [pc, #4]	; (8006180 <__sfp_lock_release+0x8>)
 800617a:	f000 b8ae 	b.w	80062da <__retarget_lock_release_recursive>
 800617e:	bf00      	nop
 8006180:	20000244 	.word	0x20000244

08006184 <__sinit_lock_acquire>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__sinit_lock_acquire+0x8>)
 8006186:	f000 b8a7 	b.w	80062d8 <__retarget_lock_acquire_recursive>
 800618a:	bf00      	nop
 800618c:	2000023f 	.word	0x2000023f

08006190 <__sinit_lock_release>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__sinit_lock_release+0x8>)
 8006192:	f000 b8a2 	b.w	80062da <__retarget_lock_release_recursive>
 8006196:	bf00      	nop
 8006198:	2000023f 	.word	0x2000023f

0800619c <__sinit>:
 800619c:	b510      	push	{r4, lr}
 800619e:	4604      	mov	r4, r0
 80061a0:	f7ff fff0 	bl	8006184 <__sinit_lock_acquire>
 80061a4:	69a3      	ldr	r3, [r4, #24]
 80061a6:	b11b      	cbz	r3, 80061b0 <__sinit+0x14>
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	f7ff bff0 	b.w	8006190 <__sinit_lock_release>
 80061b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061b4:	6523      	str	r3, [r4, #80]	; 0x50
 80061b6:	4b13      	ldr	r3, [pc, #76]	; (8006204 <__sinit+0x68>)
 80061b8:	4a13      	ldr	r2, [pc, #76]	; (8006208 <__sinit+0x6c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80061be:	42a3      	cmp	r3, r4
 80061c0:	bf04      	itt	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	61a3      	streq	r3, [r4, #24]
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f820 	bl	800620c <__sfp>
 80061cc:	6060      	str	r0, [r4, #4]
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 f81c 	bl	800620c <__sfp>
 80061d4:	60a0      	str	r0, [r4, #8]
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 f818 	bl	800620c <__sfp>
 80061dc:	2200      	movs	r2, #0
 80061de:	60e0      	str	r0, [r4, #12]
 80061e0:	2104      	movs	r1, #4
 80061e2:	6860      	ldr	r0, [r4, #4]
 80061e4:	f7ff ff82 	bl	80060ec <std>
 80061e8:	68a0      	ldr	r0, [r4, #8]
 80061ea:	2201      	movs	r2, #1
 80061ec:	2109      	movs	r1, #9
 80061ee:	f7ff ff7d 	bl	80060ec <std>
 80061f2:	68e0      	ldr	r0, [r4, #12]
 80061f4:	2202      	movs	r2, #2
 80061f6:	2112      	movs	r1, #18
 80061f8:	f7ff ff78 	bl	80060ec <std>
 80061fc:	2301      	movs	r3, #1
 80061fe:	61a3      	str	r3, [r4, #24]
 8006200:	e7d2      	b.n	80061a8 <__sinit+0xc>
 8006202:	bf00      	nop
 8006204:	08006e1c 	.word	0x08006e1c
 8006208:	08006135 	.word	0x08006135

0800620c <__sfp>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	4607      	mov	r7, r0
 8006210:	f7ff ffac 	bl	800616c <__sfp_lock_acquire>
 8006214:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <__sfp+0x84>)
 8006216:	681e      	ldr	r6, [r3, #0]
 8006218:	69b3      	ldr	r3, [r6, #24]
 800621a:	b913      	cbnz	r3, 8006222 <__sfp+0x16>
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff ffbd 	bl	800619c <__sinit>
 8006222:	3648      	adds	r6, #72	; 0x48
 8006224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006228:	3b01      	subs	r3, #1
 800622a:	d503      	bpl.n	8006234 <__sfp+0x28>
 800622c:	6833      	ldr	r3, [r6, #0]
 800622e:	b30b      	cbz	r3, 8006274 <__sfp+0x68>
 8006230:	6836      	ldr	r6, [r6, #0]
 8006232:	e7f7      	b.n	8006224 <__sfp+0x18>
 8006234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006238:	b9d5      	cbnz	r5, 8006270 <__sfp+0x64>
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <__sfp+0x88>)
 800623c:	60e3      	str	r3, [r4, #12]
 800623e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006242:	6665      	str	r5, [r4, #100]	; 0x64
 8006244:	f000 f847 	bl	80062d6 <__retarget_lock_init_recursive>
 8006248:	f7ff ff96 	bl	8006178 <__sfp_lock_release>
 800624c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006254:	6025      	str	r5, [r4, #0]
 8006256:	61a5      	str	r5, [r4, #24]
 8006258:	2208      	movs	r2, #8
 800625a:	4629      	mov	r1, r5
 800625c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006260:	f7ff fd2c 	bl	8005cbc <memset>
 8006264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800626c:	4620      	mov	r0, r4
 800626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006270:	3468      	adds	r4, #104	; 0x68
 8006272:	e7d9      	b.n	8006228 <__sfp+0x1c>
 8006274:	2104      	movs	r1, #4
 8006276:	4638      	mov	r0, r7
 8006278:	f7ff ff62 	bl	8006140 <__sfmoreglue>
 800627c:	4604      	mov	r4, r0
 800627e:	6030      	str	r0, [r6, #0]
 8006280:	2800      	cmp	r0, #0
 8006282:	d1d5      	bne.n	8006230 <__sfp+0x24>
 8006284:	f7ff ff78 	bl	8006178 <__sfp_lock_release>
 8006288:	230c      	movs	r3, #12
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	e7ee      	b.n	800626c <__sfp+0x60>
 800628e:	bf00      	nop
 8006290:	08006e1c 	.word	0x08006e1c
 8006294:	ffff0001 	.word	0xffff0001

08006298 <_fwalk_reent>:
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800629c:	4606      	mov	r6, r0
 800629e:	4688      	mov	r8, r1
 80062a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062a4:	2700      	movs	r7, #0
 80062a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062aa:	f1b9 0901 	subs.w	r9, r9, #1
 80062ae:	d505      	bpl.n	80062bc <_fwalk_reent+0x24>
 80062b0:	6824      	ldr	r4, [r4, #0]
 80062b2:	2c00      	cmp	r4, #0
 80062b4:	d1f7      	bne.n	80062a6 <_fwalk_reent+0xe>
 80062b6:	4638      	mov	r0, r7
 80062b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062bc:	89ab      	ldrh	r3, [r5, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d907      	bls.n	80062d2 <_fwalk_reent+0x3a>
 80062c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062c6:	3301      	adds	r3, #1
 80062c8:	d003      	beq.n	80062d2 <_fwalk_reent+0x3a>
 80062ca:	4629      	mov	r1, r5
 80062cc:	4630      	mov	r0, r6
 80062ce:	47c0      	blx	r8
 80062d0:	4307      	orrs	r7, r0
 80062d2:	3568      	adds	r5, #104	; 0x68
 80062d4:	e7e9      	b.n	80062aa <_fwalk_reent+0x12>

080062d6 <__retarget_lock_init_recursive>:
 80062d6:	4770      	bx	lr

080062d8 <__retarget_lock_acquire_recursive>:
 80062d8:	4770      	bx	lr

080062da <__retarget_lock_release_recursive>:
 80062da:	4770      	bx	lr

080062dc <__swhatbuf_r>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	460e      	mov	r6, r1
 80062e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e4:	2900      	cmp	r1, #0
 80062e6:	b096      	sub	sp, #88	; 0x58
 80062e8:	4614      	mov	r4, r2
 80062ea:	461d      	mov	r5, r3
 80062ec:	da07      	bge.n	80062fe <__swhatbuf_r+0x22>
 80062ee:	2300      	movs	r3, #0
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	89b3      	ldrh	r3, [r6, #12]
 80062f4:	061a      	lsls	r2, r3, #24
 80062f6:	d410      	bmi.n	800631a <__swhatbuf_r+0x3e>
 80062f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062fc:	e00e      	b.n	800631c <__swhatbuf_r+0x40>
 80062fe:	466a      	mov	r2, sp
 8006300:	f000 fc5e 	bl	8006bc0 <_fstat_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	dbf2      	blt.n	80062ee <__swhatbuf_r+0x12>
 8006308:	9a01      	ldr	r2, [sp, #4]
 800630a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800630e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006312:	425a      	negs	r2, r3
 8006314:	415a      	adcs	r2, r3
 8006316:	602a      	str	r2, [r5, #0]
 8006318:	e7ee      	b.n	80062f8 <__swhatbuf_r+0x1c>
 800631a:	2340      	movs	r3, #64	; 0x40
 800631c:	2000      	movs	r0, #0
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	b016      	add	sp, #88	; 0x58
 8006322:	bd70      	pop	{r4, r5, r6, pc}

08006324 <__smakebuf_r>:
 8006324:	898b      	ldrh	r3, [r1, #12]
 8006326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006328:	079d      	lsls	r5, r3, #30
 800632a:	4606      	mov	r6, r0
 800632c:	460c      	mov	r4, r1
 800632e:	d507      	bpl.n	8006340 <__smakebuf_r+0x1c>
 8006330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	2301      	movs	r3, #1
 800633a:	6163      	str	r3, [r4, #20]
 800633c:	b002      	add	sp, #8
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	ab01      	add	r3, sp, #4
 8006342:	466a      	mov	r2, sp
 8006344:	f7ff ffca 	bl	80062dc <__swhatbuf_r>
 8006348:	9900      	ldr	r1, [sp, #0]
 800634a:	4605      	mov	r5, r0
 800634c:	4630      	mov	r0, r6
 800634e:	f000 f879 	bl	8006444 <_malloc_r>
 8006352:	b948      	cbnz	r0, 8006368 <__smakebuf_r+0x44>
 8006354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006358:	059a      	lsls	r2, r3, #22
 800635a:	d4ef      	bmi.n	800633c <__smakebuf_r+0x18>
 800635c:	f023 0303 	bic.w	r3, r3, #3
 8006360:	f043 0302 	orr.w	r3, r3, #2
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	e7e3      	b.n	8006330 <__smakebuf_r+0xc>
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <__smakebuf_r+0x7c>)
 800636a:	62b3      	str	r3, [r6, #40]	; 0x28
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	6020      	str	r0, [r4, #0]
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	9b00      	ldr	r3, [sp, #0]
 8006378:	6163      	str	r3, [r4, #20]
 800637a:	9b01      	ldr	r3, [sp, #4]
 800637c:	6120      	str	r0, [r4, #16]
 800637e:	b15b      	cbz	r3, 8006398 <__smakebuf_r+0x74>
 8006380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006384:	4630      	mov	r0, r6
 8006386:	f000 fc2d 	bl	8006be4 <_isatty_r>
 800638a:	b128      	cbz	r0, 8006398 <__smakebuf_r+0x74>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	89a0      	ldrh	r0, [r4, #12]
 800639a:	4305      	orrs	r5, r0
 800639c:	81a5      	strh	r5, [r4, #12]
 800639e:	e7cd      	b.n	800633c <__smakebuf_r+0x18>
 80063a0:	08006135 	.word	0x08006135

080063a4 <_free_r>:
 80063a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d048      	beq.n	800643c <_free_r+0x98>
 80063aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ae:	9001      	str	r0, [sp, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f1a1 0404 	sub.w	r4, r1, #4
 80063b6:	bfb8      	it	lt
 80063b8:	18e4      	addlt	r4, r4, r3
 80063ba:	f000 fc35 	bl	8006c28 <__malloc_lock>
 80063be:	4a20      	ldr	r2, [pc, #128]	; (8006440 <_free_r+0x9c>)
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	4615      	mov	r5, r2
 80063c6:	b933      	cbnz	r3, 80063d6 <_free_r+0x32>
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	6014      	str	r4, [r2, #0]
 80063cc:	b003      	add	sp, #12
 80063ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063d2:	f000 bc2f 	b.w	8006c34 <__malloc_unlock>
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	d90b      	bls.n	80063f2 <_free_r+0x4e>
 80063da:	6821      	ldr	r1, [r4, #0]
 80063dc:	1862      	adds	r2, r4, r1
 80063de:	4293      	cmp	r3, r2
 80063e0:	bf04      	itt	eq
 80063e2:	681a      	ldreq	r2, [r3, #0]
 80063e4:	685b      	ldreq	r3, [r3, #4]
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	bf04      	itt	eq
 80063ea:	1852      	addeq	r2, r2, r1
 80063ec:	6022      	streq	r2, [r4, #0]
 80063ee:	602c      	str	r4, [r5, #0]
 80063f0:	e7ec      	b.n	80063cc <_free_r+0x28>
 80063f2:	461a      	mov	r2, r3
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	b10b      	cbz	r3, 80063fc <_free_r+0x58>
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	d9fa      	bls.n	80063f2 <_free_r+0x4e>
 80063fc:	6811      	ldr	r1, [r2, #0]
 80063fe:	1855      	adds	r5, r2, r1
 8006400:	42a5      	cmp	r5, r4
 8006402:	d10b      	bne.n	800641c <_free_r+0x78>
 8006404:	6824      	ldr	r4, [r4, #0]
 8006406:	4421      	add	r1, r4
 8006408:	1854      	adds	r4, r2, r1
 800640a:	42a3      	cmp	r3, r4
 800640c:	6011      	str	r1, [r2, #0]
 800640e:	d1dd      	bne.n	80063cc <_free_r+0x28>
 8006410:	681c      	ldr	r4, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	6053      	str	r3, [r2, #4]
 8006416:	4421      	add	r1, r4
 8006418:	6011      	str	r1, [r2, #0]
 800641a:	e7d7      	b.n	80063cc <_free_r+0x28>
 800641c:	d902      	bls.n	8006424 <_free_r+0x80>
 800641e:	230c      	movs	r3, #12
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	e7d3      	b.n	80063cc <_free_r+0x28>
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	1961      	adds	r1, r4, r5
 8006428:	428b      	cmp	r3, r1
 800642a:	bf04      	itt	eq
 800642c:	6819      	ldreq	r1, [r3, #0]
 800642e:	685b      	ldreq	r3, [r3, #4]
 8006430:	6063      	str	r3, [r4, #4]
 8006432:	bf04      	itt	eq
 8006434:	1949      	addeq	r1, r1, r5
 8006436:	6021      	streq	r1, [r4, #0]
 8006438:	6054      	str	r4, [r2, #4]
 800643a:	e7c7      	b.n	80063cc <_free_r+0x28>
 800643c:	b003      	add	sp, #12
 800643e:	bd30      	pop	{r4, r5, pc}
 8006440:	200000a0 	.word	0x200000a0

08006444 <_malloc_r>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	1ccd      	adds	r5, r1, #3
 8006448:	f025 0503 	bic.w	r5, r5, #3
 800644c:	3508      	adds	r5, #8
 800644e:	2d0c      	cmp	r5, #12
 8006450:	bf38      	it	cc
 8006452:	250c      	movcc	r5, #12
 8006454:	2d00      	cmp	r5, #0
 8006456:	4606      	mov	r6, r0
 8006458:	db01      	blt.n	800645e <_malloc_r+0x1a>
 800645a:	42a9      	cmp	r1, r5
 800645c:	d903      	bls.n	8006466 <_malloc_r+0x22>
 800645e:	230c      	movs	r3, #12
 8006460:	6033      	str	r3, [r6, #0]
 8006462:	2000      	movs	r0, #0
 8006464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006466:	f000 fbdf 	bl	8006c28 <__malloc_lock>
 800646a:	4921      	ldr	r1, [pc, #132]	; (80064f0 <_malloc_r+0xac>)
 800646c:	680a      	ldr	r2, [r1, #0]
 800646e:	4614      	mov	r4, r2
 8006470:	b99c      	cbnz	r4, 800649a <_malloc_r+0x56>
 8006472:	4f20      	ldr	r7, [pc, #128]	; (80064f4 <_malloc_r+0xb0>)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	b923      	cbnz	r3, 8006482 <_malloc_r+0x3e>
 8006478:	4621      	mov	r1, r4
 800647a:	4630      	mov	r0, r6
 800647c:	f000 fb2a 	bl	8006ad4 <_sbrk_r>
 8006480:	6038      	str	r0, [r7, #0]
 8006482:	4629      	mov	r1, r5
 8006484:	4630      	mov	r0, r6
 8006486:	f000 fb25 	bl	8006ad4 <_sbrk_r>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d123      	bne.n	80064d6 <_malloc_r+0x92>
 800648e:	230c      	movs	r3, #12
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	4630      	mov	r0, r6
 8006494:	f000 fbce 	bl	8006c34 <__malloc_unlock>
 8006498:	e7e3      	b.n	8006462 <_malloc_r+0x1e>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	1b5b      	subs	r3, r3, r5
 800649e:	d417      	bmi.n	80064d0 <_malloc_r+0x8c>
 80064a0:	2b0b      	cmp	r3, #11
 80064a2:	d903      	bls.n	80064ac <_malloc_r+0x68>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	441c      	add	r4, r3
 80064a8:	6025      	str	r5, [r4, #0]
 80064aa:	e004      	b.n	80064b6 <_malloc_r+0x72>
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	42a2      	cmp	r2, r4
 80064b0:	bf0c      	ite	eq
 80064b2:	600b      	streq	r3, [r1, #0]
 80064b4:	6053      	strne	r3, [r2, #4]
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 fbbc 	bl	8006c34 <__malloc_unlock>
 80064bc:	f104 000b 	add.w	r0, r4, #11
 80064c0:	1d23      	adds	r3, r4, #4
 80064c2:	f020 0007 	bic.w	r0, r0, #7
 80064c6:	1ac2      	subs	r2, r0, r3
 80064c8:	d0cc      	beq.n	8006464 <_malloc_r+0x20>
 80064ca:	1a1b      	subs	r3, r3, r0
 80064cc:	50a3      	str	r3, [r4, r2]
 80064ce:	e7c9      	b.n	8006464 <_malloc_r+0x20>
 80064d0:	4622      	mov	r2, r4
 80064d2:	6864      	ldr	r4, [r4, #4]
 80064d4:	e7cc      	b.n	8006470 <_malloc_r+0x2c>
 80064d6:	1cc4      	adds	r4, r0, #3
 80064d8:	f024 0403 	bic.w	r4, r4, #3
 80064dc:	42a0      	cmp	r0, r4
 80064de:	d0e3      	beq.n	80064a8 <_malloc_r+0x64>
 80064e0:	1a21      	subs	r1, r4, r0
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 faf6 	bl	8006ad4 <_sbrk_r>
 80064e8:	3001      	adds	r0, #1
 80064ea:	d1dd      	bne.n	80064a8 <_malloc_r+0x64>
 80064ec:	e7cf      	b.n	800648e <_malloc_r+0x4a>
 80064ee:	bf00      	nop
 80064f0:	200000a0 	.word	0x200000a0
 80064f4:	200000a4 	.word	0x200000a4

080064f8 <__sfputc_r>:
 80064f8:	6893      	ldr	r3, [r2, #8]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	b410      	push	{r4}
 8006500:	6093      	str	r3, [r2, #8]
 8006502:	da08      	bge.n	8006516 <__sfputc_r+0x1e>
 8006504:	6994      	ldr	r4, [r2, #24]
 8006506:	42a3      	cmp	r3, r4
 8006508:	db01      	blt.n	800650e <__sfputc_r+0x16>
 800650a:	290a      	cmp	r1, #10
 800650c:	d103      	bne.n	8006516 <__sfputc_r+0x1e>
 800650e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006512:	f7ff bc69 	b.w	8005de8 <__swbuf_r>
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	1c58      	adds	r0, r3, #1
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	7019      	strb	r1, [r3, #0]
 800651e:	4608      	mov	r0, r1
 8006520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006524:	4770      	bx	lr

08006526 <__sfputs_r>:
 8006526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	4614      	mov	r4, r2
 800652e:	18d5      	adds	r5, r2, r3
 8006530:	42ac      	cmp	r4, r5
 8006532:	d101      	bne.n	8006538 <__sfputs_r+0x12>
 8006534:	2000      	movs	r0, #0
 8006536:	e007      	b.n	8006548 <__sfputs_r+0x22>
 8006538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653c:	463a      	mov	r2, r7
 800653e:	4630      	mov	r0, r6
 8006540:	f7ff ffda 	bl	80064f8 <__sfputc_r>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d1f3      	bne.n	8006530 <__sfputs_r+0xa>
 8006548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800654c <_vfiprintf_r>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	460d      	mov	r5, r1
 8006552:	b09d      	sub	sp, #116	; 0x74
 8006554:	4614      	mov	r4, r2
 8006556:	4698      	mov	r8, r3
 8006558:	4606      	mov	r6, r0
 800655a:	b118      	cbz	r0, 8006564 <_vfiprintf_r+0x18>
 800655c:	6983      	ldr	r3, [r0, #24]
 800655e:	b90b      	cbnz	r3, 8006564 <_vfiprintf_r+0x18>
 8006560:	f7ff fe1c 	bl	800619c <__sinit>
 8006564:	4b89      	ldr	r3, [pc, #548]	; (800678c <_vfiprintf_r+0x240>)
 8006566:	429d      	cmp	r5, r3
 8006568:	d11b      	bne.n	80065a2 <_vfiprintf_r+0x56>
 800656a:	6875      	ldr	r5, [r6, #4]
 800656c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800656e:	07d9      	lsls	r1, r3, #31
 8006570:	d405      	bmi.n	800657e <_vfiprintf_r+0x32>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	059a      	lsls	r2, r3, #22
 8006576:	d402      	bmi.n	800657e <_vfiprintf_r+0x32>
 8006578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800657a:	f7ff fead 	bl	80062d8 <__retarget_lock_acquire_recursive>
 800657e:	89ab      	ldrh	r3, [r5, #12]
 8006580:	071b      	lsls	r3, r3, #28
 8006582:	d501      	bpl.n	8006588 <_vfiprintf_r+0x3c>
 8006584:	692b      	ldr	r3, [r5, #16]
 8006586:	b9eb      	cbnz	r3, 80065c4 <_vfiprintf_r+0x78>
 8006588:	4629      	mov	r1, r5
 800658a:	4630      	mov	r0, r6
 800658c:	f7ff fc7e 	bl	8005e8c <__swsetup_r>
 8006590:	b1c0      	cbz	r0, 80065c4 <_vfiprintf_r+0x78>
 8006592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006594:	07dc      	lsls	r4, r3, #31
 8006596:	d50e      	bpl.n	80065b6 <_vfiprintf_r+0x6a>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	b01d      	add	sp, #116	; 0x74
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	4b7b      	ldr	r3, [pc, #492]	; (8006790 <_vfiprintf_r+0x244>)
 80065a4:	429d      	cmp	r5, r3
 80065a6:	d101      	bne.n	80065ac <_vfiprintf_r+0x60>
 80065a8:	68b5      	ldr	r5, [r6, #8]
 80065aa:	e7df      	b.n	800656c <_vfiprintf_r+0x20>
 80065ac:	4b79      	ldr	r3, [pc, #484]	; (8006794 <_vfiprintf_r+0x248>)
 80065ae:	429d      	cmp	r5, r3
 80065b0:	bf08      	it	eq
 80065b2:	68f5      	ldreq	r5, [r6, #12]
 80065b4:	e7da      	b.n	800656c <_vfiprintf_r+0x20>
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	0598      	lsls	r0, r3, #22
 80065ba:	d4ed      	bmi.n	8006598 <_vfiprintf_r+0x4c>
 80065bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065be:	f7ff fe8c 	bl	80062da <__retarget_lock_release_recursive>
 80065c2:	e7e9      	b.n	8006598 <_vfiprintf_r+0x4c>
 80065c4:	2300      	movs	r3, #0
 80065c6:	9309      	str	r3, [sp, #36]	; 0x24
 80065c8:	2320      	movs	r3, #32
 80065ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d2:	2330      	movs	r3, #48	; 0x30
 80065d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006798 <_vfiprintf_r+0x24c>
 80065d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065dc:	f04f 0901 	mov.w	r9, #1
 80065e0:	4623      	mov	r3, r4
 80065e2:	469a      	mov	sl, r3
 80065e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065e8:	b10a      	cbz	r2, 80065ee <_vfiprintf_r+0xa2>
 80065ea:	2a25      	cmp	r2, #37	; 0x25
 80065ec:	d1f9      	bne.n	80065e2 <_vfiprintf_r+0x96>
 80065ee:	ebba 0b04 	subs.w	fp, sl, r4
 80065f2:	d00b      	beq.n	800660c <_vfiprintf_r+0xc0>
 80065f4:	465b      	mov	r3, fp
 80065f6:	4622      	mov	r2, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ff93 	bl	8006526 <__sfputs_r>
 8006600:	3001      	adds	r0, #1
 8006602:	f000 80aa 	beq.w	800675a <_vfiprintf_r+0x20e>
 8006606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006608:	445a      	add	r2, fp
 800660a:	9209      	str	r2, [sp, #36]	; 0x24
 800660c:	f89a 3000 	ldrb.w	r3, [sl]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a2 	beq.w	800675a <_vfiprintf_r+0x20e>
 8006616:	2300      	movs	r3, #0
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006620:	f10a 0a01 	add.w	sl, sl, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800662c:	931a      	str	r3, [sp, #104]	; 0x68
 800662e:	4654      	mov	r4, sl
 8006630:	2205      	movs	r2, #5
 8006632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006636:	4858      	ldr	r0, [pc, #352]	; (8006798 <_vfiprintf_r+0x24c>)
 8006638:	f7f9 fdca 	bl	80001d0 <memchr>
 800663c:	9a04      	ldr	r2, [sp, #16]
 800663e:	b9d8      	cbnz	r0, 8006678 <_vfiprintf_r+0x12c>
 8006640:	06d1      	lsls	r1, r2, #27
 8006642:	bf44      	itt	mi
 8006644:	2320      	movmi	r3, #32
 8006646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800664a:	0713      	lsls	r3, r2, #28
 800664c:	bf44      	itt	mi
 800664e:	232b      	movmi	r3, #43	; 0x2b
 8006650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006654:	f89a 3000 	ldrb.w	r3, [sl]
 8006658:	2b2a      	cmp	r3, #42	; 0x2a
 800665a:	d015      	beq.n	8006688 <_vfiprintf_r+0x13c>
 800665c:	9a07      	ldr	r2, [sp, #28]
 800665e:	4654      	mov	r4, sl
 8006660:	2000      	movs	r0, #0
 8006662:	f04f 0c0a 	mov.w	ip, #10
 8006666:	4621      	mov	r1, r4
 8006668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666c:	3b30      	subs	r3, #48	; 0x30
 800666e:	2b09      	cmp	r3, #9
 8006670:	d94e      	bls.n	8006710 <_vfiprintf_r+0x1c4>
 8006672:	b1b0      	cbz	r0, 80066a2 <_vfiprintf_r+0x156>
 8006674:	9207      	str	r2, [sp, #28]
 8006676:	e014      	b.n	80066a2 <_vfiprintf_r+0x156>
 8006678:	eba0 0308 	sub.w	r3, r0, r8
 800667c:	fa09 f303 	lsl.w	r3, r9, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	46a2      	mov	sl, r4
 8006686:	e7d2      	b.n	800662e <_vfiprintf_r+0xe2>
 8006688:	9b03      	ldr	r3, [sp, #12]
 800668a:	1d19      	adds	r1, r3, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	9103      	str	r1, [sp, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	bfbb      	ittet	lt
 8006694:	425b      	neglt	r3, r3
 8006696:	f042 0202 	orrlt.w	r2, r2, #2
 800669a:	9307      	strge	r3, [sp, #28]
 800669c:	9307      	strlt	r3, [sp, #28]
 800669e:	bfb8      	it	lt
 80066a0:	9204      	strlt	r2, [sp, #16]
 80066a2:	7823      	ldrb	r3, [r4, #0]
 80066a4:	2b2e      	cmp	r3, #46	; 0x2e
 80066a6:	d10c      	bne.n	80066c2 <_vfiprintf_r+0x176>
 80066a8:	7863      	ldrb	r3, [r4, #1]
 80066aa:	2b2a      	cmp	r3, #42	; 0x2a
 80066ac:	d135      	bne.n	800671a <_vfiprintf_r+0x1ce>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	1d1a      	adds	r2, r3, #4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	9203      	str	r2, [sp, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bfb8      	it	lt
 80066ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80066be:	3402      	adds	r4, #2
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067a8 <_vfiprintf_r+0x25c>
 80066c6:	7821      	ldrb	r1, [r4, #0]
 80066c8:	2203      	movs	r2, #3
 80066ca:	4650      	mov	r0, sl
 80066cc:	f7f9 fd80 	bl	80001d0 <memchr>
 80066d0:	b140      	cbz	r0, 80066e4 <_vfiprintf_r+0x198>
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	eba0 000a 	sub.w	r0, r0, sl
 80066d8:	fa03 f000 	lsl.w	r0, r3, r0
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	4303      	orrs	r3, r0
 80066e0:	3401      	adds	r4, #1
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	482c      	ldr	r0, [pc, #176]	; (800679c <_vfiprintf_r+0x250>)
 80066ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ee:	2206      	movs	r2, #6
 80066f0:	f7f9 fd6e 	bl	80001d0 <memchr>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d03f      	beq.n	8006778 <_vfiprintf_r+0x22c>
 80066f8:	4b29      	ldr	r3, [pc, #164]	; (80067a0 <_vfiprintf_r+0x254>)
 80066fa:	bb1b      	cbnz	r3, 8006744 <_vfiprintf_r+0x1f8>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	3307      	adds	r3, #7
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	3308      	adds	r3, #8
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	443b      	add	r3, r7
 800670c:	9309      	str	r3, [sp, #36]	; 0x24
 800670e:	e767      	b.n	80065e0 <_vfiprintf_r+0x94>
 8006710:	fb0c 3202 	mla	r2, ip, r2, r3
 8006714:	460c      	mov	r4, r1
 8006716:	2001      	movs	r0, #1
 8006718:	e7a5      	b.n	8006666 <_vfiprintf_r+0x11a>
 800671a:	2300      	movs	r3, #0
 800671c:	3401      	adds	r4, #1
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	4619      	mov	r1, r3
 8006722:	f04f 0c0a 	mov.w	ip, #10
 8006726:	4620      	mov	r0, r4
 8006728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672c:	3a30      	subs	r2, #48	; 0x30
 800672e:	2a09      	cmp	r2, #9
 8006730:	d903      	bls.n	800673a <_vfiprintf_r+0x1ee>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c5      	beq.n	80066c2 <_vfiprintf_r+0x176>
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	e7c3      	b.n	80066c2 <_vfiprintf_r+0x176>
 800673a:	fb0c 2101 	mla	r1, ip, r1, r2
 800673e:	4604      	mov	r4, r0
 8006740:	2301      	movs	r3, #1
 8006742:	e7f0      	b.n	8006726 <_vfiprintf_r+0x1da>
 8006744:	ab03      	add	r3, sp, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	462a      	mov	r2, r5
 800674a:	4b16      	ldr	r3, [pc, #88]	; (80067a4 <_vfiprintf_r+0x258>)
 800674c:	a904      	add	r1, sp, #16
 800674e:	4630      	mov	r0, r6
 8006750:	f3af 8000 	nop.w
 8006754:	4607      	mov	r7, r0
 8006756:	1c78      	adds	r0, r7, #1
 8006758:	d1d6      	bne.n	8006708 <_vfiprintf_r+0x1bc>
 800675a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800675c:	07d9      	lsls	r1, r3, #31
 800675e:	d405      	bmi.n	800676c <_vfiprintf_r+0x220>
 8006760:	89ab      	ldrh	r3, [r5, #12]
 8006762:	059a      	lsls	r2, r3, #22
 8006764:	d402      	bmi.n	800676c <_vfiprintf_r+0x220>
 8006766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006768:	f7ff fdb7 	bl	80062da <__retarget_lock_release_recursive>
 800676c:	89ab      	ldrh	r3, [r5, #12]
 800676e:	065b      	lsls	r3, r3, #25
 8006770:	f53f af12 	bmi.w	8006598 <_vfiprintf_r+0x4c>
 8006774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006776:	e711      	b.n	800659c <_vfiprintf_r+0x50>
 8006778:	ab03      	add	r3, sp, #12
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	462a      	mov	r2, r5
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <_vfiprintf_r+0x258>)
 8006780:	a904      	add	r1, sp, #16
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f880 	bl	8006888 <_printf_i>
 8006788:	e7e4      	b.n	8006754 <_vfiprintf_r+0x208>
 800678a:	bf00      	nop
 800678c:	08006e40 	.word	0x08006e40
 8006790:	08006e60 	.word	0x08006e60
 8006794:	08006e20 	.word	0x08006e20
 8006798:	08006e80 	.word	0x08006e80
 800679c:	08006e8a 	.word	0x08006e8a
 80067a0:	00000000 	.word	0x00000000
 80067a4:	08006527 	.word	0x08006527
 80067a8:	08006e86 	.word	0x08006e86

080067ac <_printf_common>:
 80067ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b0:	4616      	mov	r6, r2
 80067b2:	4699      	mov	r9, r3
 80067b4:	688a      	ldr	r2, [r1, #8]
 80067b6:	690b      	ldr	r3, [r1, #16]
 80067b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067bc:	4293      	cmp	r3, r2
 80067be:	bfb8      	it	lt
 80067c0:	4613      	movlt	r3, r2
 80067c2:	6033      	str	r3, [r6, #0]
 80067c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067c8:	4607      	mov	r7, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	b10a      	cbz	r2, 80067d2 <_printf_common+0x26>
 80067ce:	3301      	adds	r3, #1
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	0699      	lsls	r1, r3, #26
 80067d6:	bf42      	ittt	mi
 80067d8:	6833      	ldrmi	r3, [r6, #0]
 80067da:	3302      	addmi	r3, #2
 80067dc:	6033      	strmi	r3, [r6, #0]
 80067de:	6825      	ldr	r5, [r4, #0]
 80067e0:	f015 0506 	ands.w	r5, r5, #6
 80067e4:	d106      	bne.n	80067f4 <_printf_common+0x48>
 80067e6:	f104 0a19 	add.w	sl, r4, #25
 80067ea:	68e3      	ldr	r3, [r4, #12]
 80067ec:	6832      	ldr	r2, [r6, #0]
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	42ab      	cmp	r3, r5
 80067f2:	dc26      	bgt.n	8006842 <_printf_common+0x96>
 80067f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067f8:	1e13      	subs	r3, r2, #0
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	bf18      	it	ne
 80067fe:	2301      	movne	r3, #1
 8006800:	0692      	lsls	r2, r2, #26
 8006802:	d42b      	bmi.n	800685c <_printf_common+0xb0>
 8006804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006808:	4649      	mov	r1, r9
 800680a:	4638      	mov	r0, r7
 800680c:	47c0      	blx	r8
 800680e:	3001      	adds	r0, #1
 8006810:	d01e      	beq.n	8006850 <_printf_common+0xa4>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	68e5      	ldr	r5, [r4, #12]
 8006816:	6832      	ldr	r2, [r6, #0]
 8006818:	f003 0306 	and.w	r3, r3, #6
 800681c:	2b04      	cmp	r3, #4
 800681e:	bf08      	it	eq
 8006820:	1aad      	subeq	r5, r5, r2
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	bf0c      	ite	eq
 8006828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800682c:	2500      	movne	r5, #0
 800682e:	4293      	cmp	r3, r2
 8006830:	bfc4      	itt	gt
 8006832:	1a9b      	subgt	r3, r3, r2
 8006834:	18ed      	addgt	r5, r5, r3
 8006836:	2600      	movs	r6, #0
 8006838:	341a      	adds	r4, #26
 800683a:	42b5      	cmp	r5, r6
 800683c:	d11a      	bne.n	8006874 <_printf_common+0xc8>
 800683e:	2000      	movs	r0, #0
 8006840:	e008      	b.n	8006854 <_printf_common+0xa8>
 8006842:	2301      	movs	r3, #1
 8006844:	4652      	mov	r2, sl
 8006846:	4649      	mov	r1, r9
 8006848:	4638      	mov	r0, r7
 800684a:	47c0      	blx	r8
 800684c:	3001      	adds	r0, #1
 800684e:	d103      	bne.n	8006858 <_printf_common+0xac>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006858:	3501      	adds	r5, #1
 800685a:	e7c6      	b.n	80067ea <_printf_common+0x3e>
 800685c:	18e1      	adds	r1, r4, r3
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	2030      	movs	r0, #48	; 0x30
 8006862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006866:	4422      	add	r2, r4
 8006868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800686c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006870:	3302      	adds	r3, #2
 8006872:	e7c7      	b.n	8006804 <_printf_common+0x58>
 8006874:	2301      	movs	r3, #1
 8006876:	4622      	mov	r2, r4
 8006878:	4649      	mov	r1, r9
 800687a:	4638      	mov	r0, r7
 800687c:	47c0      	blx	r8
 800687e:	3001      	adds	r0, #1
 8006880:	d0e6      	beq.n	8006850 <_printf_common+0xa4>
 8006882:	3601      	adds	r6, #1
 8006884:	e7d9      	b.n	800683a <_printf_common+0x8e>
	...

08006888 <_printf_i>:
 8006888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800688c:	460c      	mov	r4, r1
 800688e:	4691      	mov	r9, r2
 8006890:	7e27      	ldrb	r7, [r4, #24]
 8006892:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006894:	2f78      	cmp	r7, #120	; 0x78
 8006896:	4680      	mov	r8, r0
 8006898:	469a      	mov	sl, r3
 800689a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800689e:	d807      	bhi.n	80068b0 <_printf_i+0x28>
 80068a0:	2f62      	cmp	r7, #98	; 0x62
 80068a2:	d80a      	bhi.n	80068ba <_printf_i+0x32>
 80068a4:	2f00      	cmp	r7, #0
 80068a6:	f000 80d8 	beq.w	8006a5a <_printf_i+0x1d2>
 80068aa:	2f58      	cmp	r7, #88	; 0x58
 80068ac:	f000 80a3 	beq.w	80069f6 <_printf_i+0x16e>
 80068b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068b8:	e03a      	b.n	8006930 <_printf_i+0xa8>
 80068ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068be:	2b15      	cmp	r3, #21
 80068c0:	d8f6      	bhi.n	80068b0 <_printf_i+0x28>
 80068c2:	a001      	add	r0, pc, #4	; (adr r0, 80068c8 <_printf_i+0x40>)
 80068c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068c8:	08006921 	.word	0x08006921
 80068cc:	08006935 	.word	0x08006935
 80068d0:	080068b1 	.word	0x080068b1
 80068d4:	080068b1 	.word	0x080068b1
 80068d8:	080068b1 	.word	0x080068b1
 80068dc:	080068b1 	.word	0x080068b1
 80068e0:	08006935 	.word	0x08006935
 80068e4:	080068b1 	.word	0x080068b1
 80068e8:	080068b1 	.word	0x080068b1
 80068ec:	080068b1 	.word	0x080068b1
 80068f0:	080068b1 	.word	0x080068b1
 80068f4:	08006a41 	.word	0x08006a41
 80068f8:	08006965 	.word	0x08006965
 80068fc:	08006a23 	.word	0x08006a23
 8006900:	080068b1 	.word	0x080068b1
 8006904:	080068b1 	.word	0x080068b1
 8006908:	08006a63 	.word	0x08006a63
 800690c:	080068b1 	.word	0x080068b1
 8006910:	08006965 	.word	0x08006965
 8006914:	080068b1 	.word	0x080068b1
 8006918:	080068b1 	.word	0x080068b1
 800691c:	08006a2b 	.word	0x08006a2b
 8006920:	680b      	ldr	r3, [r1, #0]
 8006922:	1d1a      	adds	r2, r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	600a      	str	r2, [r1, #0]
 8006928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800692c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006930:	2301      	movs	r3, #1
 8006932:	e0a3      	b.n	8006a7c <_printf_i+0x1f4>
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	6808      	ldr	r0, [r1, #0]
 8006938:	062e      	lsls	r6, r5, #24
 800693a:	f100 0304 	add.w	r3, r0, #4
 800693e:	d50a      	bpl.n	8006956 <_printf_i+0xce>
 8006940:	6805      	ldr	r5, [r0, #0]
 8006942:	600b      	str	r3, [r1, #0]
 8006944:	2d00      	cmp	r5, #0
 8006946:	da03      	bge.n	8006950 <_printf_i+0xc8>
 8006948:	232d      	movs	r3, #45	; 0x2d
 800694a:	426d      	negs	r5, r5
 800694c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006950:	485e      	ldr	r0, [pc, #376]	; (8006acc <_printf_i+0x244>)
 8006952:	230a      	movs	r3, #10
 8006954:	e019      	b.n	800698a <_printf_i+0x102>
 8006956:	f015 0f40 	tst.w	r5, #64	; 0x40
 800695a:	6805      	ldr	r5, [r0, #0]
 800695c:	600b      	str	r3, [r1, #0]
 800695e:	bf18      	it	ne
 8006960:	b22d      	sxthne	r5, r5
 8006962:	e7ef      	b.n	8006944 <_printf_i+0xbc>
 8006964:	680b      	ldr	r3, [r1, #0]
 8006966:	6825      	ldr	r5, [r4, #0]
 8006968:	1d18      	adds	r0, r3, #4
 800696a:	6008      	str	r0, [r1, #0]
 800696c:	0628      	lsls	r0, r5, #24
 800696e:	d501      	bpl.n	8006974 <_printf_i+0xec>
 8006970:	681d      	ldr	r5, [r3, #0]
 8006972:	e002      	b.n	800697a <_printf_i+0xf2>
 8006974:	0669      	lsls	r1, r5, #25
 8006976:	d5fb      	bpl.n	8006970 <_printf_i+0xe8>
 8006978:	881d      	ldrh	r5, [r3, #0]
 800697a:	4854      	ldr	r0, [pc, #336]	; (8006acc <_printf_i+0x244>)
 800697c:	2f6f      	cmp	r7, #111	; 0x6f
 800697e:	bf0c      	ite	eq
 8006980:	2308      	moveq	r3, #8
 8006982:	230a      	movne	r3, #10
 8006984:	2100      	movs	r1, #0
 8006986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800698a:	6866      	ldr	r6, [r4, #4]
 800698c:	60a6      	str	r6, [r4, #8]
 800698e:	2e00      	cmp	r6, #0
 8006990:	bfa2      	ittt	ge
 8006992:	6821      	ldrge	r1, [r4, #0]
 8006994:	f021 0104 	bicge.w	r1, r1, #4
 8006998:	6021      	strge	r1, [r4, #0]
 800699a:	b90d      	cbnz	r5, 80069a0 <_printf_i+0x118>
 800699c:	2e00      	cmp	r6, #0
 800699e:	d04d      	beq.n	8006a3c <_printf_i+0x1b4>
 80069a0:	4616      	mov	r6, r2
 80069a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069a6:	fb03 5711 	mls	r7, r3, r1, r5
 80069aa:	5dc7      	ldrb	r7, [r0, r7]
 80069ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069b0:	462f      	mov	r7, r5
 80069b2:	42bb      	cmp	r3, r7
 80069b4:	460d      	mov	r5, r1
 80069b6:	d9f4      	bls.n	80069a2 <_printf_i+0x11a>
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d10b      	bne.n	80069d4 <_printf_i+0x14c>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	07df      	lsls	r7, r3, #31
 80069c0:	d508      	bpl.n	80069d4 <_printf_i+0x14c>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	6861      	ldr	r1, [r4, #4]
 80069c6:	4299      	cmp	r1, r3
 80069c8:	bfde      	ittt	le
 80069ca:	2330      	movle	r3, #48	; 0x30
 80069cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069d4:	1b92      	subs	r2, r2, r6
 80069d6:	6122      	str	r2, [r4, #16]
 80069d8:	f8cd a000 	str.w	sl, [sp]
 80069dc:	464b      	mov	r3, r9
 80069de:	aa03      	add	r2, sp, #12
 80069e0:	4621      	mov	r1, r4
 80069e2:	4640      	mov	r0, r8
 80069e4:	f7ff fee2 	bl	80067ac <_printf_common>
 80069e8:	3001      	adds	r0, #1
 80069ea:	d14c      	bne.n	8006a86 <_printf_i+0x1fe>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	b004      	add	sp, #16
 80069f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f6:	4835      	ldr	r0, [pc, #212]	; (8006acc <_printf_i+0x244>)
 80069f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	680e      	ldr	r6, [r1, #0]
 8006a00:	061f      	lsls	r7, r3, #24
 8006a02:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a06:	600e      	str	r6, [r1, #0]
 8006a08:	d514      	bpl.n	8006a34 <_printf_i+0x1ac>
 8006a0a:	07d9      	lsls	r1, r3, #31
 8006a0c:	bf44      	itt	mi
 8006a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a12:	6023      	strmi	r3, [r4, #0]
 8006a14:	b91d      	cbnz	r5, 8006a1e <_printf_i+0x196>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	f023 0320 	bic.w	r3, r3, #32
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	2310      	movs	r3, #16
 8006a20:	e7b0      	b.n	8006984 <_printf_i+0xfc>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	f043 0320 	orr.w	r3, r3, #32
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	2378      	movs	r3, #120	; 0x78
 8006a2c:	4828      	ldr	r0, [pc, #160]	; (8006ad0 <_printf_i+0x248>)
 8006a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a32:	e7e3      	b.n	80069fc <_printf_i+0x174>
 8006a34:	065e      	lsls	r6, r3, #25
 8006a36:	bf48      	it	mi
 8006a38:	b2ad      	uxthmi	r5, r5
 8006a3a:	e7e6      	b.n	8006a0a <_printf_i+0x182>
 8006a3c:	4616      	mov	r6, r2
 8006a3e:	e7bb      	b.n	80069b8 <_printf_i+0x130>
 8006a40:	680b      	ldr	r3, [r1, #0]
 8006a42:	6826      	ldr	r6, [r4, #0]
 8006a44:	6960      	ldr	r0, [r4, #20]
 8006a46:	1d1d      	adds	r5, r3, #4
 8006a48:	600d      	str	r5, [r1, #0]
 8006a4a:	0635      	lsls	r5, r6, #24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	d501      	bpl.n	8006a54 <_printf_i+0x1cc>
 8006a50:	6018      	str	r0, [r3, #0]
 8006a52:	e002      	b.n	8006a5a <_printf_i+0x1d2>
 8006a54:	0671      	lsls	r1, r6, #25
 8006a56:	d5fb      	bpl.n	8006a50 <_printf_i+0x1c8>
 8006a58:	8018      	strh	r0, [r3, #0]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6123      	str	r3, [r4, #16]
 8006a5e:	4616      	mov	r6, r2
 8006a60:	e7ba      	b.n	80069d8 <_printf_i+0x150>
 8006a62:	680b      	ldr	r3, [r1, #0]
 8006a64:	1d1a      	adds	r2, r3, #4
 8006a66:	600a      	str	r2, [r1, #0]
 8006a68:	681e      	ldr	r6, [r3, #0]
 8006a6a:	6862      	ldr	r2, [r4, #4]
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7f9 fbae 	bl	80001d0 <memchr>
 8006a74:	b108      	cbz	r0, 8006a7a <_printf_i+0x1f2>
 8006a76:	1b80      	subs	r0, r0, r6
 8006a78:	6060      	str	r0, [r4, #4]
 8006a7a:	6863      	ldr	r3, [r4, #4]
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a84:	e7a8      	b.n	80069d8 <_printf_i+0x150>
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	4632      	mov	r2, r6
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	47d0      	blx	sl
 8006a90:	3001      	adds	r0, #1
 8006a92:	d0ab      	beq.n	80069ec <_printf_i+0x164>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	079b      	lsls	r3, r3, #30
 8006a98:	d413      	bmi.n	8006ac2 <_printf_i+0x23a>
 8006a9a:	68e0      	ldr	r0, [r4, #12]
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	4298      	cmp	r0, r3
 8006aa0:	bfb8      	it	lt
 8006aa2:	4618      	movlt	r0, r3
 8006aa4:	e7a4      	b.n	80069f0 <_printf_i+0x168>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d09b      	beq.n	80069ec <_printf_i+0x164>
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	9903      	ldr	r1, [sp, #12]
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	dcf2      	bgt.n	8006aa6 <_printf_i+0x21e>
 8006ac0:	e7eb      	b.n	8006a9a <_printf_i+0x212>
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	f104 0619 	add.w	r6, r4, #25
 8006ac8:	e7f5      	b.n	8006ab6 <_printf_i+0x22e>
 8006aca:	bf00      	nop
 8006acc:	08006e91 	.word	0x08006e91
 8006ad0:	08006ea2 	.word	0x08006ea2

08006ad4 <_sbrk_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4d06      	ldr	r5, [pc, #24]	; (8006af0 <_sbrk_r+0x1c>)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	602b      	str	r3, [r5, #0]
 8006ae0:	f7fb f826 	bl	8001b30 <_sbrk>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_sbrk_r+0x1a>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_sbrk_r+0x1a>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	20000248 	.word	0x20000248

08006af4 <__sread>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	460c      	mov	r4, r1
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	f000 f8a0 	bl	8006c40 <_read_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	bfab      	itete	ge
 8006b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b06:	89a3      	ldrhlt	r3, [r4, #12]
 8006b08:	181b      	addge	r3, r3, r0
 8006b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b0e:	bfac      	ite	ge
 8006b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b12:	81a3      	strhlt	r3, [r4, #12]
 8006b14:	bd10      	pop	{r4, pc}

08006b16 <__swrite>:
 8006b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	461f      	mov	r7, r3
 8006b1c:	898b      	ldrh	r3, [r1, #12]
 8006b1e:	05db      	lsls	r3, r3, #23
 8006b20:	4605      	mov	r5, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	4616      	mov	r6, r2
 8006b26:	d505      	bpl.n	8006b34 <__swrite+0x1e>
 8006b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f000 f868 	bl	8006c04 <_lseek_r>
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	4632      	mov	r2, r6
 8006b42:	463b      	mov	r3, r7
 8006b44:	4628      	mov	r0, r5
 8006b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4a:	f000 b817 	b.w	8006b7c <_write_r>

08006b4e <__sseek>:
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	460c      	mov	r4, r1
 8006b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b56:	f000 f855 	bl	8006c04 <_lseek_r>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	bf15      	itete	ne
 8006b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b6a:	81a3      	strheq	r3, [r4, #12]
 8006b6c:	bf18      	it	ne
 8006b6e:	81a3      	strhne	r3, [r4, #12]
 8006b70:	bd10      	pop	{r4, pc}

08006b72 <__sclose>:
 8006b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b76:	f000 b813 	b.w	8006ba0 <_close_r>
	...

08006b7c <_write_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d07      	ldr	r5, [pc, #28]	; (8006b9c <_write_r+0x20>)
 8006b80:	4604      	mov	r4, r0
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	2200      	movs	r2, #0
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fa f881 	bl	8000c92 <_write>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_write_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_write_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000248 	.word	0x20000248

08006ba0 <_close_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d06      	ldr	r5, [pc, #24]	; (8006bbc <_close_r+0x1c>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f7fa ff8b 	bl	8001ac6 <_close>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_close_r+0x1a>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_close_r+0x1a>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	20000248 	.word	0x20000248

08006bc0 <_fstat_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d07      	ldr	r5, [pc, #28]	; (8006be0 <_fstat_r+0x20>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	f7fa ff86 	bl	8001ade <_fstat>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d102      	bne.n	8006bdc <_fstat_r+0x1c>
 8006bd6:	682b      	ldr	r3, [r5, #0]
 8006bd8:	b103      	cbz	r3, 8006bdc <_fstat_r+0x1c>
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	bd38      	pop	{r3, r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	20000248 	.word	0x20000248

08006be4 <_isatty_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d06      	ldr	r5, [pc, #24]	; (8006c00 <_isatty_r+0x1c>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fa ff85 	bl	8001afe <_isatty>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_isatty_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_isatty_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000248 	.word	0x20000248

08006c04 <_lseek_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	; (8006c24 <_lseek_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa ff7e 	bl	8001b14 <_lseek>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_lseek_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_lseek_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000248 	.word	0x20000248

08006c28 <__malloc_lock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__malloc_lock+0x8>)
 8006c2a:	f7ff bb55 	b.w	80062d8 <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000240 	.word	0x20000240

08006c34 <__malloc_unlock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__malloc_unlock+0x8>)
 8006c36:	f7ff bb50 	b.w	80062da <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000240 	.word	0x20000240

08006c40 <_read_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d07      	ldr	r5, [pc, #28]	; (8006c60 <_read_r+0x20>)
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7fa ff1c 	bl	8001a8c <_read>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_read_r+0x1e>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_read_r+0x1e>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20000248 	.word	0x20000248

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
