
SecondProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000074  080061ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080061ac  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e6d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298c  00000000  00000000  00035f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  000388a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00039c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dd0  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142e7  00000000  00000000  00064c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b19  00000000  00000000  00078f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b74  00000000  00000000  00181abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006018 	.word	0x08006018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006018 	.word	0x08006018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d013      	beq.n	80005a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000588:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000590:	e000      	b.n	8000594 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000592:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800059e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_write>:
#ifndef SRC_DEBUG_H_
#define SRC_DEBUG_H_


int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffc7 	bl	8000568 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x16>
  return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fd94 	bl	8001124 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f84c 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f9de 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f98e 	bl	8000924 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000608:	f000 f9bc 	bl	8000984 <MX_DMA_Init>
  MX_ADC1_Init();
 800060c:	f000 f896 	bl	800073c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000610:	f000 f90a 	bl	8000828 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f956 	bl	80008c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f002 f9eb 	bl	80029fc <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f002 f9e4 	bl	80029fc <HAL_GPIO_WritePin>
		 transmit(BROADCAST_C, OFF_C);
 8000634:	2100      	movs	r1, #0
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	f000 fa4e 	bl	8000ad8 <transmit>
		 HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000640:	f000 fdec 	bl	800121c <HAL_Delay>
		 transmit(BROADCAST_C, ON_AND_STEP_UP_C);
 8000644:	2108      	movs	r1, #8
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	f000 fa46 	bl	8000ad8 <transmit>
		 HAL_Delay(2000);
 800064c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000650:	f000 fde4 	bl	800121c <HAL_Delay>
		 transmit(BROADCAST_C, QUERY_STATUS);
 8000654:	2190      	movs	r1, #144	; 0x90
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	f000 fa3e 	bl	8000ad8 <transmit>
		 HAL_UART_Receive(&huart1, (uint8_t*)rx_Data,2,100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2202      	movs	r2, #2
 8000660:	4909      	ldr	r1, [pc, #36]	; (8000688 <main+0x94>)
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <main+0x98>)
 8000664:	f004 f816 	bl	8004694 <HAL_UART_Receive>
		 printf("Start: \n");
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <main+0x9c>)
 800066a:	f004 fd8f 	bl	800518c <puts>
		 printf("\r\nBuffer : %d\r\n", rx_Data[0]);
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <main+0x94>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0xa0>)
 8000676:	f004 fd03 	bl	8005080 <iprintf>
		 printf("\r\nBuffer : %d\r\n", rx_Data[1]);
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <main+0x94>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <main+0xa0>)
 8000682:	f004 fcfd 	bl	8005080 <iprintf>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000686:	e7ce      	b.n	8000626 <main+0x32>
 8000688:	200000e8 	.word	0x200000e8
 800068c:	20000154 	.word	0x20000154
 8000690:	08006030 	.word	0x08006030
 8000694:	08006038 	.word	0x08006038

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fce2 	bl	8005070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f002 f9c3 	bl	8002a48 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 fa90 	bl	8000bec <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2310      	movs	r3, #16
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e6:	230a      	movs	r3, #10
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f9fa 	bl	8002af4 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000706:	f000 fa71 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fdcc 	bl	80032c0 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072e:	f000 fa5d 	bl	8000bec <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3758      	adds	r7, #88	; 0x58
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <MX_ADC1_Init+0xe0>)
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <MX_ADC1_Init+0xe4>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_ADC1_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_ADC1_Init+0xe0>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_ADC1_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_ADC1_Init+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_ADC1_Init+0xe0>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_ADC1_Init+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_ADC1_Init+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_ADC1_Init+0xe0>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ADC1_Init+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ADC1_Init+0xe0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_ADC1_Init+0xe0>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_ADC1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <MX_ADC1_Init+0xe0>)
 80007c0:	f000 fedc 	bl	800157c <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ca:	f000 fa0f 	bl	8000bec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <MX_ADC1_Init+0xe0>)
 80007da:	f001 fc3b 	bl	8002054 <HAL_ADCEx_MultiModeConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e4:	f000 fa02 	bl	8000bec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2306      	movs	r3, #6
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f4:	237f      	movs	r3, #127	; 0x7f
 80007f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f8:	2304      	movs	r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_ADC1_Init+0xe0>)
 8000806:	f001 f80f 	bl	8001828 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000810:	f000 f9ec 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000f0 	.word	0x200000f0
 8000820:	50040000 	.word	0x50040000
 8000824:	14f00020 	.word	0x14f00020

08000828 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_TIM4_Init+0x94>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <MX_TIM4_Init+0x98>)
 800084a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_TIM4_Init+0x94>)
 800084e:	224f      	movs	r2, #79	; 0x4f
 8000850:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_TIM4_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_TIM4_Init+0x94>)
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_TIM4_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_TIM4_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_TIM4_Init+0x94>)
 800086e:	f003 fbe9 	bl	8004044 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000878:	f000 f9b8 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_TIM4_Init+0x94>)
 800088a:	f003 fc32 	bl	80040f2 <HAL_TIM_ConfigClockSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000894:	f000 f9aa 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_TIM4_Init+0x94>)
 80008a6:	f003 fe1f 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008b0:	f000 f99c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	40000800 	.word	0x40000800

080008c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <MX_USART1_UART_Init+0x58>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 74880;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008d0:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_USART1_UART_Init+0x5c>)
 80008d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008e8:	220c      	movs	r2, #12
 80008ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_USART1_UART_Init+0x54>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART1_UART_Init+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USART1_UART_Init+0x54>)
 8000906:	f003 fe77 	bl	80045f8 <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000910:	f000 f96c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000154 	.word	0x20000154
 800091c:	40013800 	.word	0x40013800
 8000920:	00012480 	.word	0x00012480

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART2_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_USART2_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000968:	f003 fe46 	bl	80045f8 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f93b 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000220 	.word	0x20000220
 8000980:	40004400 	.word	0x40004400

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_DMA_Init+0x38>)
 800098c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <MX_DMA_Init+0x38>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6493      	str	r3, [r2, #72]	; 0x48
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_DMA_Init+0x38>)
 8000998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	200b      	movs	r0, #11
 80009a8:	f001 fcdf 	bl	800236a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ac:	200b      	movs	r0, #11
 80009ae:	f001 fcf8 	bl	80023a2 <HAL_NVIC_EnableIRQ>

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_GPIO_Init+0xc8>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_GPIO_Init+0xc8>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f001 ffdc 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_GPIO_Init+0xcc>)
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_GPIO_Init+0xd0>)
 8000a5a:	f001 fe25 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000a5e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f001 fe15 	bl	80026a8 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	10210000 	.word	0x10210000
 8000a90:	48000800 	.word	0x48000800

08000a94 <delay_us>:
/**
  * @brief Setup us delay function with timer 4
  * @retval None
  */
void delay_us(uint16_t us)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <delay_us+0x40>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <delay_us+0x40>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <delay_us+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f042 0201 	orr.w	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8000ab6:	bf00      	nop
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <delay_us+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3f9      	bcc.n	8000ab8 <delay_us+0x24>
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <transmit>:

void transmit(uint8_t cmd1, uint8_t cmd2) // transmit commands to DALI bus (address byte, command byte)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
	sendBit(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f82f 	bl	8000b4c <sendBit>
	sendByte(cmd1);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f80f 	bl	8000b14 <sendByte>
	sendByte(cmd2);
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f80b 	bl	8000b14 <sendByte>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//digitalWrite(TxPin, HIGH); Set signaal weer hoog wanneer verzonden (STOP)
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 ff78 	bl	80029fc <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <sendByte>:


void sendByte(uint8_t b)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	for (int i = 7; i >= 0; i--)
 8000b1e:	2307      	movs	r3, #7
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e00b      	b.n	8000b3c <sendByte+0x28>
	{
		sendBit((b >> i) & 1);
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	fa42 f303 	asr.w	r3, r2, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f80b 	bl	8000b4c <sendBit>
	for (int i = 7; i >= 0; i--)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	daf0      	bge.n	8000b24 <sendByte+0x10>
	}
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <sendBit>:


void sendBit(int b)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 if (b) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <sendBit+0x14>
		sendOne();
 8000b5a:	f000 f827 	bl	8000bac <sendOne>
	}
	else {
		sendZero();
	}
}
 8000b5e:	e001      	b.n	8000b64 <sendBit+0x18>
		sendZero();
 8000b60:	f000 f804 	bl	8000b6c <sendZero>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <sendZero>:


void sendZero(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//digitalWrite(TxPin, HIGH);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f001 ff3f 	bl	80029fc <HAL_GPIO_WritePin>
	delay_us(delay2);											//delayMicroseconds(delay2);
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <sendZero+0x38>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff86 	bl	8000a94 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//digitalWrite(TxPin, LOW);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f001 ff33 	bl	80029fc <HAL_GPIO_WritePin>
	delay_us(delay1);											//delayMicroseconds(delay1);
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <sendZero+0x3c>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff7a 	bl	8000a94 <delay_us>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000002 	.word	0x20000002
 8000ba8:	20000000 	.word	0x20000000

08000bac <sendOne>:

void sendOne(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//digitalWrite(TxPin, LOW);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f001 ff1f 	bl	80029fc <HAL_GPIO_WritePin>
	delay_us(delay2); 											//delayMicroseconds(delay2);
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <sendOne+0x38>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff66 	bl	8000a94 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); 		//digitalWrite(TxPin, HIGH);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f001 ff13 	bl	80029fc <HAL_GPIO_WritePin>
	delay_us(delay1);											//delayMicroseconds(delay1);
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <sendOne+0x3c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff5a 	bl	8000a94 <delay_us>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000002 	.word	0x20000002
 8000be8:	20000000 	.word	0x20000000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0ac      	sub	sp, #176	; 0xb0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2288      	movs	r2, #136	; 0x88
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 fa05 	bl	8005070 <memset>
  if(hadc->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <HAL_ADC_MspInit+0x120>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d172      	bne.n	8000d56 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c86:	2308      	movs	r3, #8
 8000c88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fd13 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000cac:	f7ff ff9e 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <HAL_ADC_MspInit+0x124>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <HAL_ADC_MspInit+0x124>)
 8000cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_ADC_MspInit+0x124>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <HAL_ADC_MspInit+0x124>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <HAL_ADC_MspInit+0x124>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <HAL_ADC_MspInit+0x124>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f001 fcd4 	bl	80026a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d02:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_ADC_MspInit+0x12c>)
 8000d04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3a:	480b      	ldr	r0, [pc, #44]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d3c:	f001 fb4c 	bl	80023d8 <HAL_DMA_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000d46:	f7ff ff51 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d50:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_ADC_MspInit+0x128>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	37b0      	adds	r7, #176	; 0xb0
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	50040000 	.word	0x50040000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	200001d8 	.word	0x200001d8
 8000d6c:	40020008 	.word	0x40020008

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_TIM_Base_MspInit+0x38>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10b      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40000800 	.word	0x40000800
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ae      	sub	sp, #184	; 0xb8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2288      	movs	r2, #136	; 0x88
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 f94d 	bl	8005070 <memset>
  if(huart->Instance==USART1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a43      	ldr	r2, [pc, #268]	; (8000ee8 <HAL_UART_MspInit+0x138>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d13d      	bne.n	8000e5c <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000de4:	2300      	movs	r3, #0
 8000de6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fc6d 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df8:	f7ff fef8 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e00:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e06:	6613      	str	r3, [r2, #96]	; 0x60
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a34      	ldr	r2, [pc, #208]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e46:	2307      	movs	r3, #7
 8000e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e50:	4619      	mov	r1, r3
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f001 fc27 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e5a:	e040      	b.n	8000ede <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d13b      	bne.n	8000ede <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fc2a 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000e7e:	f7ff feb5 	bl	8000bec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 fbe5 	bl	80026a8 <HAL_GPIO_Init>
}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	; 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f94c 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DMA1_Channel1_IRQHandler+0x10>)
 8000f4e:	f001 fafb 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200001d8 	.word	0x200001d8

08000f5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e00a      	b.n	8000f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f6e:	f3af 8000 	nop.w
 8000f72:	4601      	mov	r1, r0
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	b2ca      	uxtb	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbf0      	blt.n	8000f6e <_read+0x12>
	}

return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_isatty>:

int _isatty(int file)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f003 fff4 	bl	800501c <__errno>
 8001034:	4603      	mov	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20018000 	.word	0x20018000
 8001060:	00000400 	.word	0x00000400
 8001064:	20000090 	.word	0x20000090
 8001068:	200002b8 	.word	0x200002b8

0800106c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <SystemInit+0x5c>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <SystemInit+0x5c>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <SystemInit+0x60>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <SystemInit+0x60>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <SystemInit+0x60>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <SystemInit+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <SystemInit+0x60>)
 8001098:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800109c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <SystemInit+0x60>)
 80010a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <SystemInit+0x60>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <SystemInit+0x60>)
 80010b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SystemInit+0x60>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	40021000 	.word	0x40021000

080010d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d4:	f7ff ffca 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
	ldr	r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <LoopForever+0x16>)
	cmp	r2, r3
 80010fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f003 ff93 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001102:	f7ff fa77 	bl	80005f4 <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800110c:	08006138 	.word	0x08006138
	ldr	r0, =_sdata
 8001110:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001114:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001118:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800111c:	200002b8 	.word	0x200002b8

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>
	...

08001124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_Init+0x3c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_Init+0x3c>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113a:	2003      	movs	r0, #3
 800113c:	f001 f90a 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f80f 	bl	8001164 <HAL_InitTick>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	e001      	b.n	8001156 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001152:	f7ff fd51 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_InitTick+0x70>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f915 	bl	80023be <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d809      	bhi.n	80011b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f001 f8df 	bl	800236a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_InitTick+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	20000004 	.word	0x20000004
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	200002a4 	.word	0x200002a4

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200002a4 	.word	0x200002a4

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000000c 	.word	0x2000000c

08001264 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3360      	adds	r3, #96	; 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <LL_ADC_SetOffset+0x44>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	03fff000 	.word	0x03fff000

08001314 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3360      	adds	r3, #96	; 0x60
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001376:	b480      	push	{r7}
 8001378:	b087      	sub	sp, #28
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3330      	adds	r3, #48	; 0x30
 8001386:	461a      	mov	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	211f      	movs	r1, #31
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0e9b      	lsrs	r3, r3, #26
 80013ae:	f003 011f 	and.w	r1, r3, #31
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013c2:	bf00      	nop
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3314      	adds	r3, #20
 80013de:	461a      	mov	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	0e5b      	lsrs	r3, r3, #25
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0d1b      	lsrs	r3, r3, #20
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2107      	movs	r1, #7
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	0d1b      	lsrs	r3, r3, #20
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	431a      	orrs	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0318 	and.w	r3, r3, #24
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001448:	40d9      	lsrs	r1, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	400b      	ands	r3, r1
 800144e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001452:	431a      	orrs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	0007ffff 	.word	0x0007ffff

0800146c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800147c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6093      	str	r3, [r2, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014a4:	d101      	bne.n	80014aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014f4:	d101      	bne.n	80014fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <LL_ADC_IsEnabled+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_ADC_IsEnabled+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d101      	bne.n	8001546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b08      	cmp	r3, #8
 8001566:	d101      	bne.n	800156c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e136      	b.n	8001804 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fb4b 	bl	8000c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff67 	bl	8001490 <LL_ADC_IsDeepPowerDownEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff4d 	bl	800146c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff82 	bl	80014e0 <LL_ADC_IsInternalRegulatorEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff66 	bl	80014b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ec:	4b87      	ldr	r3, [pc, #540]	; (800180c <HAL_ADC_Init+0x290>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	4a87      	ldr	r2, [pc, #540]	; (8001810 <HAL_ADC_Init+0x294>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001600:	e002      	b.n	8001608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3b01      	subs	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f9      	bne.n	8001602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff64 	bl	80014e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10d      	bne.n	800163a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff75 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 8001644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 80cf 	bne.w	80017f2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80cb 	bne.w	80017f2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff49 	bl	8001508 <LL_ADC_IsEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d115      	bne.n	80016a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800167c:	4865      	ldr	r0, [pc, #404]	; (8001814 <HAL_ADC_Init+0x298>)
 800167e:	f7ff ff43 	bl	8001508 <LL_ADC_IsEnabled>
 8001682:	4604      	mov	r4, r0
 8001684:	4864      	ldr	r0, [pc, #400]	; (8001818 <HAL_ADC_Init+0x29c>)
 8001686:	f7ff ff3f 	bl	8001508 <LL_ADC_IsEnabled>
 800168a:	4603      	mov	r3, r0
 800168c:	431c      	orrs	r4, r3
 800168e:	4863      	ldr	r0, [pc, #396]	; (800181c <HAL_ADC_Init+0x2a0>)
 8001690:	f7ff ff3a 	bl	8001508 <LL_ADC_IsEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	4323      	orrs	r3, r4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4619      	mov	r1, r3
 80016a2:	485f      	ldr	r0, [pc, #380]	; (8001820 <HAL_ADC_Init+0x2a4>)
 80016a4:	f7ff fdde 	bl	8001264 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7e5b      	ldrb	r3, [r3, #25]
 80016ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d106      	bne.n	80016e4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	3b01      	subs	r3, #1
 80016dc:	045b      	lsls	r3, r3, #17
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_ADC_Init+0x2a8>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	430b      	orrs	r3, r1
 8001712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff08 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 800171e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff15 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 800172a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13d      	bne.n	80017ae <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13a      	bne.n	80017ae <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800173c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001744:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001754:	f023 0302 	bic.w	r3, r3, #2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	69b9      	ldr	r1, [r7, #24]
 800175e:	430b      	orrs	r3, r1
 8001760:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001768:	2b01      	cmp	r3, #1
 800176a:	d118      	bne.n	800179e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001782:	4311      	orrs	r1, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001788:	4311      	orrs	r1, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800178e:	430a      	orrs	r2, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	e007      	b.n	80017ae <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10c      	bne.n	80017d0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f023 010f 	bic.w	r1, r3, #15
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	; 0x30
 80017ce:	e007      	b.n	80017e0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020f 	bic.w	r2, r2, #15
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	f023 0303 	bic.w	r3, r3, #3
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
 80017f0:	e007      	b.n	8001802 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001802:	7ffb      	ldrb	r3, [r7, #31]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3724      	adds	r7, #36	; 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	20000004 	.word	0x20000004
 8001810:	053e2d63 	.word	0x053e2d63
 8001814:	50040000 	.word	0x50040000
 8001818:	50040100 	.word	0x50040100
 800181c:	50040200 	.word	0x50040200
 8001820:	50040300 	.word	0x50040300
 8001824:	fff0c007 	.word	0xfff0c007

08001828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0b6      	sub	sp, #216	; 0xd8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x22>
 8001846:	2302      	movs	r3, #2
 8001848:	e3c7      	b.n	8001fda <HAL_ADC_ConfigChannel+0x7b2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe69 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 83a8 	bne.w	8001fb4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d824      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	3b02      	subs	r3, #2
 8001872:	2b03      	cmp	r3, #3
 8001874:	d81b      	bhi.n	80018ae <HAL_ADC_ConfigChannel+0x86>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_ADC_ConfigChannel+0x54>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001895 	.word	0x08001895
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018a5 	.word	0x080018a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	220c      	movs	r2, #12
 8001890:	605a      	str	r2, [r3, #4]
          break;
 8001892:	e011      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2212      	movs	r2, #18
 8001898:	605a      	str	r2, [r3, #4]
          break;
 800189a:	e00d      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2218      	movs	r2, #24
 80018a0:	605a      	str	r2, [r3, #4]
          break;
 80018a2:	e009      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	605a      	str	r2, [r3, #4]
          break;
 80018ac:	e004      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2206      	movs	r2, #6
 80018b2:	605a      	str	r2, [r3, #4]
          break;
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f7ff fd56 	bl	8001376 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fe2d 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 80018d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe39 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 80018e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 81a6 	bne.w	8001c3c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 81a1 	bne.w	8001c3c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	461a      	mov	r2, r3
 8001908:	f7ff fd61 	bl	80013ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b04      	cmp	r3, #4
 800192c:	d00a      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800193e:	f7ff fcc5 	bl	80012cc <LL_ADC_SetOffset>
 8001942:	e17b      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fce2 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x148>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fcd7 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 021f 	and.w	r2, r3, #31
 800196e:	e01e      	b.n	80019ae <HAL_ADC_ConfigChannel+0x186>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fccc 	bl	8001314 <LL_ADC_GetOffsetChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800198e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800199e:	2320      	movs	r3, #32
 80019a0:	e004      	b.n	80019ac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x19e>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	e018      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x1d0>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019ea:	2320      	movs	r3, #32
 80019ec:	e004      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d106      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc9b 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fc7f 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x20e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fc74 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	e01e      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x24c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc69 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e004      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x264>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	e018      	b.n	8001abe <HAL_ADC_ConfigChannel+0x296>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e004      	b.n	8001abe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fc38 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fc1c 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x2d4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2102      	movs	r1, #2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fc11 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 021f 	and.w	r2, r3, #31
 8001afa:	e01e      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x312>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc06 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e004      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x32a>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	e016      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x358>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e004      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fbd7 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2103      	movs	r1, #3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fbbb 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x396>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2103      	movs	r1, #3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fbb0 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	e017      	b.n	8001bee <HAL_ADC_ConfigChannel+0x3c6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fba5 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e003      	b.n	8001bec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x3de>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	e011      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x402>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e003      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d106      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	2103      	movs	r1, #3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb82 	bl	8001340 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc61 	bl	8001508 <LL_ADC_IsEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 813f 	bne.w	8001ecc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f7ff fbe2 	bl	8001424 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a8e      	ldr	r2, [pc, #568]	; (8001ea0 <HAL_ADC_ConfigChannel+0x678>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	f040 8130 	bne.w	8001ecc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x46c>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	3301      	adds	r3, #1
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e019      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x4a0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	bf94      	ite	ls
 8001cc2:	2301      	movls	r3, #1
 8001cc4:	2300      	movhi	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d079      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x4c0>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	3301      	adds	r3, #1
 8001ce0:	069b      	lsls	r3, r3, #26
 8001ce2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce6:	e015      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x4ec>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d00:	2320      	movs	r3, #32
 8001d02:	e003      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	069b      	lsls	r3, r3, #26
 8001d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x50c>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	e017      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x53c>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e003      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	ea42 0103 	orr.w	r1, r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10a      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x562>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	051b      	lsls	r3, r3, #20
 8001d88:	e018      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x594>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e003      	b.n	8001dae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	e080      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x5b4>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	069b      	lsls	r3, r3, #26
 8001dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dda:	e015      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x5e0>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x600>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	e017      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x630>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	61fb      	str	r3, [r7, #28]
  return result;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e003      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x65c>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0e9b      	lsrs	r3, r3, #26
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b1e      	subs	r3, #30
 8001e7c:	051b      	lsls	r3, r3, #20
 8001e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e82:	e01d      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x698>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	613b      	str	r3, [r7, #16]
  return result;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e005      	b.n	8001eac <HAL_ADC_ConfigChannel+0x684>
 8001ea0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b1e      	subs	r3, #30
 8001eba:	051b      	lsls	r3, r3, #20
 8001ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	6892      	ldr	r2, [r2, #8]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7ff fa81 	bl	80013ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d07a      	beq.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed8:	4843      	ldr	r0, [pc, #268]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eda:	f7ff f9e9 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 8001ede:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a41      	ldr	r2, [pc, #260]	; (8001fec <HAL_ADC_ConfigChannel+0x7c4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d12c      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d126      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a3c      	ldr	r2, [pc, #240]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x6e4>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d15d      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f14:	4619      	mov	r1, r3
 8001f16:	4834      	ldr	r0, [pc, #208]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f18:	f7ff f9b7 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	4a36      	ldr	r2, [pc, #216]	; (8001ffc <HAL_ADC_ConfigChannel+0x7d4>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f36:	e002      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f44:	e040      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d118      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x75a>
 8001f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d112      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x748>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d12d      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f78:	4619      	mov	r1, r3
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f7c:	f7ff f985 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f80:	e024      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d120      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11a      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d115      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001faa:	4619      	mov	r1, r3
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fae:	f7ff f96c 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
 8001fb2:	e00c      	b.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fc6:	e002      	b.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc8:	bf00      	nop
 8001fca:	e000      	b.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	37d8      	adds	r7, #216	; 0xd8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	80080000 	.word	0x80080000
 8001fe8:	50040300 	.word	0x50040300
 8001fec:	c7520000 	.word	0xc7520000
 8001ff0:	50040000 	.word	0x50040000
 8001ff4:	50040200 	.word	0x50040200
 8001ff8:	20000004 	.word	0x20000004
 8001ffc:	053e2d63 	.word	0x053e2d63
 8002000:	cb840000 	.word	0xcb840000
 8002004:	80000001 	.word	0x80000001

08002008 <LL_ADC_IsEnabled>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <LL_ADC_IsEnabled+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_ADC_IsEnabled+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_REG_IsConversionOngoing>:
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d101      	bne.n	8002046 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b09f      	sub	sp, #124	; 0x7c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800206e:	2302      	movs	r3, #2
 8002070:	e093      	b.n	800219a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800207a:	2300      	movs	r3, #0
 800207c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800207e:	2300      	movs	r3, #0
 8002080:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d102      	bne.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	e001      	b.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e072      	b.n	800219a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffb9 	bl	800202e <LL_ADC_REG_IsConversionOngoing>
 80020bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffb3 	bl	800202e <LL_ADC_REG_IsConversionOngoing>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d154      	bne.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d151      	bne.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80020d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02c      	beq.n	800213a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020f2:	035b      	lsls	r3, r3, #13
 80020f4:	430b      	orrs	r3, r1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020fc:	4829      	ldr	r0, [pc, #164]	; (80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020fe:	f7ff ff83 	bl	8002008 <LL_ADC_IsEnabled>
 8002102:	4604      	mov	r4, r0
 8002104:	4828      	ldr	r0, [pc, #160]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002106:	f7ff ff7f 	bl	8002008 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	431c      	orrs	r4, r3
 800210e:	4828      	ldr	r0, [pc, #160]	; (80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002110:	f7ff ff7a 	bl	8002008 <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	4323      	orrs	r3, r4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d137      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800211c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002124:	f023 030f 	bic.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	6892      	ldr	r2, [r2, #8]
 8002130:	430a      	orrs	r2, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002136:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002138:	e028      	b.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800213a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002144:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002146:	4817      	ldr	r0, [pc, #92]	; (80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002148:	f7ff ff5e 	bl	8002008 <LL_ADC_IsEnabled>
 800214c:	4604      	mov	r4, r0
 800214e:	4816      	ldr	r0, [pc, #88]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002150:	f7ff ff5a 	bl	8002008 <LL_ADC_IsEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	431c      	orrs	r4, r3
 8002158:	4815      	ldr	r0, [pc, #84]	; (80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800215a:	f7ff ff55 	bl	8002008 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	4323      	orrs	r3, r4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d112      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800216e:	f023 030f 	bic.w	r3, r3, #15
 8002172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002174:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002176:	e009      	b.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800218a:	e000      	b.n	800218e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800218c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002196:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800219a:	4618      	mov	r0, r3
 800219c:	377c      	adds	r7, #124	; 0x7c
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	50040000 	.word	0x50040000
 80021a8:	50040100 	.word	0x50040100
 80021ac:	50040300 	.word	0x50040300
 80021b0:	50040200 	.word	0x50040200

080021b4 <__NVIC_SetPriorityGrouping>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff29 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff3e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff8e 	bl	80022a8 <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5d 	bl	8002254 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff31 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa2 	bl	8002310 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e098      	b.n	800251c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_DMA_Init+0x150>)
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d80f      	bhi.n	8002416 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_DMA_Init+0x154>)
 80023fe:	4413      	add	r3, r2
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_DMA_Init+0x158>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a48      	ldr	r2, [pc, #288]	; (8002534 <HAL_DMA_Init+0x15c>)
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
 8002414:	e00e      	b.n	8002434 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_DMA_Init+0x160>)
 800241e:	4413      	add	r3, r2
 8002420:	4a43      	ldr	r2, [pc, #268]	; (8002530 <HAL_DMA_Init+0x158>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	009a      	lsls	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a42      	ldr	r2, [pc, #264]	; (800253c <HAL_DMA_Init+0x164>)
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800248e:	d039      	beq.n	8002504 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_DMA_Init+0x15c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11a      	bne.n	80024d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_DMA_Init+0x168>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f003 031c 	and.w	r3, r3, #28
 80024a6:	210f      	movs	r1, #15
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4924      	ldr	r1, [pc, #144]	; (8002540 <HAL_DMA_Init+0x168>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_DMA_Init+0x168>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f003 031c 	and.w	r3, r3, #28
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	491d      	ldr	r1, [pc, #116]	; (8002540 <HAL_DMA_Init+0x168>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
 80024ce:	e019      	b.n	8002504 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_DMA_Init+0x16c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f003 031c 	and.w	r3, r3, #28
 80024dc:	210f      	movs	r1, #15
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4917      	ldr	r1, [pc, #92]	; (8002544 <HAL_DMA_Init+0x16c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_DMA_Init+0x16c>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6859      	ldr	r1, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f003 031c 	and.w	r3, r3, #28
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	4911      	ldr	r1, [pc, #68]	; (8002544 <HAL_DMA_Init+0x16c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40020407 	.word	0x40020407
 800252c:	bffdfff8 	.word	0xbffdfff8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020000 	.word	0x40020000
 8002538:	bffdfbf8 	.word	0xbffdfbf8
 800253c:	40020400 	.word	0x40020400
 8002540:	400200a8 	.word	0x400200a8
 8002544:	400204a8 	.word	0x400204a8

08002548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f003 031c 	and.w	r3, r3, #28
 8002568:	2204      	movs	r2, #4
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d026      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x7a>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d021      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	f003 021c 	and.w	r2, r3, #28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2104      	movs	r1, #4
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d071      	beq.n	800269c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80025c0:	e06c      	b.n	800269c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 031c 	and.w	r3, r3, #28
 80025ca:	2202      	movs	r2, #2
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d02e      	beq.n	8002634 <HAL_DMA_IRQHandler+0xec>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d029      	beq.n	8002634 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020a 	bic.w	r2, r2, #10
 80025fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f003 021c 	and.w	r2, r3, #28
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2102      	movs	r1, #2
 8002614:	fa01 f202 	lsl.w	r2, r1, r2
 8002618:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d038      	beq.n	800269c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002632:	e033      	b.n	800269c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	f003 031c 	and.w	r3, r3, #28
 800263c:	2208      	movs	r2, #8
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02a      	beq.n	800269e <HAL_DMA_IRQHandler+0x156>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d025      	beq.n	800269e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 020e 	bic.w	r2, r2, #14
 8002660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f003 021c 	and.w	r2, r3, #28
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800269c:	bf00      	nop
 800269e:	bf00      	nop
}
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b6:	e17f      	b.n	80029b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8171 	beq.w	80029b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d00b      	beq.n	80026f0 <HAL_GPIO_Init+0x48>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d007      	beq.n	80026f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e4:	2b11      	cmp	r3, #17
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	d130      	bne.n	8002752 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002726:	2201      	movs	r2, #1
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0201 	and.w	r2, r3, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b03      	cmp	r3, #3
 800275c:	d118      	bne.n	8002790 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002764:	2201      	movs	r2, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x128>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d123      	bne.n	8002818 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	6939      	ldr	r1, [r7, #16]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ac 	beq.w	80029b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_GPIO_Init+0x330>)
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	4a5e      	ldr	r2, [pc, #376]	; (80029d8 <HAL_GPIO_Init+0x330>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6613      	str	r3, [r2, #96]	; 0x60
 8002866:	4b5c      	ldr	r3, [pc, #368]	; (80029d8 <HAL_GPIO_Init+0x330>)
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002872:	4a5a      	ldr	r2, [pc, #360]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800289c:	d025      	beq.n	80028ea <HAL_GPIO_Init+0x242>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_GPIO_Init+0x338>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01f      	beq.n	80028e6 <HAL_GPIO_Init+0x23e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <HAL_GPIO_Init+0x33c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d019      	beq.n	80028e2 <HAL_GPIO_Init+0x23a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <HAL_GPIO_Init+0x340>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0x236>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_GPIO_Init+0x344>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00d      	beq.n	80028da <HAL_GPIO_Init+0x232>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_GPIO_Init+0x348>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <HAL_GPIO_Init+0x22e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4a      	ldr	r2, [pc, #296]	; (80029f4 <HAL_GPIO_Init+0x34c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_GPIO_Init+0x22a>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00c      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00a      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028d6:	2305      	movs	r3, #5
 80028d8:	e008      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028da:	2304      	movs	r3, #4
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028de:	2303      	movs	r3, #3
 80028e0:	e004      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_Init+0x244>
 80028ea:	2300      	movs	r3, #0
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	f002 0203 	and.w	r2, r2, #3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4093      	lsls	r3, r2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028fc:	4937      	ldr	r1, [pc, #220]	; (80029dc <HAL_GPIO_Init+0x334>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_GPIO_Init+0x350>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800292e:	4a32      	ldr	r2, [pc, #200]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <HAL_GPIO_Init+0x350>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_GPIO_Init+0x350>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_GPIO_Init+0x350>)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f47f ae78 	bne.w	80026b8 <HAL_GPIO_Init+0x10>
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010000 	.word	0x40010000
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48000800 	.word	0x48000800
 80029e8:	48000c00 	.word	0x48000c00
 80029ec:	48001000 	.word	0x48001000
 80029f0:	48001400 	.word	0x48001400
 80029f4:	48001800 	.word	0x48001800
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a56:	d130      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a64:	d038      	beq.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2232      	movs	r2, #50	; 0x32
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8c:	e002      	b.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f2      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab4:	d110      	bne.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e00f      	b.n	8002ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d007      	beq.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	20000004 	.word	0x20000004
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e3d4      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4ba1      	ldr	r3, [pc, #644]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b10:	4b9e      	ldr	r3, [pc, #632]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80e4 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4a>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	f040 808b 	bne.w	8002c4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 8087 	bne.w	8002c4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3e:	4b93      	ldr	r3, [pc, #588]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e3ac      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_RCC_OscConfig+0x7c>
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6e:	e005      	b.n	8002b7c <HAL_RCC_OscConfig+0x88>
 8002b70:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d223      	bcs.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd41 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e38d      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7c      	ldr	r2, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b7a      	ldr	r3, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4977      	ldr	r1, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	4972      	ldr	r1, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 8002bc6:	e025      	b.n	8002c14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	496a      	ldr	r1, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be6:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4965      	ldr	r1, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fd01 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e34d      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c14:	f000 fc36 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	495a      	ldr	r1, [pc, #360]	; (8002d90 <HAL_RCC_OscConfig+0x29c>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_RCC_OscConfig+0x2a0>)
 8002c32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x2a4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fa93 	bl	8001164 <HAL_InitTick>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d052      	beq.n	8002cee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	e331      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d032      	beq.n	8002cba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c54:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4c      	ldr	r2, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fad0 	bl	8001204 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c68:	f7fe facc 	bl	8001204 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e31a      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	493b      	ldr	r1, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4936      	ldr	r1, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
 8002cb8:	e01a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fa9d 	bl	8001204 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cce:	f7fe fa99 	bl	8001204 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e2e7      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x1da>
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d074      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x21a>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d10e      	bne.n	8002d26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d10b      	bne.n	8002d26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d064      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d160      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e2c4      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x24a>
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e01d      	b.n	8002d7a <HAL_RCC_OscConfig+0x286>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x26e>
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0c      	ldr	r2, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x286>
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fa3f 	bl	8001204 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d88:	e011      	b.n	8002dae <HAL_RCC_OscConfig+0x2ba>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08006048 	.word	0x08006048
 8002d94:	20000004 	.word	0x20000004
 8002d98:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fa32 	bl	8001204 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e280      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4baf      	ldr	r3, [pc, #700]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x2a8>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fa22 	bl	8001204 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fa1e 	bl	8001204 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e26c      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd6:	4ba5      	ldr	r3, [pc, #660]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2d0>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d060      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x310>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d119      	bne.n	8002e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d116      	bne.n	8002e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	4b99      	ldr	r3, [pc, #612]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x328>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e249      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b93      	ldr	r3, [pc, #588]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4990      	ldr	r1, [pc, #576]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	e040      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d023      	beq.n	8002e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a8b      	ldr	r2, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe f9dd 	bl	8001204 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe f9d9 	bl	8001204 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e227      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e60:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	497c      	ldr	r1, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e018      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a79      	ldr	r2, [pc, #484]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f9b9 	bl	8001204 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7fe f9b5 	bl	8001204 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e203      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d03c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f994 	bl	8001204 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe f990 	bl	8001204 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1de      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ef      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x3ec>
 8002f00:	e01b      	b.n	8002f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f02:	4b5a      	ldr	r3, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f977 	bl	8001204 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fe f973 	bl	8001204 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1c1      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ef      	bne.n	8002f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80a6 	beq.w	8003094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a43      	ldr	r2, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d118      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f93a 	bl	8001204 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fe f936 	bl	8001204 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e184      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa6:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x4d8>
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fca:	e024      	b.n	8003016 <HAL_RCC_OscConfig+0x522>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d110      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x502>
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff4:	e00f      	b.n	8003016 <HAL_RCC_OscConfig+0x522>
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_RCC_OscConfig+0x578>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe f8f1 	bl	8001204 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe f8ed 	bl	8001204 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e139      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x578>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ed      	beq.n	8003026 <HAL_RCC_OscConfig+0x532>
 800304a:	e01a      	b.n	8003082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe f8da 	bl	8001204 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003052:	e00f      	b.n	8003074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe f8d6 	bl	8001204 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d906      	bls.n	8003074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e122      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003074:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e8      	bne.n	8003054 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8108 	beq.w	80032ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	f040 80d0 	bne.w	8003248 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030a8:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d130      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	3b01      	subs	r3, #1
 80030c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d127      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d11f      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030e8:	2a07      	cmp	r2, #7
 80030ea:	bf14      	ite	ne
 80030ec:	2201      	movne	r2, #1
 80030ee:	2200      	moveq	r2, #0
 80030f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	3b01      	subs	r3, #1
 8003104:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d109      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d06e      	beq.n	80031fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d069      	beq.n	80031f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003124:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003130:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b7      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003140:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800314c:	f7fe f85a 	bl	8001204 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f856 	bl	8001204 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0a4      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCC_OscConfig+0x7c8>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003182:	3a01      	subs	r2, #1
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	4311      	orrs	r1, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800318c:	0212      	lsls	r2, r2, #8
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	3a01      	subs	r2, #1
 8003198:	0552      	lsls	r2, r2, #21
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a0:	0852      	lsrs	r2, r2, #1
 80031a2:	3a01      	subs	r2, #1
 80031a4:	0652      	lsls	r2, r2, #25
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031ac:	0912      	lsrs	r2, r2, #4
 80031ae:	0452      	lsls	r2, r2, #17
 80031b0:	430a      	orrs	r2, r1
 80031b2:	4941      	ldr	r1, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031b8:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c4:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d0:	f7fe f818 	bl	8001204 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe f814 	bl	8001204 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e062      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f6:	e05a      	b.n	80032ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e059      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fc:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d152      	bne.n	80032ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003212:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003220:	f7fd fff0 	bl	8001204 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fd ffec 	bl	8001204 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e03a      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x734>
 8003246:	e032      	b.n	80032ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d02d      	beq.n	80032aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003258:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003278:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800327c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003280:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd ffbf 	bl	8001204 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fd ffbb 	bl	8001204 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e009      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x796>
 80032a8:	e001      	b.n	80032ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	f99d808c 	.word	0xf99d808c

080032c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0c8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d910      	bls.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4961      	ldr	r1, [pc, #388]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b0      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04c      	beq.n	80033aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d107      	bne.n	8003328 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d121      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e09e      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d115      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e092      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003348:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e086      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e07e      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 0203 	bic.w	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	493f      	ldr	r1, [pc, #252]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fd ff43 	bl	8001204 <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003380:	e00a      	b.n	8003398 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003382:	f7fd ff3f 	bl	8001204 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e066      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 020c 	and.w	r2, r3, #12
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d1eb      	bne.n	8003382 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	492c      	ldr	r1, [pc, #176]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d210      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4924      	ldr	r1, [pc, #144]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e036      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4918      	ldr	r1, [pc, #96]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4910      	ldr	r1, [pc, #64]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003436:	f000 f825 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490c      	ldr	r1, [pc, #48]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fe82 	bl	8001164 <HAL_InitTick>
 8003460:	4603      	mov	r3, r0
 8003462:	72fb      	strb	r3, [r7, #11]

  return status;
 8003464:	7afb      	ldrb	r3, [r7, #11]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40022000 	.word	0x40022000
 8003474:	40021000 	.word	0x40021000
 8003478:	08006048 	.word	0x08006048
 800347c:	20000004 	.word	0x20000004
 8003480:	20000008 	.word	0x20000008

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d121      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d11e      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034b8:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034c4:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034e0:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e004      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d101      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_RCC_GetSysClockFreq+0x114>)
 800350a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d134      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0xa6>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d003      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0xac>
 8003528:	e005      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_RCC_GetSysClockFreq+0x110>)
 800352c:	617b      	str	r3, [r7, #20]
      break;
 800352e:	e005      	b.n	800353c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_GetSysClockFreq+0x114>)
 8003532:	617b      	str	r3, [r7, #20]
      break;
 8003534:	e002      	b.n	800353c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	617b      	str	r3, [r7, #20]
      break;
 800353a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	3301      	adds	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	fb02 f203 	mul.w	r2, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	0e5b      	lsrs	r3, r3, #25
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800357c:	69bb      	ldr	r3, [r7, #24]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	; 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	08006060 	.word	0x08006060
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000004 	.word	0x20000004

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08006058 	.word	0x08006058

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e4:	f7ff ffda 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4904      	ldr	r1, [pc, #16]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08006058 	.word	0x08006058

0800360c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003624:	f7ff fa02 	bl	8002a2c <HAL_PWREx_GetVoltageRange>
 8003628:	6178      	str	r0, [r7, #20]
 800362a:	e014      	b.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003644:	f7ff f9f2 	bl	8002a2c <HAL_PWREx_GetVoltageRange>
 8003648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d10b      	bne.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d919      	bls.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2ba0      	cmp	r3, #160	; 0xa0
 8003668:	d902      	bls.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366a:	2302      	movs	r3, #2
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e013      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e010      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d902      	bls.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800367c:	2303      	movs	r3, #3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e00a      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d102      	bne.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003688:	2302      	movs	r3, #2
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e004      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b70      	cmp	r3, #112	; 0x70
 8003692:	d101      	bne.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d8:	2300      	movs	r3, #0
 80036da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d041      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f0:	d02a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f6:	d824      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003702:	d81e      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370c:	d010      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800370e:	e018      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003710:	4b86      	ldr	r3, [pc, #536]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a85      	ldr	r2, [pc, #532]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371c:	e015      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fabb 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372e:	e00c      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3320      	adds	r3, #32
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fba6 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	74fb      	strb	r3, [r7, #19]
      break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003750:	4b76      	ldr	r3, [pc, #472]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375e:	4973      	ldr	r1, [pc, #460]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d041      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003780:	d02a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003786:	d824      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800378e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003792:	d81e      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800379c:	d010      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800379e:	e018      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a61      	ldr	r2, [pc, #388]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ac:	e015      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fa73 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037be:	e00c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3320      	adds	r3, #32
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fb5e 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	74fb      	strb	r3, [r7, #19]
      break;
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037e0:	4b52      	ldr	r3, [pc, #328]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ee:	494f      	ldr	r1, [pc, #316]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037f6:	e001      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a0 	beq.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	4a40      	ldr	r2, [pc, #256]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382e:	6593      	str	r3, [r2, #88]	; 0x58
 8003830:	4b3e      	ldr	r3, [pc, #248]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383c:	2301      	movs	r3, #1
 800383e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800384c:	f7fd fcda 	bl	8001204 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fd fcd6 	bl	8001204 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	74fb      	strb	r3, [r7, #19]
        break;
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003868:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d15c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003884:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01f      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	d019      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	4a20      	ldr	r2, [pc, #128]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fd fc95 	bl	8001204 <HAL_GetTick>
 80038da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038dc:	e00b      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd fc91 	bl	8001204 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d902      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	74fb      	strb	r3, [r7, #19]
            break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ec      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391a:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003922:	e009      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
 8003928:	e006      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003938:	7c7b      	ldrb	r3, [r7, #17]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d105      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800393e:	4b9e      	ldr	r3, [pc, #632]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	4a9d      	ldr	r2, [pc, #628]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003956:	4b98      	ldr	r3, [pc, #608]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 0203 	bic.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	4994      	ldr	r1, [pc, #592]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f023 020c 	bic.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	498c      	ldr	r1, [pc, #560]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800399a:	4b87      	ldr	r3, [pc, #540]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	4983      	ldr	r1, [pc, #524]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039bc:	4b7e      	ldr	r3, [pc, #504]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039de:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	4972      	ldr	r1, [pc, #456]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a00:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	496a      	ldr	r1, [pc, #424]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a22:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	4961      	ldr	r1, [pc, #388]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a44:	4b5c      	ldr	r3, [pc, #368]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	4959      	ldr	r1, [pc, #356]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	4950      	ldr	r1, [pc, #320]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	4948      	ldr	r1, [pc, #288]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aaa:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d028      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003acc:	4b3a      	ldr	r3, [pc, #232]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	4937      	ldr	r1, [pc, #220]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d106      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	e011      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f8c8 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d028      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	491f      	ldr	r1, [pc, #124]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b54:	60d3      	str	r3, [r2, #12]
 8003b56:	e011      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f899 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02b      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a02      	ldr	r2, [pc, #8]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb2:	60d3      	str	r3, [r2, #12]
 8003bb4:	e014      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f867 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d02f      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	4928      	ldr	r1, [pc, #160]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c0a:	d10d      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f844 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	74bb      	strb	r3, [r7, #18]
 8003c26:	e011      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3320      	adds	r3, #32
 8003c36:	2102      	movs	r1, #2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f925 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c66:	490d      	ldr	r1, [pc, #52]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cae:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0203 	and.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10d      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d047      	beq.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e044      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d018      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x86>
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d825      	bhi.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0x62>
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d009      	beq.n	8003d14 <RCCEx_PLLSAI1_Config+0x74>
 8003d00:	e020      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d02:	4b60      	ldr	r3, [pc, #384]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d12:	e01a      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d14:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d116      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e013      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d42:	e006      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e004      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	4944      	ldr	r1, [pc, #272]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d17d      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d7c:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a40      	ldr	r2, [pc, #256]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fd fa3c 	bl	8001204 <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8e:	e009      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d90:	f7fd fa38 	bl	8001204 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d902      	bls.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	73fb      	strb	r3, [r7, #15]
        break;
 8003da2:	e005      	b.n	8003db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da4:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ef      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d160      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d111      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6892      	ldr	r2, [r2, #8]
 8003dcc:	0211      	lsls	r1, r2, #8
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	0912      	lsrs	r2, r2, #4
 8003dd4:	0452      	lsls	r2, r2, #17
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	492a      	ldr	r1, [pc, #168]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]
 8003dde:	e027      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d112      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de6:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	0211      	lsls	r1, r2, #8
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6912      	ldr	r2, [r2, #16]
 8003dfc:	0852      	lsrs	r2, r2, #1
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	0552      	lsls	r2, r2, #21
 8003e02:	430a      	orrs	r2, r1
 8003e04:	491f      	ldr	r1, [pc, #124]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
 8003e0a:	e011      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6952      	ldr	r2, [r2, #20]
 8003e22:	0852      	lsrs	r2, r2, #1
 8003e24:	3a01      	subs	r2, #1
 8003e26:	0652      	lsls	r2, r2, #25
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	4916      	ldr	r1, [pc, #88]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd f9e2 	bl	8001204 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fd f9de 	bl	8001204 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
          break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ef      	beq.n	8003e44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	4904      	ldr	r1, [pc, #16]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e96:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ea2:	4b67      	ldr	r3, [pc, #412]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eba:	4b61      	ldr	r3, [pc, #388]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d047      	beq.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	e044      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d018      	beq.n	8003f0e <RCCEx_PLLSAI2_Config+0x86>
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d825      	bhi.n	8003f2c <RCCEx_PLLSAI2_Config+0xa4>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d002      	beq.n	8003eea <RCCEx_PLLSAI2_Config+0x62>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d009      	beq.n	8003efc <RCCEx_PLLSAI2_Config+0x74>
 8003ee8:	e020      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eea:	4b55      	ldr	r3, [pc, #340]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efa:	e01a      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e013      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0e:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e004      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f42:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4939      	ldr	r1, [pc, #228]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d167      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f64:	4b36      	ldr	r3, [pc, #216]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a35      	ldr	r2, [pc, #212]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd f948 	bl	8001204 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f76:	e009      	b.n	8003f8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f78:	f7fd f944 	bl	8001204 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e005      	b.n	8003f98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ef      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14a      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa4:	4b26      	ldr	r3, [pc, #152]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6892      	ldr	r2, [r2, #8]
 8003fb4:	0211      	lsls	r1, r2, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68d2      	ldr	r2, [r2, #12]
 8003fba:	0912      	lsrs	r2, r2, #4
 8003fbc:	0452      	lsls	r2, r2, #17
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	491f      	ldr	r1, [pc, #124]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	614b      	str	r3, [r1, #20]
 8003fc6:	e011      	b.n	8003fec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	0211      	lsls	r1, r2, #8
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6912      	ldr	r2, [r2, #16]
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0652      	lsls	r2, r2, #25
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	4916      	ldr	r1, [pc, #88]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fd f904 	bl	8001204 <HAL_GetTick>
 8003ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffe:	e009      	b.n	8004014 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004000:	f7fd f900 	bl	8001204 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d902      	bls.n	8004014 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	73fb      	strb	r3, [r7, #15]
          break;
 8004012:	e005      	b.n	8004020 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ef      	beq.n	8004000 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4904      	ldr	r1, [pc, #16]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e049      	b.n	80040ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fe80 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 f8fc 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_TIM_ConfigClockSource+0x18>
 8004106:	2302      	movs	r3, #2
 8004108:	e0b5      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x184>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004128:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800412c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004134:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004146:	d03e      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xd4>
 8004148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414c:	f200 8087 	bhi.w	800425e <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	f000 8085 	beq.w	8004262 <HAL_TIM_ConfigClockSource+0x170>
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d87f      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 800415e:	2b70      	cmp	r3, #112	; 0x70
 8004160:	d01a      	beq.n	8004198 <HAL_TIM_ConfigClockSource+0xa6>
 8004162:	2b70      	cmp	r3, #112	; 0x70
 8004164:	d87b      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 8004166:	2b60      	cmp	r3, #96	; 0x60
 8004168:	d050      	beq.n	800420c <HAL_TIM_ConfigClockSource+0x11a>
 800416a:	2b60      	cmp	r3, #96	; 0x60
 800416c:	d877      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 800416e:	2b50      	cmp	r3, #80	; 0x50
 8004170:	d03c      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xfa>
 8004172:	2b50      	cmp	r3, #80	; 0x50
 8004174:	d873      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d058      	beq.n	800422c <HAL_TIM_ConfigClockSource+0x13a>
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d86f      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 800417e:	2b30      	cmp	r3, #48	; 0x30
 8004180:	d064      	beq.n	800424c <HAL_TIM_ConfigClockSource+0x15a>
 8004182:	2b30      	cmp	r3, #48	; 0x30
 8004184:	d86b      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 8004186:	2b20      	cmp	r3, #32
 8004188:	d060      	beq.n	800424c <HAL_TIM_ConfigClockSource+0x15a>
 800418a:	2b20      	cmp	r3, #32
 800418c:	d867      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d05c      	beq.n	800424c <HAL_TIM_ConfigClockSource+0x15a>
 8004192:	2b10      	cmp	r3, #16
 8004194:	d05a      	beq.n	800424c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004196:	e062      	b.n	800425e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6899      	ldr	r1, [r3, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f000 f97e 	bl	80044a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
      break;
 80041c4:	e04e      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6899      	ldr	r1, [r3, #8]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f000 f967 	bl	80044a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041e8:	609a      	str	r2, [r3, #8]
      break;
 80041ea:	e03b      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f000 f8db 	bl	80043b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2150      	movs	r1, #80	; 0x50
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f934 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800420a:	e02b      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	461a      	mov	r2, r3
 800421a:	f000 f8fa 	bl	8004412 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2160      	movs	r1, #96	; 0x60
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f924 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800422a:	e01b      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	461a      	mov	r2, r3
 800423a:	f000 f8bb 	bl	80043b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2140      	movs	r1, #64	; 0x40
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f914 	bl	8004472 <TIM_ITRx_SetConfig>
      break;
 800424a:	e00b      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 f90b 	bl	8004472 <TIM_ITRx_SetConfig>
        break;
 800425c:	e002      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3d      	ldr	r2, [pc, #244]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3c      	ldr	r2, [pc, #240]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3a      	ldr	r2, [pc, #232]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <TIM_Base_SetConfig+0x114>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d01b      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d017      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800

080043b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 030a 	bic.w	r3, r3, #10
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004412:	b480      	push	{r7}
 8004414:	b087      	sub	sp, #28
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0210 	bic.w	r2, r3, #16
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800444e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	f043 0307 	orr.w	r3, r3, #7
 8004494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	021a      	lsls	r2, r3, #8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e068      	b.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2e      	ldr	r2, [pc, #184]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800453a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01d      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d018      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10c      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40014000 	.word	0x40014000

080045f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e040      	b.n	800468c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fbc8 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8fe 	bl	8004838 <UART_SetConfig>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e022      	b.n	800468c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fb7c 	bl	8004d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fc03 	bl	8004e90 <UART_CheckIdleState>
 800468a:	4603      	mov	r3, r0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	f040 80bf 	bne.w	800482c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Receive+0x26>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0b7      	b.n	800482e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Receive+0x38>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0b0      	b.n	800482e <HAL_UART_Receive+0x19a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2222      	movs	r2, #34	; 0x22
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e8:	f7fc fd8c 	bl	8001204 <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	d10e      	bne.n	8004726 <HAL_UART_Receive+0x92>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_UART_Receive+0x88>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800471a:	e02d      	b.n	8004778 <HAL_UART_Receive+0xe4>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004724:	e028      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_UART_Receive+0xb6>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_Receive+0xac>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800473e:	e01b      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	227f      	movs	r2, #127	; 0x7f
 8004744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004748:	e016      	b.n	8004778 <HAL_UART_Receive+0xe4>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004752:	d10d      	bne.n	8004770 <HAL_UART_Receive+0xdc>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_UART_Receive+0xd2>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	227f      	movs	r2, #127	; 0x7f
 8004760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004764:	e008      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	223f      	movs	r2, #63	; 0x3f
 800476a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800476e:	e003      	b.n	8004778 <HAL_UART_Receive+0xe4>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800477e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004788:	d108      	bne.n	800479c <HAL_UART_Receive+0x108>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e003      	b.n	80047a4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047ac:	e033      	b.n	8004816 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2120      	movs	r1, #32
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fbb2 	bl	8004f22 <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e032      	b.n	800482e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	8a7b      	ldrh	r3, [r7, #18]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	3302      	adds	r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e00d      	b.n	8004804 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8a7b      	ldrh	r3, [r7, #18]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	4013      	ands	r3, r2
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1c5      	bne.n	80047ae <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004838:	b5b0      	push	{r4, r5, r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4313      	orrs	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4bad      	ldr	r3, [pc, #692]	; (8004b18 <UART_SetConfig+0x2e0>)
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	69f9      	ldr	r1, [r7, #28]
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4aa2      	ldr	r2, [pc, #648]	; (8004b1c <UART_SetConfig+0x2e4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	4313      	orrs	r3, r2
 800489e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a99      	ldr	r2, [pc, #612]	; (8004b20 <UART_SetConfig+0x2e8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d121      	bne.n	8004902 <UART_SetConfig+0xca>
 80048be:	4b99      	ldr	r3, [pc, #612]	; (8004b24 <UART_SetConfig+0x2ec>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d817      	bhi.n	80048fc <UART_SetConfig+0xc4>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x9c>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f1 	.word	0x080048f1
 80048dc:	080048eb 	.word	0x080048eb
 80048e0:	080048f7 	.word	0x080048f7
 80048e4:	2301      	movs	r3, #1
 80048e6:	76fb      	strb	r3, [r7, #27]
 80048e8:	e0e7      	b.n	8004aba <UART_SetConfig+0x282>
 80048ea:	2302      	movs	r3, #2
 80048ec:	76fb      	strb	r3, [r7, #27]
 80048ee:	e0e4      	b.n	8004aba <UART_SetConfig+0x282>
 80048f0:	2304      	movs	r3, #4
 80048f2:	76fb      	strb	r3, [r7, #27]
 80048f4:	e0e1      	b.n	8004aba <UART_SetConfig+0x282>
 80048f6:	2308      	movs	r3, #8
 80048f8:	76fb      	strb	r3, [r7, #27]
 80048fa:	e0de      	b.n	8004aba <UART_SetConfig+0x282>
 80048fc:	2310      	movs	r3, #16
 80048fe:	76fb      	strb	r3, [r7, #27]
 8004900:	e0db      	b.n	8004aba <UART_SetConfig+0x282>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a88      	ldr	r2, [pc, #544]	; (8004b28 <UART_SetConfig+0x2f0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d132      	bne.n	8004972 <UART_SetConfig+0x13a>
 800490c:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <UART_SetConfig+0x2ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d828      	bhi.n	800496c <UART_SetConfig+0x134>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0xe8>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004955 	.word	0x08004955
 8004924:	0800496d 	.word	0x0800496d
 8004928:	0800496d 	.word	0x0800496d
 800492c:	0800496d 	.word	0x0800496d
 8004930:	08004961 	.word	0x08004961
 8004934:	0800496d 	.word	0x0800496d
 8004938:	0800496d 	.word	0x0800496d
 800493c:	0800496d 	.word	0x0800496d
 8004940:	0800495b 	.word	0x0800495b
 8004944:	0800496d 	.word	0x0800496d
 8004948:	0800496d 	.word	0x0800496d
 800494c:	0800496d 	.word	0x0800496d
 8004950:	08004967 	.word	0x08004967
 8004954:	2300      	movs	r3, #0
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e0af      	b.n	8004aba <UART_SetConfig+0x282>
 800495a:	2302      	movs	r3, #2
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e0ac      	b.n	8004aba <UART_SetConfig+0x282>
 8004960:	2304      	movs	r3, #4
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e0a9      	b.n	8004aba <UART_SetConfig+0x282>
 8004966:	2308      	movs	r3, #8
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e0a6      	b.n	8004aba <UART_SetConfig+0x282>
 800496c:	2310      	movs	r3, #16
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	e0a3      	b.n	8004aba <UART_SetConfig+0x282>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6d      	ldr	r2, [pc, #436]	; (8004b2c <UART_SetConfig+0x2f4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d120      	bne.n	80049be <UART_SetConfig+0x186>
 800497c:	4b69      	ldr	r3, [pc, #420]	; (8004b24 <UART_SetConfig+0x2ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004986:	2b30      	cmp	r3, #48	; 0x30
 8004988:	d013      	beq.n	80049b2 <UART_SetConfig+0x17a>
 800498a:	2b30      	cmp	r3, #48	; 0x30
 800498c:	d814      	bhi.n	80049b8 <UART_SetConfig+0x180>
 800498e:	2b20      	cmp	r3, #32
 8004990:	d009      	beq.n	80049a6 <UART_SetConfig+0x16e>
 8004992:	2b20      	cmp	r3, #32
 8004994:	d810      	bhi.n	80049b8 <UART_SetConfig+0x180>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <UART_SetConfig+0x168>
 800499a:	2b10      	cmp	r3, #16
 800499c:	d006      	beq.n	80049ac <UART_SetConfig+0x174>
 800499e:	e00b      	b.n	80049b8 <UART_SetConfig+0x180>
 80049a0:	2300      	movs	r3, #0
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	e089      	b.n	8004aba <UART_SetConfig+0x282>
 80049a6:	2302      	movs	r3, #2
 80049a8:	76fb      	strb	r3, [r7, #27]
 80049aa:	e086      	b.n	8004aba <UART_SetConfig+0x282>
 80049ac:	2304      	movs	r3, #4
 80049ae:	76fb      	strb	r3, [r7, #27]
 80049b0:	e083      	b.n	8004aba <UART_SetConfig+0x282>
 80049b2:	2308      	movs	r3, #8
 80049b4:	76fb      	strb	r3, [r7, #27]
 80049b6:	e080      	b.n	8004aba <UART_SetConfig+0x282>
 80049b8:	2310      	movs	r3, #16
 80049ba:	76fb      	strb	r3, [r7, #27]
 80049bc:	e07d      	b.n	8004aba <UART_SetConfig+0x282>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <UART_SetConfig+0x2f8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d120      	bne.n	8004a0a <UART_SetConfig+0x1d2>
 80049c8:	4b56      	ldr	r3, [pc, #344]	; (8004b24 <UART_SetConfig+0x2ec>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049d2:	2bc0      	cmp	r3, #192	; 0xc0
 80049d4:	d013      	beq.n	80049fe <UART_SetConfig+0x1c6>
 80049d6:	2bc0      	cmp	r3, #192	; 0xc0
 80049d8:	d814      	bhi.n	8004a04 <UART_SetConfig+0x1cc>
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d009      	beq.n	80049f2 <UART_SetConfig+0x1ba>
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d810      	bhi.n	8004a04 <UART_SetConfig+0x1cc>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <UART_SetConfig+0x1b4>
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d006      	beq.n	80049f8 <UART_SetConfig+0x1c0>
 80049ea:	e00b      	b.n	8004a04 <UART_SetConfig+0x1cc>
 80049ec:	2300      	movs	r3, #0
 80049ee:	76fb      	strb	r3, [r7, #27]
 80049f0:	e063      	b.n	8004aba <UART_SetConfig+0x282>
 80049f2:	2302      	movs	r3, #2
 80049f4:	76fb      	strb	r3, [r7, #27]
 80049f6:	e060      	b.n	8004aba <UART_SetConfig+0x282>
 80049f8:	2304      	movs	r3, #4
 80049fa:	76fb      	strb	r3, [r7, #27]
 80049fc:	e05d      	b.n	8004aba <UART_SetConfig+0x282>
 80049fe:	2308      	movs	r3, #8
 8004a00:	76fb      	strb	r3, [r7, #27]
 8004a02:	e05a      	b.n	8004aba <UART_SetConfig+0x282>
 8004a04:	2310      	movs	r3, #16
 8004a06:	76fb      	strb	r3, [r7, #27]
 8004a08:	e057      	b.n	8004aba <UART_SetConfig+0x282>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a49      	ldr	r2, [pc, #292]	; (8004b34 <UART_SetConfig+0x2fc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d125      	bne.n	8004a60 <UART_SetConfig+0x228>
 8004a14:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <UART_SetConfig+0x2ec>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a22:	d017      	beq.n	8004a54 <UART_SetConfig+0x21c>
 8004a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a28:	d817      	bhi.n	8004a5a <UART_SetConfig+0x222>
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2e:	d00b      	beq.n	8004a48 <UART_SetConfig+0x210>
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a34:	d811      	bhi.n	8004a5a <UART_SetConfig+0x222>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <UART_SetConfig+0x20a>
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d006      	beq.n	8004a4e <UART_SetConfig+0x216>
 8004a40:	e00b      	b.n	8004a5a <UART_SetConfig+0x222>
 8004a42:	2300      	movs	r3, #0
 8004a44:	76fb      	strb	r3, [r7, #27]
 8004a46:	e038      	b.n	8004aba <UART_SetConfig+0x282>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	76fb      	strb	r3, [r7, #27]
 8004a4c:	e035      	b.n	8004aba <UART_SetConfig+0x282>
 8004a4e:	2304      	movs	r3, #4
 8004a50:	76fb      	strb	r3, [r7, #27]
 8004a52:	e032      	b.n	8004aba <UART_SetConfig+0x282>
 8004a54:	2308      	movs	r3, #8
 8004a56:	76fb      	strb	r3, [r7, #27]
 8004a58:	e02f      	b.n	8004aba <UART_SetConfig+0x282>
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	76fb      	strb	r3, [r7, #27]
 8004a5e:	e02c      	b.n	8004aba <UART_SetConfig+0x282>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <UART_SetConfig+0x2e4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d125      	bne.n	8004ab6 <UART_SetConfig+0x27e>
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <UART_SetConfig+0x2ec>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a78:	d017      	beq.n	8004aaa <UART_SetConfig+0x272>
 8004a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a7e:	d817      	bhi.n	8004ab0 <UART_SetConfig+0x278>
 8004a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a84:	d00b      	beq.n	8004a9e <UART_SetConfig+0x266>
 8004a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8a:	d811      	bhi.n	8004ab0 <UART_SetConfig+0x278>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <UART_SetConfig+0x260>
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d006      	beq.n	8004aa4 <UART_SetConfig+0x26c>
 8004a96:	e00b      	b.n	8004ab0 <UART_SetConfig+0x278>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	76fb      	strb	r3, [r7, #27]
 8004a9c:	e00d      	b.n	8004aba <UART_SetConfig+0x282>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	76fb      	strb	r3, [r7, #27]
 8004aa2:	e00a      	b.n	8004aba <UART_SetConfig+0x282>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	76fb      	strb	r3, [r7, #27]
 8004aa8:	e007      	b.n	8004aba <UART_SetConfig+0x282>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	76fb      	strb	r3, [r7, #27]
 8004aae:	e004      	b.n	8004aba <UART_SetConfig+0x282>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	76fb      	strb	r3, [r7, #27]
 8004ab4:	e001      	b.n	8004aba <UART_SetConfig+0x282>
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <UART_SetConfig+0x2e4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	f040 8087 	bne.w	8004bd4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ac6:	7efb      	ldrb	r3, [r7, #27]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d837      	bhi.n	8004b3c <UART_SetConfig+0x304>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x29c>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b3d 	.word	0x08004b3d
 8004ae4:	08004b07 	.word	0x08004b07
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b3d 	.word	0x08004b3d
 8004af4:	08004b0f 	.word	0x08004b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fd5c 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004afc:	6178      	str	r0, [r7, #20]
        break;
 8004afe:	e022      	b.n	8004b46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <UART_SetConfig+0x300>)
 8004b02:	617b      	str	r3, [r7, #20]
        break;
 8004b04:	e01f      	b.n	8004b46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b06:	f7fe fcbd 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8004b0a:	6178      	str	r0, [r7, #20]
        break;
 8004b0c:	e01b      	b.n	8004b46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b12:	617b      	str	r3, [r7, #20]
        break;
 8004b14:	e017      	b.n	8004b46 <UART_SetConfig+0x30e>
 8004b16:	bf00      	nop
 8004b18:	efff69f3 	.word	0xefff69f3
 8004b1c:	40008000 	.word	0x40008000
 8004b20:	40013800 	.word	0x40013800
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	76bb      	strb	r3, [r7, #26]
        break;
 8004b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80f1 	beq.w	8004d30 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d305      	bcc.n	8004b6a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d902      	bls.n	8004b70 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	76bb      	strb	r3, [r7, #26]
 8004b6e:	e0df      	b.n	8004d30 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f04f 0100 	mov.w	r1, #0
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	020b      	lsls	r3, r1, #8
 8004b82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b86:	0202      	lsls	r2, r0, #8
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	6849      	ldr	r1, [r1, #4]
 8004b8c:	0849      	lsrs	r1, r1, #1
 8004b8e:	4608      	mov	r0, r1
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	1814      	adds	r4, r2, r0
 8004b96:	eb43 0501 	adc.w	r5, r3, r1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7fb fb62 	bl	8000270 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bba:	d308      	bcc.n	8004bce <UART_SetConfig+0x396>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc2:	d204      	bcs.n	8004bce <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	e0b0      	b.n	8004d30 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	76bb      	strb	r3, [r7, #26]
 8004bd2:	e0ad      	b.n	8004d30 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d15c      	bne.n	8004c98 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004bde:	7efb      	ldrb	r3, [r7, #27]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d828      	bhi.n	8004c36 <UART_SetConfig+0x3fe>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0x3b4>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c10:	f7fe fcd0 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004c14:	6178      	str	r0, [r7, #20]
        break;
 8004c16:	e013      	b.n	8004c40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7fe fce2 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	6178      	str	r0, [r7, #20]
        break;
 8004c1e:	e00f      	b.n	8004c40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <UART_SetConfig+0x510>)
 8004c22:	617b      	str	r3, [r7, #20]
        break;
 8004c24:	e00c      	b.n	8004c40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7fe fc2d 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8004c2a:	6178      	str	r0, [r7, #20]
        break;
 8004c2c:	e008      	b.n	8004c40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	617b      	str	r3, [r7, #20]
        break;
 8004c34:	e004      	b.n	8004c40 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d074      	beq.n	8004d30 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	005a      	lsls	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	441a      	add	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b0f      	cmp	r3, #15
 8004c62:	d916      	bls.n	8004c92 <UART_SetConfig+0x45a>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6a:	d212      	bcs.n	8004c92 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f023 030f 	bic.w	r3, r3, #15
 8004c74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	89fb      	ldrh	r3, [r7, #14]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	89fa      	ldrh	r2, [r7, #14]
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	e04e      	b.n	8004d30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	76bb      	strb	r3, [r7, #26]
 8004c96:	e04b      	b.n	8004d30 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c98:	7efb      	ldrb	r3, [r7, #27]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d827      	bhi.n	8004cee <UART_SetConfig+0x4b6>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x46c>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cd9 	.word	0x08004cd9
 8004cb0:	08004cef 	.word	0x08004cef
 8004cb4:	08004cdf 	.word	0x08004cdf
 8004cb8:	08004cef 	.word	0x08004cef
 8004cbc:	08004cef 	.word	0x08004cef
 8004cc0:	08004cef 	.word	0x08004cef
 8004cc4:	08004ce7 	.word	0x08004ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc8:	f7fe fc74 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004ccc:	6178      	str	r0, [r7, #20]
        break;
 8004cce:	e013      	b.n	8004cf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7fe fc86 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004cd4:	6178      	str	r0, [r7, #20]
        break;
 8004cd6:	e00f      	b.n	8004cf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <UART_SetConfig+0x510>)
 8004cda:	617b      	str	r3, [r7, #20]
        break;
 8004cdc:	e00c      	b.n	8004cf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cde:	f7fe fbd1 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8004ce2:	6178      	str	r0, [r7, #20]
        break;
 8004ce4:	e008      	b.n	8004cf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cea:	617b      	str	r3, [r7, #20]
        break;
 8004cec:	e004      	b.n	8004cf8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	76bb      	strb	r3, [r7, #26]
        break;
 8004cf6:	bf00      	nop
    }

    if (pclk != 0U)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d018      	beq.n	8004d30 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	085a      	lsrs	r2, r3, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	441a      	add	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d908      	bls.n	8004d2c <UART_SetConfig+0x4f4>
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d204      	bcs.n	8004d2c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	e001      	b.n	8004d30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bdb0      	pop	{r4, r5, r7, pc}
 8004d46:	bf00      	nop
 8004d48:	00f42400 	.word	0x00f42400

08004d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d10a      	bne.n	8004e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ea0:	f7fc f9b0 	bl	8001204 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d10e      	bne.n	8004ed2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f82d 	bl	8004f22 <UART_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e023      	b.n	8004f1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d10e      	bne.n	8004efe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f817 	bl	8004f22 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e00d      	b.n	8004f1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	e05e      	b.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d05a      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3c:	f7fc f962 	bl	8001204 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11b      	bne.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e043      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02c      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa6:	d124      	bne.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fb0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fc0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e00f      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	429a      	cmp	r2, r3
 800500e:	d091      	beq.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000010 	.word	0x20000010

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4d0d      	ldr	r5, [pc, #52]	; (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2600      	movs	r6, #0
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4d0b      	ldr	r5, [pc, #44]	; (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <__libc_init_array+0x44>)
 800503c:	f000 ffec 	bl	8006018 <_init>
 8005040:	1b64      	subs	r4, r4, r5
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2600      	movs	r6, #0
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	08006130 	.word	0x08006130
 8005064:	08006130 	.word	0x08006130
 8005068:	08006130 	.word	0x08006130
 800506c:	08006134 	.word	0x08006134

08005070 <memset>:
 8005070:	4402      	add	r2, r0
 8005072:	4603      	mov	r3, r0
 8005074:	4293      	cmp	r3, r2
 8005076:	d100      	bne.n	800507a <memset+0xa>
 8005078:	4770      	bx	lr
 800507a:	f803 1b01 	strb.w	r1, [r3], #1
 800507e:	e7f9      	b.n	8005074 <memset+0x4>

08005080 <iprintf>:
 8005080:	b40f      	push	{r0, r1, r2, r3}
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <iprintf+0x2c>)
 8005084:	b513      	push	{r0, r1, r4, lr}
 8005086:	681c      	ldr	r4, [r3, #0]
 8005088:	b124      	cbz	r4, 8005094 <iprintf+0x14>
 800508a:	69a3      	ldr	r3, [r4, #24]
 800508c:	b913      	cbnz	r3, 8005094 <iprintf+0x14>
 800508e:	4620      	mov	r0, r4
 8005090:	f000 fa5e 	bl	8005550 <__sinit>
 8005094:	ab05      	add	r3, sp, #20
 8005096:	9a04      	ldr	r2, [sp, #16]
 8005098:	68a1      	ldr	r1, [r4, #8]
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	4620      	mov	r0, r4
 800509e:	f000 fc2f 	bl	8005900 <_vfiprintf_r>
 80050a2:	b002      	add	sp, #8
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	b004      	add	sp, #16
 80050aa:	4770      	bx	lr
 80050ac:	20000010 	.word	0x20000010

080050b0 <_puts_r>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	460e      	mov	r6, r1
 80050b4:	4605      	mov	r5, r0
 80050b6:	b118      	cbz	r0, 80050c0 <_puts_r+0x10>
 80050b8:	6983      	ldr	r3, [r0, #24]
 80050ba:	b90b      	cbnz	r3, 80050c0 <_puts_r+0x10>
 80050bc:	f000 fa48 	bl	8005550 <__sinit>
 80050c0:	69ab      	ldr	r3, [r5, #24]
 80050c2:	68ac      	ldr	r4, [r5, #8]
 80050c4:	b913      	cbnz	r3, 80050cc <_puts_r+0x1c>
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 fa42 	bl	8005550 <__sinit>
 80050cc:	4b2c      	ldr	r3, [pc, #176]	; (8005180 <_puts_r+0xd0>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d120      	bne.n	8005114 <_puts_r+0x64>
 80050d2:	686c      	ldr	r4, [r5, #4]
 80050d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050d6:	07db      	lsls	r3, r3, #31
 80050d8:	d405      	bmi.n	80050e6 <_puts_r+0x36>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	0598      	lsls	r0, r3, #22
 80050de:	d402      	bmi.n	80050e6 <_puts_r+0x36>
 80050e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050e2:	f000 fad3 	bl	800568c <__retarget_lock_acquire_recursive>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	0719      	lsls	r1, r3, #28
 80050ea:	d51d      	bpl.n	8005128 <_puts_r+0x78>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	b1db      	cbz	r3, 8005128 <_puts_r+0x78>
 80050f0:	3e01      	subs	r6, #1
 80050f2:	68a3      	ldr	r3, [r4, #8]
 80050f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050f8:	3b01      	subs	r3, #1
 80050fa:	60a3      	str	r3, [r4, #8]
 80050fc:	bb39      	cbnz	r1, 800514e <_puts_r+0x9e>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	da38      	bge.n	8005174 <_puts_r+0xc4>
 8005102:	4622      	mov	r2, r4
 8005104:	210a      	movs	r1, #10
 8005106:	4628      	mov	r0, r5
 8005108:	f000 f848 	bl	800519c <__swbuf_r>
 800510c:	3001      	adds	r0, #1
 800510e:	d011      	beq.n	8005134 <_puts_r+0x84>
 8005110:	250a      	movs	r5, #10
 8005112:	e011      	b.n	8005138 <_puts_r+0x88>
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <_puts_r+0xd4>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d101      	bne.n	800511e <_puts_r+0x6e>
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	e7da      	b.n	80050d4 <_puts_r+0x24>
 800511e:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <_puts_r+0xd8>)
 8005120:	429c      	cmp	r4, r3
 8005122:	bf08      	it	eq
 8005124:	68ec      	ldreq	r4, [r5, #12]
 8005126:	e7d5      	b.n	80050d4 <_puts_r+0x24>
 8005128:	4621      	mov	r1, r4
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f888 	bl	8005240 <__swsetup_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	d0dd      	beq.n	80050f0 <_puts_r+0x40>
 8005134:	f04f 35ff 	mov.w	r5, #4294967295
 8005138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800513a:	07da      	lsls	r2, r3, #31
 800513c:	d405      	bmi.n	800514a <_puts_r+0x9a>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	059b      	lsls	r3, r3, #22
 8005142:	d402      	bmi.n	800514a <_puts_r+0x9a>
 8005144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005146:	f000 faa2 	bl	800568e <__retarget_lock_release_recursive>
 800514a:	4628      	mov	r0, r5
 800514c:	bd70      	pop	{r4, r5, r6, pc}
 800514e:	2b00      	cmp	r3, #0
 8005150:	da04      	bge.n	800515c <_puts_r+0xac>
 8005152:	69a2      	ldr	r2, [r4, #24]
 8005154:	429a      	cmp	r2, r3
 8005156:	dc06      	bgt.n	8005166 <_puts_r+0xb6>
 8005158:	290a      	cmp	r1, #10
 800515a:	d004      	beq.n	8005166 <_puts_r+0xb6>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	6022      	str	r2, [r4, #0]
 8005162:	7019      	strb	r1, [r3, #0]
 8005164:	e7c5      	b.n	80050f2 <_puts_r+0x42>
 8005166:	4622      	mov	r2, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f817 	bl	800519c <__swbuf_r>
 800516e:	3001      	adds	r0, #1
 8005170:	d1bf      	bne.n	80050f2 <_puts_r+0x42>
 8005172:	e7df      	b.n	8005134 <_puts_r+0x84>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	250a      	movs	r5, #10
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	6022      	str	r2, [r4, #0]
 800517c:	701d      	strb	r5, [r3, #0]
 800517e:	e7db      	b.n	8005138 <_puts_r+0x88>
 8005180:	080060b4 	.word	0x080060b4
 8005184:	080060d4 	.word	0x080060d4
 8005188:	08006094 	.word	0x08006094

0800518c <puts>:
 800518c:	4b02      	ldr	r3, [pc, #8]	; (8005198 <puts+0xc>)
 800518e:	4601      	mov	r1, r0
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	f7ff bf8d 	b.w	80050b0 <_puts_r>
 8005196:	bf00      	nop
 8005198:	20000010 	.word	0x20000010

0800519c <__swbuf_r>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	460e      	mov	r6, r1
 80051a0:	4614      	mov	r4, r2
 80051a2:	4605      	mov	r5, r0
 80051a4:	b118      	cbz	r0, 80051ae <__swbuf_r+0x12>
 80051a6:	6983      	ldr	r3, [r0, #24]
 80051a8:	b90b      	cbnz	r3, 80051ae <__swbuf_r+0x12>
 80051aa:	f000 f9d1 	bl	8005550 <__sinit>
 80051ae:	4b21      	ldr	r3, [pc, #132]	; (8005234 <__swbuf_r+0x98>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	d12b      	bne.n	800520c <__swbuf_r+0x70>
 80051b4:	686c      	ldr	r4, [r5, #4]
 80051b6:	69a3      	ldr	r3, [r4, #24]
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	071a      	lsls	r2, r3, #28
 80051be:	d52f      	bpl.n	8005220 <__swbuf_r+0x84>
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	b36b      	cbz	r3, 8005220 <__swbuf_r+0x84>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	1ac0      	subs	r0, r0, r3
 80051ca:	6963      	ldr	r3, [r4, #20]
 80051cc:	b2f6      	uxtb	r6, r6
 80051ce:	4283      	cmp	r3, r0
 80051d0:	4637      	mov	r7, r6
 80051d2:	dc04      	bgt.n	80051de <__swbuf_r+0x42>
 80051d4:	4621      	mov	r1, r4
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 f926 	bl	8005428 <_fflush_r>
 80051dc:	bb30      	cbnz	r0, 800522c <__swbuf_r+0x90>
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	60a3      	str	r3, [r4, #8]
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	6022      	str	r2, [r4, #0]
 80051ea:	701e      	strb	r6, [r3, #0]
 80051ec:	6963      	ldr	r3, [r4, #20]
 80051ee:	3001      	adds	r0, #1
 80051f0:	4283      	cmp	r3, r0
 80051f2:	d004      	beq.n	80051fe <__swbuf_r+0x62>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	07db      	lsls	r3, r3, #31
 80051f8:	d506      	bpl.n	8005208 <__swbuf_r+0x6c>
 80051fa:	2e0a      	cmp	r6, #10
 80051fc:	d104      	bne.n	8005208 <__swbuf_r+0x6c>
 80051fe:	4621      	mov	r1, r4
 8005200:	4628      	mov	r0, r5
 8005202:	f000 f911 	bl	8005428 <_fflush_r>
 8005206:	b988      	cbnz	r0, 800522c <__swbuf_r+0x90>
 8005208:	4638      	mov	r0, r7
 800520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <__swbuf_r+0x9c>)
 800520e:	429c      	cmp	r4, r3
 8005210:	d101      	bne.n	8005216 <__swbuf_r+0x7a>
 8005212:	68ac      	ldr	r4, [r5, #8]
 8005214:	e7cf      	b.n	80051b6 <__swbuf_r+0x1a>
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <__swbuf_r+0xa0>)
 8005218:	429c      	cmp	r4, r3
 800521a:	bf08      	it	eq
 800521c:	68ec      	ldreq	r4, [r5, #12]
 800521e:	e7ca      	b.n	80051b6 <__swbuf_r+0x1a>
 8005220:	4621      	mov	r1, r4
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f80c 	bl	8005240 <__swsetup_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	d0cb      	beq.n	80051c4 <__swbuf_r+0x28>
 800522c:	f04f 37ff 	mov.w	r7, #4294967295
 8005230:	e7ea      	b.n	8005208 <__swbuf_r+0x6c>
 8005232:	bf00      	nop
 8005234:	080060b4 	.word	0x080060b4
 8005238:	080060d4 	.word	0x080060d4
 800523c:	08006094 	.word	0x08006094

08005240 <__swsetup_r>:
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <__swsetup_r+0xcc>)
 8005242:	b570      	push	{r4, r5, r6, lr}
 8005244:	681d      	ldr	r5, [r3, #0]
 8005246:	4606      	mov	r6, r0
 8005248:	460c      	mov	r4, r1
 800524a:	b125      	cbz	r5, 8005256 <__swsetup_r+0x16>
 800524c:	69ab      	ldr	r3, [r5, #24]
 800524e:	b913      	cbnz	r3, 8005256 <__swsetup_r+0x16>
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f97d 	bl	8005550 <__sinit>
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <__swsetup_r+0xd0>)
 8005258:	429c      	cmp	r4, r3
 800525a:	d10f      	bne.n	800527c <__swsetup_r+0x3c>
 800525c:	686c      	ldr	r4, [r5, #4]
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005264:	0719      	lsls	r1, r3, #28
 8005266:	d42c      	bmi.n	80052c2 <__swsetup_r+0x82>
 8005268:	06dd      	lsls	r5, r3, #27
 800526a:	d411      	bmi.n	8005290 <__swsetup_r+0x50>
 800526c:	2309      	movs	r3, #9
 800526e:	6033      	str	r3, [r6, #0]
 8005270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	e03e      	b.n	80052fa <__swsetup_r+0xba>
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <__swsetup_r+0xd4>)
 800527e:	429c      	cmp	r4, r3
 8005280:	d101      	bne.n	8005286 <__swsetup_r+0x46>
 8005282:	68ac      	ldr	r4, [r5, #8]
 8005284:	e7eb      	b.n	800525e <__swsetup_r+0x1e>
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <__swsetup_r+0xd8>)
 8005288:	429c      	cmp	r4, r3
 800528a:	bf08      	it	eq
 800528c:	68ec      	ldreq	r4, [r5, #12]
 800528e:	e7e6      	b.n	800525e <__swsetup_r+0x1e>
 8005290:	0758      	lsls	r0, r3, #29
 8005292:	d512      	bpl.n	80052ba <__swsetup_r+0x7a>
 8005294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005296:	b141      	cbz	r1, 80052aa <__swsetup_r+0x6a>
 8005298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800529c:	4299      	cmp	r1, r3
 800529e:	d002      	beq.n	80052a6 <__swsetup_r+0x66>
 80052a0:	4630      	mov	r0, r6
 80052a2:	f000 fa59 	bl	8005758 <_free_r>
 80052a6:	2300      	movs	r3, #0
 80052a8:	6363      	str	r3, [r4, #52]	; 0x34
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6063      	str	r3, [r4, #4]
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	81a3      	strh	r3, [r4, #12]
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	b94b      	cbnz	r3, 80052da <__swsetup_r+0x9a>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d003      	beq.n	80052da <__swsetup_r+0x9a>
 80052d2:	4621      	mov	r1, r4
 80052d4:	4630      	mov	r0, r6
 80052d6:	f000 f9ff 	bl	80056d8 <__smakebuf_r>
 80052da:	89a0      	ldrh	r0, [r4, #12]
 80052dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052e0:	f010 0301 	ands.w	r3, r0, #1
 80052e4:	d00a      	beq.n	80052fc <__swsetup_r+0xbc>
 80052e6:	2300      	movs	r3, #0
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	6963      	ldr	r3, [r4, #20]
 80052ec:	425b      	negs	r3, r3
 80052ee:	61a3      	str	r3, [r4, #24]
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	b943      	cbnz	r3, 8005306 <__swsetup_r+0xc6>
 80052f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052f8:	d1ba      	bne.n	8005270 <__swsetup_r+0x30>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	0781      	lsls	r1, r0, #30
 80052fe:	bf58      	it	pl
 8005300:	6963      	ldrpl	r3, [r4, #20]
 8005302:	60a3      	str	r3, [r4, #8]
 8005304:	e7f4      	b.n	80052f0 <__swsetup_r+0xb0>
 8005306:	2000      	movs	r0, #0
 8005308:	e7f7      	b.n	80052fa <__swsetup_r+0xba>
 800530a:	bf00      	nop
 800530c:	20000010 	.word	0x20000010
 8005310:	080060b4 	.word	0x080060b4
 8005314:	080060d4 	.word	0x080060d4
 8005318:	08006094 	.word	0x08006094

0800531c <__sflush_r>:
 800531c:	898a      	ldrh	r2, [r1, #12]
 800531e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005322:	4605      	mov	r5, r0
 8005324:	0710      	lsls	r0, r2, #28
 8005326:	460c      	mov	r4, r1
 8005328:	d458      	bmi.n	80053dc <__sflush_r+0xc0>
 800532a:	684b      	ldr	r3, [r1, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dc05      	bgt.n	800533c <__sflush_r+0x20>
 8005330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	dc02      	bgt.n	800533c <__sflush_r+0x20>
 8005336:	2000      	movs	r0, #0
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800533e:	2e00      	cmp	r6, #0
 8005340:	d0f9      	beq.n	8005336 <__sflush_r+0x1a>
 8005342:	2300      	movs	r3, #0
 8005344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005348:	682f      	ldr	r7, [r5, #0]
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	d032      	beq.n	80053b4 <__sflush_r+0x98>
 800534e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	075a      	lsls	r2, r3, #29
 8005354:	d505      	bpl.n	8005362 <__sflush_r+0x46>
 8005356:	6863      	ldr	r3, [r4, #4]
 8005358:	1ac0      	subs	r0, r0, r3
 800535a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800535c:	b10b      	cbz	r3, 8005362 <__sflush_r+0x46>
 800535e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005360:	1ac0      	subs	r0, r0, r3
 8005362:	2300      	movs	r3, #0
 8005364:	4602      	mov	r2, r0
 8005366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005368:	6a21      	ldr	r1, [r4, #32]
 800536a:	4628      	mov	r0, r5
 800536c:	47b0      	blx	r6
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	d106      	bne.n	8005382 <__sflush_r+0x66>
 8005374:	6829      	ldr	r1, [r5, #0]
 8005376:	291d      	cmp	r1, #29
 8005378:	d82c      	bhi.n	80053d4 <__sflush_r+0xb8>
 800537a:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <__sflush_r+0x108>)
 800537c:	40ca      	lsrs	r2, r1
 800537e:	07d6      	lsls	r6, r2, #31
 8005380:	d528      	bpl.n	80053d4 <__sflush_r+0xb8>
 8005382:	2200      	movs	r2, #0
 8005384:	6062      	str	r2, [r4, #4]
 8005386:	04d9      	lsls	r1, r3, #19
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	6022      	str	r2, [r4, #0]
 800538c:	d504      	bpl.n	8005398 <__sflush_r+0x7c>
 800538e:	1c42      	adds	r2, r0, #1
 8005390:	d101      	bne.n	8005396 <__sflush_r+0x7a>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	b903      	cbnz	r3, 8005398 <__sflush_r+0x7c>
 8005396:	6560      	str	r0, [r4, #84]	; 0x54
 8005398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539a:	602f      	str	r7, [r5, #0]
 800539c:	2900      	cmp	r1, #0
 800539e:	d0ca      	beq.n	8005336 <__sflush_r+0x1a>
 80053a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053a4:	4299      	cmp	r1, r3
 80053a6:	d002      	beq.n	80053ae <__sflush_r+0x92>
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 f9d5 	bl	8005758 <_free_r>
 80053ae:	2000      	movs	r0, #0
 80053b0:	6360      	str	r0, [r4, #52]	; 0x34
 80053b2:	e7c1      	b.n	8005338 <__sflush_r+0x1c>
 80053b4:	6a21      	ldr	r1, [r4, #32]
 80053b6:	2301      	movs	r3, #1
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b0      	blx	r6
 80053bc:	1c41      	adds	r1, r0, #1
 80053be:	d1c7      	bne.n	8005350 <__sflush_r+0x34>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0c4      	beq.n	8005350 <__sflush_r+0x34>
 80053c6:	2b1d      	cmp	r3, #29
 80053c8:	d001      	beq.n	80053ce <__sflush_r+0xb2>
 80053ca:	2b16      	cmp	r3, #22
 80053cc:	d101      	bne.n	80053d2 <__sflush_r+0xb6>
 80053ce:	602f      	str	r7, [r5, #0]
 80053d0:	e7b1      	b.n	8005336 <__sflush_r+0x1a>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	e7ad      	b.n	8005338 <__sflush_r+0x1c>
 80053dc:	690f      	ldr	r7, [r1, #16]
 80053de:	2f00      	cmp	r7, #0
 80053e0:	d0a9      	beq.n	8005336 <__sflush_r+0x1a>
 80053e2:	0793      	lsls	r3, r2, #30
 80053e4:	680e      	ldr	r6, [r1, #0]
 80053e6:	bf08      	it	eq
 80053e8:	694b      	ldreq	r3, [r1, #20]
 80053ea:	600f      	str	r7, [r1, #0]
 80053ec:	bf18      	it	ne
 80053ee:	2300      	movne	r3, #0
 80053f0:	eba6 0807 	sub.w	r8, r6, r7
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	f1b8 0f00 	cmp.w	r8, #0
 80053fa:	dd9c      	ble.n	8005336 <__sflush_r+0x1a>
 80053fc:	6a21      	ldr	r1, [r4, #32]
 80053fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005400:	4643      	mov	r3, r8
 8005402:	463a      	mov	r2, r7
 8005404:	4628      	mov	r0, r5
 8005406:	47b0      	blx	r6
 8005408:	2800      	cmp	r0, #0
 800540a:	dc06      	bgt.n	800541a <__sflush_r+0xfe>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e78e      	b.n	8005338 <__sflush_r+0x1c>
 800541a:	4407      	add	r7, r0
 800541c:	eba8 0800 	sub.w	r8, r8, r0
 8005420:	e7e9      	b.n	80053f6 <__sflush_r+0xda>
 8005422:	bf00      	nop
 8005424:	20400001 	.word	0x20400001

08005428 <_fflush_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	4605      	mov	r5, r0
 800542e:	460c      	mov	r4, r1
 8005430:	b913      	cbnz	r3, 8005438 <_fflush_r+0x10>
 8005432:	2500      	movs	r5, #0
 8005434:	4628      	mov	r0, r5
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	b118      	cbz	r0, 8005442 <_fflush_r+0x1a>
 800543a:	6983      	ldr	r3, [r0, #24]
 800543c:	b90b      	cbnz	r3, 8005442 <_fflush_r+0x1a>
 800543e:	f000 f887 	bl	8005550 <__sinit>
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <_fflush_r+0x6c>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d11b      	bne.n	8005480 <_fflush_r+0x58>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ef      	beq.n	8005432 <_fflush_r+0xa>
 8005452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005454:	07d0      	lsls	r0, r2, #31
 8005456:	d404      	bmi.n	8005462 <_fflush_r+0x3a>
 8005458:	0599      	lsls	r1, r3, #22
 800545a:	d402      	bmi.n	8005462 <_fflush_r+0x3a>
 800545c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545e:	f000 f915 	bl	800568c <__retarget_lock_acquire_recursive>
 8005462:	4628      	mov	r0, r5
 8005464:	4621      	mov	r1, r4
 8005466:	f7ff ff59 	bl	800531c <__sflush_r>
 800546a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800546c:	07da      	lsls	r2, r3, #31
 800546e:	4605      	mov	r5, r0
 8005470:	d4e0      	bmi.n	8005434 <_fflush_r+0xc>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	059b      	lsls	r3, r3, #22
 8005476:	d4dd      	bmi.n	8005434 <_fflush_r+0xc>
 8005478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547a:	f000 f908 	bl	800568e <__retarget_lock_release_recursive>
 800547e:	e7d9      	b.n	8005434 <_fflush_r+0xc>
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <_fflush_r+0x70>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d101      	bne.n	800548a <_fflush_r+0x62>
 8005486:	68ac      	ldr	r4, [r5, #8]
 8005488:	e7df      	b.n	800544a <_fflush_r+0x22>
 800548a:	4b04      	ldr	r3, [pc, #16]	; (800549c <_fflush_r+0x74>)
 800548c:	429c      	cmp	r4, r3
 800548e:	bf08      	it	eq
 8005490:	68ec      	ldreq	r4, [r5, #12]
 8005492:	e7da      	b.n	800544a <_fflush_r+0x22>
 8005494:	080060b4 	.word	0x080060b4
 8005498:	080060d4 	.word	0x080060d4
 800549c:	08006094 	.word	0x08006094

080054a0 <std>:
 80054a0:	2300      	movs	r3, #0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	e9c0 3300 	strd	r3, r3, [r0]
 80054aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ae:	6083      	str	r3, [r0, #8]
 80054b0:	8181      	strh	r1, [r0, #12]
 80054b2:	6643      	str	r3, [r0, #100]	; 0x64
 80054b4:	81c2      	strh	r2, [r0, #14]
 80054b6:	6183      	str	r3, [r0, #24]
 80054b8:	4619      	mov	r1, r3
 80054ba:	2208      	movs	r2, #8
 80054bc:	305c      	adds	r0, #92	; 0x5c
 80054be:	f7ff fdd7 	bl	8005070 <memset>
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <std+0x38>)
 80054c4:	6263      	str	r3, [r4, #36]	; 0x24
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <std+0x3c>)
 80054c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <std+0x40>)
 80054cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <std+0x44>)
 80054d0:	6224      	str	r4, [r4, #32]
 80054d2:	6323      	str	r3, [r4, #48]	; 0x30
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	08005ea9 	.word	0x08005ea9
 80054dc:	08005ecb 	.word	0x08005ecb
 80054e0:	08005f03 	.word	0x08005f03
 80054e4:	08005f27 	.word	0x08005f27

080054e8 <_cleanup_r>:
 80054e8:	4901      	ldr	r1, [pc, #4]	; (80054f0 <_cleanup_r+0x8>)
 80054ea:	f000 b8af 	b.w	800564c <_fwalk_reent>
 80054ee:	bf00      	nop
 80054f0:	08005429 	.word	0x08005429

080054f4 <__sfmoreglue>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	1e4a      	subs	r2, r1, #1
 80054f8:	2568      	movs	r5, #104	; 0x68
 80054fa:	4355      	muls	r5, r2
 80054fc:	460e      	mov	r6, r1
 80054fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005502:	f000 f979 	bl	80057f8 <_malloc_r>
 8005506:	4604      	mov	r4, r0
 8005508:	b140      	cbz	r0, 800551c <__sfmoreglue+0x28>
 800550a:	2100      	movs	r1, #0
 800550c:	e9c0 1600 	strd	r1, r6, [r0]
 8005510:	300c      	adds	r0, #12
 8005512:	60a0      	str	r0, [r4, #8]
 8005514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005518:	f7ff fdaa 	bl	8005070 <memset>
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}

08005520 <__sfp_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__sfp_lock_acquire+0x8>)
 8005522:	f000 b8b3 	b.w	800568c <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	200002b0 	.word	0x200002b0

0800552c <__sfp_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__sfp_lock_release+0x8>)
 800552e:	f000 b8ae 	b.w	800568e <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	200002b0 	.word	0x200002b0

08005538 <__sinit_lock_acquire>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__sinit_lock_acquire+0x8>)
 800553a:	f000 b8a7 	b.w	800568c <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	200002ab 	.word	0x200002ab

08005544 <__sinit_lock_release>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__sinit_lock_release+0x8>)
 8005546:	f000 b8a2 	b.w	800568e <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	200002ab 	.word	0x200002ab

08005550 <__sinit>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	f7ff fff0 	bl	8005538 <__sinit_lock_acquire>
 8005558:	69a3      	ldr	r3, [r4, #24]
 800555a:	b11b      	cbz	r3, 8005564 <__sinit+0x14>
 800555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005560:	f7ff bff0 	b.w	8005544 <__sinit_lock_release>
 8005564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005568:	6523      	str	r3, [r4, #80]	; 0x50
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <__sinit+0x68>)
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <__sinit+0x6c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	62a2      	str	r2, [r4, #40]	; 0x28
 8005572:	42a3      	cmp	r3, r4
 8005574:	bf04      	itt	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	61a3      	streq	r3, [r4, #24]
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f820 	bl	80055c0 <__sfp>
 8005580:	6060      	str	r0, [r4, #4]
 8005582:	4620      	mov	r0, r4
 8005584:	f000 f81c 	bl	80055c0 <__sfp>
 8005588:	60a0      	str	r0, [r4, #8]
 800558a:	4620      	mov	r0, r4
 800558c:	f000 f818 	bl	80055c0 <__sfp>
 8005590:	2200      	movs	r2, #0
 8005592:	60e0      	str	r0, [r4, #12]
 8005594:	2104      	movs	r1, #4
 8005596:	6860      	ldr	r0, [r4, #4]
 8005598:	f7ff ff82 	bl	80054a0 <std>
 800559c:	68a0      	ldr	r0, [r4, #8]
 800559e:	2201      	movs	r2, #1
 80055a0:	2109      	movs	r1, #9
 80055a2:	f7ff ff7d 	bl	80054a0 <std>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	2202      	movs	r2, #2
 80055aa:	2112      	movs	r1, #18
 80055ac:	f7ff ff78 	bl	80054a0 <std>
 80055b0:	2301      	movs	r3, #1
 80055b2:	61a3      	str	r3, [r4, #24]
 80055b4:	e7d2      	b.n	800555c <__sinit+0xc>
 80055b6:	bf00      	nop
 80055b8:	08006090 	.word	0x08006090
 80055bc:	080054e9 	.word	0x080054e9

080055c0 <__sfp>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	4607      	mov	r7, r0
 80055c4:	f7ff ffac 	bl	8005520 <__sfp_lock_acquire>
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <__sfp+0x84>)
 80055ca:	681e      	ldr	r6, [r3, #0]
 80055cc:	69b3      	ldr	r3, [r6, #24]
 80055ce:	b913      	cbnz	r3, 80055d6 <__sfp+0x16>
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff ffbd 	bl	8005550 <__sinit>
 80055d6:	3648      	adds	r6, #72	; 0x48
 80055d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055dc:	3b01      	subs	r3, #1
 80055de:	d503      	bpl.n	80055e8 <__sfp+0x28>
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	b30b      	cbz	r3, 8005628 <__sfp+0x68>
 80055e4:	6836      	ldr	r6, [r6, #0]
 80055e6:	e7f7      	b.n	80055d8 <__sfp+0x18>
 80055e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055ec:	b9d5      	cbnz	r5, 8005624 <__sfp+0x64>
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <__sfp+0x88>)
 80055f0:	60e3      	str	r3, [r4, #12]
 80055f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055f6:	6665      	str	r5, [r4, #100]	; 0x64
 80055f8:	f000 f847 	bl	800568a <__retarget_lock_init_recursive>
 80055fc:	f7ff ff96 	bl	800552c <__sfp_lock_release>
 8005600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005608:	6025      	str	r5, [r4, #0]
 800560a:	61a5      	str	r5, [r4, #24]
 800560c:	2208      	movs	r2, #8
 800560e:	4629      	mov	r1, r5
 8005610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005614:	f7ff fd2c 	bl	8005070 <memset>
 8005618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800561c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005620:	4620      	mov	r0, r4
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	3468      	adds	r4, #104	; 0x68
 8005626:	e7d9      	b.n	80055dc <__sfp+0x1c>
 8005628:	2104      	movs	r1, #4
 800562a:	4638      	mov	r0, r7
 800562c:	f7ff ff62 	bl	80054f4 <__sfmoreglue>
 8005630:	4604      	mov	r4, r0
 8005632:	6030      	str	r0, [r6, #0]
 8005634:	2800      	cmp	r0, #0
 8005636:	d1d5      	bne.n	80055e4 <__sfp+0x24>
 8005638:	f7ff ff78 	bl	800552c <__sfp_lock_release>
 800563c:	230c      	movs	r3, #12
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	e7ee      	b.n	8005620 <__sfp+0x60>
 8005642:	bf00      	nop
 8005644:	08006090 	.word	0x08006090
 8005648:	ffff0001 	.word	0xffff0001

0800564c <_fwalk_reent>:
 800564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005650:	4606      	mov	r6, r0
 8005652:	4688      	mov	r8, r1
 8005654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005658:	2700      	movs	r7, #0
 800565a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800565e:	f1b9 0901 	subs.w	r9, r9, #1
 8005662:	d505      	bpl.n	8005670 <_fwalk_reent+0x24>
 8005664:	6824      	ldr	r4, [r4, #0]
 8005666:	2c00      	cmp	r4, #0
 8005668:	d1f7      	bne.n	800565a <_fwalk_reent+0xe>
 800566a:	4638      	mov	r0, r7
 800566c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005670:	89ab      	ldrh	r3, [r5, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d907      	bls.n	8005686 <_fwalk_reent+0x3a>
 8005676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800567a:	3301      	adds	r3, #1
 800567c:	d003      	beq.n	8005686 <_fwalk_reent+0x3a>
 800567e:	4629      	mov	r1, r5
 8005680:	4630      	mov	r0, r6
 8005682:	47c0      	blx	r8
 8005684:	4307      	orrs	r7, r0
 8005686:	3568      	adds	r5, #104	; 0x68
 8005688:	e7e9      	b.n	800565e <_fwalk_reent+0x12>

0800568a <__retarget_lock_init_recursive>:
 800568a:	4770      	bx	lr

0800568c <__retarget_lock_acquire_recursive>:
 800568c:	4770      	bx	lr

0800568e <__retarget_lock_release_recursive>:
 800568e:	4770      	bx	lr

08005690 <__swhatbuf_r>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	460e      	mov	r6, r1
 8005694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005698:	2900      	cmp	r1, #0
 800569a:	b096      	sub	sp, #88	; 0x58
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	da07      	bge.n	80056b2 <__swhatbuf_r+0x22>
 80056a2:	2300      	movs	r3, #0
 80056a4:	602b      	str	r3, [r5, #0]
 80056a6:	89b3      	ldrh	r3, [r6, #12]
 80056a8:	061a      	lsls	r2, r3, #24
 80056aa:	d410      	bmi.n	80056ce <__swhatbuf_r+0x3e>
 80056ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b0:	e00e      	b.n	80056d0 <__swhatbuf_r+0x40>
 80056b2:	466a      	mov	r2, sp
 80056b4:	f000 fc5e 	bl	8005f74 <_fstat_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	dbf2      	blt.n	80056a2 <__swhatbuf_r+0x12>
 80056bc:	9a01      	ldr	r2, [sp, #4]
 80056be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056c6:	425a      	negs	r2, r3
 80056c8:	415a      	adcs	r2, r3
 80056ca:	602a      	str	r2, [r5, #0]
 80056cc:	e7ee      	b.n	80056ac <__swhatbuf_r+0x1c>
 80056ce:	2340      	movs	r3, #64	; 0x40
 80056d0:	2000      	movs	r0, #0
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	b016      	add	sp, #88	; 0x58
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <__smakebuf_r>:
 80056d8:	898b      	ldrh	r3, [r1, #12]
 80056da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056dc:	079d      	lsls	r5, r3, #30
 80056de:	4606      	mov	r6, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	d507      	bpl.n	80056f4 <__smakebuf_r+0x1c>
 80056e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	6123      	str	r3, [r4, #16]
 80056ec:	2301      	movs	r3, #1
 80056ee:	6163      	str	r3, [r4, #20]
 80056f0:	b002      	add	sp, #8
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	ab01      	add	r3, sp, #4
 80056f6:	466a      	mov	r2, sp
 80056f8:	f7ff ffca 	bl	8005690 <__swhatbuf_r>
 80056fc:	9900      	ldr	r1, [sp, #0]
 80056fe:	4605      	mov	r5, r0
 8005700:	4630      	mov	r0, r6
 8005702:	f000 f879 	bl	80057f8 <_malloc_r>
 8005706:	b948      	cbnz	r0, 800571c <__smakebuf_r+0x44>
 8005708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570c:	059a      	lsls	r2, r3, #22
 800570e:	d4ef      	bmi.n	80056f0 <__smakebuf_r+0x18>
 8005710:	f023 0303 	bic.w	r3, r3, #3
 8005714:	f043 0302 	orr.w	r3, r3, #2
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	e7e3      	b.n	80056e4 <__smakebuf_r+0xc>
 800571c:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <__smakebuf_r+0x7c>)
 800571e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	6020      	str	r0, [r4, #0]
 8005724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	9b00      	ldr	r3, [sp, #0]
 800572c:	6163      	str	r3, [r4, #20]
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	6120      	str	r0, [r4, #16]
 8005732:	b15b      	cbz	r3, 800574c <__smakebuf_r+0x74>
 8005734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005738:	4630      	mov	r0, r6
 800573a:	f000 fc2d 	bl	8005f98 <_isatty_r>
 800573e:	b128      	cbz	r0, 800574c <__smakebuf_r+0x74>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	81a3      	strh	r3, [r4, #12]
 800574c:	89a0      	ldrh	r0, [r4, #12]
 800574e:	4305      	orrs	r5, r0
 8005750:	81a5      	strh	r5, [r4, #12]
 8005752:	e7cd      	b.n	80056f0 <__smakebuf_r+0x18>
 8005754:	080054e9 	.word	0x080054e9

08005758 <_free_r>:
 8005758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800575a:	2900      	cmp	r1, #0
 800575c:	d048      	beq.n	80057f0 <_free_r+0x98>
 800575e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005762:	9001      	str	r0, [sp, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f1a1 0404 	sub.w	r4, r1, #4
 800576a:	bfb8      	it	lt
 800576c:	18e4      	addlt	r4, r4, r3
 800576e:	f000 fc35 	bl	8005fdc <__malloc_lock>
 8005772:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <_free_r+0x9c>)
 8005774:	9801      	ldr	r0, [sp, #4]
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	4615      	mov	r5, r2
 800577a:	b933      	cbnz	r3, 800578a <_free_r+0x32>
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	6014      	str	r4, [r2, #0]
 8005780:	b003      	add	sp, #12
 8005782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005786:	f000 bc2f 	b.w	8005fe8 <__malloc_unlock>
 800578a:	42a3      	cmp	r3, r4
 800578c:	d90b      	bls.n	80057a6 <_free_r+0x4e>
 800578e:	6821      	ldr	r1, [r4, #0]
 8005790:	1862      	adds	r2, r4, r1
 8005792:	4293      	cmp	r3, r2
 8005794:	bf04      	itt	eq
 8005796:	681a      	ldreq	r2, [r3, #0]
 8005798:	685b      	ldreq	r3, [r3, #4]
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	bf04      	itt	eq
 800579e:	1852      	addeq	r2, r2, r1
 80057a0:	6022      	streq	r2, [r4, #0]
 80057a2:	602c      	str	r4, [r5, #0]
 80057a4:	e7ec      	b.n	8005780 <_free_r+0x28>
 80057a6:	461a      	mov	r2, r3
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b10b      	cbz	r3, 80057b0 <_free_r+0x58>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d9fa      	bls.n	80057a6 <_free_r+0x4e>
 80057b0:	6811      	ldr	r1, [r2, #0]
 80057b2:	1855      	adds	r5, r2, r1
 80057b4:	42a5      	cmp	r5, r4
 80057b6:	d10b      	bne.n	80057d0 <_free_r+0x78>
 80057b8:	6824      	ldr	r4, [r4, #0]
 80057ba:	4421      	add	r1, r4
 80057bc:	1854      	adds	r4, r2, r1
 80057be:	42a3      	cmp	r3, r4
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	d1dd      	bne.n	8005780 <_free_r+0x28>
 80057c4:	681c      	ldr	r4, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	6053      	str	r3, [r2, #4]
 80057ca:	4421      	add	r1, r4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	e7d7      	b.n	8005780 <_free_r+0x28>
 80057d0:	d902      	bls.n	80057d8 <_free_r+0x80>
 80057d2:	230c      	movs	r3, #12
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	e7d3      	b.n	8005780 <_free_r+0x28>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf04      	itt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	bf04      	itt	eq
 80057e8:	1949      	addeq	r1, r1, r5
 80057ea:	6021      	streq	r1, [r4, #0]
 80057ec:	6054      	str	r4, [r2, #4]
 80057ee:	e7c7      	b.n	8005780 <_free_r+0x28>
 80057f0:	b003      	add	sp, #12
 80057f2:	bd30      	pop	{r4, r5, pc}
 80057f4:	20000094 	.word	0x20000094

080057f8 <_malloc_r>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	1ccd      	adds	r5, r1, #3
 80057fc:	f025 0503 	bic.w	r5, r5, #3
 8005800:	3508      	adds	r5, #8
 8005802:	2d0c      	cmp	r5, #12
 8005804:	bf38      	it	cc
 8005806:	250c      	movcc	r5, #12
 8005808:	2d00      	cmp	r5, #0
 800580a:	4606      	mov	r6, r0
 800580c:	db01      	blt.n	8005812 <_malloc_r+0x1a>
 800580e:	42a9      	cmp	r1, r5
 8005810:	d903      	bls.n	800581a <_malloc_r+0x22>
 8005812:	230c      	movs	r3, #12
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	2000      	movs	r0, #0
 8005818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581a:	f000 fbdf 	bl	8005fdc <__malloc_lock>
 800581e:	4921      	ldr	r1, [pc, #132]	; (80058a4 <_malloc_r+0xac>)
 8005820:	680a      	ldr	r2, [r1, #0]
 8005822:	4614      	mov	r4, r2
 8005824:	b99c      	cbnz	r4, 800584e <_malloc_r+0x56>
 8005826:	4f20      	ldr	r7, [pc, #128]	; (80058a8 <_malloc_r+0xb0>)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b923      	cbnz	r3, 8005836 <_malloc_r+0x3e>
 800582c:	4621      	mov	r1, r4
 800582e:	4630      	mov	r0, r6
 8005830:	f000 fb2a 	bl	8005e88 <_sbrk_r>
 8005834:	6038      	str	r0, [r7, #0]
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	f000 fb25 	bl	8005e88 <_sbrk_r>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	d123      	bne.n	800588a <_malloc_r+0x92>
 8005842:	230c      	movs	r3, #12
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	4630      	mov	r0, r6
 8005848:	f000 fbce 	bl	8005fe8 <__malloc_unlock>
 800584c:	e7e3      	b.n	8005816 <_malloc_r+0x1e>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	1b5b      	subs	r3, r3, r5
 8005852:	d417      	bmi.n	8005884 <_malloc_r+0x8c>
 8005854:	2b0b      	cmp	r3, #11
 8005856:	d903      	bls.n	8005860 <_malloc_r+0x68>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	441c      	add	r4, r3
 800585c:	6025      	str	r5, [r4, #0]
 800585e:	e004      	b.n	800586a <_malloc_r+0x72>
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	42a2      	cmp	r2, r4
 8005864:	bf0c      	ite	eq
 8005866:	600b      	streq	r3, [r1, #0]
 8005868:	6053      	strne	r3, [r2, #4]
 800586a:	4630      	mov	r0, r6
 800586c:	f000 fbbc 	bl	8005fe8 <__malloc_unlock>
 8005870:	f104 000b 	add.w	r0, r4, #11
 8005874:	1d23      	adds	r3, r4, #4
 8005876:	f020 0007 	bic.w	r0, r0, #7
 800587a:	1ac2      	subs	r2, r0, r3
 800587c:	d0cc      	beq.n	8005818 <_malloc_r+0x20>
 800587e:	1a1b      	subs	r3, r3, r0
 8005880:	50a3      	str	r3, [r4, r2]
 8005882:	e7c9      	b.n	8005818 <_malloc_r+0x20>
 8005884:	4622      	mov	r2, r4
 8005886:	6864      	ldr	r4, [r4, #4]
 8005888:	e7cc      	b.n	8005824 <_malloc_r+0x2c>
 800588a:	1cc4      	adds	r4, r0, #3
 800588c:	f024 0403 	bic.w	r4, r4, #3
 8005890:	42a0      	cmp	r0, r4
 8005892:	d0e3      	beq.n	800585c <_malloc_r+0x64>
 8005894:	1a21      	subs	r1, r4, r0
 8005896:	4630      	mov	r0, r6
 8005898:	f000 faf6 	bl	8005e88 <_sbrk_r>
 800589c:	3001      	adds	r0, #1
 800589e:	d1dd      	bne.n	800585c <_malloc_r+0x64>
 80058a0:	e7cf      	b.n	8005842 <_malloc_r+0x4a>
 80058a2:	bf00      	nop
 80058a4:	20000094 	.word	0x20000094
 80058a8:	20000098 	.word	0x20000098

080058ac <__sfputc_r>:
 80058ac:	6893      	ldr	r3, [r2, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	b410      	push	{r4}
 80058b4:	6093      	str	r3, [r2, #8]
 80058b6:	da08      	bge.n	80058ca <__sfputc_r+0x1e>
 80058b8:	6994      	ldr	r4, [r2, #24]
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	db01      	blt.n	80058c2 <__sfputc_r+0x16>
 80058be:	290a      	cmp	r1, #10
 80058c0:	d103      	bne.n	80058ca <__sfputc_r+0x1e>
 80058c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c6:	f7ff bc69 	b.w	800519c <__swbuf_r>
 80058ca:	6813      	ldr	r3, [r2, #0]
 80058cc:	1c58      	adds	r0, r3, #1
 80058ce:	6010      	str	r0, [r2, #0]
 80058d0:	7019      	strb	r1, [r3, #0]
 80058d2:	4608      	mov	r0, r1
 80058d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d8:	4770      	bx	lr

080058da <__sfputs_r>:
 80058da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	18d5      	adds	r5, r2, r3
 80058e4:	42ac      	cmp	r4, r5
 80058e6:	d101      	bne.n	80058ec <__sfputs_r+0x12>
 80058e8:	2000      	movs	r0, #0
 80058ea:	e007      	b.n	80058fc <__sfputs_r+0x22>
 80058ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f0:	463a      	mov	r2, r7
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff ffda 	bl	80058ac <__sfputc_r>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d1f3      	bne.n	80058e4 <__sfputs_r+0xa>
 80058fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005900 <_vfiprintf_r>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	460d      	mov	r5, r1
 8005906:	b09d      	sub	sp, #116	; 0x74
 8005908:	4614      	mov	r4, r2
 800590a:	4698      	mov	r8, r3
 800590c:	4606      	mov	r6, r0
 800590e:	b118      	cbz	r0, 8005918 <_vfiprintf_r+0x18>
 8005910:	6983      	ldr	r3, [r0, #24]
 8005912:	b90b      	cbnz	r3, 8005918 <_vfiprintf_r+0x18>
 8005914:	f7ff fe1c 	bl	8005550 <__sinit>
 8005918:	4b89      	ldr	r3, [pc, #548]	; (8005b40 <_vfiprintf_r+0x240>)
 800591a:	429d      	cmp	r5, r3
 800591c:	d11b      	bne.n	8005956 <_vfiprintf_r+0x56>
 800591e:	6875      	ldr	r5, [r6, #4]
 8005920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005922:	07d9      	lsls	r1, r3, #31
 8005924:	d405      	bmi.n	8005932 <_vfiprintf_r+0x32>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	059a      	lsls	r2, r3, #22
 800592a:	d402      	bmi.n	8005932 <_vfiprintf_r+0x32>
 800592c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800592e:	f7ff fead 	bl	800568c <__retarget_lock_acquire_recursive>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	071b      	lsls	r3, r3, #28
 8005936:	d501      	bpl.n	800593c <_vfiprintf_r+0x3c>
 8005938:	692b      	ldr	r3, [r5, #16]
 800593a:	b9eb      	cbnz	r3, 8005978 <_vfiprintf_r+0x78>
 800593c:	4629      	mov	r1, r5
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff fc7e 	bl	8005240 <__swsetup_r>
 8005944:	b1c0      	cbz	r0, 8005978 <_vfiprintf_r+0x78>
 8005946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005948:	07dc      	lsls	r4, r3, #31
 800594a:	d50e      	bpl.n	800596a <_vfiprintf_r+0x6a>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	b01d      	add	sp, #116	; 0x74
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	4b7b      	ldr	r3, [pc, #492]	; (8005b44 <_vfiprintf_r+0x244>)
 8005958:	429d      	cmp	r5, r3
 800595a:	d101      	bne.n	8005960 <_vfiprintf_r+0x60>
 800595c:	68b5      	ldr	r5, [r6, #8]
 800595e:	e7df      	b.n	8005920 <_vfiprintf_r+0x20>
 8005960:	4b79      	ldr	r3, [pc, #484]	; (8005b48 <_vfiprintf_r+0x248>)
 8005962:	429d      	cmp	r5, r3
 8005964:	bf08      	it	eq
 8005966:	68f5      	ldreq	r5, [r6, #12]
 8005968:	e7da      	b.n	8005920 <_vfiprintf_r+0x20>
 800596a:	89ab      	ldrh	r3, [r5, #12]
 800596c:	0598      	lsls	r0, r3, #22
 800596e:	d4ed      	bmi.n	800594c <_vfiprintf_r+0x4c>
 8005970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005972:	f7ff fe8c 	bl	800568e <__retarget_lock_release_recursive>
 8005976:	e7e9      	b.n	800594c <_vfiprintf_r+0x4c>
 8005978:	2300      	movs	r3, #0
 800597a:	9309      	str	r3, [sp, #36]	; 0x24
 800597c:	2320      	movs	r3, #32
 800597e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005982:	f8cd 800c 	str.w	r8, [sp, #12]
 8005986:	2330      	movs	r3, #48	; 0x30
 8005988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b4c <_vfiprintf_r+0x24c>
 800598c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005990:	f04f 0901 	mov.w	r9, #1
 8005994:	4623      	mov	r3, r4
 8005996:	469a      	mov	sl, r3
 8005998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800599c:	b10a      	cbz	r2, 80059a2 <_vfiprintf_r+0xa2>
 800599e:	2a25      	cmp	r2, #37	; 0x25
 80059a0:	d1f9      	bne.n	8005996 <_vfiprintf_r+0x96>
 80059a2:	ebba 0b04 	subs.w	fp, sl, r4
 80059a6:	d00b      	beq.n	80059c0 <_vfiprintf_r+0xc0>
 80059a8:	465b      	mov	r3, fp
 80059aa:	4622      	mov	r2, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff ff93 	bl	80058da <__sfputs_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	f000 80aa 	beq.w	8005b0e <_vfiprintf_r+0x20e>
 80059ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059bc:	445a      	add	r2, fp
 80059be:	9209      	str	r2, [sp, #36]	; 0x24
 80059c0:	f89a 3000 	ldrb.w	r3, [sl]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a2 	beq.w	8005b0e <_vfiprintf_r+0x20e>
 80059ca:	2300      	movs	r3, #0
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059d4:	f10a 0a01 	add.w	sl, sl, #1
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	9307      	str	r3, [sp, #28]
 80059dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059e0:	931a      	str	r3, [sp, #104]	; 0x68
 80059e2:	4654      	mov	r4, sl
 80059e4:	2205      	movs	r2, #5
 80059e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ea:	4858      	ldr	r0, [pc, #352]	; (8005b4c <_vfiprintf_r+0x24c>)
 80059ec:	f7fa fbf0 	bl	80001d0 <memchr>
 80059f0:	9a04      	ldr	r2, [sp, #16]
 80059f2:	b9d8      	cbnz	r0, 8005a2c <_vfiprintf_r+0x12c>
 80059f4:	06d1      	lsls	r1, r2, #27
 80059f6:	bf44      	itt	mi
 80059f8:	2320      	movmi	r3, #32
 80059fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059fe:	0713      	lsls	r3, r2, #28
 8005a00:	bf44      	itt	mi
 8005a02:	232b      	movmi	r3, #43	; 0x2b
 8005a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a08:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0e:	d015      	beq.n	8005a3c <_vfiprintf_r+0x13c>
 8005a10:	9a07      	ldr	r2, [sp, #28]
 8005a12:	4654      	mov	r4, sl
 8005a14:	2000      	movs	r0, #0
 8005a16:	f04f 0c0a 	mov.w	ip, #10
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a20:	3b30      	subs	r3, #48	; 0x30
 8005a22:	2b09      	cmp	r3, #9
 8005a24:	d94e      	bls.n	8005ac4 <_vfiprintf_r+0x1c4>
 8005a26:	b1b0      	cbz	r0, 8005a56 <_vfiprintf_r+0x156>
 8005a28:	9207      	str	r2, [sp, #28]
 8005a2a:	e014      	b.n	8005a56 <_vfiprintf_r+0x156>
 8005a2c:	eba0 0308 	sub.w	r3, r0, r8
 8005a30:	fa09 f303 	lsl.w	r3, r9, r3
 8005a34:	4313      	orrs	r3, r2
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	46a2      	mov	sl, r4
 8005a3a:	e7d2      	b.n	80059e2 <_vfiprintf_r+0xe2>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	1d19      	adds	r1, r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	9103      	str	r1, [sp, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bfbb      	ittet	lt
 8005a48:	425b      	neglt	r3, r3
 8005a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a4e:	9307      	strge	r3, [sp, #28]
 8005a50:	9307      	strlt	r3, [sp, #28]
 8005a52:	bfb8      	it	lt
 8005a54:	9204      	strlt	r2, [sp, #16]
 8005a56:	7823      	ldrb	r3, [r4, #0]
 8005a58:	2b2e      	cmp	r3, #46	; 0x2e
 8005a5a:	d10c      	bne.n	8005a76 <_vfiprintf_r+0x176>
 8005a5c:	7863      	ldrb	r3, [r4, #1]
 8005a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a60:	d135      	bne.n	8005ace <_vfiprintf_r+0x1ce>
 8005a62:	9b03      	ldr	r3, [sp, #12]
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	9203      	str	r2, [sp, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bfb8      	it	lt
 8005a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a72:	3402      	adds	r4, #2
 8005a74:	9305      	str	r3, [sp, #20]
 8005a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b5c <_vfiprintf_r+0x25c>
 8005a7a:	7821      	ldrb	r1, [r4, #0]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	4650      	mov	r0, sl
 8005a80:	f7fa fba6 	bl	80001d0 <memchr>
 8005a84:	b140      	cbz	r0, 8005a98 <_vfiprintf_r+0x198>
 8005a86:	2340      	movs	r3, #64	; 0x40
 8005a88:	eba0 000a 	sub.w	r0, r0, sl
 8005a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a90:	9b04      	ldr	r3, [sp, #16]
 8005a92:	4303      	orrs	r3, r0
 8005a94:	3401      	adds	r4, #1
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a9c:	482c      	ldr	r0, [pc, #176]	; (8005b50 <_vfiprintf_r+0x250>)
 8005a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aa2:	2206      	movs	r2, #6
 8005aa4:	f7fa fb94 	bl	80001d0 <memchr>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d03f      	beq.n	8005b2c <_vfiprintf_r+0x22c>
 8005aac:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <_vfiprintf_r+0x254>)
 8005aae:	bb1b      	cbnz	r3, 8005af8 <_vfiprintf_r+0x1f8>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	3307      	adds	r3, #7
 8005ab4:	f023 0307 	bic.w	r3, r3, #7
 8005ab8:	3308      	adds	r3, #8
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	443b      	add	r3, r7
 8005ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac2:	e767      	b.n	8005994 <_vfiprintf_r+0x94>
 8005ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ac8:	460c      	mov	r4, r1
 8005aca:	2001      	movs	r0, #1
 8005acc:	e7a5      	b.n	8005a1a <_vfiprintf_r+0x11a>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f04f 0c0a 	mov.w	ip, #10
 8005ada:	4620      	mov	r0, r4
 8005adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ae0:	3a30      	subs	r2, #48	; 0x30
 8005ae2:	2a09      	cmp	r2, #9
 8005ae4:	d903      	bls.n	8005aee <_vfiprintf_r+0x1ee>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0c5      	beq.n	8005a76 <_vfiprintf_r+0x176>
 8005aea:	9105      	str	r1, [sp, #20]
 8005aec:	e7c3      	b.n	8005a76 <_vfiprintf_r+0x176>
 8005aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005af2:	4604      	mov	r4, r0
 8005af4:	2301      	movs	r3, #1
 8005af6:	e7f0      	b.n	8005ada <_vfiprintf_r+0x1da>
 8005af8:	ab03      	add	r3, sp, #12
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <_vfiprintf_r+0x258>)
 8005b00:	a904      	add	r1, sp, #16
 8005b02:	4630      	mov	r0, r6
 8005b04:	f3af 8000 	nop.w
 8005b08:	4607      	mov	r7, r0
 8005b0a:	1c78      	adds	r0, r7, #1
 8005b0c:	d1d6      	bne.n	8005abc <_vfiprintf_r+0x1bc>
 8005b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b10:	07d9      	lsls	r1, r3, #31
 8005b12:	d405      	bmi.n	8005b20 <_vfiprintf_r+0x220>
 8005b14:	89ab      	ldrh	r3, [r5, #12]
 8005b16:	059a      	lsls	r2, r3, #22
 8005b18:	d402      	bmi.n	8005b20 <_vfiprintf_r+0x220>
 8005b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b1c:	f7ff fdb7 	bl	800568e <__retarget_lock_release_recursive>
 8005b20:	89ab      	ldrh	r3, [r5, #12]
 8005b22:	065b      	lsls	r3, r3, #25
 8005b24:	f53f af12 	bmi.w	800594c <_vfiprintf_r+0x4c>
 8005b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b2a:	e711      	b.n	8005950 <_vfiprintf_r+0x50>
 8005b2c:	ab03      	add	r3, sp, #12
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	462a      	mov	r2, r5
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <_vfiprintf_r+0x258>)
 8005b34:	a904      	add	r1, sp, #16
 8005b36:	4630      	mov	r0, r6
 8005b38:	f000 f880 	bl	8005c3c <_printf_i>
 8005b3c:	e7e4      	b.n	8005b08 <_vfiprintf_r+0x208>
 8005b3e:	bf00      	nop
 8005b40:	080060b4 	.word	0x080060b4
 8005b44:	080060d4 	.word	0x080060d4
 8005b48:	08006094 	.word	0x08006094
 8005b4c:	080060f4 	.word	0x080060f4
 8005b50:	080060fe 	.word	0x080060fe
 8005b54:	00000000 	.word	0x00000000
 8005b58:	080058db 	.word	0x080058db
 8005b5c:	080060fa 	.word	0x080060fa

08005b60 <_printf_common>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	4616      	mov	r6, r2
 8005b66:	4699      	mov	r9, r3
 8005b68:	688a      	ldr	r2, [r1, #8]
 8005b6a:	690b      	ldr	r3, [r1, #16]
 8005b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bfb8      	it	lt
 8005b74:	4613      	movlt	r3, r2
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	b10a      	cbz	r2, 8005b86 <_printf_common+0x26>
 8005b82:	3301      	adds	r3, #1
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	0699      	lsls	r1, r3, #26
 8005b8a:	bf42      	ittt	mi
 8005b8c:	6833      	ldrmi	r3, [r6, #0]
 8005b8e:	3302      	addmi	r3, #2
 8005b90:	6033      	strmi	r3, [r6, #0]
 8005b92:	6825      	ldr	r5, [r4, #0]
 8005b94:	f015 0506 	ands.w	r5, r5, #6
 8005b98:	d106      	bne.n	8005ba8 <_printf_common+0x48>
 8005b9a:	f104 0a19 	add.w	sl, r4, #25
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	6832      	ldr	r2, [r6, #0]
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dc26      	bgt.n	8005bf6 <_printf_common+0x96>
 8005ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bac:	1e13      	subs	r3, r2, #0
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	bf18      	it	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	0692      	lsls	r2, r2, #26
 8005bb6:	d42b      	bmi.n	8005c10 <_printf_common+0xb0>
 8005bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d01e      	beq.n	8005c04 <_printf_common+0xa4>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	68e5      	ldr	r5, [r4, #12]
 8005bca:	6832      	ldr	r2, [r6, #0]
 8005bcc:	f003 0306 	and.w	r3, r3, #6
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	bf08      	it	eq
 8005bd4:	1aad      	subeq	r5, r5, r2
 8005bd6:	68a3      	ldr	r3, [r4, #8]
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	bf0c      	ite	eq
 8005bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be0:	2500      	movne	r5, #0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	bfc4      	itt	gt
 8005be6:	1a9b      	subgt	r3, r3, r2
 8005be8:	18ed      	addgt	r5, r5, r3
 8005bea:	2600      	movs	r6, #0
 8005bec:	341a      	adds	r4, #26
 8005bee:	42b5      	cmp	r5, r6
 8005bf0:	d11a      	bne.n	8005c28 <_printf_common+0xc8>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e008      	b.n	8005c08 <_printf_common+0xa8>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	47c0      	blx	r8
 8005c00:	3001      	adds	r0, #1
 8005c02:	d103      	bne.n	8005c0c <_printf_common+0xac>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	e7c6      	b.n	8005b9e <_printf_common+0x3e>
 8005c10:	18e1      	adds	r1, r4, r3
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	2030      	movs	r0, #48	; 0x30
 8005c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c1a:	4422      	add	r2, r4
 8005c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c24:	3302      	adds	r3, #2
 8005c26:	e7c7      	b.n	8005bb8 <_printf_common+0x58>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	4638      	mov	r0, r7
 8005c30:	47c0      	blx	r8
 8005c32:	3001      	adds	r0, #1
 8005c34:	d0e6      	beq.n	8005c04 <_printf_common+0xa4>
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7d9      	b.n	8005bee <_printf_common+0x8e>
	...

08005c3c <_printf_i>:
 8005c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	460c      	mov	r4, r1
 8005c42:	4691      	mov	r9, r2
 8005c44:	7e27      	ldrb	r7, [r4, #24]
 8005c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c48:	2f78      	cmp	r7, #120	; 0x78
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c52:	d807      	bhi.n	8005c64 <_printf_i+0x28>
 8005c54:	2f62      	cmp	r7, #98	; 0x62
 8005c56:	d80a      	bhi.n	8005c6e <_printf_i+0x32>
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	f000 80d8 	beq.w	8005e0e <_printf_i+0x1d2>
 8005c5e:	2f58      	cmp	r7, #88	; 0x58
 8005c60:	f000 80a3 	beq.w	8005daa <_printf_i+0x16e>
 8005c64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c6c:	e03a      	b.n	8005ce4 <_printf_i+0xa8>
 8005c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c72:	2b15      	cmp	r3, #21
 8005c74:	d8f6      	bhi.n	8005c64 <_printf_i+0x28>
 8005c76:	a001      	add	r0, pc, #4	; (adr r0, 8005c7c <_printf_i+0x40>)
 8005c78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005c65 	.word	0x08005c65
 8005c88:	08005c65 	.word	0x08005c65
 8005c8c:	08005c65 	.word	0x08005c65
 8005c90:	08005c65 	.word	0x08005c65
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005c65 	.word	0x08005c65
 8005c9c:	08005c65 	.word	0x08005c65
 8005ca0:	08005c65 	.word	0x08005c65
 8005ca4:	08005c65 	.word	0x08005c65
 8005ca8:	08005df5 	.word	0x08005df5
 8005cac:	08005d19 	.word	0x08005d19
 8005cb0:	08005dd7 	.word	0x08005dd7
 8005cb4:	08005c65 	.word	0x08005c65
 8005cb8:	08005c65 	.word	0x08005c65
 8005cbc:	08005e17 	.word	0x08005e17
 8005cc0:	08005c65 	.word	0x08005c65
 8005cc4:	08005d19 	.word	0x08005d19
 8005cc8:	08005c65 	.word	0x08005c65
 8005ccc:	08005c65 	.word	0x08005c65
 8005cd0:	08005ddf 	.word	0x08005ddf
 8005cd4:	680b      	ldr	r3, [r1, #0]
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	600a      	str	r2, [r1, #0]
 8005cdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0a3      	b.n	8005e30 <_printf_i+0x1f4>
 8005ce8:	6825      	ldr	r5, [r4, #0]
 8005cea:	6808      	ldr	r0, [r1, #0]
 8005cec:	062e      	lsls	r6, r5, #24
 8005cee:	f100 0304 	add.w	r3, r0, #4
 8005cf2:	d50a      	bpl.n	8005d0a <_printf_i+0xce>
 8005cf4:	6805      	ldr	r5, [r0, #0]
 8005cf6:	600b      	str	r3, [r1, #0]
 8005cf8:	2d00      	cmp	r5, #0
 8005cfa:	da03      	bge.n	8005d04 <_printf_i+0xc8>
 8005cfc:	232d      	movs	r3, #45	; 0x2d
 8005cfe:	426d      	negs	r5, r5
 8005d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d04:	485e      	ldr	r0, [pc, #376]	; (8005e80 <_printf_i+0x244>)
 8005d06:	230a      	movs	r3, #10
 8005d08:	e019      	b.n	8005d3e <_printf_i+0x102>
 8005d0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d0e:	6805      	ldr	r5, [r0, #0]
 8005d10:	600b      	str	r3, [r1, #0]
 8005d12:	bf18      	it	ne
 8005d14:	b22d      	sxthne	r5, r5
 8005d16:	e7ef      	b.n	8005cf8 <_printf_i+0xbc>
 8005d18:	680b      	ldr	r3, [r1, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	1d18      	adds	r0, r3, #4
 8005d1e:	6008      	str	r0, [r1, #0]
 8005d20:	0628      	lsls	r0, r5, #24
 8005d22:	d501      	bpl.n	8005d28 <_printf_i+0xec>
 8005d24:	681d      	ldr	r5, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <_printf_i+0xf2>
 8005d28:	0669      	lsls	r1, r5, #25
 8005d2a:	d5fb      	bpl.n	8005d24 <_printf_i+0xe8>
 8005d2c:	881d      	ldrh	r5, [r3, #0]
 8005d2e:	4854      	ldr	r0, [pc, #336]	; (8005e80 <_printf_i+0x244>)
 8005d30:	2f6f      	cmp	r7, #111	; 0x6f
 8005d32:	bf0c      	ite	eq
 8005d34:	2308      	moveq	r3, #8
 8005d36:	230a      	movne	r3, #10
 8005d38:	2100      	movs	r1, #0
 8005d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d3e:	6866      	ldr	r6, [r4, #4]
 8005d40:	60a6      	str	r6, [r4, #8]
 8005d42:	2e00      	cmp	r6, #0
 8005d44:	bfa2      	ittt	ge
 8005d46:	6821      	ldrge	r1, [r4, #0]
 8005d48:	f021 0104 	bicge.w	r1, r1, #4
 8005d4c:	6021      	strge	r1, [r4, #0]
 8005d4e:	b90d      	cbnz	r5, 8005d54 <_printf_i+0x118>
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	d04d      	beq.n	8005df0 <_printf_i+0x1b4>
 8005d54:	4616      	mov	r6, r2
 8005d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d5e:	5dc7      	ldrb	r7, [r0, r7]
 8005d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d64:	462f      	mov	r7, r5
 8005d66:	42bb      	cmp	r3, r7
 8005d68:	460d      	mov	r5, r1
 8005d6a:	d9f4      	bls.n	8005d56 <_printf_i+0x11a>
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d10b      	bne.n	8005d88 <_printf_i+0x14c>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	07df      	lsls	r7, r3, #31
 8005d74:	d508      	bpl.n	8005d88 <_printf_i+0x14c>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	6861      	ldr	r1, [r4, #4]
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	bfde      	ittt	le
 8005d7e:	2330      	movle	r3, #48	; 0x30
 8005d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d88:	1b92      	subs	r2, r2, r6
 8005d8a:	6122      	str	r2, [r4, #16]
 8005d8c:	f8cd a000 	str.w	sl, [sp]
 8005d90:	464b      	mov	r3, r9
 8005d92:	aa03      	add	r2, sp, #12
 8005d94:	4621      	mov	r1, r4
 8005d96:	4640      	mov	r0, r8
 8005d98:	f7ff fee2 	bl	8005b60 <_printf_common>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d14c      	bne.n	8005e3a <_printf_i+0x1fe>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	b004      	add	sp, #16
 8005da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005daa:	4835      	ldr	r0, [pc, #212]	; (8005e80 <_printf_i+0x244>)
 8005dac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	680e      	ldr	r6, [r1, #0]
 8005db4:	061f      	lsls	r7, r3, #24
 8005db6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dba:	600e      	str	r6, [r1, #0]
 8005dbc:	d514      	bpl.n	8005de8 <_printf_i+0x1ac>
 8005dbe:	07d9      	lsls	r1, r3, #31
 8005dc0:	bf44      	itt	mi
 8005dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8005dc6:	6023      	strmi	r3, [r4, #0]
 8005dc8:	b91d      	cbnz	r5, 8005dd2 <_printf_i+0x196>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f023 0320 	bic.w	r3, r3, #32
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	2310      	movs	r3, #16
 8005dd4:	e7b0      	b.n	8005d38 <_printf_i+0xfc>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	f043 0320 	orr.w	r3, r3, #32
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	2378      	movs	r3, #120	; 0x78
 8005de0:	4828      	ldr	r0, [pc, #160]	; (8005e84 <_printf_i+0x248>)
 8005de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005de6:	e7e3      	b.n	8005db0 <_printf_i+0x174>
 8005de8:	065e      	lsls	r6, r3, #25
 8005dea:	bf48      	it	mi
 8005dec:	b2ad      	uxthmi	r5, r5
 8005dee:	e7e6      	b.n	8005dbe <_printf_i+0x182>
 8005df0:	4616      	mov	r6, r2
 8005df2:	e7bb      	b.n	8005d6c <_printf_i+0x130>
 8005df4:	680b      	ldr	r3, [r1, #0]
 8005df6:	6826      	ldr	r6, [r4, #0]
 8005df8:	6960      	ldr	r0, [r4, #20]
 8005dfa:	1d1d      	adds	r5, r3, #4
 8005dfc:	600d      	str	r5, [r1, #0]
 8005dfe:	0635      	lsls	r5, r6, #24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0x1cc>
 8005e04:	6018      	str	r0, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <_printf_i+0x1d2>
 8005e08:	0671      	lsls	r1, r6, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0x1c8>
 8005e0c:	8018      	strh	r0, [r3, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	4616      	mov	r6, r2
 8005e14:	e7ba      	b.n	8005d8c <_printf_i+0x150>
 8005e16:	680b      	ldr	r3, [r1, #0]
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	600a      	str	r2, [r1, #0]
 8005e1c:	681e      	ldr	r6, [r3, #0]
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	2100      	movs	r1, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7fa f9d4 	bl	80001d0 <memchr>
 8005e28:	b108      	cbz	r0, 8005e2e <_printf_i+0x1f2>
 8005e2a:	1b80      	subs	r0, r0, r6
 8005e2c:	6060      	str	r0, [r4, #4]
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	2300      	movs	r3, #0
 8005e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e38:	e7a8      	b.n	8005d8c <_printf_i+0x150>
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	47d0      	blx	sl
 8005e44:	3001      	adds	r0, #1
 8005e46:	d0ab      	beq.n	8005da0 <_printf_i+0x164>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	079b      	lsls	r3, r3, #30
 8005e4c:	d413      	bmi.n	8005e76 <_printf_i+0x23a>
 8005e4e:	68e0      	ldr	r0, [r4, #12]
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	4298      	cmp	r0, r3
 8005e54:	bfb8      	it	lt
 8005e56:	4618      	movlt	r0, r3
 8005e58:	e7a4      	b.n	8005da4 <_printf_i+0x168>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	47d0      	blx	sl
 8005e64:	3001      	adds	r0, #1
 8005e66:	d09b      	beq.n	8005da0 <_printf_i+0x164>
 8005e68:	3501      	adds	r5, #1
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	9903      	ldr	r1, [sp, #12]
 8005e6e:	1a5b      	subs	r3, r3, r1
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	dcf2      	bgt.n	8005e5a <_printf_i+0x21e>
 8005e74:	e7eb      	b.n	8005e4e <_printf_i+0x212>
 8005e76:	2500      	movs	r5, #0
 8005e78:	f104 0619 	add.w	r6, r4, #25
 8005e7c:	e7f5      	b.n	8005e6a <_printf_i+0x22e>
 8005e7e:	bf00      	nop
 8005e80:	08006105 	.word	0x08006105
 8005e84:	08006116 	.word	0x08006116

08005e88 <_sbrk_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d06      	ldr	r5, [pc, #24]	; (8005ea4 <_sbrk_r+0x1c>)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4604      	mov	r4, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	f7fb f8b4 	bl	8001000 <_sbrk>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d102      	bne.n	8005ea2 <_sbrk_r+0x1a>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	b103      	cbz	r3, 8005ea2 <_sbrk_r+0x1a>
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	200002b4 	.word	0x200002b4

08005ea8 <__sread>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	f000 f8a0 	bl	8005ff4 <_read_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	bfab      	itete	ge
 8005eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eba:	89a3      	ldrhlt	r3, [r4, #12]
 8005ebc:	181b      	addge	r3, r3, r0
 8005ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ec2:	bfac      	ite	ge
 8005ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ec6:	81a3      	strhlt	r3, [r4, #12]
 8005ec8:	bd10      	pop	{r4, pc}

08005eca <__swrite>:
 8005eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	461f      	mov	r7, r3
 8005ed0:	898b      	ldrh	r3, [r1, #12]
 8005ed2:	05db      	lsls	r3, r3, #23
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4616      	mov	r6, r2
 8005eda:	d505      	bpl.n	8005ee8 <__swrite+0x1e>
 8005edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f000 f868 	bl	8005fb8 <_lseek_r>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	4628      	mov	r0, r5
 8005efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005efe:	f000 b817 	b.w	8005f30 <_write_r>

08005f02 <__sseek>:
 8005f02:	b510      	push	{r4, lr}
 8005f04:	460c      	mov	r4, r1
 8005f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0a:	f000 f855 	bl	8005fb8 <_lseek_r>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	bf15      	itete	ne
 8005f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f1e:	81a3      	strheq	r3, [r4, #12]
 8005f20:	bf18      	it	ne
 8005f22:	81a3      	strhne	r3, [r4, #12]
 8005f24:	bd10      	pop	{r4, pc}

08005f26 <__sclose>:
 8005f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2a:	f000 b813 	b.w	8005f54 <_close_r>
	...

08005f30 <_write_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d07      	ldr	r5, [pc, #28]	; (8005f50 <_write_r+0x20>)
 8005f34:	4604      	mov	r4, r0
 8005f36:	4608      	mov	r0, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	602a      	str	r2, [r5, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7fa fb39 	bl	80005b6 <_write>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_write_r+0x1e>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_write_r+0x1e>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	200002b4 	.word	0x200002b4

08005f54 <_close_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d06      	ldr	r5, [pc, #24]	; (8005f70 <_close_r+0x1c>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	f7fb f819 	bl	8000f96 <_close>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_close_r+0x1a>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_close_r+0x1a>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200002b4 	.word	0x200002b4

08005f74 <_fstat_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d07      	ldr	r5, [pc, #28]	; (8005f94 <_fstat_r+0x20>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	f7fb f814 	bl	8000fae <_fstat>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d102      	bne.n	8005f90 <_fstat_r+0x1c>
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	b103      	cbz	r3, 8005f90 <_fstat_r+0x1c>
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
 8005f92:	bf00      	nop
 8005f94:	200002b4 	.word	0x200002b4

08005f98 <_isatty_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	; (8005fb4 <_isatty_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fb f813 	bl	8000fce <_isatty>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_isatty_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_isatty_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	200002b4 	.word	0x200002b4

08005fb8 <_lseek_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	; (8005fd8 <_lseek_r+0x20>)
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	602a      	str	r2, [r5, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7fb f80c 	bl	8000fe4 <_lseek>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_lseek_r+0x1e>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_lseek_r+0x1e>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	200002b4 	.word	0x200002b4

08005fdc <__malloc_lock>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__malloc_lock+0x8>)
 8005fde:	f7ff bb55 	b.w	800568c <__retarget_lock_acquire_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	200002ac 	.word	0x200002ac

08005fe8 <__malloc_unlock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_unlock+0x8>)
 8005fea:	f7ff bb50 	b.w	800568e <__retarget_lock_release_recursive>
 8005fee:	bf00      	nop
 8005ff0:	200002ac 	.word	0x200002ac

08005ff4 <_read_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4d07      	ldr	r5, [pc, #28]	; (8006014 <_read_r+0x20>)
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	4608      	mov	r0, r1
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	2200      	movs	r2, #0
 8006000:	602a      	str	r2, [r5, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	f7fa ffaa 	bl	8000f5c <_read>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_read_r+0x1e>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_read_r+0x1e>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	200002b4 	.word	0x200002b4

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
