
SecondProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000607c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a8  080063a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b0  080063b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080063b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000007c  08006434  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08006434  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f2f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002999  00000000  00000000  00035fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  00039d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dd0  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014349  00000000  00000000  00064d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b7b  00000000  00000000  000790a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bbc  00000000  00000000  00181c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061f4 	.word	0x080061f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080061f4 	.word	0x080061f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d013      	beq.n	80005a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000588:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000590:	e000      	b.n	8000594 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000592:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800059e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_write>:
#ifndef SRC_DEBUG_H_
#define SRC_DEBUG_H_


int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffc7 	bl	8000568 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x16>
  return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fdf4 	bl	80011e4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f836 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f998 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f948 	bl	8000898 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000608:	f000 f976 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800060c:	f000 f880 	bl	8000710 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000610:	f000 f8f4 	bl	80007fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\r\n");
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <main+0x70>)
 8000616:	f004 fea7 	bl	8005368 <puts>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f002 fbaa 	bl	8002d7c <HAL_GPIO_WritePin>
  busTest();
 8000628:	f000 f9fc 	bl	8000a24 <busTest>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf ("Main loop start\r\n");
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <main+0x74>)
 800062e:	f004 fe9b 	bl	8005368 <puts>

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f002 fb9e 	bl	8002d7c <HAL_GPIO_WritePin>
		 transmit(BROADCAST_C, OFF_C);
 8000640:	2100      	movs	r1, #0
 8000642:	20ff      	movs	r0, #255	; 0xff
 8000644:	f000 faee 	bl	8000c24 <transmit>

		 HAL_Delay(2000);
 8000648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800064c:	f000 fe46 	bl	80012dc <HAL_Delay>
		 transmit(BROADCAST_C, ON_AND_STEP_UP_C);
 8000650:	2108      	movs	r1, #8
 8000652:	20ff      	movs	r0, #255	; 0xff
 8000654:	f000 fae6 	bl	8000c24 <transmit>
		 HAL_Delay(2000);
 8000658:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800065c:	f000 fe3e 	bl	80012dc <HAL_Delay>
	  printf ("Main loop start\r\n");
 8000660:	e7e4      	b.n	800062c <main+0x38>
 8000662:	bf00      	nop
 8000664:	0800620c 	.word	0x0800620c
 8000668:	08006214 	.word	0x08006214

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fde6 	bl	800524c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000692:	f002 fb99 	bl	8002dc8 <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800069c:	f000 fb4c 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ba:	230a      	movs	r3, #10
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fbd0 	bl	8002e74 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006da:	f000 fb2d 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 ffa2 	bl	8003640 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000702:	f000 fb19 	bl	8000d38 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	; 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000734:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <MX_ADC1_Init+0xe4>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000752:	2204      	movs	r2, #4
 8000754:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000794:	f000 ff88 	bl	80016a8 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800079e:	f000 facb 	bl	8000d38 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_ADC1_Init+0xe0>)
 80007ae:	f001 fe11 	bl	80023d4 <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b8:	f000 fabe 	bl	8000d38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ADC1_Init+0xe8>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	; 0x7f
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC1_Init+0xe0>)
 80007da:	f001 f983 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007e4:	f000 faa8 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000fc 	.word	0x200000fc
 80007f4:	50040000 	.word	0x50040000
 80007f8:	14f00020 	.word	0x14f00020

080007fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_TIM4_Init+0x94>)
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <MX_TIM4_Init+0x98>)
 800081e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_TIM4_Init+0x94>)
 8000822:	224f      	movs	r2, #79	; 0x4f
 8000824:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_TIM4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM4_Init+0x94>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_TIM4_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_TIM4_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000840:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_TIM4_Init+0x94>)
 8000842:	f003 fdbf 	bl	80043c4 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800084c:	f000 fa74 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_TIM4_Init+0x94>)
 800085e:	f003 fe08 	bl	8004472 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 fa66 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_TIM4_Init+0x94>)
 800087a:	f003 fff5 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 fa58 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000a8 	.word	0x200000a8
 8000894:	40000800 	.word	0x40000800

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	f004 f84c 	bl	8004978 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 fa27 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200001ac 	.word	0x200001ac
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_DMA_Init+0x38>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <MX_DMA_Init+0x38>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6493      	str	r3, [r2, #72]	; 0x48
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_DMA_Init+0x38>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	200b      	movs	r0, #11
 800091c:	f001 fee5 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000920:	200b      	movs	r0, #11
 8000922:	f001 fefe 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <MX_GPIO_Init+0xe4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a32      	ldr	r2, [pc, #200]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_GPIO_Init+0xe4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <MX_GPIO_Init+0xe4>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_GPIO_Init+0xe4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 7190 	mov.w	r1, #288	; 0x120
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f002 f9e2 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_GPIO_Init+0xe8>)
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <MX_GPIO_Init+0xec>)
 80009ce:	f002 f82b 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80009d2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f002 f81b 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f002 f80d 	bl	8002a28 <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	10210000 	.word	0x10210000
 8000a20:	48000800 	.word	0x48000800

08000a24 <busTest>:

/* USER CODE BEGIN 4 */


void busTest(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	//Luminaries must turn on and turn off. If not, check connection.
	printf("Start bus test\r\n");
 8000a28:	4832      	ldr	r0, [pc, #200]	; (8000af4 <busTest+0xd0>)
 8000a2a:	f004 fc9d 	bl	8005368 <puts>
	HAL_Delay(100);
 8000a2e:	2064      	movs	r0, #100	; 0x64
 8000a30:	f000 fc54 	bl	80012dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f002 f99d 	bl	8002d7c <HAL_GPIO_WritePin>
	transmit(BROADCAST_C, OFF_C);
 8000a42:	2100      	movs	r1, #0
 8000a44:	20ff      	movs	r0, #255	; 0xff
 8000a46:	f000 f8ed 	bl	8000c24 <transmit>
	printf ("Lampen 2s uit\r\n");
 8000a4a:	482b      	ldr	r0, [pc, #172]	; (8000af8 <busTest+0xd4>)
 8000a4c:	f004 fc8c 	bl	8005368 <puts>
	HAL_Delay(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a54:	f000 fc42 	bl	80012dc <HAL_Delay>
	transmit(BROADCAST_C, ON_AND_STEP_UP_C);
 8000a58:	2108      	movs	r1, #8
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	f000 f8e2 	bl	8000c24 <transmit>
	printf ("Lampen 2s aan\r\n");
 8000a60:	4826      	ldr	r0, [pc, #152]	; (8000afc <busTest+0xd8>)
 8000a62:	f004 fc81 	bl	8005368 <puts>
	HAL_Delay(2000);
 8000a66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a6a:	f000 fc37 	bl	80012dc <HAL_Delay>
	transmit(BROADCAST_C, OFF_C);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	f000 f8d7 	bl	8000c24 <transmit>
	printf ("Lampen 2s uit\r\n");
 8000a76:	4820      	ldr	r0, [pc, #128]	; (8000af8 <busTest+0xd4>)
 8000a78:	f004 fc76 	bl	8005368 <puts>
	HAL_Delay(2000);
 8000a7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a80:	f000 fc2c 	bl	80012dc <HAL_Delay>
	printf("Einde aansturing lampen\r\n");
 8000a84:	481e      	ldr	r0, [pc, #120]	; (8000b00 <busTest+0xdc>)
 8000a86:	f004 fc6f 	bl	8005368 <puts>

	//Receive response from luminaries: max and min level
	transmit(BROADCAST_C, QUERY_STATUS);
 8000a8a:	2190      	movs	r1, #144	; 0x90
 8000a8c:	20ff      	movs	r0, #255	; 0xff
 8000a8e:	f000 f8c9 	bl	8000c24 <transmit>
	maxLevel = maxResponseLevel();
 8000a92:	f000 f845 	bl	8000b20 <maxResponseLevel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <busTest+0xe0>)
 8000a9c:	801a      	strh	r2, [r3, #0]
	printf("maxResponseLevel = %d\r\n", maxLevel);
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <busTest+0xe0>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <busTest+0xe4>)
 8000aa6:	f004 fbd9 	bl	800525c <iprintf>
	transmit(BROADCAST_C, QUERY_STATUS);
 8000aaa:	2190      	movs	r1, #144	; 0x90
 8000aac:	20ff      	movs	r0, #255	; 0xff
 8000aae:	f000 f8b9 	bl	8000c24 <transmit>
	minLevel = minResponseLevel();
 8000ab2:	f000 f865 	bl	8000b80 <minResponseLevel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <busTest+0xe8>)
 8000abc:	801a      	strh	r2, [r3, #0]
	printf("minResponseLevel = %d\r\n", minLevel);
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <busTest+0xe8>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <busTest+0xec>)
 8000ac6:	f004 fbc9 	bl	800525c <iprintf>

	analogLevel = (uint16_t)(maxLevel + minLevel) / 2;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <busTest+0xe0>)
 8000acc:	881a      	ldrh	r2, [r3, #0]
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <busTest+0xe8>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <busTest+0xf0>)
 8000adc:	801a      	strh	r2, [r3, #0]
	printf("analogLevel = %d\r\n", analogLevel);
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <busTest+0xf0>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <busTest+0xf4>)
 8000ae6:	f004 fbb9 	bl	800525c <iprintf>
	printf("Einde bus test\r\n");
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <busTest+0xf8>)
 8000aec:	f004 fc3c 	bl	8005368 <puts>

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08006228 	.word	0x08006228
 8000af8:	08006238 	.word	0x08006238
 8000afc:	08006248 	.word	0x08006248
 8000b00:	08006258 	.word	0x08006258
 8000b04:	200000a6 	.word	0x200000a6
 8000b08:	08006274 	.word	0x08006274
 8000b0c:	200000a4 	.word	0x200000a4
 8000b10:	0800628c 	.word	0x0800628c
 8000b14:	20000004 	.word	0x20000004
 8000b18:	080062a4 	.word	0x080062a4
 8000b1c:	080062b8 	.word	0x080062b8

08000b20 <maxResponseLevel>:

uint16_t maxResponseLevel(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
	const uint8_t dalistep = 40; //us
 8000b26:	2328      	movs	r3, #40	; 0x28
 8000b28:	71fb      	strb	r3, [r7, #7]
	uint16_t rxmax = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	81fb      	strh	r3, [r7, #14]
	uint16_t dalidata;
	uint32_t idalistep;
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	e016      	b.n	8000b62 <maxResponseLevel+0x42>
		HAL_ADC_Start(&hadc1);
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <maxResponseLevel+0x58>)
 8000b36:	f000 ff0d 	bl	8001954 <HAL_ADC_Start>
		dalidata = HAL_ADC_GetValue(&hadc1);
 8000b3a:	480f      	ldr	r0, [pc, #60]	; (8000b78 <maxResponseLevel+0x58>)
 8000b3c:	f000 ffc4 	bl	8001ac8 <HAL_ADC_GetValue>
 8000b40:	4603      	mov	r3, r0
 8000b42:	80bb      	strh	r3, [r7, #4]

		if (dalidata > rxmax) {
 8000b44:	88ba      	ldrh	r2, [r7, #4]
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d901      	bls.n	8000b50 <maxResponseLevel+0x30>
			rxmax = dalidata;
 8000b4c:	88bb      	ldrh	r3, [r7, #4]
 8000b4e:	81fb      	strh	r3, [r7, #14]
			};
		delay_us(dalistep);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f843 	bl	8000be0 <delay_us>
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <maxResponseLevel+0x5c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3e3      	bcc.n	8000b34 <maxResponseLevel+0x14>
		}
		return rxmax;
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000fc 	.word	0x200000fc
 8000b7c:	20000008 	.word	0x20000008

08000b80 <minResponseLevel>:

uint16_t minResponseLevel(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
	const uint8_t dalistep = 40; //us
 8000b86:	2328      	movs	r3, #40	; 0x28
 8000b88:	71fb      	strb	r3, [r7, #7]
	uint16_t rxmin = 1024;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	81fb      	strh	r3, [r7, #14]
	uint16_t dalidata;
	uint32_t idalistep;
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	e016      	b.n	8000bc4 <minResponseLevel+0x44>
		HAL_ADC_Start(&hadc1);
 8000b96:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <minResponseLevel+0x58>)
 8000b98:	f000 fedc 	bl	8001954 <HAL_ADC_Start>
		dalidata = HAL_ADC_GetValue(&hadc1);
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <minResponseLevel+0x58>)
 8000b9e:	f000 ff93 	bl	8001ac8 <HAL_ADC_GetValue>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80bb      	strh	r3, [r7, #4]

		if (dalidata < rxmin) {
 8000ba6:	88ba      	ldrh	r2, [r7, #4]
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d201      	bcs.n	8000bb2 <minResponseLevel+0x32>
			rxmin = dalidata;
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	81fb      	strh	r3, [r7, #14]
			};
		delay_us(dalistep);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f812 	bl	8000be0 <delay_us>
	for (idalistep = 0; idalistep < daliTimeout; idalistep = idalistep + dalistep) {
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <minResponseLevel+0x5c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3e3      	bcc.n	8000b96 <minResponseLevel+0x16>
		}
		return rxmin;
 8000bce:	89fb      	ldrh	r3, [r7, #14]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000fc 	.word	0x200000fc
 8000bdc:	20000008 	.word	0x20000008

08000be0 <delay_us>:
/**
  * @brief Setup us delay function with timer 4
  * @retval None
  */
void delay_us(uint16_t us)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <delay_us+0x40>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <delay_us+0x40>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <delay_us+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f042 0201 	orr.w	r2, r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8000c02:	bf00      	nop
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <delay_us+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3f9      	bcc.n	8000c04 <delay_us+0x24>
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200000a8 	.word	0x200000a8

08000c24 <transmit>:

void transmit(uint8_t cmd1, uint8_t cmd2) // transmit commands to DALI bus (address byte, command byte)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
	sendBit(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f82f 	bl	8000c98 <sendBit>
	sendByte(cmd1);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f80f 	bl	8000c60 <sendByte>
	sendByte(cmd2);
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f80b 	bl	8000c60 <sendByte>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//digitalWrite(TxPin, HIGH); Set signaal weer hoog wanneer verzonden (STOP)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f002 f892 	bl	8002d7c <HAL_GPIO_WritePin>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <sendByte>:


void sendByte(uint8_t b)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	for (int i = 7; i >= 0; i--)
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e00b      	b.n	8000c88 <sendByte+0x28>
	{
		sendBit((b >> i) & 1);
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f80b 	bl	8000c98 <sendBit>
	for (int i = 7; i >= 0; i--)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	daf0      	bge.n	8000c70 <sendByte+0x10>
	}
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <sendBit>:


void sendBit(int b)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 if (b) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <sendBit+0x14>
		sendOne();
 8000ca6:	f000 f827 	bl	8000cf8 <sendOne>
	}
	else {
		sendZero();
	}
}
 8000caa:	e001      	b.n	8000cb0 <sendBit+0x18>
		sendZero();
 8000cac:	f000 f804 	bl	8000cb8 <sendZero>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <sendZero>:


void sendZero(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//digitalWrite(TxPin, HIGH);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f002 f859 	bl	8002d7c <HAL_GPIO_WritePin>
	delay_us(delay2);											//delayMicroseconds(delay2);
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <sendZero+0x38>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff86 	bl	8000be0 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//digitalWrite(TxPin, LOW);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f002 f84d 	bl	8002d7c <HAL_GPIO_WritePin>
	delay_us(delay1);											//delayMicroseconds(delay1);
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <sendZero+0x3c>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff7a 	bl	8000be0 <delay_us>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000002 	.word	0x20000002
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <sendOne>:

void sendOne(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//digitalWrite(TxPin, LOW);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f002 f839 	bl	8002d7c <HAL_GPIO_WritePin>
	delay_us(delay2); 											//delayMicroseconds(delay2);
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <sendOne+0x38>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff66 	bl	8000be0 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); 		//digitalWrite(TxPin, HIGH);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f002 f82d 	bl	8002d7c <HAL_GPIO_WritePin>
	delay_us(delay1);											//delayMicroseconds(delay1);
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <sendOne+0x3c>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff5a 	bl	8000be0 <delay_us>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000002 	.word	0x20000002
 8000d34:	20000000 	.word	0x20000000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ac      	sub	sp, #176	; 0xb0
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2288      	movs	r2, #136	; 0x88
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fa4d 	bl	800524c <memset>
  if(hadc->Instance==ADC1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <HAL_ADC_MspInit+0x120>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d172      	bne.n	8000ea2 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fe2d 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000df8:	f7ff ff9e 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000e02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_ADC_MspInit+0x124>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e32:	230b      	movs	r3, #11
 8000e34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f001 fdee 	bl	8002a28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <HAL_ADC_MspInit+0x12c>)
 8000e50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e88:	f001 fc66 	bl	8002758 <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000e92:	f7ff ff51 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e9c:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <HAL_ADC_MspInit+0x128>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	37b0      	adds	r7, #176	; 0xb0
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	50040000 	.word	0x50040000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	20000164 	.word	0x20000164
 8000eb8:	40020008 	.word	0x40020008

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x38>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40000800 	.word	0x40000800
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0ac      	sub	sp, #176	; 0xb0
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2288      	movs	r2, #136	; 0x88
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 f995 	bl	800524c <memset>
  if(huart->Instance==USART2)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a21      	ldr	r2, [pc, #132]	; (8000fac <HAL_UART_MspInit+0xb0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d13b      	bne.n	8000fa4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fd87 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f44:	f7ff fef8 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0xb4>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0xb4>)
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	6593      	str	r3, [r2, #88]	; 0x58
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_UART_MspInit+0xb4>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_UART_MspInit+0xb4>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <HAL_UART_MspInit+0xb4>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0xb4>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f90:	2307      	movs	r3, #7
 8000f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f001 fd42 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37b0      	adds	r7, #176	; 0xb0
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f94c 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA1_Channel1_IRQHandler+0x10>)
 800100e:	f001 fc5b 	bl	80028c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000164 	.word	0x20000164

0800101c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
	}

return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107e:	605a      	str	r2, [r3, #4]
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_isatty>:

int _isatty(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
	return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f004 f882 	bl	80051f8 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20018000 	.word	0x20018000
 8001120:	00000400 	.word	0x00000400
 8001124:	20000098 	.word	0x20000098
 8001128:	20000248 	.word	0x20000248

0800112c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <SystemInit+0x5c>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <SystemInit+0x5c>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <SystemInit+0x60>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <SystemInit+0x60>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <SystemInit+0x60>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SystemInit+0x60>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <SystemInit+0x60>)
 8001158:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800115c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001160:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <SystemInit+0x60>)
 8001164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001168:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <SystemInit+0x60>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <SystemInit+0x60>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <SystemInit+0x60>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	40021000 	.word	0x40021000

08001190 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001194:	f7ff ffca 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001198:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800119a:	e003      	b.n	80011a4 <LoopCopyDataInit>

0800119c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800119e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011a2:	3104      	adds	r1, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011ac:	d3f6      	bcc.n	800119c <CopyDataInit>
	ldr	r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011b0:	e002      	b.n	80011b8 <LoopFillZerobss>

080011b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011b4:	f842 3b04 	str.w	r3, [r2], #4

080011b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <LoopForever+0x16>)
	cmp	r2, r3
 80011ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011bc:	d3f9      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f004 f821 	bl	8005204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c2:	f7ff fa17 	bl	80005f4 <main>

080011c6 <LoopForever>:

LoopForever:
    b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011c8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011cc:	080063b8 	.word	0x080063b8
	ldr	r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011d4:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80011d8:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80011dc:	20000244 	.word	0x20000244

080011e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC1_2_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_Init+0x3c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_Init+0x3c>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f001 fa6a 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f80f 	bl	8001224 <HAL_InitTick>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	e001      	b.n	8001216 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001212:	f7ff fd97 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d023      	beq.n	8001280 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_InitTick+0x70>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_InitTick+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fa75 	bl	800273e <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d809      	bhi.n	8001274 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f001 fa3f 	bl	80026ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_InitTick+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e007      	b.n	8001284 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e004      	b.n	8001284 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e001      	b.n	8001284 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000014 	.word	0x20000014
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000010 	.word	0x20000010

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000014 	.word	0x20000014
 80012c0:	20000230 	.word	0x20000230

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000230 	.word	0x20000230

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014

08001324 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3360      	adds	r3, #96	; 0x60
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_ADC_SetOffset+0x44>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	03fff000 	.word	0x03fff000

080013d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3360      	adds	r3, #96	; 0x60
 80013e2:	461a      	mov	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3360      	adds	r3, #96	; 0x60
 8001410:	461a      	mov	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001436:	b480      	push	{r7}
 8001438:	b087      	sub	sp, #28
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3330      	adds	r3, #48	; 0x30
 8001446:	461a      	mov	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	4413      	add	r3, r2
 8001454:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	211f      	movs	r1, #31
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	401a      	ands	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	0e9b      	lsrs	r3, r3, #26
 800146e:	f003 011f 	and.w	r1, r3, #31
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800148e:	b480      	push	{r7}
 8001490:	b087      	sub	sp, #28
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3314      	adds	r3, #20
 800149e:	461a      	mov	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	0e5b      	lsrs	r3, r3, #25
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	0d1b      	lsrs	r3, r3, #20
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2107      	movs	r1, #7
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	0d1b      	lsrs	r3, r3, #20
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	431a      	orrs	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0318 	and.w	r3, r3, #24
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001508:	40d9      	lsrs	r1, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	400b      	ands	r3, r1
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	431a      	orrs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	0007ffff 	.word	0x0007ffff

0800152c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6093      	str	r3, [r2, #8]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800157c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001580:	d101      	bne.n	8001586 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015d0:	d101      	bne.n	80015d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <LL_ADC_IsEnabled+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_ADC_IsEnabled+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001642:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001646:	f043 0204 	orr.w	r2, r3, #4
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b04      	cmp	r3, #4
 800166c:	d101      	bne.n	8001672 <LL_ADC_REG_IsConversionOngoing+0x18>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b08      	cmp	r3, #8
 8001692:	d101      	bne.n	8001698 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e136      	b.n	8001930 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fb5b 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff3f 	bl	800156c <LL_ADC_IsDeepPowerDownEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff25 	bl	8001548 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff5a 	bl	80015bc <LL_ADC_IsInternalRegulatorEnabled>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d115      	bne.n	800173a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff3e 	bl	8001594 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001718:	4b87      	ldr	r3, [pc, #540]	; (8001938 <HAL_ADC_Init+0x290>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	4a87      	ldr	r2, [pc, #540]	; (800193c <HAL_ADC_Init+0x294>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	3301      	adds	r3, #1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800172c:	e002      	b.n	8001734 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3b01      	subs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f9      	bne.n	800172e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff3c 	bl	80015bc <LL_ADC_IsInternalRegulatorEnabled>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	f043 0210 	orr.w	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff75 	bl	800165a <LL_ADC_REG_IsConversionOngoing>
 8001770:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 80cf 	bne.w	800191e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 80cb 	bne.w	800191e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001790:	f043 0202 	orr.w	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff35 	bl	800160c <LL_ADC_IsEnabled>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d115      	bne.n	80017d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017a8:	4865      	ldr	r0, [pc, #404]	; (8001940 <HAL_ADC_Init+0x298>)
 80017aa:	f7ff ff2f 	bl	800160c <LL_ADC_IsEnabled>
 80017ae:	4604      	mov	r4, r0
 80017b0:	4864      	ldr	r0, [pc, #400]	; (8001944 <HAL_ADC_Init+0x29c>)
 80017b2:	f7ff ff2b 	bl	800160c <LL_ADC_IsEnabled>
 80017b6:	4603      	mov	r3, r0
 80017b8:	431c      	orrs	r4, r3
 80017ba:	4863      	ldr	r0, [pc, #396]	; (8001948 <HAL_ADC_Init+0x2a0>)
 80017bc:	f7ff ff26 	bl	800160c <LL_ADC_IsEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4323      	orrs	r3, r4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4619      	mov	r1, r3
 80017ce:	485f      	ldr	r0, [pc, #380]	; (800194c <HAL_ADC_Init+0x2a4>)
 80017d0:	f7ff fda8 	bl	8001324 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e5b      	ldrb	r3, [r3, #25]
 80017d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d106      	bne.n	8001810 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	3b01      	subs	r3, #1
 8001808:	045b      	lsls	r3, r3, #17
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_ADC_Init+0x2a8>)
 8001834:	4013      	ands	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	430b      	orrs	r3, r1
 800183e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff08 	bl	800165a <LL_ADC_REG_IsConversionOngoing>
 800184a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff15 	bl	8001680 <LL_ADC_INJ_IsConversionOngoing>
 8001856:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d13d      	bne.n	80018da <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d13a      	bne.n	80018da <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001868:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001870:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001880:	f023 0302 	bic.w	r3, r3, #2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	69b9      	ldr	r1, [r7, #24]
 800188a:	430b      	orrs	r3, r1
 800188c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001894:	2b01      	cmp	r3, #1
 8001896:	d118      	bne.n	80018ca <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018b4:	4311      	orrs	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ba:	430a      	orrs	r2, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	e007      	b.n	80018da <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f023 010f 	bic.w	r1, r3, #15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	1e5a      	subs	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
 80018fa:	e007      	b.n	800190c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 020f 	bic.w	r2, r2, #15
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	f023 0303 	bic.w	r3, r3, #3
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
 800191c:	e007      	b.n	800192e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	f043 0210 	orr.w	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800192e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3724      	adds	r7, #36	; 0x24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	2000000c 	.word	0x2000000c
 800193c:	053e2d63 	.word	0x053e2d63
 8001940:	50040000 	.word	0x50040000
 8001944:	50040100 	.word	0x50040100
 8001948:	50040200 	.word	0x50040200
 800194c:	50040300 	.word	0x50040300
 8001950:	fff0c007 	.word	0xfff0c007

08001954 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800195c:	4857      	ldr	r0, [pc, #348]	; (8001abc <HAL_ADC_Start+0x168>)
 800195e:	f7ff fde5 	bl	800152c <LL_ADC_GetMultimode>
 8001962:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe76 	bl	800165a <LL_ADC_REG_IsConversionOngoing>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 809c 	bne.w	8001aae <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_Start+0x30>
 8001980:	2302      	movs	r3, #2
 8001982:	e097      	b.n	8001ab4 <HAL_ADC_Start+0x160>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fc99 	bl	80022c4 <ADC_Enable>
 8001992:	4603      	mov	r3, r0
 8001994:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8083 	bne.w	8001aa4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a42      	ldr	r2, [pc, #264]	; (8001ac0 <HAL_ADC_Start+0x16c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d002      	beq.n	80019c2 <HAL_ADC_Start+0x6e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	e000      	b.n	80019c4 <HAL_ADC_Start+0x70>
 80019c2:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <HAL_ADC_Start+0x170>)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d002      	beq.n	80019d2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f023 0206 	bic.w	r2, r3, #6
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58
 80019f8:	e002      	b.n	8001a00 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	221c      	movs	r2, #28
 8001a06:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <HAL_ADC_Start+0x16c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d002      	beq.n	8001a20 <HAL_ADC_Start+0xcc>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_Start+0xce>
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_ADC_Start+0x170>)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d008      	beq.n	8001a3c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d002      	beq.n	8001a3c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d114      	bne.n	8001a66 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fde7 	bl	8001632 <LL_ADC_REG_StartConversion>
 8001a64:	e025      	b.n	8001ab2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <HAL_ADC_Start+0x16c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d002      	beq.n	8001a82 <HAL_ADC_Start+0x12e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	e000      	b.n	8001a84 <HAL_ADC_Start+0x130>
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_ADC_Start+0x170>)
 8001a84:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00f      	beq.n	8001ab2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa2:	e006      	b.n	8001ab2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001aac:	e001      	b.n	8001ab2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	50040300 	.word	0x50040300
 8001ac0:	50040100 	.word	0x50040100
 8001ac4:	50040000 	.word	0x50040000

08001ac8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0b6      	sub	sp, #216	; 0xd8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x22>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e3c7      	b.n	8002296 <HAL_ADC_ConfigChannel+0x7b2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fda1 	bl	800165a <LL_ADC_REG_IsConversionOngoing>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 83a8 	bne.w	8002270 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d824      	bhi.n	8001b72 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	3b02      	subs	r3, #2
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d81b      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0x86>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <HAL_ADC_ConfigChannel+0x54>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001b51 	.word	0x08001b51
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b61 	.word	0x08001b61
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	605a      	str	r2, [r3, #4]
          break;
 8001b4e:	e011      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2212      	movs	r2, #18
 8001b54:	605a      	str	r2, [r3, #4]
          break;
 8001b56:	e00d      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2218      	movs	r2, #24
 8001b5c:	605a      	str	r2, [r3, #4]
          break;
 8001b5e:	e009      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b66:	605a      	str	r2, [r3, #4]
          break;
 8001b68:	e004      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2206      	movs	r2, #6
 8001b6e:	605a      	str	r2, [r3, #4]
          break;
 8001b70:	e000      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b72:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f7ff fc58 	bl	8001436 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fd65 	bl	800165a <LL_ADC_REG_IsConversionOngoing>
 8001b90:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fd71 	bl	8001680 <LL_ADC_INJ_IsConversionOngoing>
 8001b9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 81a6 	bne.w	8001ef8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 81a1 	bne.w	8001ef8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7ff fc63 	bl	800148e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d00a      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bfa:	f7ff fbc7 	bl	800138c <LL_ADC_SetOffset>
 8001bfe:	e17b      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fbe4 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x148>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fbd9 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	e01e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x186>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fbce 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e004      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x19e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	e018      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e004      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fb9d 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fb81 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10a      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x20e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fb76 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	e01e      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x24c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fb6b 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e004      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x264>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	e018      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x296>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	e004      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d106      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fb3a 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2102      	movs	r1, #2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fb1e 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x2d4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fb13 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	0e9b      	lsrs	r3, r3, #26
 8001db2:	f003 021f 	and.w	r2, r3, #31
 8001db6:	e01e      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x312>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fb08 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e004      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x32a>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0e9b      	lsrs	r3, r3, #26
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	e016      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x358>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e2e:	2320      	movs	r3, #32
 8001e30:	e004      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2102      	movs	r1, #2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fad9 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2103      	movs	r1, #3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fabd 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10a      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x396>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2103      	movs	r1, #3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fab2 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	0e9b      	lsrs	r3, r3, #26
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	e017      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x3c6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2103      	movs	r1, #3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff faa7 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e94:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e003      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x3de>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	e011      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x402>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d106      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fa84 	bl	8001400 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fb85 	bl	800160c <LL_ADC_IsEnabled>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 813f 	bne.w	8002188 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	461a      	mov	r2, r3
 8001f18:	f7ff fae4 	bl	80014e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a8e      	ldr	r2, [pc, #568]	; (800215c <HAL_ADC_ConfigChannel+0x678>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	f040 8130 	bne.w	8002188 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x46c>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2b09      	cmp	r3, #9
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e019      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x4a0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f60:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e003      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2b09      	cmp	r3, #9
 8001f7c:	bf94      	ite	ls
 8001f7e:	2301      	movls	r3, #1
 8001f80:	2300      	movhi	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d079      	beq.n	800207c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x4c0>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	069b      	lsls	r3, r3, #26
 8001f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa2:	e015      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x4ec>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	e003      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	069b      	lsls	r3, r3, #26
 8001fcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x50c>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	e017      	b.n	8002020 <HAL_ADC_ConfigChannel+0x53c>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002008:	2320      	movs	r3, #32
 800200a:	e003      	b.n	8002014 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800200c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	ea42 0103 	orr.w	r1, r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x562>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	3301      	adds	r3, #1
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	051b      	lsls	r3, r3, #20
 8002044:	e018      	b.n	8002078 <HAL_ADC_ConfigChannel+0x594>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800205e:	2320      	movs	r3, #32
 8002060:	e003      	b.n	800206a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002078:	430b      	orrs	r3, r1
 800207a:	e080      	b.n	800217e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d107      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x5b4>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	3301      	adds	r3, #1
 8002090:	069b      	lsls	r3, r3, #26
 8002092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002096:	e015      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x5e0>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020b0:	2320      	movs	r3, #32
 80020b2:	e003      	b.n	80020bc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	069b      	lsls	r3, r3, #26
 80020c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x600>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	e017      	b.n	8002114 <HAL_ADC_ConfigChannel+0x630>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	61fb      	str	r3, [r7, #28]
  return result;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020fc:	2320      	movs	r3, #32
 80020fe:	e003      	b.n	8002108 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	ea42 0103 	orr.w	r1, r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10d      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x65c>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	3301      	adds	r3, #1
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	3b1e      	subs	r3, #30
 8002138:	051b      	lsls	r3, r3, #20
 800213a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213e:	e01d      	b.n	800217c <HAL_ADC_ConfigChannel+0x698>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	613b      	str	r3, [r7, #16]
  return result;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002158:	2320      	movs	r3, #32
 800215a:	e005      	b.n	8002168 <HAL_ADC_ConfigChannel+0x684>
 800215c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f003 021f 	and.w	r2, r3, #31
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	3b1e      	subs	r3, #30
 8002176:	051b      	lsls	r3, r3, #20
 8002178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217c:	430b      	orrs	r3, r1
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	4619      	mov	r1, r3
 8002184:	f7ff f983 	bl	800148e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_ADC_ConfigChannel+0x7bc>)
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d07a      	beq.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002194:	4843      	ldr	r0, [pc, #268]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002196:	f7ff f8eb 	bl	8001370 <LL_ADC_GetCommonPathInternalCh>
 800219a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a41      	ldr	r2, [pc, #260]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d12c      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d126      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <HAL_ADC_ConfigChannel+0x7c8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x6e4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3b      	ldr	r2, [pc, #236]	; (80022b0 <HAL_ADC_ConfigChannel+0x7cc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d15d      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d0:	4619      	mov	r1, r3
 80021d2:	4834      	ldr	r0, [pc, #208]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021d4:	f7ff f8b9 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_ADC_ConfigChannel+0x7d0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	4a36      	ldr	r2, [pc, #216]	; (80022b8 <HAL_ADC_ConfigChannel+0x7d4>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021f2:	e002      	b.n	80021fa <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002200:	e040      	b.n	8002284 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d118      	bne.n	800223e <HAL_ADC_ConfigChannel+0x75a>
 800220c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d112      	bne.n	800223e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_ADC_ConfigChannel+0x7c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_ADC_ConfigChannel+0x748>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d12d      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002234:	4619      	mov	r1, r3
 8002236:	481b      	ldr	r0, [pc, #108]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002238:	f7ff f887 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800223c:	e024      	b.n	8002288 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d120      	bne.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d11a      	bne.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <HAL_ADC_ConfigChannel+0x7c8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d115      	bne.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002266:	4619      	mov	r1, r3
 8002268:	480e      	ldr	r0, [pc, #56]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 800226a:	f7ff f86e 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
 800226e:	e00c      	b.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002282:	e002      	b.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002284:	bf00      	nop
 8002286:	e000      	b.n	800228a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002288:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002292:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002296:	4618      	mov	r0, r3
 8002298:	37d8      	adds	r7, #216	; 0xd8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	80080000 	.word	0x80080000
 80022a4:	50040300 	.word	0x50040300
 80022a8:	c7520000 	.word	0xc7520000
 80022ac:	50040000 	.word	0x50040000
 80022b0:	50040200 	.word	0x50040200
 80022b4:	2000000c 	.word	0x2000000c
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	cb840000 	.word	0xcb840000
 80022c0:	80000001 	.word	0x80000001

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f99b 	bl	800160c <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d14d      	bne.n	8002378 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <ADC_Enable+0xc0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e039      	b.n	800237a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f96a 	bl	80015e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002310:	f7fe ffd8 	bl	80012c4 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002316:	e028      	b.n	800236a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff f975 	bl	800160c <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d104      	bne.n	8002332 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f959 	bl	80015e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002332:	f7fe ffc7 	bl	80012c4 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d914      	bls.n	800236a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d00d      	beq.n	800236a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d1cf      	bne.n	8002318 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	8000003f 	.word	0x8000003f

08002388 <LL_ADC_IsEnabled>:
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <LL_ADC_IsEnabled+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_IsEnabled+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_REG_IsConversionOngoing>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b09f      	sub	sp, #124	; 0x7c
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e093      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023fa:	2300      	movs	r3, #0
 80023fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023fe:	2300      	movs	r3, #0
 8002400:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d102      	bne.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	e001      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e072      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ffb9 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 800243c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ffb3 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d154      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002450:	2b00      	cmp	r3, #0
 8002452:	d151      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002456:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02c      	beq.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002472:	035b      	lsls	r3, r3, #13
 8002474:	430b      	orrs	r3, r1
 8002476:	431a      	orrs	r2, r3
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800247c:	4829      	ldr	r0, [pc, #164]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800247e:	f7ff ff83 	bl	8002388 <LL_ADC_IsEnabled>
 8002482:	4604      	mov	r4, r0
 8002484:	4828      	ldr	r0, [pc, #160]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002486:	f7ff ff7f 	bl	8002388 <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	431c      	orrs	r4, r3
 800248e:	4828      	ldr	r0, [pc, #160]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002490:	f7ff ff7a 	bl	8002388 <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	4323      	orrs	r3, r4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d137      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024a4:	f023 030f 	bic.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	6811      	ldr	r1, [r2, #0]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b8:	e028      	b.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c6:	4817      	ldr	r0, [pc, #92]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024c8:	f7ff ff5e 	bl	8002388 <LL_ADC_IsEnabled>
 80024cc:	4604      	mov	r4, r0
 80024ce:	4816      	ldr	r0, [pc, #88]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024d0:	f7ff ff5a 	bl	8002388 <LL_ADC_IsEnabled>
 80024d4:	4603      	mov	r3, r0
 80024d6:	431c      	orrs	r4, r3
 80024d8:	4815      	ldr	r0, [pc, #84]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024da:	f7ff ff55 	bl	8002388 <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	4323      	orrs	r3, r4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d112      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024ee:	f023 030f 	bic.w	r3, r3, #15
 80024f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f6:	e009      	b.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800250a:	e000      	b.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800250c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002516:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800251a:	4618      	mov	r0, r3
 800251c:	377c      	adds	r7, #124	; 0x7c
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	bf00      	nop
 8002524:	50040000 	.word	0x50040000
 8002528:	50040100 	.word	0x50040100
 800252c:	50040300 	.word	0x50040300
 8002530:	50040200 	.word	0x50040200

08002534 <__NVIC_SetPriorityGrouping>:
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e098      	b.n	800289c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_DMA_Init+0x150>)
 8002772:	429a      	cmp	r2, r3
 8002774:	d80f      	bhi.n	8002796 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_DMA_Init+0x154>)
 800277e:	4413      	add	r3, r2
 8002780:	4a4b      	ldr	r2, [pc, #300]	; (80028b0 <HAL_DMA_Init+0x158>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	009a      	lsls	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_DMA_Init+0x15c>)
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
 8002794:	e00e      	b.n	80027b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_DMA_Init+0x160>)
 800279e:	4413      	add	r3, r2
 80027a0:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_DMA_Init+0x158>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	009a      	lsls	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_DMA_Init+0x164>)
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280e:	d039      	beq.n	8002884 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_DMA_Init+0x15c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d11a      	bne.n	8002850 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_DMA_Init+0x168>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 031c 	and.w	r3, r3, #28
 8002826:	210f      	movs	r1, #15
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	4924      	ldr	r1, [pc, #144]	; (80028c0 <HAL_DMA_Init+0x168>)
 8002830:	4013      	ands	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_DMA_Init+0x168>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f003 031c 	and.w	r3, r3, #28
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	491d      	ldr	r1, [pc, #116]	; (80028c0 <HAL_DMA_Init+0x168>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
 800284e:	e019      	b.n	8002884 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_DMA_Init+0x16c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f003 031c 	and.w	r3, r3, #28
 800285c:	210f      	movs	r1, #15
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	4917      	ldr	r1, [pc, #92]	; (80028c4 <HAL_DMA_Init+0x16c>)
 8002866:	4013      	ands	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_DMA_Init+0x16c>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f003 031c 	and.w	r3, r3, #28
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	4911      	ldr	r1, [pc, #68]	; (80028c4 <HAL_DMA_Init+0x16c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40020407 	.word	0x40020407
 80028ac:	bffdfff8 	.word	0xbffdfff8
 80028b0:	cccccccd 	.word	0xcccccccd
 80028b4:	40020000 	.word	0x40020000
 80028b8:	bffdfbf8 	.word	0xbffdfbf8
 80028bc:	40020400 	.word	0x40020400
 80028c0:	400200a8 	.word	0x400200a8
 80028c4:	400204a8 	.word	0x400204a8

080028c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	f003 031c 	and.w	r3, r3, #28
 80028e8:	2204      	movs	r2, #4
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d026      	beq.n	8002942 <HAL_DMA_IRQHandler+0x7a>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d021      	beq.n	8002942 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0204 	bic.w	r2, r2, #4
 800291a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f003 021c 	and.w	r2, r3, #28
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2104      	movs	r1, #4
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	2b00      	cmp	r3, #0
 8002936:	d071      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002940:	e06c      	b.n	8002a1c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 031c 	and.w	r3, r3, #28
 800294a:	2202      	movs	r2, #2
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02e      	beq.n	80029b4 <HAL_DMA_IRQHandler+0xec>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d029      	beq.n	80029b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 020a 	bic.w	r2, r2, #10
 800297c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f003 021c 	and.w	r2, r3, #28
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2102      	movs	r1, #2
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d038      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029b2:	e033      	b.n	8002a1c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f003 031c 	and.w	r3, r3, #28
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02a      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x156>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d025      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 020e 	bic.w	r2, r2, #14
 80029e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f003 021c 	and.w	r2, r3, #28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
}
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	e17f      	b.n	8002d38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8171 	beq.w	8002d32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d00b      	beq.n	8002a70 <HAL_GPIO_Init+0x48>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d007      	beq.n	8002a70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a64:	2b11      	cmp	r3, #17
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d130      	bne.n	8002ad2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0201 	and.w	r2, r3, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d118      	bne.n	8002b10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x128>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b12      	cmp	r3, #18
 8002b4e:	d123      	bne.n	8002b98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	08da      	lsrs	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3208      	adds	r2, #8
 8002b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	220f      	movs	r2, #15
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	6939      	ldr	r1, [r7, #16]
 8002b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80ac 	beq.w	8002d32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_GPIO_Init+0x330>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4a5e      	ldr	r2, [pc, #376]	; (8002d58 <HAL_GPIO_Init+0x330>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6613      	str	r3, [r2, #96]	; 0x60
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_GPIO_Init+0x330>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	; (8002d5c <HAL_GPIO_Init+0x334>)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c1c:	d025      	beq.n	8002c6a <HAL_GPIO_Init+0x242>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x338>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <HAL_GPIO_Init+0x23e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_GPIO_Init+0x33c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x23a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_GPIO_Init+0x340>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x236>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_GPIO_Init+0x344>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x232>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_GPIO_Init+0x348>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x22e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_GPIO_Init+0x34c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x22a>
 8002c4e:	2306      	movs	r3, #6
 8002c50:	e00c      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c52:	2307      	movs	r3, #7
 8002c54:	e00a      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c56:	2305      	movs	r3, #5
 8002c58:	e008      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e004      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x244>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	f002 0203 	and.w	r2, r2, #3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4093      	lsls	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c7c:	4937      	ldr	r1, [pc, #220]	; (8002d5c <HAL_GPIO_Init+0x334>)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cae:	4a32      	ldr	r2, [pc, #200]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_GPIO_Init+0x350>)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f47f ae78 	bne.w	8002a38 <HAL_GPIO_Init+0x10>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	48000400 	.word	0x48000400
 8002d64:	48000800 	.word	0x48000800
 8002d68:	48000c00 	.word	0x48000c00
 8002d6c:	48001000 	.word	0x48001000
 8002d70:	48001400 	.word	0x48001400
 8002d74:	48001800 	.word	0x48001800
 8002d78:	40010400 	.word	0x40010400

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd6:	d130      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d038      	beq.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2232      	movs	r2, #50	; 0x32
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0c:	e002      	b.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e20:	d102      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f2      	bne.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e34:	d110      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e00f      	b.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d007      	beq.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	2000000c 	.word	0x2000000c
 8002e70:	431bde83 	.word	0x431bde83

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e3d4      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e86:	4ba1      	ldr	r3, [pc, #644]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e90:	4b9e      	ldr	r3, [pc, #632]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80e4 	beq.w	8003070 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4a>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	f040 808b 	bne.w	8002fcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 8087 	bne.w	8002fcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ebe:	4b93      	ldr	r3, [pc, #588]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e3ac      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	4b8c      	ldr	r3, [pc, #560]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x7c>
 8002ee6:	4b89      	ldr	r3, [pc, #548]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eee:	e005      	b.n	8002efc <HAL_RCC_OscConfig+0x88>
 8002ef0:	4b86      	ldr	r3, [pc, #536]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d223      	bcs.n	8002f48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fd41 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e38d      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f14:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7c      	ldr	r2, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f1a:	f043 0308 	orr.w	r3, r3, #8
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4977      	ldr	r1, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	4972      	ldr	r1, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
 8002f46:	e025      	b.n	8002f94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f48:	4b70      	ldr	r3, [pc, #448]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6f      	ldr	r2, [pc, #444]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f4e:	f043 0308 	orr.w	r3, r3, #8
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b6d      	ldr	r3, [pc, #436]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	496a      	ldr	r1, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f66:	4b69      	ldr	r3, [pc, #420]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	4965      	ldr	r1, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fd01 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e34d      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f94:	f000 fc36 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	495a      	ldr	r1, [pc, #360]	; (8003110 <HAL_RCC_OscConfig+0x29c>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_OscConfig+0x2a0>)
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_OscConfig+0x2a4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f933 	bl	8001224 <HAL_InitTick>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d052      	beq.n	800306e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	e331      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d032      	beq.n	800303a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fd4:	4b4d      	ldr	r3, [pc, #308]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4c      	ldr	r2, [pc, #304]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f970 	bl	80012c4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe8:	f7fe f96c 	bl	80012c4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e31a      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a40      	ldr	r2, [pc, #256]	; (800310c <HAL_RCC_OscConfig+0x298>)
 800300c:	f043 0308 	orr.w	r3, r3, #8
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	493b      	ldr	r1, [pc, #236]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	4936      	ldr	r1, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e01a      	b.n	8003070 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x298>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a33      	ldr	r2, [pc, #204]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003046:	f7fe f93d 	bl	80012c4 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800304e:	f7fe f939 	bl	80012c4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e2e7      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003060:	4b2a      	ldr	r3, [pc, #168]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x1da>
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d074      	beq.n	8003166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b08      	cmp	r3, #8
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x21a>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d10e      	bne.n	80030a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d10b      	bne.n	80030a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_RCC_OscConfig+0x298>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d064      	beq.n	8003164 <HAL_RCC_OscConfig+0x2f0>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d160      	bne.n	8003164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e2c4      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x24a>
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e01d      	b.n	80030fa <HAL_RCC_OscConfig+0x286>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x26e>
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0f      	ldr	r2, [pc, #60]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b0d      	ldr	r3, [pc, #52]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0c      	ldr	r2, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e00b      	b.n	80030fa <HAL_RCC_OscConfig+0x286>
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x298>)
 80030f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01c      	beq.n	800313c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe f8df 	bl	80012c4 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003108:	e011      	b.n	800312e <HAL_RCC_OscConfig+0x2ba>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	080062c8 	.word	0x080062c8
 8003114:	2000000c 	.word	0x2000000c
 8003118:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe f8d2 	bl	80012c4 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e280      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312e:	4baf      	ldr	r3, [pc, #700]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x2a8>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe f8c2 	bl	80012c4 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe f8be 	bl	80012c4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e26c      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003156:	4ba5      	ldr	r3, [pc, #660]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d0>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d060      	beq.n	8003234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x310>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d119      	bne.n	80031b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d116      	bne.n	80031b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003184:	4b99      	ldr	r3, [pc, #612]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_OscConfig+0x328>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e249      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b93      	ldr	r3, [pc, #588]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	4990      	ldr	r1, [pc, #576]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b0:	e040      	b.n	8003234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d023      	beq.n	8003202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a8b      	ldr	r2, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe f87d 	bl	80012c4 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe f879 	bl	80012c4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e227      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e0:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	497c      	ldr	r1, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	e018      	b.n	8003234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe f859 	bl	80012c4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe f855 	bl	80012c4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e203      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003228:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d03c      	beq.n	80032ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01c      	beq.n	8003282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003248:	4b68      	ldr	r3, [pc, #416]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	4a67      	ldr	r2, [pc, #412]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe f834 	bl	80012c4 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe f830 	bl	80012c4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1de      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003272:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <HAL_RCC_OscConfig+0x3ec>
 8003280:	e01b      	b.n	80032ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003282:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003288:	4a58      	ldr	r2, [pc, #352]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe f817 	bl	80012c4 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329a:	f7fe f813 	bl	80012c4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1c1      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ef      	bne.n	800329a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80a6 	beq.w	8003414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a43      	ldr	r2, [pc, #268]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f0:	2301      	movs	r3, #1
 80032f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f4:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d118      	bne.n	8003332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330c:	f7fd ffda 	bl	80012c4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7fd ffd6 	bl	80012c4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e184      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003326:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <HAL_RCC_OscConfig+0x4d8>
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800334a:	e024      	b.n	8003396 <HAL_RCC_OscConfig+0x522>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b05      	cmp	r3, #5
 8003352:	d110      	bne.n	8003376 <HAL_RCC_OscConfig+0x502>
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a24      	ldr	r2, [pc, #144]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a20      	ldr	r2, [pc, #128]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003374:	e00f      	b.n	8003396 <HAL_RCC_OscConfig+0x522>
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800338e:	f023 0304 	bic.w	r3, r3, #4
 8003392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fd ff91 	bl	80012c4 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fd ff8d 	bl	80012c4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e139      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ed      	beq.n	80033a6 <HAL_RCC_OscConfig+0x532>
 80033ca:	e01a      	b.n	8003402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd ff7a 	bl	80012c4 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d2:	e00f      	b.n	80033f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fd ff76 	bl	80012c4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d906      	bls.n	80033f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e122      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f4:	4b90      	ldr	r3, [pc, #576]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e8      	bne.n	80033d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003402:	7ffb      	ldrb	r3, [r7, #31]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b8b      	ldr	r3, [pc, #556]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a8a      	ldr	r2, [pc, #552]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8108 	beq.w	800362e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	2b02      	cmp	r3, #2
 8003424:	f040 80d0 	bne.w	80035c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003428:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0203 	and.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	429a      	cmp	r2, r3
 800343a:	d130      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	3b01      	subs	r3, #1
 8003448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d127      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d11f      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003468:	2a07      	cmp	r2, #7
 800346a:	bf14      	ite	ne
 800346c:	2201      	movne	r2, #1
 800346e:	2200      	moveq	r2, #0
 8003470:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003472:	4293      	cmp	r3, r2
 8003474:	d113      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d109      	bne.n	800349e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	3b01      	subs	r3, #1
 8003498:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d06e      	beq.n	800357c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d069      	beq.n	8003578 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034a4:	4b64      	ldr	r3, [pc, #400]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034b0:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b7      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c0:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034cc:	f7fd fefa 	bl	80012c4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd fef6 	bl	80012c4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0a4      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e6:	4b54      	ldr	r3, [pc, #336]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f2:	4b51      	ldr	r3, [pc, #324]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	4b51      	ldr	r3, [pc, #324]	; (800363c <HAL_RCC_OscConfig+0x7c8>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003502:	3a01      	subs	r2, #1
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350c:	0212      	lsls	r2, r2, #8
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003514:	0852      	lsrs	r2, r2, #1
 8003516:	3a01      	subs	r2, #1
 8003518:	0552      	lsls	r2, r2, #21
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0652      	lsls	r2, r2, #25
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352c:	0912      	lsrs	r2, r2, #4
 800352e:	0452      	lsls	r2, r2, #17
 8003530:	430a      	orrs	r2, r1
 8003532:	4941      	ldr	r1, [pc, #260]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003538:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3e      	ldr	r2, [pc, #248]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b3c      	ldr	r3, [pc, #240]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a3b      	ldr	r2, [pc, #236]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003550:	f7fd feb8 	bl	80012c4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd feb4 	bl	80012c4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e062      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b33      	ldr	r3, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003576:	e05a      	b.n	800362e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e059      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d152      	bne.n	800362e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800358e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a0:	f7fd fe90 	bl	80012c4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fd fe8c 	bl	80012c4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03a      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x734>
 80035c6:	e032      	b.n	800362e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d02d      	beq.n	800362a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80035da:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035ec:	f023 0303 	bic.w	r3, r3, #3
 80035f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 80035f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd fe5f 	bl	80012c4 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd fe5b 	bl	80012c4 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e009      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x7c4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x796>
 8003628:	e001      	b.n	800362e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	f99d808c 	.word	0xf99d808c

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0c8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b66      	ldr	r3, [pc, #408]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4961      	ldr	r1, [pc, #388]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d04c      	beq.n	800372a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d121      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e09e      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d115      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e092      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c8:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e086      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e07e      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 0203 	bic.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	493f      	ldr	r1, [pc, #252]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fa:	f7fd fde3 	bl	80012c4 <HAL_GetTick>
 80036fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	e00a      	b.n	8003718 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fd fddf 	bl	80012c4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e066      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 020c 	and.w	r2, r3, #12
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	429a      	cmp	r2, r3
 8003728:	d1eb      	bne.n	8003702 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	492c      	ldr	r1, [pc, #176]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d210      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	4924      	ldr	r1, [pc, #144]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e036      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4918      	ldr	r1, [pc, #96]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4910      	ldr	r1, [pc, #64]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037b6:	f000 f825 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_RCC_ClockConfig+0x1b4>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490c      	ldr	r1, [pc, #48]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fd22 	bl	8001224 <HAL_InitTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	080062c8 	.word	0x080062c8
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	20000010 	.word	0x20000010

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d121      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d11e      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003838:	4b34      	ldr	r3, [pc, #208]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003844:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e005      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003854:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003874:	e00a      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d102      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800387c:	4b25      	ldr	r3, [pc, #148]	; (8003914 <HAL_RCC_GetSysClockFreq+0x110>)
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e004      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d101      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_RCC_GetSysClockFreq+0x114>)
 800388a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d134      	bne.n	80038fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0xa6>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d003      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0xac>
 80038a8:	e005      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ac:	617b      	str	r3, [r7, #20]
      break;
 80038ae:	e005      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_GetSysClockFreq+0x114>)
 80038b2:	617b      	str	r3, [r7, #20]
      break;
 80038b4:	e002      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	3301      	adds	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	fb02 f203 	mul.w	r2, r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	0e5b      	lsrs	r3, r3, #25
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	3301      	adds	r3, #1
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038fc:	69bb      	ldr	r3, [r7, #24]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	080062e0 	.word	0x080062e0
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	; (800395c <HAL_RCC_GetPCLK1Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	080062d8 	.word	0x080062d8

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003964:	f7ff ffda 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4904      	ldr	r1, [pc, #16]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	080062d8 	.word	0x080062d8

0800398c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039a4:	f7ff fa02 	bl	8002dac <HAL_PWREx_GetVoltageRange>
 80039a8:	6178      	str	r0, [r7, #20]
 80039aa:	e014      	b.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7ff f9f2 	bl	8002dac <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039dc:	d10b      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d919      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2ba0      	cmp	r3, #160	; 0xa0
 80039e8:	d902      	bls.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ea:	2302      	movs	r3, #2
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e013      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e010      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d902      	bls.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	d102      	bne.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 0207 	bic.w	r2, r3, #7
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d041      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a70:	d02a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a76:	d824      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a82:	d81e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a90:	4b86      	ldr	r3, [pc, #536]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a85      	ldr	r2, [pc, #532]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fabb 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aae:	e00c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fba6 	bl	8004208 <RCCEx_PLLSAI2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad0:	4b76      	ldr	r3, [pc, #472]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ade:	4973      	ldr	r1, [pc, #460]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d041      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b00:	d02a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b06:	d824      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b0c:	d008      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b12:	d81e      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b1c:	d010      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b1e:	e018      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b20:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a61      	ldr	r2, [pc, #388]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b2c:	e015      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fa73 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b3e:	e00c      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3320      	adds	r3, #32
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fb5e 	bl	8004208 <RCCEx_PLLSAI2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	74fb      	strb	r3, [r7, #19]
      break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b60:	4b52      	ldr	r3, [pc, #328]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6e:	494f      	ldr	r1, [pc, #316]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b76:	e001      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a0 	beq.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b8e:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	4a40      	ldr	r2, [pc, #256]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb0:	4b3e      	ldr	r3, [pc, #248]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fb7a 	bl	80012c4 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fd fb76 	bl	80012c4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d902      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	74fb      	strb	r3, [r7, #19]
        break;
 8003be6:	e005      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d15c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01f      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d019      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fb35 	bl	80012c4 <HAL_GetTick>
 8003c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fb31 	bl	80012c4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d902      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	74fb      	strb	r3, [r7, #19]
            break;
 8003c74:	e006      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ec      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	4904      	ldr	r1, [pc, #16]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	74bb      	strb	r3, [r7, #18]
 8003ca8:	e006      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb8:	7c7b      	ldrb	r3, [r7, #17]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b9e      	ldr	r3, [pc, #632]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	4a9d      	ldr	r2, [pc, #628]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd6:	4b98      	ldr	r3, [pc, #608]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	4994      	ldr	r1, [pc, #592]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf8:	4b8f      	ldr	r3, [pc, #572]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f023 020c 	bic.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	498c      	ldr	r1, [pc, #560]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d1a:	4b87      	ldr	r3, [pc, #540]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	4983      	ldr	r1, [pc, #524]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	497b      	ldr	r1, [pc, #492]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	4972      	ldr	r1, [pc, #456]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d80:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	496a      	ldr	r1, [pc, #424]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	4961      	ldr	r1, [pc, #388]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc4:	4b5c      	ldr	r3, [pc, #368]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	4959      	ldr	r1, [pc, #356]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de6:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	4950      	ldr	r1, [pc, #320]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	4948      	ldr	r1, [pc, #288]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2a:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	493f      	ldr	r1, [pc, #252]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d028      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5a:	4937      	ldr	r1, [pc, #220]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a31      	ldr	r2, [pc, #196]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e76:	60d3      	str	r3, [r2, #12]
 8003e78:	e011      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f8c8 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	491f      	ldr	r1, [pc, #124]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ed4:	60d3      	str	r3, [r2, #12]
 8003ed6:	e011      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f899 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
 8003efa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f26:	d109      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a02      	ldr	r2, [pc, #8]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	e014      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f867 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d02f      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7a:	4928      	ldr	r1, [pc, #160]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f844 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d014      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
 8003fa6:	e011      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3320      	adds	r3, #32
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f925 	bl	8004208 <RCCEx_PLLSAI2_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe6:	490d      	ldr	r1, [pc, #52]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400a:	4904      	ldr	r1, [pc, #16]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004012:	7cbb      	ldrb	r3, [r7, #18]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402e:	4b75      	ldr	r3, [pc, #468]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800403a:	4b72      	ldr	r3, [pc, #456]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0203 	and.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d10d      	bne.n	8004066 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
       ||
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
       ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d047      	beq.n	80040f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e044      	b.n	80040f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d018      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0x86>
 8004074:	2b03      	cmp	r3, #3
 8004076:	d825      	bhi.n	80040c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <RCCEx_PLLSAI1_Config+0x62>
 800407c:	2b02      	cmp	r3, #2
 800407e:	d009      	beq.n	8004094 <RCCEx_PLLSAI1_Config+0x74>
 8004080:	e020      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004082:	4b60      	ldr	r3, [pc, #384]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11d      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004092:	e01a      	b.n	80040ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004094:	4b5b      	ldr	r3, [pc, #364]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e013      	b.n	80040ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040a6:	4b57      	ldr	r3, [pc, #348]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b2:	4b54      	ldr	r3, [pc, #336]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c2:	e006      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
      break;
 80040c8:	e004      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040da:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	430b      	orrs	r3, r1
 80040f0:	4944      	ldr	r1, [pc, #272]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d17d      	bne.n	80041f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040fc:	4b41      	ldr	r3, [pc, #260]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a40      	ldr	r2, [pc, #256]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fd f8dc 	bl	80012c4 <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800410e:	e009      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004110:	f7fd f8d8 	bl	80012c4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d902      	bls.n	8004124 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	73fb      	strb	r3, [r7, #15]
        break;
 8004122:	e005      	b.n	8004130 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004124:	4b37      	ldr	r3, [pc, #220]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ef      	bne.n	8004110 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d160      	bne.n	80041f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413c:	4b31      	ldr	r3, [pc, #196]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6892      	ldr	r2, [r2, #8]
 800414c:	0211      	lsls	r1, r2, #8
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68d2      	ldr	r2, [r2, #12]
 8004152:	0912      	lsrs	r2, r2, #4
 8004154:	0452      	lsls	r2, r2, #17
 8004156:	430a      	orrs	r2, r1
 8004158:	492a      	ldr	r1, [pc, #168]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	610b      	str	r3, [r1, #16]
 800415e:	e027      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d112      	bne.n	800418c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800416e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	0211      	lsls	r1, r2, #8
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6912      	ldr	r2, [r2, #16]
 800417c:	0852      	lsrs	r2, r2, #1
 800417e:	3a01      	subs	r2, #1
 8004180:	0552      	lsls	r2, r2, #21
 8004182:	430a      	orrs	r2, r1
 8004184:	491f      	ldr	r1, [pc, #124]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	610b      	str	r3, [r1, #16]
 800418a:	e011      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004194:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6892      	ldr	r2, [r2, #8]
 800419c:	0211      	lsls	r1, r2, #8
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6952      	ldr	r2, [r2, #20]
 80041a2:	0852      	lsrs	r2, r2, #1
 80041a4:	3a01      	subs	r2, #1
 80041a6:	0652      	lsls	r2, r2, #25
 80041a8:	430a      	orrs	r2, r1
 80041aa:	4916      	ldr	r1, [pc, #88]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd f882 	bl	80012c4 <HAL_GetTick>
 80041c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041c2:	e009      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c4:	f7fd f87e 	bl	80012c4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d902      	bls.n	80041d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	73fb      	strb	r3, [r7, #15]
          break;
 80041d6:	e005      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ef      	beq.n	80041c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4904      	ldr	r1, [pc, #16]	; (8004204 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000

08004208 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004216:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004222:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d10d      	bne.n	800424e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
       ||
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800423a:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
       ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d047      	beq.n	80042de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	e044      	b.n	80042de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d018      	beq.n	800428e <RCCEx_PLLSAI2_Config+0x86>
 800425c:	2b03      	cmp	r3, #3
 800425e:	d825      	bhi.n	80042ac <RCCEx_PLLSAI2_Config+0xa4>
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <RCCEx_PLLSAI2_Config+0x62>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d009      	beq.n	800427c <RCCEx_PLLSAI2_Config+0x74>
 8004268:	e020      	b.n	80042ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800426a:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11d      	bne.n	80042b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427a:	e01a      	b.n	80042b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800427c:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e013      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428e:	4b4c      	ldr	r3, [pc, #304]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800429a:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042aa:	e006      	b.n	80042ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e004      	b.n	80042bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	430b      	orrs	r3, r1
 80042d8:	4939      	ldr	r1, [pc, #228]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d167      	bne.n	80043b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042e4:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a35      	ldr	r2, [pc, #212]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f0:	f7fc ffe8 	bl	80012c4 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042f6:	e009      	b.n	800430c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f8:	f7fc ffe4 	bl	80012c4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d902      	bls.n	800430c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	73fb      	strb	r3, [r7, #15]
        break;
 800430a:	e005      	b.n	8004318 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800430c:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ef      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d14a      	bne.n	80043b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d111      	bne.n	8004348 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004324:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	0211      	lsls	r1, r2, #8
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	0912      	lsrs	r2, r2, #4
 800433c:	0452      	lsls	r2, r2, #17
 800433e:	430a      	orrs	r2, r1
 8004340:	491f      	ldr	r1, [pc, #124]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	614b      	str	r3, [r1, #20]
 8004346:	e011      	b.n	800436c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6892      	ldr	r2, [r2, #8]
 8004358:	0211      	lsls	r1, r2, #8
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6912      	ldr	r2, [r2, #16]
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0652      	lsls	r2, r2, #25
 8004364:	430a      	orrs	r2, r1
 8004366:	4916      	ldr	r1, [pc, #88]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	4313      	orrs	r3, r2
 800436a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fc ffa4 	bl	80012c4 <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800437e:	e009      	b.n	8004394 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004380:	f7fc ffa0 	bl	80012c4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d902      	bls.n	8004394 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	73fb      	strb	r3, [r7, #15]
          break;
 8004392:	e005      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ef      	beq.n	8004380 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4904      	ldr	r1, [pc, #16]	; (80043c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e049      	b.n	800446a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fd66 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 f8fc 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_TIM_ConfigClockSource+0x18>
 8004486:	2302      	movs	r3, #2
 8004488:	e0b5      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x184>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c6:	d03e      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0xd4>
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044cc:	f200 8087 	bhi.w	80045de <HAL_TIM_ConfigClockSource+0x16c>
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	f000 8085 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x170>
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044dc:	d87f      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 80044de:	2b70      	cmp	r3, #112	; 0x70
 80044e0:	d01a      	beq.n	8004518 <HAL_TIM_ConfigClockSource+0xa6>
 80044e2:	2b70      	cmp	r3, #112	; 0x70
 80044e4:	d87b      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 80044e6:	2b60      	cmp	r3, #96	; 0x60
 80044e8:	d050      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x11a>
 80044ea:	2b60      	cmp	r3, #96	; 0x60
 80044ec:	d877      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 80044ee:	2b50      	cmp	r3, #80	; 0x50
 80044f0:	d03c      	beq.n	800456c <HAL_TIM_ConfigClockSource+0xfa>
 80044f2:	2b50      	cmp	r3, #80	; 0x50
 80044f4:	d873      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d058      	beq.n	80045ac <HAL_TIM_ConfigClockSource+0x13a>
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d86f      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 80044fe:	2b30      	cmp	r3, #48	; 0x30
 8004500:	d064      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0x15a>
 8004502:	2b30      	cmp	r3, #48	; 0x30
 8004504:	d86b      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 8004506:	2b20      	cmp	r3, #32
 8004508:	d060      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0x15a>
 800450a:	2b20      	cmp	r3, #32
 800450c:	d867      	bhi.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d05c      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0x15a>
 8004512:	2b10      	cmp	r3, #16
 8004514:	d05a      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004516:	e062      	b.n	80045de <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6899      	ldr	r1, [r3, #8]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f000 f97e 	bl	8004828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800453a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
      break;
 8004544:	e04e      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6899      	ldr	r1, [r3, #8]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f000 f967 	bl	8004828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004568:	609a      	str	r2, [r3, #8]
      break;
 800456a:	e03b      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	461a      	mov	r2, r3
 800457a:	f000 f8db 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2150      	movs	r1, #80	; 0x50
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f934 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800458a:	e02b      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	461a      	mov	r2, r3
 800459a:	f000 f8fa 	bl	8004792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2160      	movs	r1, #96	; 0x60
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f924 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 80045aa:	e01b      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	461a      	mov	r2, r3
 80045ba:	f000 f8bb 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2140      	movs	r1, #64	; 0x40
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f914 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 80045ca:	e00b      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f000 f90b 	bl	80047f2 <TIM_ITRx_SetConfig>
        break;
 80045dc:	e002      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80045e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a40      	ldr	r2, [pc, #256]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00f      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3d      	ldr	r2, [pc, #244]	; (8004718 <TIM_Base_SetConfig+0x118>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3c      	ldr	r2, [pc, #240]	; (800471c <TIM_Base_SetConfig+0x11c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <TIM_Base_SetConfig+0x120>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3a      	ldr	r2, [pc, #232]	; (8004724 <TIM_Base_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d108      	bne.n	8004652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <TIM_Base_SetConfig+0x118>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2b      	ldr	r2, [pc, #172]	; (800471c <TIM_Base_SetConfig+0x11c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <TIM_Base_SetConfig+0x120>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_Base_SetConfig+0x124>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a28      	ldr	r2, [pc, #160]	; (8004728 <TIM_Base_SetConfig+0x128>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <TIM_Base_SetConfig+0x12c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a26      	ldr	r2, [pc, #152]	; (8004730 <TIM_Base_SetConfig+0x130>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <TIM_Base_SetConfig+0x128>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <TIM_Base_SetConfig+0x12c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <TIM_Base_SetConfig+0x130>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0210 	bic.w	r2, r3, #16
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	f043 0307 	orr.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	431a      	orrs	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e068      	b.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2e      	ldr	r2, [pc, #184]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d108      	bne.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01d      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d018      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a14      	ldr	r2, [pc, #80]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10c      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4313      	orrs	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40013400 	.word	0x40013400
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40014000 	.word	0x40014000

08004978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e040      	b.n	8004a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc faae 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f82c 	bl	8004a14 <UART_SetConfig>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e022      	b.n	8004a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 faaa 	bl	8004f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb31 	bl	800506c <UART_CheckIdleState>
 8004a0a:	4603      	mov	r3, r0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a14:	b5b0      	push	{r4, r5, r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4bad      	ldr	r3, [pc, #692]	; (8004cf4 <UART_SetConfig+0x2e0>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	69f9      	ldr	r1, [r7, #28]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4aa2      	ldr	r2, [pc, #648]	; (8004cf8 <UART_SetConfig+0x2e4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a99      	ldr	r2, [pc, #612]	; (8004cfc <UART_SetConfig+0x2e8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d121      	bne.n	8004ade <UART_SetConfig+0xca>
 8004a9a:	4b99      	ldr	r3, [pc, #612]	; (8004d00 <UART_SetConfig+0x2ec>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d817      	bhi.n	8004ad8 <UART_SetConfig+0xc4>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x9c>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ac7 	.word	0x08004ac7
 8004abc:	08004ad3 	.word	0x08004ad3
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	76fb      	strb	r3, [r7, #27]
 8004ac4:	e0e7      	b.n	8004c96 <UART_SetConfig+0x282>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	76fb      	strb	r3, [r7, #27]
 8004aca:	e0e4      	b.n	8004c96 <UART_SetConfig+0x282>
 8004acc:	2304      	movs	r3, #4
 8004ace:	76fb      	strb	r3, [r7, #27]
 8004ad0:	e0e1      	b.n	8004c96 <UART_SetConfig+0x282>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	76fb      	strb	r3, [r7, #27]
 8004ad6:	e0de      	b.n	8004c96 <UART_SetConfig+0x282>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	76fb      	strb	r3, [r7, #27]
 8004adc:	e0db      	b.n	8004c96 <UART_SetConfig+0x282>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a88      	ldr	r2, [pc, #544]	; (8004d04 <UART_SetConfig+0x2f0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d132      	bne.n	8004b4e <UART_SetConfig+0x13a>
 8004ae8:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <UART_SetConfig+0x2ec>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d828      	bhi.n	8004b48 <UART_SetConfig+0x134>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xe8>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b49 	.word	0x08004b49
 8004b04:	08004b49 	.word	0x08004b49
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b3d 	.word	0x08004b3d
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004b37 	.word	0x08004b37
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004b43 	.word	0x08004b43
 8004b30:	2300      	movs	r3, #0
 8004b32:	76fb      	strb	r3, [r7, #27]
 8004b34:	e0af      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b36:	2302      	movs	r3, #2
 8004b38:	76fb      	strb	r3, [r7, #27]
 8004b3a:	e0ac      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	76fb      	strb	r3, [r7, #27]
 8004b40:	e0a9      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b42:	2308      	movs	r3, #8
 8004b44:	76fb      	strb	r3, [r7, #27]
 8004b46:	e0a6      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	76fb      	strb	r3, [r7, #27]
 8004b4c:	e0a3      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6d      	ldr	r2, [pc, #436]	; (8004d08 <UART_SetConfig+0x2f4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d120      	bne.n	8004b9a <UART_SetConfig+0x186>
 8004b58:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <UART_SetConfig+0x2ec>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b62:	2b30      	cmp	r3, #48	; 0x30
 8004b64:	d013      	beq.n	8004b8e <UART_SetConfig+0x17a>
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	d814      	bhi.n	8004b94 <UART_SetConfig+0x180>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d009      	beq.n	8004b82 <UART_SetConfig+0x16e>
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d810      	bhi.n	8004b94 <UART_SetConfig+0x180>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <UART_SetConfig+0x168>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d006      	beq.n	8004b88 <UART_SetConfig+0x174>
 8004b7a:	e00b      	b.n	8004b94 <UART_SetConfig+0x180>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	76fb      	strb	r3, [r7, #27]
 8004b80:	e089      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b82:	2302      	movs	r3, #2
 8004b84:	76fb      	strb	r3, [r7, #27]
 8004b86:	e086      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	76fb      	strb	r3, [r7, #27]
 8004b8c:	e083      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	76fb      	strb	r3, [r7, #27]
 8004b92:	e080      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b94:	2310      	movs	r3, #16
 8004b96:	76fb      	strb	r3, [r7, #27]
 8004b98:	e07d      	b.n	8004c96 <UART_SetConfig+0x282>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <UART_SetConfig+0x2f8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d120      	bne.n	8004be6 <UART_SetConfig+0x1d2>
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <UART_SetConfig+0x2ec>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bae:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb0:	d013      	beq.n	8004bda <UART_SetConfig+0x1c6>
 8004bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb4:	d814      	bhi.n	8004be0 <UART_SetConfig+0x1cc>
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d009      	beq.n	8004bce <UART_SetConfig+0x1ba>
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d810      	bhi.n	8004be0 <UART_SetConfig+0x1cc>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <UART_SetConfig+0x1b4>
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d006      	beq.n	8004bd4 <UART_SetConfig+0x1c0>
 8004bc6:	e00b      	b.n	8004be0 <UART_SetConfig+0x1cc>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	76fb      	strb	r3, [r7, #27]
 8004bcc:	e063      	b.n	8004c96 <UART_SetConfig+0x282>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	76fb      	strb	r3, [r7, #27]
 8004bd2:	e060      	b.n	8004c96 <UART_SetConfig+0x282>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	76fb      	strb	r3, [r7, #27]
 8004bd8:	e05d      	b.n	8004c96 <UART_SetConfig+0x282>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	76fb      	strb	r3, [r7, #27]
 8004bde:	e05a      	b.n	8004c96 <UART_SetConfig+0x282>
 8004be0:	2310      	movs	r3, #16
 8004be2:	76fb      	strb	r3, [r7, #27]
 8004be4:	e057      	b.n	8004c96 <UART_SetConfig+0x282>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a49      	ldr	r2, [pc, #292]	; (8004d10 <UART_SetConfig+0x2fc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d125      	bne.n	8004c3c <UART_SetConfig+0x228>
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <UART_SetConfig+0x2ec>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d017      	beq.n	8004c30 <UART_SetConfig+0x21c>
 8004c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c04:	d817      	bhi.n	8004c36 <UART_SetConfig+0x222>
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0a:	d00b      	beq.n	8004c24 <UART_SetConfig+0x210>
 8004c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c10:	d811      	bhi.n	8004c36 <UART_SetConfig+0x222>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <UART_SetConfig+0x20a>
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	d006      	beq.n	8004c2a <UART_SetConfig+0x216>
 8004c1c:	e00b      	b.n	8004c36 <UART_SetConfig+0x222>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	76fb      	strb	r3, [r7, #27]
 8004c22:	e038      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c24:	2302      	movs	r3, #2
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e035      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	76fb      	strb	r3, [r7, #27]
 8004c2e:	e032      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c30:	2308      	movs	r3, #8
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	e02f      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c36:	2310      	movs	r3, #16
 8004c38:	76fb      	strb	r3, [r7, #27]
 8004c3a:	e02c      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <UART_SetConfig+0x2e4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d125      	bne.n	8004c92 <UART_SetConfig+0x27e>
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <UART_SetConfig+0x2ec>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c54:	d017      	beq.n	8004c86 <UART_SetConfig+0x272>
 8004c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x278>
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d00b      	beq.n	8004c7a <UART_SetConfig+0x266>
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d811      	bhi.n	8004c8c <UART_SetConfig+0x278>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x260>
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x26c>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x278>
 8004c74:	2300      	movs	r3, #0
 8004c76:	76fb      	strb	r3, [r7, #27]
 8004c78:	e00d      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	76fb      	strb	r3, [r7, #27]
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c80:	2304      	movs	r3, #4
 8004c82:	76fb      	strb	r3, [r7, #27]
 8004c84:	e007      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c86:	2308      	movs	r3, #8
 8004c88:	76fb      	strb	r3, [r7, #27]
 8004c8a:	e004      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	76fb      	strb	r3, [r7, #27]
 8004c90:	e001      	b.n	8004c96 <UART_SetConfig+0x282>
 8004c92:	2310      	movs	r3, #16
 8004c94:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <UART_SetConfig+0x2e4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f040 8087 	bne.w	8004db0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca2:	7efb      	ldrb	r3, [r7, #27]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d837      	bhi.n	8004d18 <UART_SetConfig+0x304>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x29c>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004d19 	.word	0x08004d19
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004d19 	.word	0x08004d19
 8004cc0:	08004ce3 	.word	0x08004ce3
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	08004d19 	.word	0x08004d19
 8004cd0:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe fe2e 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	6178      	str	r0, [r7, #20]
        break;
 8004cda:	e022      	b.n	8004d22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <UART_SetConfig+0x300>)
 8004cde:	617b      	str	r3, [r7, #20]
        break;
 8004ce0:	e01f      	b.n	8004d22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fd8f 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8004ce6:	6178      	str	r0, [r7, #20]
        break;
 8004ce8:	e01b      	b.n	8004d22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	617b      	str	r3, [r7, #20]
        break;
 8004cf0:	e017      	b.n	8004d22 <UART_SetConfig+0x30e>
 8004cf2:	bf00      	nop
 8004cf4:	efff69f3 	.word	0xefff69f3
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004800 	.word	0x40004800
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	40005000 	.word	0x40005000
 8004d14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	76bb      	strb	r3, [r7, #26]
        break;
 8004d20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80f1 	beq.w	8004f0c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d305      	bcc.n	8004d46 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d902      	bls.n	8004d4c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	76bb      	strb	r3, [r7, #26]
 8004d4a:	e0df      	b.n	8004f0c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	020b      	lsls	r3, r1, #8
 8004d5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d62:	0202      	lsls	r2, r0, #8
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	6849      	ldr	r1, [r1, #4]
 8004d68:	0849      	lsrs	r1, r1, #1
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	1814      	adds	r4, r2, r0
 8004d72:	eb43 0501 	adc.w	r5, r3, r1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	f7fb fa74 	bl	8000270 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d96:	d308      	bcc.n	8004daa <UART_SetConfig+0x396>
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9e:	d204      	bcs.n	8004daa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	e0b0      	b.n	8004f0c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	76bb      	strb	r3, [r7, #26]
 8004dae:	e0ad      	b.n	8004f0c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db8:	d15c      	bne.n	8004e74 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004dba:	7efb      	ldrb	r3, [r7, #27]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d828      	bhi.n	8004e12 <UART_SetConfig+0x3fe>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <UART_SetConfig+0x3b4>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004dfd 	.word	0x08004dfd
 8004dd4:	08004e13 	.word	0x08004e13
 8004dd8:	08004e03 	.word	0x08004e03
 8004ddc:	08004e13 	.word	0x08004e13
 8004de0:	08004e13 	.word	0x08004e13
 8004de4:	08004e13 	.word	0x08004e13
 8004de8:	08004e0b 	.word	0x08004e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dec:	f7fe fda2 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8004df0:	6178      	str	r0, [r7, #20]
        break;
 8004df2:	e013      	b.n	8004e1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df4:	f7fe fdb4 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8004df8:	6178      	str	r0, [r7, #20]
        break;
 8004dfa:	e00f      	b.n	8004e1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfc:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <UART_SetConfig+0x510>)
 8004dfe:	617b      	str	r3, [r7, #20]
        break;
 8004e00:	e00c      	b.n	8004e1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f7fe fcff 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8004e06:	6178      	str	r0, [r7, #20]
        break;
 8004e08:	e008      	b.n	8004e1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	617b      	str	r3, [r7, #20]
        break;
 8004e10:	e004      	b.n	8004e1c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	76bb      	strb	r3, [r7, #26]
        break;
 8004e1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d074      	beq.n	8004f0c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	005a      	lsls	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b0f      	cmp	r3, #15
 8004e3e:	d916      	bls.n	8004e6e <UART_SetConfig+0x45a>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e46:	d212      	bcs.n	8004e6e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f023 030f 	bic.w	r3, r3, #15
 8004e50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	89fb      	ldrh	r3, [r7, #14]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	89fa      	ldrh	r2, [r7, #14]
 8004e6a:	60da      	str	r2, [r3, #12]
 8004e6c:	e04e      	b.n	8004f0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	76bb      	strb	r3, [r7, #26]
 8004e72:	e04b      	b.n	8004f0c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e74:	7efb      	ldrb	r3, [r7, #27]
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d827      	bhi.n	8004eca <UART_SetConfig+0x4b6>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x46c>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004ecb 	.word	0x08004ecb
 8004e90:	08004ebb 	.word	0x08004ebb
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ecb 	.word	0x08004ecb
 8004ea0:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fd46 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	6178      	str	r0, [r7, #20]
        break;
 8004eaa:	e013      	b.n	8004ed4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eac:	f7fe fd58 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8004eb0:	6178      	str	r0, [r7, #20]
        break;
 8004eb2:	e00f      	b.n	8004ed4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <UART_SetConfig+0x510>)
 8004eb6:	617b      	str	r3, [r7, #20]
        break;
 8004eb8:	e00c      	b.n	8004ed4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eba:	f7fe fca3 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8004ebe:	6178      	str	r0, [r7, #20]
        break;
 8004ec0:	e008      	b.n	8004ed4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec6:	617b      	str	r3, [r7, #20]
        break;
 8004ec8:	e004      	b.n	8004ed4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	76bb      	strb	r3, [r7, #26]
        break;
 8004ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	085a      	lsrs	r2, r3, #1
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d908      	bls.n	8004f08 <UART_SetConfig+0x4f4>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d204      	bcs.n	8004f08 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	e001      	b.n	8004f0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f18:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bdb0      	pop	{r4, r5, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	00f42400 	.word	0x00f42400

08004f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01a      	beq.n	800503e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005026:	d10a      	bne.n	800503e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800507c:	f7fc f922 	bl	80012c4 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b08      	cmp	r3, #8
 800508e:	d10e      	bne.n	80050ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f82d 	bl	80050fe <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e023      	b.n	80050f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d10e      	bne.n	80050da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f817 	bl	80050fe <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e00d      	b.n	80050f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510e:	e05e      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d05a      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005118:	f7fc f8d4 	bl	80012c4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <UART_WaitOnFlagUntilTimeout+0x30>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11b      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800513c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e043      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02c      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d124      	bne.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800519c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e00f      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4013      	ands	r3, r2
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	429a      	cmp	r2, r3
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d091      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <__errno>:
 80051f8:	4b01      	ldr	r3, [pc, #4]	; (8005200 <__errno+0x8>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000018 	.word	0x20000018

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4d0d      	ldr	r5, [pc, #52]	; (800523c <__libc_init_array+0x38>)
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <__libc_init_array+0x3c>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2600      	movs	r6, #0
 8005210:	42a6      	cmp	r6, r4
 8005212:	d109      	bne.n	8005228 <__libc_init_array+0x24>
 8005214:	4d0b      	ldr	r5, [pc, #44]	; (8005244 <__libc_init_array+0x40>)
 8005216:	4c0c      	ldr	r4, [pc, #48]	; (8005248 <__libc_init_array+0x44>)
 8005218:	f000 ffec 	bl	80061f4 <_init>
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	2600      	movs	r6, #0
 8005222:	42a6      	cmp	r6, r4
 8005224:	d105      	bne.n	8005232 <__libc_init_array+0x2e>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f855 3b04 	ldr.w	r3, [r5], #4
 800522c:	4798      	blx	r3
 800522e:	3601      	adds	r6, #1
 8005230:	e7ee      	b.n	8005210 <__libc_init_array+0xc>
 8005232:	f855 3b04 	ldr.w	r3, [r5], #4
 8005236:	4798      	blx	r3
 8005238:	3601      	adds	r6, #1
 800523a:	e7f2      	b.n	8005222 <__libc_init_array+0x1e>
 800523c:	080063b0 	.word	0x080063b0
 8005240:	080063b0 	.word	0x080063b0
 8005244:	080063b0 	.word	0x080063b0
 8005248:	080063b4 	.word	0x080063b4

0800524c <memset>:
 800524c:	4402      	add	r2, r0
 800524e:	4603      	mov	r3, r0
 8005250:	4293      	cmp	r3, r2
 8005252:	d100      	bne.n	8005256 <memset+0xa>
 8005254:	4770      	bx	lr
 8005256:	f803 1b01 	strb.w	r1, [r3], #1
 800525a:	e7f9      	b.n	8005250 <memset+0x4>

0800525c <iprintf>:
 800525c:	b40f      	push	{r0, r1, r2, r3}
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <iprintf+0x2c>)
 8005260:	b513      	push	{r0, r1, r4, lr}
 8005262:	681c      	ldr	r4, [r3, #0]
 8005264:	b124      	cbz	r4, 8005270 <iprintf+0x14>
 8005266:	69a3      	ldr	r3, [r4, #24]
 8005268:	b913      	cbnz	r3, 8005270 <iprintf+0x14>
 800526a:	4620      	mov	r0, r4
 800526c:	f000 fa5e 	bl	800572c <__sinit>
 8005270:	ab05      	add	r3, sp, #20
 8005272:	9a04      	ldr	r2, [sp, #16]
 8005274:	68a1      	ldr	r1, [r4, #8]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fc2f 	bl	8005adc <_vfiprintf_r>
 800527e:	b002      	add	sp, #8
 8005280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr
 8005288:	20000018 	.word	0x20000018

0800528c <_puts_r>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	460e      	mov	r6, r1
 8005290:	4605      	mov	r5, r0
 8005292:	b118      	cbz	r0, 800529c <_puts_r+0x10>
 8005294:	6983      	ldr	r3, [r0, #24]
 8005296:	b90b      	cbnz	r3, 800529c <_puts_r+0x10>
 8005298:	f000 fa48 	bl	800572c <__sinit>
 800529c:	69ab      	ldr	r3, [r5, #24]
 800529e:	68ac      	ldr	r4, [r5, #8]
 80052a0:	b913      	cbnz	r3, 80052a8 <_puts_r+0x1c>
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 fa42 	bl	800572c <__sinit>
 80052a8:	4b2c      	ldr	r3, [pc, #176]	; (800535c <_puts_r+0xd0>)
 80052aa:	429c      	cmp	r4, r3
 80052ac:	d120      	bne.n	80052f0 <_puts_r+0x64>
 80052ae:	686c      	ldr	r4, [r5, #4]
 80052b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052b2:	07db      	lsls	r3, r3, #31
 80052b4:	d405      	bmi.n	80052c2 <_puts_r+0x36>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	0598      	lsls	r0, r3, #22
 80052ba:	d402      	bmi.n	80052c2 <_puts_r+0x36>
 80052bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052be:	f000 fad3 	bl	8005868 <__retarget_lock_acquire_recursive>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	0719      	lsls	r1, r3, #28
 80052c6:	d51d      	bpl.n	8005304 <_puts_r+0x78>
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	b1db      	cbz	r3, 8005304 <_puts_r+0x78>
 80052cc:	3e01      	subs	r6, #1
 80052ce:	68a3      	ldr	r3, [r4, #8]
 80052d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052d4:	3b01      	subs	r3, #1
 80052d6:	60a3      	str	r3, [r4, #8]
 80052d8:	bb39      	cbnz	r1, 800532a <_puts_r+0x9e>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da38      	bge.n	8005350 <_puts_r+0xc4>
 80052de:	4622      	mov	r2, r4
 80052e0:	210a      	movs	r1, #10
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 f848 	bl	8005378 <__swbuf_r>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d011      	beq.n	8005310 <_puts_r+0x84>
 80052ec:	250a      	movs	r5, #10
 80052ee:	e011      	b.n	8005314 <_puts_r+0x88>
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <_puts_r+0xd4>)
 80052f2:	429c      	cmp	r4, r3
 80052f4:	d101      	bne.n	80052fa <_puts_r+0x6e>
 80052f6:	68ac      	ldr	r4, [r5, #8]
 80052f8:	e7da      	b.n	80052b0 <_puts_r+0x24>
 80052fa:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <_puts_r+0xd8>)
 80052fc:	429c      	cmp	r4, r3
 80052fe:	bf08      	it	eq
 8005300:	68ec      	ldreq	r4, [r5, #12]
 8005302:	e7d5      	b.n	80052b0 <_puts_r+0x24>
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f888 	bl	800541c <__swsetup_r>
 800530c:	2800      	cmp	r0, #0
 800530e:	d0dd      	beq.n	80052cc <_puts_r+0x40>
 8005310:	f04f 35ff 	mov.w	r5, #4294967295
 8005314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005316:	07da      	lsls	r2, r3, #31
 8005318:	d405      	bmi.n	8005326 <_puts_r+0x9a>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	059b      	lsls	r3, r3, #22
 800531e:	d402      	bmi.n	8005326 <_puts_r+0x9a>
 8005320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005322:	f000 faa2 	bl	800586a <__retarget_lock_release_recursive>
 8005326:	4628      	mov	r0, r5
 8005328:	bd70      	pop	{r4, r5, r6, pc}
 800532a:	2b00      	cmp	r3, #0
 800532c:	da04      	bge.n	8005338 <_puts_r+0xac>
 800532e:	69a2      	ldr	r2, [r4, #24]
 8005330:	429a      	cmp	r2, r3
 8005332:	dc06      	bgt.n	8005342 <_puts_r+0xb6>
 8005334:	290a      	cmp	r1, #10
 8005336:	d004      	beq.n	8005342 <_puts_r+0xb6>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	6022      	str	r2, [r4, #0]
 800533e:	7019      	strb	r1, [r3, #0]
 8005340:	e7c5      	b.n	80052ce <_puts_r+0x42>
 8005342:	4622      	mov	r2, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f000 f817 	bl	8005378 <__swbuf_r>
 800534a:	3001      	adds	r0, #1
 800534c:	d1bf      	bne.n	80052ce <_puts_r+0x42>
 800534e:	e7df      	b.n	8005310 <_puts_r+0x84>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	250a      	movs	r5, #10
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	6022      	str	r2, [r4, #0]
 8005358:	701d      	strb	r5, [r3, #0]
 800535a:	e7db      	b.n	8005314 <_puts_r+0x88>
 800535c:	08006334 	.word	0x08006334
 8005360:	08006354 	.word	0x08006354
 8005364:	08006314 	.word	0x08006314

08005368 <puts>:
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <puts+0xc>)
 800536a:	4601      	mov	r1, r0
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	f7ff bf8d 	b.w	800528c <_puts_r>
 8005372:	bf00      	nop
 8005374:	20000018 	.word	0x20000018

08005378 <__swbuf_r>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	460e      	mov	r6, r1
 800537c:	4614      	mov	r4, r2
 800537e:	4605      	mov	r5, r0
 8005380:	b118      	cbz	r0, 800538a <__swbuf_r+0x12>
 8005382:	6983      	ldr	r3, [r0, #24]
 8005384:	b90b      	cbnz	r3, 800538a <__swbuf_r+0x12>
 8005386:	f000 f9d1 	bl	800572c <__sinit>
 800538a:	4b21      	ldr	r3, [pc, #132]	; (8005410 <__swbuf_r+0x98>)
 800538c:	429c      	cmp	r4, r3
 800538e:	d12b      	bne.n	80053e8 <__swbuf_r+0x70>
 8005390:	686c      	ldr	r4, [r5, #4]
 8005392:	69a3      	ldr	r3, [r4, #24]
 8005394:	60a3      	str	r3, [r4, #8]
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	071a      	lsls	r2, r3, #28
 800539a:	d52f      	bpl.n	80053fc <__swbuf_r+0x84>
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	b36b      	cbz	r3, 80053fc <__swbuf_r+0x84>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	1ac0      	subs	r0, r0, r3
 80053a6:	6963      	ldr	r3, [r4, #20]
 80053a8:	b2f6      	uxtb	r6, r6
 80053aa:	4283      	cmp	r3, r0
 80053ac:	4637      	mov	r7, r6
 80053ae:	dc04      	bgt.n	80053ba <__swbuf_r+0x42>
 80053b0:	4621      	mov	r1, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 f926 	bl	8005604 <_fflush_r>
 80053b8:	bb30      	cbnz	r0, 8005408 <__swbuf_r+0x90>
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	3b01      	subs	r3, #1
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	6022      	str	r2, [r4, #0]
 80053c6:	701e      	strb	r6, [r3, #0]
 80053c8:	6963      	ldr	r3, [r4, #20]
 80053ca:	3001      	adds	r0, #1
 80053cc:	4283      	cmp	r3, r0
 80053ce:	d004      	beq.n	80053da <__swbuf_r+0x62>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d506      	bpl.n	80053e4 <__swbuf_r+0x6c>
 80053d6:	2e0a      	cmp	r6, #10
 80053d8:	d104      	bne.n	80053e4 <__swbuf_r+0x6c>
 80053da:	4621      	mov	r1, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 f911 	bl	8005604 <_fflush_r>
 80053e2:	b988      	cbnz	r0, 8005408 <__swbuf_r+0x90>
 80053e4:	4638      	mov	r0, r7
 80053e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <__swbuf_r+0x9c>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d101      	bne.n	80053f2 <__swbuf_r+0x7a>
 80053ee:	68ac      	ldr	r4, [r5, #8]
 80053f0:	e7cf      	b.n	8005392 <__swbuf_r+0x1a>
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <__swbuf_r+0xa0>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	bf08      	it	eq
 80053f8:	68ec      	ldreq	r4, [r5, #12]
 80053fa:	e7ca      	b.n	8005392 <__swbuf_r+0x1a>
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f80c 	bl	800541c <__swsetup_r>
 8005404:	2800      	cmp	r0, #0
 8005406:	d0cb      	beq.n	80053a0 <__swbuf_r+0x28>
 8005408:	f04f 37ff 	mov.w	r7, #4294967295
 800540c:	e7ea      	b.n	80053e4 <__swbuf_r+0x6c>
 800540e:	bf00      	nop
 8005410:	08006334 	.word	0x08006334
 8005414:	08006354 	.word	0x08006354
 8005418:	08006314 	.word	0x08006314

0800541c <__swsetup_r>:
 800541c:	4b32      	ldr	r3, [pc, #200]	; (80054e8 <__swsetup_r+0xcc>)
 800541e:	b570      	push	{r4, r5, r6, lr}
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	b125      	cbz	r5, 8005432 <__swsetup_r+0x16>
 8005428:	69ab      	ldr	r3, [r5, #24]
 800542a:	b913      	cbnz	r3, 8005432 <__swsetup_r+0x16>
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f97d 	bl	800572c <__sinit>
 8005432:	4b2e      	ldr	r3, [pc, #184]	; (80054ec <__swsetup_r+0xd0>)
 8005434:	429c      	cmp	r4, r3
 8005436:	d10f      	bne.n	8005458 <__swsetup_r+0x3c>
 8005438:	686c      	ldr	r4, [r5, #4]
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005440:	0719      	lsls	r1, r3, #28
 8005442:	d42c      	bmi.n	800549e <__swsetup_r+0x82>
 8005444:	06dd      	lsls	r5, r3, #27
 8005446:	d411      	bmi.n	800546c <__swsetup_r+0x50>
 8005448:	2309      	movs	r3, #9
 800544a:	6033      	str	r3, [r6, #0]
 800544c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	f04f 30ff 	mov.w	r0, #4294967295
 8005456:	e03e      	b.n	80054d6 <__swsetup_r+0xba>
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <__swsetup_r+0xd4>)
 800545a:	429c      	cmp	r4, r3
 800545c:	d101      	bne.n	8005462 <__swsetup_r+0x46>
 800545e:	68ac      	ldr	r4, [r5, #8]
 8005460:	e7eb      	b.n	800543a <__swsetup_r+0x1e>
 8005462:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <__swsetup_r+0xd8>)
 8005464:	429c      	cmp	r4, r3
 8005466:	bf08      	it	eq
 8005468:	68ec      	ldreq	r4, [r5, #12]
 800546a:	e7e6      	b.n	800543a <__swsetup_r+0x1e>
 800546c:	0758      	lsls	r0, r3, #29
 800546e:	d512      	bpl.n	8005496 <__swsetup_r+0x7a>
 8005470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005472:	b141      	cbz	r1, 8005486 <__swsetup_r+0x6a>
 8005474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005478:	4299      	cmp	r1, r3
 800547a:	d002      	beq.n	8005482 <__swsetup_r+0x66>
 800547c:	4630      	mov	r0, r6
 800547e:	f000 fa59 	bl	8005934 <_free_r>
 8005482:	2300      	movs	r3, #0
 8005484:	6363      	str	r3, [r4, #52]	; 0x34
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f043 0308 	orr.w	r3, r3, #8
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	b94b      	cbnz	r3, 80054b6 <__swsetup_r+0x9a>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ac:	d003      	beq.n	80054b6 <__swsetup_r+0x9a>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4630      	mov	r0, r6
 80054b2:	f000 f9ff 	bl	80058b4 <__smakebuf_r>
 80054b6:	89a0      	ldrh	r0, [r4, #12]
 80054b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054bc:	f010 0301 	ands.w	r3, r0, #1
 80054c0:	d00a      	beq.n	80054d8 <__swsetup_r+0xbc>
 80054c2:	2300      	movs	r3, #0
 80054c4:	60a3      	str	r3, [r4, #8]
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	425b      	negs	r3, r3
 80054ca:	61a3      	str	r3, [r4, #24]
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	b943      	cbnz	r3, 80054e2 <__swsetup_r+0xc6>
 80054d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054d4:	d1ba      	bne.n	800544c <__swsetup_r+0x30>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	0781      	lsls	r1, r0, #30
 80054da:	bf58      	it	pl
 80054dc:	6963      	ldrpl	r3, [r4, #20]
 80054de:	60a3      	str	r3, [r4, #8]
 80054e0:	e7f4      	b.n	80054cc <__swsetup_r+0xb0>
 80054e2:	2000      	movs	r0, #0
 80054e4:	e7f7      	b.n	80054d6 <__swsetup_r+0xba>
 80054e6:	bf00      	nop
 80054e8:	20000018 	.word	0x20000018
 80054ec:	08006334 	.word	0x08006334
 80054f0:	08006354 	.word	0x08006354
 80054f4:	08006314 	.word	0x08006314

080054f8 <__sflush_r>:
 80054f8:	898a      	ldrh	r2, [r1, #12]
 80054fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	4605      	mov	r5, r0
 8005500:	0710      	lsls	r0, r2, #28
 8005502:	460c      	mov	r4, r1
 8005504:	d458      	bmi.n	80055b8 <__sflush_r+0xc0>
 8005506:	684b      	ldr	r3, [r1, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	dc05      	bgt.n	8005518 <__sflush_r+0x20>
 800550c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	dc02      	bgt.n	8005518 <__sflush_r+0x20>
 8005512:	2000      	movs	r0, #0
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800551a:	2e00      	cmp	r6, #0
 800551c:	d0f9      	beq.n	8005512 <__sflush_r+0x1a>
 800551e:	2300      	movs	r3, #0
 8005520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005524:	682f      	ldr	r7, [r5, #0]
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	d032      	beq.n	8005590 <__sflush_r+0x98>
 800552a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	075a      	lsls	r2, r3, #29
 8005530:	d505      	bpl.n	800553e <__sflush_r+0x46>
 8005532:	6863      	ldr	r3, [r4, #4]
 8005534:	1ac0      	subs	r0, r0, r3
 8005536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005538:	b10b      	cbz	r3, 800553e <__sflush_r+0x46>
 800553a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800553c:	1ac0      	subs	r0, r0, r3
 800553e:	2300      	movs	r3, #0
 8005540:	4602      	mov	r2, r0
 8005542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005544:	6a21      	ldr	r1, [r4, #32]
 8005546:	4628      	mov	r0, r5
 8005548:	47b0      	blx	r6
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	d106      	bne.n	800555e <__sflush_r+0x66>
 8005550:	6829      	ldr	r1, [r5, #0]
 8005552:	291d      	cmp	r1, #29
 8005554:	d82c      	bhi.n	80055b0 <__sflush_r+0xb8>
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <__sflush_r+0x108>)
 8005558:	40ca      	lsrs	r2, r1
 800555a:	07d6      	lsls	r6, r2, #31
 800555c:	d528      	bpl.n	80055b0 <__sflush_r+0xb8>
 800555e:	2200      	movs	r2, #0
 8005560:	6062      	str	r2, [r4, #4]
 8005562:	04d9      	lsls	r1, r3, #19
 8005564:	6922      	ldr	r2, [r4, #16]
 8005566:	6022      	str	r2, [r4, #0]
 8005568:	d504      	bpl.n	8005574 <__sflush_r+0x7c>
 800556a:	1c42      	adds	r2, r0, #1
 800556c:	d101      	bne.n	8005572 <__sflush_r+0x7a>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	b903      	cbnz	r3, 8005574 <__sflush_r+0x7c>
 8005572:	6560      	str	r0, [r4, #84]	; 0x54
 8005574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005576:	602f      	str	r7, [r5, #0]
 8005578:	2900      	cmp	r1, #0
 800557a:	d0ca      	beq.n	8005512 <__sflush_r+0x1a>
 800557c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005580:	4299      	cmp	r1, r3
 8005582:	d002      	beq.n	800558a <__sflush_r+0x92>
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f9d5 	bl	8005934 <_free_r>
 800558a:	2000      	movs	r0, #0
 800558c:	6360      	str	r0, [r4, #52]	; 0x34
 800558e:	e7c1      	b.n	8005514 <__sflush_r+0x1c>
 8005590:	6a21      	ldr	r1, [r4, #32]
 8005592:	2301      	movs	r3, #1
 8005594:	4628      	mov	r0, r5
 8005596:	47b0      	blx	r6
 8005598:	1c41      	adds	r1, r0, #1
 800559a:	d1c7      	bne.n	800552c <__sflush_r+0x34>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0c4      	beq.n	800552c <__sflush_r+0x34>
 80055a2:	2b1d      	cmp	r3, #29
 80055a4:	d001      	beq.n	80055aa <__sflush_r+0xb2>
 80055a6:	2b16      	cmp	r3, #22
 80055a8:	d101      	bne.n	80055ae <__sflush_r+0xb6>
 80055aa:	602f      	str	r7, [r5, #0]
 80055ac:	e7b1      	b.n	8005512 <__sflush_r+0x1a>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	e7ad      	b.n	8005514 <__sflush_r+0x1c>
 80055b8:	690f      	ldr	r7, [r1, #16]
 80055ba:	2f00      	cmp	r7, #0
 80055bc:	d0a9      	beq.n	8005512 <__sflush_r+0x1a>
 80055be:	0793      	lsls	r3, r2, #30
 80055c0:	680e      	ldr	r6, [r1, #0]
 80055c2:	bf08      	it	eq
 80055c4:	694b      	ldreq	r3, [r1, #20]
 80055c6:	600f      	str	r7, [r1, #0]
 80055c8:	bf18      	it	ne
 80055ca:	2300      	movne	r3, #0
 80055cc:	eba6 0807 	sub.w	r8, r6, r7
 80055d0:	608b      	str	r3, [r1, #8]
 80055d2:	f1b8 0f00 	cmp.w	r8, #0
 80055d6:	dd9c      	ble.n	8005512 <__sflush_r+0x1a>
 80055d8:	6a21      	ldr	r1, [r4, #32]
 80055da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055dc:	4643      	mov	r3, r8
 80055de:	463a      	mov	r2, r7
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	2800      	cmp	r0, #0
 80055e6:	dc06      	bgt.n	80055f6 <__sflush_r+0xfe>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e78e      	b.n	8005514 <__sflush_r+0x1c>
 80055f6:	4407      	add	r7, r0
 80055f8:	eba8 0800 	sub.w	r8, r8, r0
 80055fc:	e7e9      	b.n	80055d2 <__sflush_r+0xda>
 80055fe:	bf00      	nop
 8005600:	20400001 	.word	0x20400001

08005604 <_fflush_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	690b      	ldr	r3, [r1, #16]
 8005608:	4605      	mov	r5, r0
 800560a:	460c      	mov	r4, r1
 800560c:	b913      	cbnz	r3, 8005614 <_fflush_r+0x10>
 800560e:	2500      	movs	r5, #0
 8005610:	4628      	mov	r0, r5
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	b118      	cbz	r0, 800561e <_fflush_r+0x1a>
 8005616:	6983      	ldr	r3, [r0, #24]
 8005618:	b90b      	cbnz	r3, 800561e <_fflush_r+0x1a>
 800561a:	f000 f887 	bl	800572c <__sinit>
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <_fflush_r+0x6c>)
 8005620:	429c      	cmp	r4, r3
 8005622:	d11b      	bne.n	800565c <_fflush_r+0x58>
 8005624:	686c      	ldr	r4, [r5, #4]
 8005626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0ef      	beq.n	800560e <_fflush_r+0xa>
 800562e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005630:	07d0      	lsls	r0, r2, #31
 8005632:	d404      	bmi.n	800563e <_fflush_r+0x3a>
 8005634:	0599      	lsls	r1, r3, #22
 8005636:	d402      	bmi.n	800563e <_fflush_r+0x3a>
 8005638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563a:	f000 f915 	bl	8005868 <__retarget_lock_acquire_recursive>
 800563e:	4628      	mov	r0, r5
 8005640:	4621      	mov	r1, r4
 8005642:	f7ff ff59 	bl	80054f8 <__sflush_r>
 8005646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005648:	07da      	lsls	r2, r3, #31
 800564a:	4605      	mov	r5, r0
 800564c:	d4e0      	bmi.n	8005610 <_fflush_r+0xc>
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	059b      	lsls	r3, r3, #22
 8005652:	d4dd      	bmi.n	8005610 <_fflush_r+0xc>
 8005654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005656:	f000 f908 	bl	800586a <__retarget_lock_release_recursive>
 800565a:	e7d9      	b.n	8005610 <_fflush_r+0xc>
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <_fflush_r+0x70>)
 800565e:	429c      	cmp	r4, r3
 8005660:	d101      	bne.n	8005666 <_fflush_r+0x62>
 8005662:	68ac      	ldr	r4, [r5, #8]
 8005664:	e7df      	b.n	8005626 <_fflush_r+0x22>
 8005666:	4b04      	ldr	r3, [pc, #16]	; (8005678 <_fflush_r+0x74>)
 8005668:	429c      	cmp	r4, r3
 800566a:	bf08      	it	eq
 800566c:	68ec      	ldreq	r4, [r5, #12]
 800566e:	e7da      	b.n	8005626 <_fflush_r+0x22>
 8005670:	08006334 	.word	0x08006334
 8005674:	08006354 	.word	0x08006354
 8005678:	08006314 	.word	0x08006314

0800567c <std>:
 800567c:	2300      	movs	r3, #0
 800567e:	b510      	push	{r4, lr}
 8005680:	4604      	mov	r4, r0
 8005682:	e9c0 3300 	strd	r3, r3, [r0]
 8005686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800568a:	6083      	str	r3, [r0, #8]
 800568c:	8181      	strh	r1, [r0, #12]
 800568e:	6643      	str	r3, [r0, #100]	; 0x64
 8005690:	81c2      	strh	r2, [r0, #14]
 8005692:	6183      	str	r3, [r0, #24]
 8005694:	4619      	mov	r1, r3
 8005696:	2208      	movs	r2, #8
 8005698:	305c      	adds	r0, #92	; 0x5c
 800569a:	f7ff fdd7 	bl	800524c <memset>
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <std+0x38>)
 80056a0:	6263      	str	r3, [r4, #36]	; 0x24
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <std+0x3c>)
 80056a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <std+0x40>)
 80056a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <std+0x44>)
 80056ac:	6224      	str	r4, [r4, #32]
 80056ae:	6323      	str	r3, [r4, #48]	; 0x30
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	bf00      	nop
 80056b4:	08006085 	.word	0x08006085
 80056b8:	080060a7 	.word	0x080060a7
 80056bc:	080060df 	.word	0x080060df
 80056c0:	08006103 	.word	0x08006103

080056c4 <_cleanup_r>:
 80056c4:	4901      	ldr	r1, [pc, #4]	; (80056cc <_cleanup_r+0x8>)
 80056c6:	f000 b8af 	b.w	8005828 <_fwalk_reent>
 80056ca:	bf00      	nop
 80056cc:	08005605 	.word	0x08005605

080056d0 <__sfmoreglue>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	1e4a      	subs	r2, r1, #1
 80056d4:	2568      	movs	r5, #104	; 0x68
 80056d6:	4355      	muls	r5, r2
 80056d8:	460e      	mov	r6, r1
 80056da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056de:	f000 f979 	bl	80059d4 <_malloc_r>
 80056e2:	4604      	mov	r4, r0
 80056e4:	b140      	cbz	r0, 80056f8 <__sfmoreglue+0x28>
 80056e6:	2100      	movs	r1, #0
 80056e8:	e9c0 1600 	strd	r1, r6, [r0]
 80056ec:	300c      	adds	r0, #12
 80056ee:	60a0      	str	r0, [r4, #8]
 80056f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056f4:	f7ff fdaa 	bl	800524c <memset>
 80056f8:	4620      	mov	r0, r4
 80056fa:	bd70      	pop	{r4, r5, r6, pc}

080056fc <__sfp_lock_acquire>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__sfp_lock_acquire+0x8>)
 80056fe:	f000 b8b3 	b.w	8005868 <__retarget_lock_acquire_recursive>
 8005702:	bf00      	nop
 8005704:	2000023c 	.word	0x2000023c

08005708 <__sfp_lock_release>:
 8005708:	4801      	ldr	r0, [pc, #4]	; (8005710 <__sfp_lock_release+0x8>)
 800570a:	f000 b8ae 	b.w	800586a <__retarget_lock_release_recursive>
 800570e:	bf00      	nop
 8005710:	2000023c 	.word	0x2000023c

08005714 <__sinit_lock_acquire>:
 8005714:	4801      	ldr	r0, [pc, #4]	; (800571c <__sinit_lock_acquire+0x8>)
 8005716:	f000 b8a7 	b.w	8005868 <__retarget_lock_acquire_recursive>
 800571a:	bf00      	nop
 800571c:	20000237 	.word	0x20000237

08005720 <__sinit_lock_release>:
 8005720:	4801      	ldr	r0, [pc, #4]	; (8005728 <__sinit_lock_release+0x8>)
 8005722:	f000 b8a2 	b.w	800586a <__retarget_lock_release_recursive>
 8005726:	bf00      	nop
 8005728:	20000237 	.word	0x20000237

0800572c <__sinit>:
 800572c:	b510      	push	{r4, lr}
 800572e:	4604      	mov	r4, r0
 8005730:	f7ff fff0 	bl	8005714 <__sinit_lock_acquire>
 8005734:	69a3      	ldr	r3, [r4, #24]
 8005736:	b11b      	cbz	r3, 8005740 <__sinit+0x14>
 8005738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573c:	f7ff bff0 	b.w	8005720 <__sinit_lock_release>
 8005740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005744:	6523      	str	r3, [r4, #80]	; 0x50
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <__sinit+0x68>)
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <__sinit+0x6c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	62a2      	str	r2, [r4, #40]	; 0x28
 800574e:	42a3      	cmp	r3, r4
 8005750:	bf04      	itt	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	61a3      	streq	r3, [r4, #24]
 8005756:	4620      	mov	r0, r4
 8005758:	f000 f820 	bl	800579c <__sfp>
 800575c:	6060      	str	r0, [r4, #4]
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f81c 	bl	800579c <__sfp>
 8005764:	60a0      	str	r0, [r4, #8]
 8005766:	4620      	mov	r0, r4
 8005768:	f000 f818 	bl	800579c <__sfp>
 800576c:	2200      	movs	r2, #0
 800576e:	60e0      	str	r0, [r4, #12]
 8005770:	2104      	movs	r1, #4
 8005772:	6860      	ldr	r0, [r4, #4]
 8005774:	f7ff ff82 	bl	800567c <std>
 8005778:	68a0      	ldr	r0, [r4, #8]
 800577a:	2201      	movs	r2, #1
 800577c:	2109      	movs	r1, #9
 800577e:	f7ff ff7d 	bl	800567c <std>
 8005782:	68e0      	ldr	r0, [r4, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	2112      	movs	r1, #18
 8005788:	f7ff ff78 	bl	800567c <std>
 800578c:	2301      	movs	r3, #1
 800578e:	61a3      	str	r3, [r4, #24]
 8005790:	e7d2      	b.n	8005738 <__sinit+0xc>
 8005792:	bf00      	nop
 8005794:	08006310 	.word	0x08006310
 8005798:	080056c5 	.word	0x080056c5

0800579c <__sfp>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	4607      	mov	r7, r0
 80057a0:	f7ff ffac 	bl	80056fc <__sfp_lock_acquire>
 80057a4:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <__sfp+0x84>)
 80057a6:	681e      	ldr	r6, [r3, #0]
 80057a8:	69b3      	ldr	r3, [r6, #24]
 80057aa:	b913      	cbnz	r3, 80057b2 <__sfp+0x16>
 80057ac:	4630      	mov	r0, r6
 80057ae:	f7ff ffbd 	bl	800572c <__sinit>
 80057b2:	3648      	adds	r6, #72	; 0x48
 80057b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	d503      	bpl.n	80057c4 <__sfp+0x28>
 80057bc:	6833      	ldr	r3, [r6, #0]
 80057be:	b30b      	cbz	r3, 8005804 <__sfp+0x68>
 80057c0:	6836      	ldr	r6, [r6, #0]
 80057c2:	e7f7      	b.n	80057b4 <__sfp+0x18>
 80057c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057c8:	b9d5      	cbnz	r5, 8005800 <__sfp+0x64>
 80057ca:	4b16      	ldr	r3, [pc, #88]	; (8005824 <__sfp+0x88>)
 80057cc:	60e3      	str	r3, [r4, #12]
 80057ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057d2:	6665      	str	r5, [r4, #100]	; 0x64
 80057d4:	f000 f847 	bl	8005866 <__retarget_lock_init_recursive>
 80057d8:	f7ff ff96 	bl	8005708 <__sfp_lock_release>
 80057dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057e4:	6025      	str	r5, [r4, #0]
 80057e6:	61a5      	str	r5, [r4, #24]
 80057e8:	2208      	movs	r2, #8
 80057ea:	4629      	mov	r1, r5
 80057ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057f0:	f7ff fd2c 	bl	800524c <memset>
 80057f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057fc:	4620      	mov	r0, r4
 80057fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005800:	3468      	adds	r4, #104	; 0x68
 8005802:	e7d9      	b.n	80057b8 <__sfp+0x1c>
 8005804:	2104      	movs	r1, #4
 8005806:	4638      	mov	r0, r7
 8005808:	f7ff ff62 	bl	80056d0 <__sfmoreglue>
 800580c:	4604      	mov	r4, r0
 800580e:	6030      	str	r0, [r6, #0]
 8005810:	2800      	cmp	r0, #0
 8005812:	d1d5      	bne.n	80057c0 <__sfp+0x24>
 8005814:	f7ff ff78 	bl	8005708 <__sfp_lock_release>
 8005818:	230c      	movs	r3, #12
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	e7ee      	b.n	80057fc <__sfp+0x60>
 800581e:	bf00      	nop
 8005820:	08006310 	.word	0x08006310
 8005824:	ffff0001 	.word	0xffff0001

08005828 <_fwalk_reent>:
 8005828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800582c:	4606      	mov	r6, r0
 800582e:	4688      	mov	r8, r1
 8005830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005834:	2700      	movs	r7, #0
 8005836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800583a:	f1b9 0901 	subs.w	r9, r9, #1
 800583e:	d505      	bpl.n	800584c <_fwalk_reent+0x24>
 8005840:	6824      	ldr	r4, [r4, #0]
 8005842:	2c00      	cmp	r4, #0
 8005844:	d1f7      	bne.n	8005836 <_fwalk_reent+0xe>
 8005846:	4638      	mov	r0, r7
 8005848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800584c:	89ab      	ldrh	r3, [r5, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d907      	bls.n	8005862 <_fwalk_reent+0x3a>
 8005852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005856:	3301      	adds	r3, #1
 8005858:	d003      	beq.n	8005862 <_fwalk_reent+0x3a>
 800585a:	4629      	mov	r1, r5
 800585c:	4630      	mov	r0, r6
 800585e:	47c0      	blx	r8
 8005860:	4307      	orrs	r7, r0
 8005862:	3568      	adds	r5, #104	; 0x68
 8005864:	e7e9      	b.n	800583a <_fwalk_reent+0x12>

08005866 <__retarget_lock_init_recursive>:
 8005866:	4770      	bx	lr

08005868 <__retarget_lock_acquire_recursive>:
 8005868:	4770      	bx	lr

0800586a <__retarget_lock_release_recursive>:
 800586a:	4770      	bx	lr

0800586c <__swhatbuf_r>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	460e      	mov	r6, r1
 8005870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005874:	2900      	cmp	r1, #0
 8005876:	b096      	sub	sp, #88	; 0x58
 8005878:	4614      	mov	r4, r2
 800587a:	461d      	mov	r5, r3
 800587c:	da07      	bge.n	800588e <__swhatbuf_r+0x22>
 800587e:	2300      	movs	r3, #0
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	89b3      	ldrh	r3, [r6, #12]
 8005884:	061a      	lsls	r2, r3, #24
 8005886:	d410      	bmi.n	80058aa <__swhatbuf_r+0x3e>
 8005888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800588c:	e00e      	b.n	80058ac <__swhatbuf_r+0x40>
 800588e:	466a      	mov	r2, sp
 8005890:	f000 fc5e 	bl	8006150 <_fstat_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	dbf2      	blt.n	800587e <__swhatbuf_r+0x12>
 8005898:	9a01      	ldr	r2, [sp, #4]
 800589a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800589e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058a2:	425a      	negs	r2, r3
 80058a4:	415a      	adcs	r2, r3
 80058a6:	602a      	str	r2, [r5, #0]
 80058a8:	e7ee      	b.n	8005888 <__swhatbuf_r+0x1c>
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	2000      	movs	r0, #0
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	b016      	add	sp, #88	; 0x58
 80058b2:	bd70      	pop	{r4, r5, r6, pc}

080058b4 <__smakebuf_r>:
 80058b4:	898b      	ldrh	r3, [r1, #12]
 80058b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058b8:	079d      	lsls	r5, r3, #30
 80058ba:	4606      	mov	r6, r0
 80058bc:	460c      	mov	r4, r1
 80058be:	d507      	bpl.n	80058d0 <__smakebuf_r+0x1c>
 80058c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	2301      	movs	r3, #1
 80058ca:	6163      	str	r3, [r4, #20]
 80058cc:	b002      	add	sp, #8
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	ab01      	add	r3, sp, #4
 80058d2:	466a      	mov	r2, sp
 80058d4:	f7ff ffca 	bl	800586c <__swhatbuf_r>
 80058d8:	9900      	ldr	r1, [sp, #0]
 80058da:	4605      	mov	r5, r0
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 f879 	bl	80059d4 <_malloc_r>
 80058e2:	b948      	cbnz	r0, 80058f8 <__smakebuf_r+0x44>
 80058e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e8:	059a      	lsls	r2, r3, #22
 80058ea:	d4ef      	bmi.n	80058cc <__smakebuf_r+0x18>
 80058ec:	f023 0303 	bic.w	r3, r3, #3
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	e7e3      	b.n	80058c0 <__smakebuf_r+0xc>
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <__smakebuf_r+0x7c>)
 80058fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	6020      	str	r0, [r4, #0]
 8005900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	9b00      	ldr	r3, [sp, #0]
 8005908:	6163      	str	r3, [r4, #20]
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	6120      	str	r0, [r4, #16]
 800590e:	b15b      	cbz	r3, 8005928 <__smakebuf_r+0x74>
 8005910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005914:	4630      	mov	r0, r6
 8005916:	f000 fc2d 	bl	8006174 <_isatty_r>
 800591a:	b128      	cbz	r0, 8005928 <__smakebuf_r+0x74>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	89a0      	ldrh	r0, [r4, #12]
 800592a:	4305      	orrs	r5, r0
 800592c:	81a5      	strh	r5, [r4, #12]
 800592e:	e7cd      	b.n	80058cc <__smakebuf_r+0x18>
 8005930:	080056c5 	.word	0x080056c5

08005934 <_free_r>:
 8005934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005936:	2900      	cmp	r1, #0
 8005938:	d048      	beq.n	80059cc <_free_r+0x98>
 800593a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800593e:	9001      	str	r0, [sp, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f1a1 0404 	sub.w	r4, r1, #4
 8005946:	bfb8      	it	lt
 8005948:	18e4      	addlt	r4, r4, r3
 800594a:	f000 fc35 	bl	80061b8 <__malloc_lock>
 800594e:	4a20      	ldr	r2, [pc, #128]	; (80059d0 <_free_r+0x9c>)
 8005950:	9801      	ldr	r0, [sp, #4]
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	4615      	mov	r5, r2
 8005956:	b933      	cbnz	r3, 8005966 <_free_r+0x32>
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	6014      	str	r4, [r2, #0]
 800595c:	b003      	add	sp, #12
 800595e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005962:	f000 bc2f 	b.w	80061c4 <__malloc_unlock>
 8005966:	42a3      	cmp	r3, r4
 8005968:	d90b      	bls.n	8005982 <_free_r+0x4e>
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	1862      	adds	r2, r4, r1
 800596e:	4293      	cmp	r3, r2
 8005970:	bf04      	itt	eq
 8005972:	681a      	ldreq	r2, [r3, #0]
 8005974:	685b      	ldreq	r3, [r3, #4]
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	bf04      	itt	eq
 800597a:	1852      	addeq	r2, r2, r1
 800597c:	6022      	streq	r2, [r4, #0]
 800597e:	602c      	str	r4, [r5, #0]
 8005980:	e7ec      	b.n	800595c <_free_r+0x28>
 8005982:	461a      	mov	r2, r3
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b10b      	cbz	r3, 800598c <_free_r+0x58>
 8005988:	42a3      	cmp	r3, r4
 800598a:	d9fa      	bls.n	8005982 <_free_r+0x4e>
 800598c:	6811      	ldr	r1, [r2, #0]
 800598e:	1855      	adds	r5, r2, r1
 8005990:	42a5      	cmp	r5, r4
 8005992:	d10b      	bne.n	80059ac <_free_r+0x78>
 8005994:	6824      	ldr	r4, [r4, #0]
 8005996:	4421      	add	r1, r4
 8005998:	1854      	adds	r4, r2, r1
 800599a:	42a3      	cmp	r3, r4
 800599c:	6011      	str	r1, [r2, #0]
 800599e:	d1dd      	bne.n	800595c <_free_r+0x28>
 80059a0:	681c      	ldr	r4, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	6053      	str	r3, [r2, #4]
 80059a6:	4421      	add	r1, r4
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	e7d7      	b.n	800595c <_free_r+0x28>
 80059ac:	d902      	bls.n	80059b4 <_free_r+0x80>
 80059ae:	230c      	movs	r3, #12
 80059b0:	6003      	str	r3, [r0, #0]
 80059b2:	e7d3      	b.n	800595c <_free_r+0x28>
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	1961      	adds	r1, r4, r5
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf04      	itt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	6063      	str	r3, [r4, #4]
 80059c2:	bf04      	itt	eq
 80059c4:	1949      	addeq	r1, r1, r5
 80059c6:	6021      	streq	r1, [r4, #0]
 80059c8:	6054      	str	r4, [r2, #4]
 80059ca:	e7c7      	b.n	800595c <_free_r+0x28>
 80059cc:	b003      	add	sp, #12
 80059ce:	bd30      	pop	{r4, r5, pc}
 80059d0:	2000009c 	.word	0x2000009c

080059d4 <_malloc_r>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	1ccd      	adds	r5, r1, #3
 80059d8:	f025 0503 	bic.w	r5, r5, #3
 80059dc:	3508      	adds	r5, #8
 80059de:	2d0c      	cmp	r5, #12
 80059e0:	bf38      	it	cc
 80059e2:	250c      	movcc	r5, #12
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	4606      	mov	r6, r0
 80059e8:	db01      	blt.n	80059ee <_malloc_r+0x1a>
 80059ea:	42a9      	cmp	r1, r5
 80059ec:	d903      	bls.n	80059f6 <_malloc_r+0x22>
 80059ee:	230c      	movs	r3, #12
 80059f0:	6033      	str	r3, [r6, #0]
 80059f2:	2000      	movs	r0, #0
 80059f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f6:	f000 fbdf 	bl	80061b8 <__malloc_lock>
 80059fa:	4921      	ldr	r1, [pc, #132]	; (8005a80 <_malloc_r+0xac>)
 80059fc:	680a      	ldr	r2, [r1, #0]
 80059fe:	4614      	mov	r4, r2
 8005a00:	b99c      	cbnz	r4, 8005a2a <_malloc_r+0x56>
 8005a02:	4f20      	ldr	r7, [pc, #128]	; (8005a84 <_malloc_r+0xb0>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	b923      	cbnz	r3, 8005a12 <_malloc_r+0x3e>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f000 fb2a 	bl	8006064 <_sbrk_r>
 8005a10:	6038      	str	r0, [r7, #0]
 8005a12:	4629      	mov	r1, r5
 8005a14:	4630      	mov	r0, r6
 8005a16:	f000 fb25 	bl	8006064 <_sbrk_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	d123      	bne.n	8005a66 <_malloc_r+0x92>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	6033      	str	r3, [r6, #0]
 8005a22:	4630      	mov	r0, r6
 8005a24:	f000 fbce 	bl	80061c4 <__malloc_unlock>
 8005a28:	e7e3      	b.n	80059f2 <_malloc_r+0x1e>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	1b5b      	subs	r3, r3, r5
 8005a2e:	d417      	bmi.n	8005a60 <_malloc_r+0x8c>
 8005a30:	2b0b      	cmp	r3, #11
 8005a32:	d903      	bls.n	8005a3c <_malloc_r+0x68>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	441c      	add	r4, r3
 8005a38:	6025      	str	r5, [r4, #0]
 8005a3a:	e004      	b.n	8005a46 <_malloc_r+0x72>
 8005a3c:	6863      	ldr	r3, [r4, #4]
 8005a3e:	42a2      	cmp	r2, r4
 8005a40:	bf0c      	ite	eq
 8005a42:	600b      	streq	r3, [r1, #0]
 8005a44:	6053      	strne	r3, [r2, #4]
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 fbbc 	bl	80061c4 <__malloc_unlock>
 8005a4c:	f104 000b 	add.w	r0, r4, #11
 8005a50:	1d23      	adds	r3, r4, #4
 8005a52:	f020 0007 	bic.w	r0, r0, #7
 8005a56:	1ac2      	subs	r2, r0, r3
 8005a58:	d0cc      	beq.n	80059f4 <_malloc_r+0x20>
 8005a5a:	1a1b      	subs	r3, r3, r0
 8005a5c:	50a3      	str	r3, [r4, r2]
 8005a5e:	e7c9      	b.n	80059f4 <_malloc_r+0x20>
 8005a60:	4622      	mov	r2, r4
 8005a62:	6864      	ldr	r4, [r4, #4]
 8005a64:	e7cc      	b.n	8005a00 <_malloc_r+0x2c>
 8005a66:	1cc4      	adds	r4, r0, #3
 8005a68:	f024 0403 	bic.w	r4, r4, #3
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d0e3      	beq.n	8005a38 <_malloc_r+0x64>
 8005a70:	1a21      	subs	r1, r4, r0
 8005a72:	4630      	mov	r0, r6
 8005a74:	f000 faf6 	bl	8006064 <_sbrk_r>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d1dd      	bne.n	8005a38 <_malloc_r+0x64>
 8005a7c:	e7cf      	b.n	8005a1e <_malloc_r+0x4a>
 8005a7e:	bf00      	nop
 8005a80:	2000009c 	.word	0x2000009c
 8005a84:	200000a0 	.word	0x200000a0

08005a88 <__sfputc_r>:
 8005a88:	6893      	ldr	r3, [r2, #8]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	b410      	push	{r4}
 8005a90:	6093      	str	r3, [r2, #8]
 8005a92:	da08      	bge.n	8005aa6 <__sfputc_r+0x1e>
 8005a94:	6994      	ldr	r4, [r2, #24]
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	db01      	blt.n	8005a9e <__sfputc_r+0x16>
 8005a9a:	290a      	cmp	r1, #10
 8005a9c:	d103      	bne.n	8005aa6 <__sfputc_r+0x1e>
 8005a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aa2:	f7ff bc69 	b.w	8005378 <__swbuf_r>
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	1c58      	adds	r0, r3, #1
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	7019      	strb	r1, [r3, #0]
 8005aae:	4608      	mov	r0, r1
 8005ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <__sfputs_r>:
 8005ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab8:	4606      	mov	r6, r0
 8005aba:	460f      	mov	r7, r1
 8005abc:	4614      	mov	r4, r2
 8005abe:	18d5      	adds	r5, r2, r3
 8005ac0:	42ac      	cmp	r4, r5
 8005ac2:	d101      	bne.n	8005ac8 <__sfputs_r+0x12>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e007      	b.n	8005ad8 <__sfputs_r+0x22>
 8005ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005acc:	463a      	mov	r2, r7
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7ff ffda 	bl	8005a88 <__sfputc_r>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d1f3      	bne.n	8005ac0 <__sfputs_r+0xa>
 8005ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005adc <_vfiprintf_r>:
 8005adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	b09d      	sub	sp, #116	; 0x74
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	4698      	mov	r8, r3
 8005ae8:	4606      	mov	r6, r0
 8005aea:	b118      	cbz	r0, 8005af4 <_vfiprintf_r+0x18>
 8005aec:	6983      	ldr	r3, [r0, #24]
 8005aee:	b90b      	cbnz	r3, 8005af4 <_vfiprintf_r+0x18>
 8005af0:	f7ff fe1c 	bl	800572c <__sinit>
 8005af4:	4b89      	ldr	r3, [pc, #548]	; (8005d1c <_vfiprintf_r+0x240>)
 8005af6:	429d      	cmp	r5, r3
 8005af8:	d11b      	bne.n	8005b32 <_vfiprintf_r+0x56>
 8005afa:	6875      	ldr	r5, [r6, #4]
 8005afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005afe:	07d9      	lsls	r1, r3, #31
 8005b00:	d405      	bmi.n	8005b0e <_vfiprintf_r+0x32>
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	059a      	lsls	r2, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_vfiprintf_r+0x32>
 8005b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b0a:	f7ff fead 	bl	8005868 <__retarget_lock_acquire_recursive>
 8005b0e:	89ab      	ldrh	r3, [r5, #12]
 8005b10:	071b      	lsls	r3, r3, #28
 8005b12:	d501      	bpl.n	8005b18 <_vfiprintf_r+0x3c>
 8005b14:	692b      	ldr	r3, [r5, #16]
 8005b16:	b9eb      	cbnz	r3, 8005b54 <_vfiprintf_r+0x78>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7ff fc7e 	bl	800541c <__swsetup_r>
 8005b20:	b1c0      	cbz	r0, 8005b54 <_vfiprintf_r+0x78>
 8005b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b24:	07dc      	lsls	r4, r3, #31
 8005b26:	d50e      	bpl.n	8005b46 <_vfiprintf_r+0x6a>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	b01d      	add	sp, #116	; 0x74
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	4b7b      	ldr	r3, [pc, #492]	; (8005d20 <_vfiprintf_r+0x244>)
 8005b34:	429d      	cmp	r5, r3
 8005b36:	d101      	bne.n	8005b3c <_vfiprintf_r+0x60>
 8005b38:	68b5      	ldr	r5, [r6, #8]
 8005b3a:	e7df      	b.n	8005afc <_vfiprintf_r+0x20>
 8005b3c:	4b79      	ldr	r3, [pc, #484]	; (8005d24 <_vfiprintf_r+0x248>)
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	bf08      	it	eq
 8005b42:	68f5      	ldreq	r5, [r6, #12]
 8005b44:	e7da      	b.n	8005afc <_vfiprintf_r+0x20>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	0598      	lsls	r0, r3, #22
 8005b4a:	d4ed      	bmi.n	8005b28 <_vfiprintf_r+0x4c>
 8005b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b4e:	f7ff fe8c 	bl	800586a <__retarget_lock_release_recursive>
 8005b52:	e7e9      	b.n	8005b28 <_vfiprintf_r+0x4c>
 8005b54:	2300      	movs	r3, #0
 8005b56:	9309      	str	r3, [sp, #36]	; 0x24
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b62:	2330      	movs	r3, #48	; 0x30
 8005b64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d28 <_vfiprintf_r+0x24c>
 8005b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b6c:	f04f 0901 	mov.w	r9, #1
 8005b70:	4623      	mov	r3, r4
 8005b72:	469a      	mov	sl, r3
 8005b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b78:	b10a      	cbz	r2, 8005b7e <_vfiprintf_r+0xa2>
 8005b7a:	2a25      	cmp	r2, #37	; 0x25
 8005b7c:	d1f9      	bne.n	8005b72 <_vfiprintf_r+0x96>
 8005b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b82:	d00b      	beq.n	8005b9c <_vfiprintf_r+0xc0>
 8005b84:	465b      	mov	r3, fp
 8005b86:	4622      	mov	r2, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff ff93 	bl	8005ab6 <__sfputs_r>
 8005b90:	3001      	adds	r0, #1
 8005b92:	f000 80aa 	beq.w	8005cea <_vfiprintf_r+0x20e>
 8005b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b98:	445a      	add	r2, fp
 8005b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80a2 	beq.w	8005cea <_vfiprintf_r+0x20e>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb0:	f10a 0a01 	add.w	sl, sl, #1
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	9307      	str	r3, [sp, #28]
 8005bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005bbe:	4654      	mov	r4, sl
 8005bc0:	2205      	movs	r2, #5
 8005bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc6:	4858      	ldr	r0, [pc, #352]	; (8005d28 <_vfiprintf_r+0x24c>)
 8005bc8:	f7fa fb02 	bl	80001d0 <memchr>
 8005bcc:	9a04      	ldr	r2, [sp, #16]
 8005bce:	b9d8      	cbnz	r0, 8005c08 <_vfiprintf_r+0x12c>
 8005bd0:	06d1      	lsls	r1, r2, #27
 8005bd2:	bf44      	itt	mi
 8005bd4:	2320      	movmi	r3, #32
 8005bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bda:	0713      	lsls	r3, r2, #28
 8005bdc:	bf44      	itt	mi
 8005bde:	232b      	movmi	r3, #43	; 0x2b
 8005be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be4:	f89a 3000 	ldrb.w	r3, [sl]
 8005be8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bea:	d015      	beq.n	8005c18 <_vfiprintf_r+0x13c>
 8005bec:	9a07      	ldr	r2, [sp, #28]
 8005bee:	4654      	mov	r4, sl
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	f04f 0c0a 	mov.w	ip, #10
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bfc:	3b30      	subs	r3, #48	; 0x30
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d94e      	bls.n	8005ca0 <_vfiprintf_r+0x1c4>
 8005c02:	b1b0      	cbz	r0, 8005c32 <_vfiprintf_r+0x156>
 8005c04:	9207      	str	r2, [sp, #28]
 8005c06:	e014      	b.n	8005c32 <_vfiprintf_r+0x156>
 8005c08:	eba0 0308 	sub.w	r3, r0, r8
 8005c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c10:	4313      	orrs	r3, r2
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	46a2      	mov	sl, r4
 8005c16:	e7d2      	b.n	8005bbe <_vfiprintf_r+0xe2>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	1d19      	adds	r1, r3, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	9103      	str	r1, [sp, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bfbb      	ittet	lt
 8005c24:	425b      	neglt	r3, r3
 8005c26:	f042 0202 	orrlt.w	r2, r2, #2
 8005c2a:	9307      	strge	r3, [sp, #28]
 8005c2c:	9307      	strlt	r3, [sp, #28]
 8005c2e:	bfb8      	it	lt
 8005c30:	9204      	strlt	r2, [sp, #16]
 8005c32:	7823      	ldrb	r3, [r4, #0]
 8005c34:	2b2e      	cmp	r3, #46	; 0x2e
 8005c36:	d10c      	bne.n	8005c52 <_vfiprintf_r+0x176>
 8005c38:	7863      	ldrb	r3, [r4, #1]
 8005c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3c:	d135      	bne.n	8005caa <_vfiprintf_r+0x1ce>
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	1d1a      	adds	r2, r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	9203      	str	r2, [sp, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bfb8      	it	lt
 8005c4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c4e:	3402      	adds	r4, #2
 8005c50:	9305      	str	r3, [sp, #20]
 8005c52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d38 <_vfiprintf_r+0x25c>
 8005c56:	7821      	ldrb	r1, [r4, #0]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	f7fa fab8 	bl	80001d0 <memchr>
 8005c60:	b140      	cbz	r0, 8005c74 <_vfiprintf_r+0x198>
 8005c62:	2340      	movs	r3, #64	; 0x40
 8005c64:	eba0 000a 	sub.w	r0, r0, sl
 8005c68:	fa03 f000 	lsl.w	r0, r3, r0
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	4303      	orrs	r3, r0
 8005c70:	3401      	adds	r4, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	482c      	ldr	r0, [pc, #176]	; (8005d2c <_vfiprintf_r+0x250>)
 8005c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c7e:	2206      	movs	r2, #6
 8005c80:	f7fa faa6 	bl	80001d0 <memchr>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d03f      	beq.n	8005d08 <_vfiprintf_r+0x22c>
 8005c88:	4b29      	ldr	r3, [pc, #164]	; (8005d30 <_vfiprintf_r+0x254>)
 8005c8a:	bb1b      	cbnz	r3, 8005cd4 <_vfiprintf_r+0x1f8>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	9303      	str	r3, [sp, #12]
 8005c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9a:	443b      	add	r3, r7
 8005c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9e:	e767      	b.n	8005b70 <_vfiprintf_r+0x94>
 8005ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	e7a5      	b.n	8005bf6 <_vfiprintf_r+0x11a>
 8005caa:	2300      	movs	r3, #0
 8005cac:	3401      	adds	r4, #1
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbc:	3a30      	subs	r2, #48	; 0x30
 8005cbe:	2a09      	cmp	r2, #9
 8005cc0:	d903      	bls.n	8005cca <_vfiprintf_r+0x1ee>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c5      	beq.n	8005c52 <_vfiprintf_r+0x176>
 8005cc6:	9105      	str	r1, [sp, #20]
 8005cc8:	e7c3      	b.n	8005c52 <_vfiprintf_r+0x176>
 8005cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cce:	4604      	mov	r4, r0
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e7f0      	b.n	8005cb6 <_vfiprintf_r+0x1da>
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <_vfiprintf_r+0x258>)
 8005cdc:	a904      	add	r1, sp, #16
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f3af 8000 	nop.w
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	1c78      	adds	r0, r7, #1
 8005ce8:	d1d6      	bne.n	8005c98 <_vfiprintf_r+0x1bc>
 8005cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cec:	07d9      	lsls	r1, r3, #31
 8005cee:	d405      	bmi.n	8005cfc <_vfiprintf_r+0x220>
 8005cf0:	89ab      	ldrh	r3, [r5, #12]
 8005cf2:	059a      	lsls	r2, r3, #22
 8005cf4:	d402      	bmi.n	8005cfc <_vfiprintf_r+0x220>
 8005cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cf8:	f7ff fdb7 	bl	800586a <__retarget_lock_release_recursive>
 8005cfc:	89ab      	ldrh	r3, [r5, #12]
 8005cfe:	065b      	lsls	r3, r3, #25
 8005d00:	f53f af12 	bmi.w	8005b28 <_vfiprintf_r+0x4c>
 8005d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d06:	e711      	b.n	8005b2c <_vfiprintf_r+0x50>
 8005d08:	ab03      	add	r3, sp, #12
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <_vfiprintf_r+0x258>)
 8005d10:	a904      	add	r1, sp, #16
 8005d12:	4630      	mov	r0, r6
 8005d14:	f000 f880 	bl	8005e18 <_printf_i>
 8005d18:	e7e4      	b.n	8005ce4 <_vfiprintf_r+0x208>
 8005d1a:	bf00      	nop
 8005d1c:	08006334 	.word	0x08006334
 8005d20:	08006354 	.word	0x08006354
 8005d24:	08006314 	.word	0x08006314
 8005d28:	08006374 	.word	0x08006374
 8005d2c:	0800637e 	.word	0x0800637e
 8005d30:	00000000 	.word	0x00000000
 8005d34:	08005ab7 	.word	0x08005ab7
 8005d38:	0800637a 	.word	0x0800637a

08005d3c <_printf_common>:
 8005d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	4616      	mov	r6, r2
 8005d42:	4699      	mov	r9, r3
 8005d44:	688a      	ldr	r2, [r1, #8]
 8005d46:	690b      	ldr	r3, [r1, #16]
 8005d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	bfb8      	it	lt
 8005d50:	4613      	movlt	r3, r2
 8005d52:	6033      	str	r3, [r6, #0]
 8005d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d58:	4607      	mov	r7, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	b10a      	cbz	r2, 8005d62 <_printf_common+0x26>
 8005d5e:	3301      	adds	r3, #1
 8005d60:	6033      	str	r3, [r6, #0]
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	0699      	lsls	r1, r3, #26
 8005d66:	bf42      	ittt	mi
 8005d68:	6833      	ldrmi	r3, [r6, #0]
 8005d6a:	3302      	addmi	r3, #2
 8005d6c:	6033      	strmi	r3, [r6, #0]
 8005d6e:	6825      	ldr	r5, [r4, #0]
 8005d70:	f015 0506 	ands.w	r5, r5, #6
 8005d74:	d106      	bne.n	8005d84 <_printf_common+0x48>
 8005d76:	f104 0a19 	add.w	sl, r4, #25
 8005d7a:	68e3      	ldr	r3, [r4, #12]
 8005d7c:	6832      	ldr	r2, [r6, #0]
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	42ab      	cmp	r3, r5
 8005d82:	dc26      	bgt.n	8005dd2 <_printf_common+0x96>
 8005d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d88:	1e13      	subs	r3, r2, #0
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	bf18      	it	ne
 8005d8e:	2301      	movne	r3, #1
 8005d90:	0692      	lsls	r2, r2, #26
 8005d92:	d42b      	bmi.n	8005dec <_printf_common+0xb0>
 8005d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d98:	4649      	mov	r1, r9
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	47c0      	blx	r8
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d01e      	beq.n	8005de0 <_printf_common+0xa4>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	68e5      	ldr	r5, [r4, #12]
 8005da6:	6832      	ldr	r2, [r6, #0]
 8005da8:	f003 0306 	and.w	r3, r3, #6
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	bf08      	it	eq
 8005db0:	1aad      	subeq	r5, r5, r2
 8005db2:	68a3      	ldr	r3, [r4, #8]
 8005db4:	6922      	ldr	r2, [r4, #16]
 8005db6:	bf0c      	ite	eq
 8005db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dbc:	2500      	movne	r5, #0
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	bfc4      	itt	gt
 8005dc2:	1a9b      	subgt	r3, r3, r2
 8005dc4:	18ed      	addgt	r5, r5, r3
 8005dc6:	2600      	movs	r6, #0
 8005dc8:	341a      	adds	r4, #26
 8005dca:	42b5      	cmp	r5, r6
 8005dcc:	d11a      	bne.n	8005e04 <_printf_common+0xc8>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e008      	b.n	8005de4 <_printf_common+0xa8>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4652      	mov	r2, sl
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	4638      	mov	r0, r7
 8005dda:	47c0      	blx	r8
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d103      	bne.n	8005de8 <_printf_common+0xac>
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de8:	3501      	adds	r5, #1
 8005dea:	e7c6      	b.n	8005d7a <_printf_common+0x3e>
 8005dec:	18e1      	adds	r1, r4, r3
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	2030      	movs	r0, #48	; 0x30
 8005df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005df6:	4422      	add	r2, r4
 8005df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e00:	3302      	adds	r3, #2
 8005e02:	e7c7      	b.n	8005d94 <_printf_common+0x58>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4622      	mov	r2, r4
 8005e08:	4649      	mov	r1, r9
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c0      	blx	r8
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d0e6      	beq.n	8005de0 <_printf_common+0xa4>
 8005e12:	3601      	adds	r6, #1
 8005e14:	e7d9      	b.n	8005dca <_printf_common+0x8e>
	...

08005e18 <_printf_i>:
 8005e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	4691      	mov	r9, r2
 8005e20:	7e27      	ldrb	r7, [r4, #24]
 8005e22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e24:	2f78      	cmp	r7, #120	; 0x78
 8005e26:	4680      	mov	r8, r0
 8005e28:	469a      	mov	sl, r3
 8005e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e2e:	d807      	bhi.n	8005e40 <_printf_i+0x28>
 8005e30:	2f62      	cmp	r7, #98	; 0x62
 8005e32:	d80a      	bhi.n	8005e4a <_printf_i+0x32>
 8005e34:	2f00      	cmp	r7, #0
 8005e36:	f000 80d8 	beq.w	8005fea <_printf_i+0x1d2>
 8005e3a:	2f58      	cmp	r7, #88	; 0x58
 8005e3c:	f000 80a3 	beq.w	8005f86 <_printf_i+0x16e>
 8005e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e48:	e03a      	b.n	8005ec0 <_printf_i+0xa8>
 8005e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e4e:	2b15      	cmp	r3, #21
 8005e50:	d8f6      	bhi.n	8005e40 <_printf_i+0x28>
 8005e52:	a001      	add	r0, pc, #4	; (adr r0, 8005e58 <_printf_i+0x40>)
 8005e54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e58:	08005eb1 	.word	0x08005eb1
 8005e5c:	08005ec5 	.word	0x08005ec5
 8005e60:	08005e41 	.word	0x08005e41
 8005e64:	08005e41 	.word	0x08005e41
 8005e68:	08005e41 	.word	0x08005e41
 8005e6c:	08005e41 	.word	0x08005e41
 8005e70:	08005ec5 	.word	0x08005ec5
 8005e74:	08005e41 	.word	0x08005e41
 8005e78:	08005e41 	.word	0x08005e41
 8005e7c:	08005e41 	.word	0x08005e41
 8005e80:	08005e41 	.word	0x08005e41
 8005e84:	08005fd1 	.word	0x08005fd1
 8005e88:	08005ef5 	.word	0x08005ef5
 8005e8c:	08005fb3 	.word	0x08005fb3
 8005e90:	08005e41 	.word	0x08005e41
 8005e94:	08005e41 	.word	0x08005e41
 8005e98:	08005ff3 	.word	0x08005ff3
 8005e9c:	08005e41 	.word	0x08005e41
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e41 	.word	0x08005e41
 8005ea8:	08005e41 	.word	0x08005e41
 8005eac:	08005fbb 	.word	0x08005fbb
 8005eb0:	680b      	ldr	r3, [r1, #0]
 8005eb2:	1d1a      	adds	r2, r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	600a      	str	r2, [r1, #0]
 8005eb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0a3      	b.n	800600c <_printf_i+0x1f4>
 8005ec4:	6825      	ldr	r5, [r4, #0]
 8005ec6:	6808      	ldr	r0, [r1, #0]
 8005ec8:	062e      	lsls	r6, r5, #24
 8005eca:	f100 0304 	add.w	r3, r0, #4
 8005ece:	d50a      	bpl.n	8005ee6 <_printf_i+0xce>
 8005ed0:	6805      	ldr	r5, [r0, #0]
 8005ed2:	600b      	str	r3, [r1, #0]
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	da03      	bge.n	8005ee0 <_printf_i+0xc8>
 8005ed8:	232d      	movs	r3, #45	; 0x2d
 8005eda:	426d      	negs	r5, r5
 8005edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee0:	485e      	ldr	r0, [pc, #376]	; (800605c <_printf_i+0x244>)
 8005ee2:	230a      	movs	r3, #10
 8005ee4:	e019      	b.n	8005f1a <_printf_i+0x102>
 8005ee6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eea:	6805      	ldr	r5, [r0, #0]
 8005eec:	600b      	str	r3, [r1, #0]
 8005eee:	bf18      	it	ne
 8005ef0:	b22d      	sxthne	r5, r5
 8005ef2:	e7ef      	b.n	8005ed4 <_printf_i+0xbc>
 8005ef4:	680b      	ldr	r3, [r1, #0]
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	1d18      	adds	r0, r3, #4
 8005efa:	6008      	str	r0, [r1, #0]
 8005efc:	0628      	lsls	r0, r5, #24
 8005efe:	d501      	bpl.n	8005f04 <_printf_i+0xec>
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	e002      	b.n	8005f0a <_printf_i+0xf2>
 8005f04:	0669      	lsls	r1, r5, #25
 8005f06:	d5fb      	bpl.n	8005f00 <_printf_i+0xe8>
 8005f08:	881d      	ldrh	r5, [r3, #0]
 8005f0a:	4854      	ldr	r0, [pc, #336]	; (800605c <_printf_i+0x244>)
 8005f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f0e:	bf0c      	ite	eq
 8005f10:	2308      	moveq	r3, #8
 8005f12:	230a      	movne	r3, #10
 8005f14:	2100      	movs	r1, #0
 8005f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f1a:	6866      	ldr	r6, [r4, #4]
 8005f1c:	60a6      	str	r6, [r4, #8]
 8005f1e:	2e00      	cmp	r6, #0
 8005f20:	bfa2      	ittt	ge
 8005f22:	6821      	ldrge	r1, [r4, #0]
 8005f24:	f021 0104 	bicge.w	r1, r1, #4
 8005f28:	6021      	strge	r1, [r4, #0]
 8005f2a:	b90d      	cbnz	r5, 8005f30 <_printf_i+0x118>
 8005f2c:	2e00      	cmp	r6, #0
 8005f2e:	d04d      	beq.n	8005fcc <_printf_i+0x1b4>
 8005f30:	4616      	mov	r6, r2
 8005f32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f36:	fb03 5711 	mls	r7, r3, r1, r5
 8005f3a:	5dc7      	ldrb	r7, [r0, r7]
 8005f3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f40:	462f      	mov	r7, r5
 8005f42:	42bb      	cmp	r3, r7
 8005f44:	460d      	mov	r5, r1
 8005f46:	d9f4      	bls.n	8005f32 <_printf_i+0x11a>
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d10b      	bne.n	8005f64 <_printf_i+0x14c>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	07df      	lsls	r7, r3, #31
 8005f50:	d508      	bpl.n	8005f64 <_printf_i+0x14c>
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	6861      	ldr	r1, [r4, #4]
 8005f56:	4299      	cmp	r1, r3
 8005f58:	bfde      	ittt	le
 8005f5a:	2330      	movle	r3, #48	; 0x30
 8005f5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f64:	1b92      	subs	r2, r2, r6
 8005f66:	6122      	str	r2, [r4, #16]
 8005f68:	f8cd a000 	str.w	sl, [sp]
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	aa03      	add	r2, sp, #12
 8005f70:	4621      	mov	r1, r4
 8005f72:	4640      	mov	r0, r8
 8005f74:	f7ff fee2 	bl	8005d3c <_printf_common>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d14c      	bne.n	8006016 <_printf_i+0x1fe>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	b004      	add	sp, #16
 8005f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f86:	4835      	ldr	r0, [pc, #212]	; (800605c <_printf_i+0x244>)
 8005f88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	680e      	ldr	r6, [r1, #0]
 8005f90:	061f      	lsls	r7, r3, #24
 8005f92:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f96:	600e      	str	r6, [r1, #0]
 8005f98:	d514      	bpl.n	8005fc4 <_printf_i+0x1ac>
 8005f9a:	07d9      	lsls	r1, r3, #31
 8005f9c:	bf44      	itt	mi
 8005f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8005fa2:	6023      	strmi	r3, [r4, #0]
 8005fa4:	b91d      	cbnz	r5, 8005fae <_printf_i+0x196>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	f023 0320 	bic.w	r3, r3, #32
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	2310      	movs	r3, #16
 8005fb0:	e7b0      	b.n	8005f14 <_printf_i+0xfc>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f043 0320 	orr.w	r3, r3, #32
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	2378      	movs	r3, #120	; 0x78
 8005fbc:	4828      	ldr	r0, [pc, #160]	; (8006060 <_printf_i+0x248>)
 8005fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fc2:	e7e3      	b.n	8005f8c <_printf_i+0x174>
 8005fc4:	065e      	lsls	r6, r3, #25
 8005fc6:	bf48      	it	mi
 8005fc8:	b2ad      	uxthmi	r5, r5
 8005fca:	e7e6      	b.n	8005f9a <_printf_i+0x182>
 8005fcc:	4616      	mov	r6, r2
 8005fce:	e7bb      	b.n	8005f48 <_printf_i+0x130>
 8005fd0:	680b      	ldr	r3, [r1, #0]
 8005fd2:	6826      	ldr	r6, [r4, #0]
 8005fd4:	6960      	ldr	r0, [r4, #20]
 8005fd6:	1d1d      	adds	r5, r3, #4
 8005fd8:	600d      	str	r5, [r1, #0]
 8005fda:	0635      	lsls	r5, r6, #24
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	d501      	bpl.n	8005fe4 <_printf_i+0x1cc>
 8005fe0:	6018      	str	r0, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <_printf_i+0x1d2>
 8005fe4:	0671      	lsls	r1, r6, #25
 8005fe6:	d5fb      	bpl.n	8005fe0 <_printf_i+0x1c8>
 8005fe8:	8018      	strh	r0, [r3, #0]
 8005fea:	2300      	movs	r3, #0
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	4616      	mov	r6, r2
 8005ff0:	e7ba      	b.n	8005f68 <_printf_i+0x150>
 8005ff2:	680b      	ldr	r3, [r1, #0]
 8005ff4:	1d1a      	adds	r2, r3, #4
 8005ff6:	600a      	str	r2, [r1, #0]
 8005ff8:	681e      	ldr	r6, [r3, #0]
 8005ffa:	6862      	ldr	r2, [r4, #4]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7fa f8e6 	bl	80001d0 <memchr>
 8006004:	b108      	cbz	r0, 800600a <_printf_i+0x1f2>
 8006006:	1b80      	subs	r0, r0, r6
 8006008:	6060      	str	r0, [r4, #4]
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	2300      	movs	r3, #0
 8006010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006014:	e7a8      	b.n	8005f68 <_printf_i+0x150>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	4632      	mov	r2, r6
 800601a:	4649      	mov	r1, r9
 800601c:	4640      	mov	r0, r8
 800601e:	47d0      	blx	sl
 8006020:	3001      	adds	r0, #1
 8006022:	d0ab      	beq.n	8005f7c <_printf_i+0x164>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	079b      	lsls	r3, r3, #30
 8006028:	d413      	bmi.n	8006052 <_printf_i+0x23a>
 800602a:	68e0      	ldr	r0, [r4, #12]
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	4298      	cmp	r0, r3
 8006030:	bfb8      	it	lt
 8006032:	4618      	movlt	r0, r3
 8006034:	e7a4      	b.n	8005f80 <_printf_i+0x168>
 8006036:	2301      	movs	r3, #1
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d09b      	beq.n	8005f7c <_printf_i+0x164>
 8006044:	3501      	adds	r5, #1
 8006046:	68e3      	ldr	r3, [r4, #12]
 8006048:	9903      	ldr	r1, [sp, #12]
 800604a:	1a5b      	subs	r3, r3, r1
 800604c:	42ab      	cmp	r3, r5
 800604e:	dcf2      	bgt.n	8006036 <_printf_i+0x21e>
 8006050:	e7eb      	b.n	800602a <_printf_i+0x212>
 8006052:	2500      	movs	r5, #0
 8006054:	f104 0619 	add.w	r6, r4, #25
 8006058:	e7f5      	b.n	8006046 <_printf_i+0x22e>
 800605a:	bf00      	nop
 800605c:	08006385 	.word	0x08006385
 8006060:	08006396 	.word	0x08006396

08006064 <_sbrk_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d06      	ldr	r5, [pc, #24]	; (8006080 <_sbrk_r+0x1c>)
 8006068:	2300      	movs	r3, #0
 800606a:	4604      	mov	r4, r0
 800606c:	4608      	mov	r0, r1
 800606e:	602b      	str	r3, [r5, #0]
 8006070:	f7fb f826 	bl	80010c0 <_sbrk>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_sbrk_r+0x1a>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_sbrk_r+0x1a>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000240 	.word	0x20000240

08006084 <__sread>:
 8006084:	b510      	push	{r4, lr}
 8006086:	460c      	mov	r4, r1
 8006088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608c:	f000 f8a0 	bl	80061d0 <_read_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	bfab      	itete	ge
 8006094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006096:	89a3      	ldrhlt	r3, [r4, #12]
 8006098:	181b      	addge	r3, r3, r0
 800609a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800609e:	bfac      	ite	ge
 80060a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060a2:	81a3      	strhlt	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__swrite>:
 80060a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060aa:	461f      	mov	r7, r3
 80060ac:	898b      	ldrh	r3, [r1, #12]
 80060ae:	05db      	lsls	r3, r3, #23
 80060b0:	4605      	mov	r5, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4616      	mov	r6, r2
 80060b6:	d505      	bpl.n	80060c4 <__swrite+0x1e>
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	2302      	movs	r3, #2
 80060be:	2200      	movs	r2, #0
 80060c0:	f000 f868 	bl	8006194 <_lseek_r>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	4632      	mov	r2, r6
 80060d2:	463b      	mov	r3, r7
 80060d4:	4628      	mov	r0, r5
 80060d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	f000 b817 	b.w	800610c <_write_r>

080060de <__sseek>:
 80060de:	b510      	push	{r4, lr}
 80060e0:	460c      	mov	r4, r1
 80060e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e6:	f000 f855 	bl	8006194 <_lseek_r>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	bf15      	itete	ne
 80060f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060fa:	81a3      	strheq	r3, [r4, #12]
 80060fc:	bf18      	it	ne
 80060fe:	81a3      	strhne	r3, [r4, #12]
 8006100:	bd10      	pop	{r4, pc}

08006102 <__sclose>:
 8006102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006106:	f000 b813 	b.w	8006130 <_close_r>
	...

0800610c <_write_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d07      	ldr	r5, [pc, #28]	; (800612c <_write_r+0x20>)
 8006110:	4604      	mov	r4, r0
 8006112:	4608      	mov	r0, r1
 8006114:	4611      	mov	r1, r2
 8006116:	2200      	movs	r2, #0
 8006118:	602a      	str	r2, [r5, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f7fa fa4b 	bl	80005b6 <_write>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_write_r+0x1e>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_write_r+0x1e>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20000240 	.word	0x20000240

08006130 <_close_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d06      	ldr	r5, [pc, #24]	; (800614c <_close_r+0x1c>)
 8006134:	2300      	movs	r3, #0
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	f7fa ff8b 	bl	8001056 <_close>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_close_r+0x1a>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_close_r+0x1a>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20000240 	.word	0x20000240

08006150 <_fstat_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	; (8006170 <_fstat_r+0x20>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	4611      	mov	r1, r2
 800615c:	602b      	str	r3, [r5, #0]
 800615e:	f7fa ff86 	bl	800106e <_fstat>
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d102      	bne.n	800616c <_fstat_r+0x1c>
 8006166:	682b      	ldr	r3, [r5, #0]
 8006168:	b103      	cbz	r3, 800616c <_fstat_r+0x1c>
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	bd38      	pop	{r3, r4, r5, pc}
 800616e:	bf00      	nop
 8006170:	20000240 	.word	0x20000240

08006174 <_isatty_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d06      	ldr	r5, [pc, #24]	; (8006190 <_isatty_r+0x1c>)
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f7fa ff85 	bl	800108e <_isatty>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_isatty_r+0x1a>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_isatty_r+0x1a>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000240 	.word	0x20000240

08006194 <_lseek_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	; (80061b4 <_lseek_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fa ff7e 	bl	80010a4 <_lseek>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_lseek_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_lseek_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000240 	.word	0x20000240

080061b8 <__malloc_lock>:
 80061b8:	4801      	ldr	r0, [pc, #4]	; (80061c0 <__malloc_lock+0x8>)
 80061ba:	f7ff bb55 	b.w	8005868 <__retarget_lock_acquire_recursive>
 80061be:	bf00      	nop
 80061c0:	20000238 	.word	0x20000238

080061c4 <__malloc_unlock>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__malloc_unlock+0x8>)
 80061c6:	f7ff bb50 	b.w	800586a <__retarget_lock_release_recursive>
 80061ca:	bf00      	nop
 80061cc:	20000238 	.word	0x20000238

080061d0 <_read_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_read_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fa ff1c 	bl	800101c <_read>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_read_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_read_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20000240 	.word	0x20000240

080061f4 <_init>:
 80061f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f6:	bf00      	nop
 80061f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fa:	bc08      	pop	{r3}
 80061fc:	469e      	mov	lr, r3
 80061fe:	4770      	bx	lr

08006200 <_fini>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr
