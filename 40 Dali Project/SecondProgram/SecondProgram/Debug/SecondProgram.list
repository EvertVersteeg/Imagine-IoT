
SecondProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004898  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000010  08004a88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004a88  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b7f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248e  00000000  00000000  00033bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  000372f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280be  00000000  00000000  000384c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001335a  00000000  00000000  00060586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001031ce  00000000  00000000  000738e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000507c  00000000  00000000  00176b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a08 	.word	0x08004a08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004a08 	.word	0x08004a08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fbee 	bl	8000ca4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);		//set uitgang standaard hoog bij start
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f002 f82f 	bl	8002534 <HAL_GPIO_WritePin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f849 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9ab 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f95b 	bl	8000798 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80004e2:	f000 f989 	bl	80007f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e6:	f000 f893 	bl	8000610 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004ea:	f000 f907 	bl	80006fc <MX_TIM4_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f002 f81c 	bl	8002534 <HAL_GPIO_WritePin>
		 delay_us(delay1);
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <main+0x60>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f811 	bl	8000528 <delay_us>

		 //HAL_ADC_Start(&hadc1);
		 //printf ("Analog input = %d\r\n", value_adc);

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f002 f810 	bl	8002534 <HAL_GPIO_WritePin>
		 delay_us(delay2);
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <main+0x64>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f805 	bl	8000528 <delay_us>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800051e:	e7e6      	b.n	80004ee <main+0x2e>
 8000520:	20000000 	.word	0x20000000
 8000524:	20000002 	.word	0x20000002

08000528 <delay_us>:
/**
  * @brief Setup us delay function with timer 4
  * @retval None
  */
void delay_us(uint16_t us)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <delay_us+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <delay_us+0x40>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <delay_us+0x40>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f042 0201 	orr.w	r2, r2, #1
 8000548:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 800054a:	bf00      	nop
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <delay_us+0x40>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	429a      	cmp	r2, r3
 8000556:	d3f9      	bcc.n	800054c <delay_us+0x24>
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000002c 	.word	0x2000002c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fa3c 	bl	80049f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f001 fff5 	bl	8002580 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f9b4 	bl	8000908 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ba:	230a      	movs	r3, #10
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f82c 	bl	800262c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005da:	f000 f995 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fbfe 	bl	8002df8 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f981 	bl	8000908 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	; 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000634:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <MX_ADC1_Init+0xe4>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000664:	2201      	movs	r2, #1
 8000666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800067e:	2201      	movs	r2, #1
 8000680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <MX_ADC1_Init+0xe0>)
 8000694:	f000 fd0e 	bl	80010b4 <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800069e:	f000 f933 	bl	8000908 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <MX_ADC1_Init+0xe0>)
 80006ae:	f001 fa6d 	bl	8001b8c <HAL_ADCEx_MultiModeConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b8:	f000 f926 	bl	8000908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ADC1_Init+0xe8>)
 80006be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	2306      	movs	r3, #6
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c8:	237f      	movs	r3, #127	; 0x7f
 80006ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006cc:	2304      	movs	r3, #4
 80006ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC1_Init+0xe0>)
 80006da:	f000 fe41 	bl	8001360 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006e4:	f000 f910 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000078 	.word	0x20000078
 80006f4:	50040000 	.word	0x50040000
 80006f8:	14f00020 	.word	0x14f00020

080006fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM4_Init+0x94>)
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_TIM4_Init+0x98>)
 800071e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM4_Init+0x94>)
 8000722:	224f      	movs	r2, #79	; 0x4f
 8000724:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_TIM4_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_TIM4_Init+0x94>)
 800072e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000732:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_TIM4_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM4_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <MX_TIM4_Init+0x94>)
 8000742:	f003 fa1b 	bl	8003b7c <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800074c:	f000 f8dc 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_TIM4_Init+0x94>)
 800075e:	f003 fa64 	bl	8003c2a <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f8ce 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM4_Init+0x94>)
 800077a:	f003 fc51 	bl	8004020 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000784:	f000 f8c0 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000002c 	.word	0x2000002c
 8000794:	40000800 	.word	0x40000800

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007dc:	f003 fca8 	bl	8004130 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f88f 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000124 	.word	0x20000124
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_DMA_Init+0x38>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <MX_DMA_Init+0x38>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6493      	str	r3, [r2, #72]	; 0x48
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_DMA_Init+0x38>)
 800080c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200b      	movs	r0, #11
 800081c:	f001 fb41 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000820:	200b      	movs	r0, #11
 8000822:	f001 fb5a 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_GPIO_Init+0xc8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_GPIO_Init+0xc8>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <MX_GPIO_Init+0xc8>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_GPIO_Init+0xc8>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f001 fe3e 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_GPIO_Init+0xcc>)
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_GPIO_Init+0xd0>)
 80008ce:	f001 fc87 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80008d2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f001 fc77 	bl	80021e0 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	10210000 	.word	0x10210000
 8000904:	48000800 	.word	0x48000800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0ac      	sub	sp, #176	; 0xb0
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2288      	movs	r2, #136	; 0x88
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f004 f83b 	bl	80049f8 <memset>
  if(hadc->Instance==ADC1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a3d      	ldr	r2, [pc, #244]	; (8000a7c <HAL_ADC_MspInit+0x120>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d172      	bne.n	8000a72 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800098c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000990:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009a2:	2308      	movs	r3, #8
 80009a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fc21 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009c8:	f7ff ff9e 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <HAL_ADC_MspInit+0x124>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <HAL_ADC_MspInit+0x124>)
 80009d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_ADC_MspInit+0x124>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <HAL_ADC_MspInit+0x124>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	4a25      	ldr	r2, [pc, #148]	; (8000a80 <HAL_ADC_MspInit+0x124>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_ADC_MspInit+0x124>)
 80009f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a02:	230b      	movs	r3, #11
 8000a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f001 fbe2 	bl	80021e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a1e:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <HAL_ADC_MspInit+0x12c>)
 8000a20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a58:	f001 fa5a 	bl	8001f10 <HAL_DMA_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000a62:	f7ff ff51 	bl	8000908 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a6c:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <HAL_ADC_MspInit+0x128>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	37b0      	adds	r7, #176	; 0xb0
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	50040000 	.word	0x50040000
 8000a80:	40021000 	.word	0x40021000
 8000a84:	200000dc 	.word	0x200000dc
 8000a88:	40020008 	.word	0x40020008

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_TIM_Base_MspInit+0x38>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40000800 	.word	0x40000800
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0ac      	sub	sp, #176	; 0xb0
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2288      	movs	r2, #136	; 0x88
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 ff83 	bl	80049f8 <memset>
  if(huart->Instance==USART2)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <HAL_UART_MspInit+0xb0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d13b      	bne.n	8000b74 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fb7b 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b14:	f7ff fef8 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b22:	6593      	str	r3, [r2, #88]	; 0x58
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f001 fb36 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	37b0      	adds	r7, #176	; 0xb0
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40021000 	.word	0x40021000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f8c4 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bde:	f001 fa4f 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000dc 	.word	0x200000dc

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <SystemInit+0x5c>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <SystemInit+0x5c>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SystemInit+0x60>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <SystemInit+0x60>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <SystemInit+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <SystemInit+0x60>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <SystemInit+0x60>)
 8000c18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SystemInit+0x60>)
 8000c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SystemInit+0x60>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <SystemInit+0x60>)
 8000c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SystemInit+0x60>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffca 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c5a:	e003      	b.n	8000c64 <LoopCopyDataInit>

08000c5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c62:	3104      	adds	r1, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c6c:	d3f6      	bcc.n	8000c5c <CopyDataInit>
	ldr	r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c70:	e002      	b.n	8000c78 <LoopFillZerobss>

08000c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c74:	f842 3b04 	str.w	r3, [r2], #4

08000c78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <LoopForever+0x16>)
	cmp	r2, r3
 8000c7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c7c:	d3f9      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 fe97 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fc1d 	bl	80004c0 <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c8c:	08004a78 	.word	0x08004a78
	ldr	r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c94:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c98:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c9c:	200001ac 	.word	0x200001ac

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_Init+0x3c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_Init+0x3c>)
 8000cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f001 f8e6 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f80f 	bl	8000ce4 <HAL_InitTick>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	e001      	b.n	8000cd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd2:	f7ff fe1f 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d023      	beq.n	8000d40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_InitTick+0x70>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 f8f1 	bl	8001ef6 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10f      	bne.n	8000d3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d809      	bhi.n	8000d34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f001 f8bb 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_InitTick+0x74>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e007      	b.n	8000d44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e004      	b.n	8000d44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e001      	b.n	8000d44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000000c 	.word	0x2000000c
 8000d54:	20000004 	.word	0x20000004
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	200001a8 	.word	0x200001a8

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001a8 	.word	0x200001a8

08000d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	609a      	str	r2, [r3, #8]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	609a      	str	r2, [r3, #8]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3360      	adds	r3, #96	; 0x60
 8000e16:	461a      	mov	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <LL_ADC_SetOffset+0x44>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	4313      	orrs	r3, r2
 8000e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	03fff000 	.word	0x03fff000

08000e4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3360      	adds	r3, #96	; 0x60
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3360      	adds	r3, #96	; 0x60
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ea2:	bf00      	nop
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3330      	adds	r3, #48	; 0x30
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	211f      	movs	r1, #31
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0e9b      	lsrs	r3, r3, #26
 8000ee6:	f003 011f 	and.w	r1, r3, #31
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3314      	adds	r3, #20
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	0e5b      	lsrs	r3, r3, #25
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	0d1b      	lsrs	r3, r3, #20
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	2107      	movs	r1, #7
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	0d1b      	lsrs	r3, r3, #20
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0318 	and.w	r3, r3, #24
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f80:	40d9      	lsrs	r1, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	400b      	ands	r3, r1
 8000f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	0007ffff 	.word	0x0007ffff

08000fa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6093      	str	r3, [r2, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fdc:	d101      	bne.n	8000fe2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001004:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800102c:	d101      	bne.n	8001032 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <LL_ADC_IsEnabled+0x18>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <LL_ADC_IsEnabled+0x1a>
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b04      	cmp	r3, #4
 8001078:	d101      	bne.n	800107e <LL_ADC_REG_IsConversionOngoing+0x18>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b08      	cmp	r3, #8
 800109e:	d101      	bne.n	80010a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e136      	b.n	800133c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fc3d 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff67 	bl	8000fc8 <LL_ADC_IsDeepPowerDownEnabled>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff4d 	bl	8000fa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff82 	bl	8001018 <LL_ADC_IsInternalRegulatorEnabled>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d115      	bne.n	8001146 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff66 	bl	8000ff0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001124:	4b87      	ldr	r3, [pc, #540]	; (8001344 <HAL_ADC_Init+0x290>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	4a87      	ldr	r2, [pc, #540]	; (8001348 <HAL_ADC_Init+0x294>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	099b      	lsrs	r3, r3, #6
 8001132:	3301      	adds	r3, #1
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001138:	e002      	b.n	8001140 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3b01      	subs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f9      	bne.n	800113a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff64 	bl	8001018 <LL_ADC_IsInternalRegulatorEnabled>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	f043 0210 	orr.w	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff75 	bl	8001066 <LL_ADC_REG_IsConversionOngoing>
 800117c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 80cf 	bne.w	800132a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 80cb 	bne.w	800132a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001198:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800119c:	f043 0202 	orr.w	r2, r3, #2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff49 	bl	8001040 <LL_ADC_IsEnabled>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d115      	bne.n	80011e0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011b4:	4865      	ldr	r0, [pc, #404]	; (800134c <HAL_ADC_Init+0x298>)
 80011b6:	f7ff ff43 	bl	8001040 <LL_ADC_IsEnabled>
 80011ba:	4604      	mov	r4, r0
 80011bc:	4864      	ldr	r0, [pc, #400]	; (8001350 <HAL_ADC_Init+0x29c>)
 80011be:	f7ff ff3f 	bl	8001040 <LL_ADC_IsEnabled>
 80011c2:	4603      	mov	r3, r0
 80011c4:	431c      	orrs	r4, r3
 80011c6:	4863      	ldr	r0, [pc, #396]	; (8001354 <HAL_ADC_Init+0x2a0>)
 80011c8:	f7ff ff3a 	bl	8001040 <LL_ADC_IsEnabled>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4323      	orrs	r3, r4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4619      	mov	r1, r3
 80011da:	485f      	ldr	r0, [pc, #380]	; (8001358 <HAL_ADC_Init+0x2a4>)
 80011dc:	f7ff fdde 	bl	8000d9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7e5b      	ldrb	r3, [r3, #25]
 80011e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d106      	bne.n	800121c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	3b01      	subs	r3, #1
 8001214:	045b      	lsls	r3, r3, #17
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	2b00      	cmp	r3, #0
 8001222:	d009      	beq.n	8001238 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_ADC_Init+0x2a8>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	430b      	orrs	r3, r1
 800124a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff08 	bl	8001066 <LL_ADC_REG_IsConversionOngoing>
 8001256:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff15 	bl	800108c <LL_ADC_INJ_IsConversionOngoing>
 8001262:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13d      	bne.n	80012e6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d13a      	bne.n	80012e6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001274:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800127c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128c:	f023 0302 	bic.w	r3, r3, #2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	69b9      	ldr	r1, [r7, #24]
 8001296:	430b      	orrs	r3, r1
 8001298:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d118      	bne.n	80012d6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012ae:	f023 0304 	bic.w	r3, r3, #4
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ba:	4311      	orrs	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012c0:	4311      	orrs	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012c6:	430a      	orrs	r2, r1
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	e007      	b.n	80012e6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10c      	bne.n	8001308 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f023 010f 	bic.w	r1, r3, #15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
 8001306:	e007      	b.n	8001318 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 020f 	bic.w	r2, r2, #15
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	f023 0303 	bic.w	r3, r3, #3
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
 8001328:	e007      	b.n	800133a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800133a:	7ffb      	ldrb	r3, [r7, #31]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3724      	adds	r7, #36	; 0x24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	053e2d63 	.word	0x053e2d63
 800134c:	50040000 	.word	0x50040000
 8001350:	50040100 	.word	0x50040100
 8001354:	50040200 	.word	0x50040200
 8001358:	50040300 	.word	0x50040300
 800135c:	fff0c007 	.word	0xfff0c007

08001360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b6      	sub	sp, #216	; 0xd8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x22>
 800137e:	2302      	movs	r3, #2
 8001380:	e3c7      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x7b2>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe69 	bl	8001066 <LL_ADC_REG_IsConversionOngoing>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 83a8 	bne.w	8001aec <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d824      	bhi.n	80013ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	3b02      	subs	r3, #2
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d81b      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x86>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HAL_ADC_ConfigChannel+0x54>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013cd 	.word	0x080013cd
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013dd 	.word	0x080013dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	220c      	movs	r2, #12
 80013c8:	605a      	str	r2, [r3, #4]
          break;
 80013ca:	e011      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2212      	movs	r2, #18
 80013d0:	605a      	str	r2, [r3, #4]
          break;
 80013d2:	e00d      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2218      	movs	r2, #24
 80013d8:	605a      	str	r2, [r3, #4]
          break;
 80013da:	e009      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e2:	605a      	str	r2, [r3, #4]
          break;
 80013e4:	e004      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2206      	movs	r2, #6
 80013ea:	605a      	str	r2, [r3, #4]
          break;
 80013ec:	e000      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80013ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	f7ff fd56 	bl	8000eae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe2d 	bl	8001066 <LL_ADC_REG_IsConversionOngoing>
 800140c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe39 	bl	800108c <LL_ADC_INJ_IsConversionOngoing>
 800141a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800141e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 81a6 	bne.w	8001774 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 81a1 	bne.w	8001774 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	461a      	mov	r2, r3
 8001440:	f7ff fd61 	bl	8000f06 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00a      	beq.n	800147c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001476:	f7ff fcc5 	bl	8000e04 <LL_ADC_SetOffset>
 800147a:	e17b      	b.n	8001774 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fce2 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10a      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x148>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fcd7 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	0e9b      	lsrs	r3, r3, #26
 80014a2:	f003 021f 	and.w	r2, r3, #31
 80014a6:	e01e      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x186>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fccc 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80014d6:	2320      	movs	r3, #32
 80014d8:	e004      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80014da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x19e>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0e9b      	lsrs	r3, r3, #26
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	e018      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1d0>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800151a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001522:	2320      	movs	r3, #32
 8001524:	e004      	b.n	8001530 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001530:	429a      	cmp	r2, r3
 8001532:	d106      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc9b 	bl	8000e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2101      	movs	r1, #1
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fc7f 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <HAL_ADC_ConfigChannel+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc74 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	0e9b      	lsrs	r3, r3, #26
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	e01e      	b.n	80015ac <HAL_ADC_ConfigChannel+0x24c>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc69 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800158c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800159c:	2320      	movs	r3, #32
 800159e:	e004      	b.n	80015aa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80015a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x264>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0e9b      	lsrs	r3, r3, #26
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	e018      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x296>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80015d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80015e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80015e8:	2320      	movs	r3, #32
 80015ea:	e004      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80015ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d106      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc38 	bl	8000e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc1c 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x2d4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc11 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	0e9b      	lsrs	r3, r3, #26
 800162e:	f003 021f 	and.w	r2, r3, #31
 8001632:	e01e      	b.n	8001672 <HAL_ADC_ConfigChannel+0x312>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2102      	movs	r1, #2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc06 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800165a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001662:	2320      	movs	r3, #32
 8001664:	e004      	b.n	8001670 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_ADC_ConfigChannel+0x32a>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	e016      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x358>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800169c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800169e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80016a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80016aa:	2320      	movs	r3, #32
 80016ac:	e004      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80016ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d106      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	2102      	movs	r1, #2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fbd7 	bl	8000e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2103      	movs	r1, #3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fbbb 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x396>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2103      	movs	r1, #3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fbb0 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	e017      	b.n	8001726 <HAL_ADC_ConfigChannel+0x3c6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2103      	movs	r1, #3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fba5 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800170e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001710:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001718:	2320      	movs	r3, #32
 800171a:	e003      	b.n	8001724 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800171c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <HAL_ADC_ConfigChannel+0x3de>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0e9b      	lsrs	r3, r3, #26
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	e011      	b.n	8001762 <HAL_ADC_ConfigChannel+0x402>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800174c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001756:	2320      	movs	r3, #32
 8001758:	e003      	b.n	8001762 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800175a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001762:	429a      	cmp	r2, r3
 8001764:	d106      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	2103      	movs	r1, #3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb82 	bl	8000e78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fc61 	bl	8001040 <LL_ADC_IsEnabled>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 813f 	bne.w	8001a04 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	461a      	mov	r2, r3
 8001794:	f7ff fbe2 	bl	8000f5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a8e      	ldr	r2, [pc, #568]	; (80019d8 <HAL_ADC_ConfigChannel+0x678>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	f040 8130 	bne.w	8001a04 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10b      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x46c>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	3301      	adds	r3, #1
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	bf94      	ite	ls
 80017c4:	2301      	movls	r3, #1
 80017c6:	2300      	movhi	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	e019      	b.n	8001800 <HAL_ADC_ConfigChannel+0x4a0>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80017da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80017de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80017e4:	2320      	movs	r3, #32
 80017e6:	e003      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80017e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2b09      	cmp	r3, #9
 80017f8:	bf94      	ite	ls
 80017fa:	2301      	movls	r3, #1
 80017fc:	2300      	movhi	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001800:	2b00      	cmp	r3, #0
 8001802:	d079      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180c:	2b00      	cmp	r3, #0
 800180e:	d107      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x4c0>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0e9b      	lsrs	r3, r3, #26
 8001816:	3301      	adds	r3, #1
 8001818:	069b      	lsls	r3, r3, #26
 800181a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181e:	e015      	b.n	800184c <HAL_ADC_ConfigChannel+0x4ec>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800182e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001830:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001838:	2320      	movs	r3, #32
 800183a:	e003      	b.n	8001844 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	069b      	lsls	r3, r3, #26
 8001848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_ADC_ConfigChannel+0x50c>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0e9b      	lsrs	r3, r3, #26
 800185e:	3301      	adds	r3, #1
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	e017      	b.n	800189c <HAL_ADC_ConfigChannel+0x53c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800187a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800187e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001884:	2320      	movs	r3, #32
 8001886:	e003      	b.n	8001890 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	ea42 0103 	orr.w	r1, r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x562>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0e9b      	lsrs	r3, r3, #26
 80018b2:	3301      	adds	r3, #1
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	051b      	lsls	r3, r3, #20
 80018c0:	e018      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x594>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80018d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80018d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80018da:	2320      	movs	r3, #32
 80018dc:	e003      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80018de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f4:	430b      	orrs	r3, r1
 80018f6:	e080      	b.n	80019fa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x5b4>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0e9b      	lsrs	r3, r3, #26
 800190a:	3301      	adds	r3, #1
 800190c:	069b      	lsls	r3, r3, #26
 800190e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001912:	e015      	b.n	8001940 <HAL_ADC_ConfigChannel+0x5e0>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e003      	b.n	8001938 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	069b      	lsls	r3, r3, #26
 800193c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x600>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	3301      	adds	r3, #1
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	e017      	b.n	8001990 <HAL_ADC_ConfigChannel+0x630>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	61fb      	str	r3, [r7, #28]
  return result;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001978:	2320      	movs	r3, #32
 800197a:	e003      	b.n	8001984 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3301      	adds	r3, #1
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	ea42 0103 	orr.w	r1, r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10d      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x65c>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	3301      	adds	r3, #1
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	3b1e      	subs	r3, #30
 80019b4:	051b      	lsls	r3, r3, #20
 80019b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ba:	e01d      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x698>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	613b      	str	r3, [r7, #16]
  return result;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e005      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x684>
 80019d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f003 021f 	and.w	r2, r3, #31
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	3b1e      	subs	r3, #30
 80019f2:	051b      	lsls	r3, r3, #20
 80019f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f8:	430b      	orrs	r3, r1
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	6892      	ldr	r2, [r2, #8]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff fa81 	bl	8000f06 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_ADC_ConfigChannel+0x7bc>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d07a      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a10:	4843      	ldr	r0, [pc, #268]	; (8001b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a12:	f7ff f9e9 	bl	8000de8 <LL_ADC_GetCommonPathInternalCh>
 8001a16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a41      	ldr	r2, [pc, #260]	; (8001b24 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d12c      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d126      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3c      	ldr	r2, [pc, #240]	; (8001b28 <HAL_ADC_ConfigChannel+0x7c8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d004      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x6e4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <HAL_ADC_ConfigChannel+0x7cc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d15d      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4834      	ldr	r0, [pc, #208]	; (8001b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a50:	f7ff f9b7 	bl	8000dc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <HAL_ADC_ConfigChannel+0x7d0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <HAL_ADC_ConfigChannel+0x7d4>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a6e:	e002      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f9      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a7c:	e040      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_ADC_ConfigChannel+0x7d8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d118      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x75a>
 8001a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d112      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_ADC_ConfigChannel+0x7c8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0x748>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <HAL_ADC_ConfigChannel+0x7cc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d12d      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ab4:	f7ff f985 	bl	8000dc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ab8:	e024      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_ADC_ConfigChannel+0x7dc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d120      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d11a      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d115      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ade:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ae6:	f7ff f96c 	bl	8000dc2 <LL_ADC_SetCommonPathInternalCh>
 8001aea:	e00c      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	f043 0220 	orr.w	r2, r3, #32
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b00:	bf00      	nop
 8001b02:	e000      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	37d8      	adds	r7, #216	; 0xd8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	80080000 	.word	0x80080000
 8001b20:	50040300 	.word	0x50040300
 8001b24:	c7520000 	.word	0xc7520000
 8001b28:	50040000 	.word	0x50040000
 8001b2c:	50040200 	.word	0x50040200
 8001b30:	20000004 	.word	0x20000004
 8001b34:	053e2d63 	.word	0x053e2d63
 8001b38:	cb840000 	.word	0xcb840000
 8001b3c:	80000001 	.word	0x80000001

08001b40 <LL_ADC_IsEnabled>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_IsEnabled+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_IsEnabled+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_REG_IsConversionOngoing>:
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b09f      	sub	sp, #124	; 0x7c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e093      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d102      	bne.n	8001bca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	e001      	b.n	8001bce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10b      	bne.n	8001bec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f043 0220 	orr.w	r2, r3, #32
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e072      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffb9 	bl	8001b66 <LL_ADC_REG_IsConversionOngoing>
 8001bf4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ffb3 	bl	8001b66 <LL_ADC_REG_IsConversionOngoing>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d154      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d151      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001c0e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d02c      	beq.n	8001c72 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c2a:	035b      	lsls	r3, r3, #13
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c34:	4829      	ldr	r0, [pc, #164]	; (8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c36:	f7ff ff83 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4828      	ldr	r0, [pc, #160]	; (8001ce0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c3e:	f7ff ff7f 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	431c      	orrs	r4, r3
 8001c46:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001c48:	f7ff ff7a 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d137      	bne.n	8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c5c:	f023 030f 	bic.w	r3, r3, #15
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6811      	ldr	r1, [r2, #0]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6892      	ldr	r2, [r2, #8]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c6e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c70:	e028      	b.n	8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c7c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c7e:	4817      	ldr	r0, [pc, #92]	; (8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c80:	f7ff ff5e 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c84:	4604      	mov	r4, r0
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c88:	f7ff ff5a 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001c92:	f7ff ff55 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4323      	orrs	r3, r4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d112      	bne.n	8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ca6:	f023 030f 	bic.w	r3, r3, #15
 8001caa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cae:	e009      	b.n	8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	377c      	adds	r7, #124	; 0x7c
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	50040000 	.word	0x50040000
 8001ce0:	50040100 	.word	0x50040100
 8001ce4:	50040300 	.word	0x50040300
 8001ce8:	50040200 	.word	0x50040200

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e098      	b.n	8002054 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <HAL_DMA_Init+0x150>)
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d80f      	bhi.n	8001f4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_DMA_Init+0x154>)
 8001f36:	4413      	add	r3, r2
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_DMA_Init+0x158>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	009a      	lsls	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_DMA_Init+0x15c>)
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4c:	e00e      	b.n	8001f6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_DMA_Init+0x160>)
 8001f56:	4413      	add	r3, r2
 8001f58:	4a43      	ldr	r2, [pc, #268]	; (8002068 <HAL_DMA_Init+0x158>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	009a      	lsls	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_DMA_Init+0x164>)
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fc6:	d039      	beq.n	800203c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_DMA_Init+0x15c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11a      	bne.n	8002008 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_DMA_Init+0x168>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 031c 	and.w	r3, r3, #28
 8001fde:	210f      	movs	r1, #15
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4924      	ldr	r1, [pc, #144]	; (8002078 <HAL_DMA_Init+0x168>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_DMA_Init+0x168>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f003 031c 	and.w	r3, r3, #28
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	491d      	ldr	r1, [pc, #116]	; (8002078 <HAL_DMA_Init+0x168>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
 8002006:	e019      	b.n	800203c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_DMA_Init+0x16c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f003 031c 	and.w	r3, r3, #28
 8002014:	210f      	movs	r1, #15
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4917      	ldr	r1, [pc, #92]	; (800207c <HAL_DMA_Init+0x16c>)
 800201e:	4013      	ands	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_DMA_Init+0x16c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f003 031c 	and.w	r3, r3, #28
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	4911      	ldr	r1, [pc, #68]	; (800207c <HAL_DMA_Init+0x16c>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40020407 	.word	0x40020407
 8002064:	bffdfff8 	.word	0xbffdfff8
 8002068:	cccccccd 	.word	0xcccccccd
 800206c:	40020000 	.word	0x40020000
 8002070:	bffdfbf8 	.word	0xbffdfbf8
 8002074:	40020400 	.word	0x40020400
 8002078:	400200a8 	.word	0x400200a8
 800207c:	400204a8 	.word	0x400204a8

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 031c 	and.w	r3, r3, #28
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d026      	beq.n	80020fa <HAL_DMA_IRQHandler+0x7a>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d021      	beq.n	80020fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f003 021c 	and.w	r2, r3, #28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2104      	movs	r1, #4
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d071      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	e06c      	b.n	80021d4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f003 031c 	and.w	r3, r3, #28
 8002102:	2202      	movs	r2, #2
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02e      	beq.n	800216c <HAL_DMA_IRQHandler+0xec>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d029      	beq.n	800216c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 020a 	bic.w	r2, r2, #10
 8002134:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 021c 	and.w	r2, r3, #28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2102      	movs	r1, #2
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d038      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800216a:	e033      	b.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 031c 	and.w	r3, r3, #28
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02a      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d025      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020e 	bic.w	r2, r2, #14
 8002198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 021c 	and.w	r2, r3, #28
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
}
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e17f      	b.n	80024f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8171 	beq.w	80024ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d00b      	beq.n	8002228 <HAL_GPIO_Init+0x48>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221c:	2b11      	cmp	r3, #17
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b12      	cmp	r3, #18
 8002226:	d130      	bne.n	800228a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225e:	2201      	movs	r2, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 0201 	and.w	r2, r3, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b03      	cmp	r3, #3
 8002294:	d118      	bne.n	80022c8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	08db      	lsrs	r3, r3, #3
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x128>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b12      	cmp	r3, #18
 8002306:	d123      	bne.n	8002350 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	6939      	ldr	r1, [r7, #16]
 800234c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80ac 	beq.w	80024ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b5f      	ldr	r3, [pc, #380]	; (8002510 <HAL_GPIO_Init+0x330>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	4a5e      	ldr	r2, [pc, #376]	; (8002510 <HAL_GPIO_Init+0x330>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6613      	str	r3, [r2, #96]	; 0x60
 800239e:	4b5c      	ldr	r3, [pc, #368]	; (8002510 <HAL_GPIO_Init+0x330>)
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023aa:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <HAL_GPIO_Init+0x334>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x242>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x338>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x23e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x33c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x23a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x340>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x236>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x344>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x232>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x348>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x22e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_GPIO_Init+0x34c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x22a>
 8002406:	2306      	movs	r3, #6
 8002408:	e00c      	b.n	8002424 <HAL_GPIO_Init+0x244>
 800240a:	2307      	movs	r3, #7
 800240c:	e00a      	b.n	8002424 <HAL_GPIO_Init+0x244>
 800240e:	2305      	movs	r3, #5
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x244>
 8002412:	2304      	movs	r3, #4
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x244>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x244>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x244>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x244>
 8002422:	2300      	movs	r3, #0
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002434:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_GPIO_Init+0x334>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002466:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_GPIO_Init+0x350>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f47f ae78 	bne.w	80021f0 <HAL_GPIO_Init+0x10>
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40010000 	.word	0x40010000
 8002518:	48000400 	.word	0x48000400
 800251c:	48000800 	.word	0x48000800
 8002520:	48000c00 	.word	0x48000c00
 8002524:	48001000 	.word	0x48001000
 8002528:	48001400 	.word	0x48001400
 800252c:	48001800 	.word	0x48001800
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002550:	e002      	b.n	8002558 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_PWREx_GetVoltageRange+0x18>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800258e:	d130      	bne.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259c:	d038      	beq.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2232      	movs	r2, #50	; 0x32
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3301      	adds	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c4:	e002      	b.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d102      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f2      	bne.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ec:	d110      	bne.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e00f      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	d007      	beq.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002608:	4a05      	ldr	r2, [pc, #20]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40007000 	.word	0x40007000
 8002624:	20000004 	.word	0x20000004
 8002628:	431bde83 	.word	0x431bde83

0800262c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e3d4      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263e:	4ba1      	ldr	r3, [pc, #644]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002648:	4b9e      	ldr	r3, [pc, #632]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80e4 	beq.w	8002828 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_RCC_OscConfig+0x4a>
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	f040 808b 	bne.w	8002784 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 8087 	bne.w	8002784 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002676:	4b93      	ldr	r3, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e3ac      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_RCC_OscConfig+0x7c>
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a6:	e005      	b.n	80026b4 <HAL_RCC_OscConfig+0x88>
 80026a8:	4b86      	ldr	r3, [pc, #536]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d223      	bcs.n	8002700 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fd41 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e38d      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026cc:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a7c      	ldr	r2, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b7a      	ldr	r3, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4977      	ldr	r1, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	4972      	ldr	r1, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
 80026fe:	e025      	b.n	800274c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002700:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6f      	ldr	r2, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	496a      	ldr	r1, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800271e:	4b69      	ldr	r3, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	4965      	ldr	r1, [pc, #404]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fd01 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e34d      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274c:	f000 fc36 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	495a      	ldr	r1, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_OscConfig+0x2a0>)
 800276a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800276c:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x2a4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fab7 	bl	8000ce4 <HAL_InitTick>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d052      	beq.n	8002826 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	e331      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d032      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800278c:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002798:	f7fe faf4 	bl	8000d84 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a0:	f7fe faf0 	bl	8000d84 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e31a      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b2:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a40      	ldr	r2, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	493b      	ldr	r1, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e01a      	b.n	8002828 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fac1 	bl	8000d84 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002806:	f7fe fabd 	bl	8000d84 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e2e7      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x1da>
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002826:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d074      	beq.n	800291e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b08      	cmp	r3, #8
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x21a>
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d10e      	bne.n	800285e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d064      	beq.n	800291c <HAL_RCC_OscConfig+0x2f0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d160      	bne.n	800291c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e2c4      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x24a>
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e01d      	b.n	80028b2 <HAL_RCC_OscConfig+0x286>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0x26e>
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0x286>
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x298>)
 80028ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fa63 	bl	8000d84 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c0:	e011      	b.n	80028e6 <HAL_RCC_OscConfig+0x2ba>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004a20 	.word	0x08004a20
 80028cc:	20000004 	.word	0x20000004
 80028d0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fa56 	bl	8000d84 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e280      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e6:	4baf      	ldr	r3, [pc, #700]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2a8>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fa46 	bl	8000d84 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fa42 	bl	8000d84 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e26c      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290e:	4ba5      	ldr	r3, [pc, #660]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x2d0>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d060      	beq.n	80029ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x310>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d119      	bne.n	800296a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d116      	bne.n	800296a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	4b99      	ldr	r3, [pc, #612]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x328>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e249      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b93      	ldr	r3, [pc, #588]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4990      	ldr	r1, [pc, #576]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002968:	e040      	b.n	80029ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d023      	beq.n	80029ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002972:	4b8c      	ldr	r3, [pc, #560]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a8b      	ldr	r2, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fa01 	bl	8000d84 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002986:	f7fe f9fd 	bl	8000d84 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e227      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	4b82      	ldr	r3, [pc, #520]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	497c      	ldr	r1, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	e018      	b.n	80029ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a79      	ldr	r2, [pc, #484]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe f9dd 	bl	8000d84 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe f9d9 	bl	8000d84 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e203      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e0:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a00:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a06:	4a67      	ldr	r2, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe f9b8 	bl	8000d84 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fe f9b4 	bl	8000d84 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1de      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ef      	beq.n	8002a18 <HAL_RCC_OscConfig+0x3ec>
 8002a38:	e01b      	b.n	8002a72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe f99b 	bl	8000d84 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a52:	f7fe f997 	bl	8000d84 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1c1      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ef      	bne.n	8002a52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80a6 	beq.w	8002bcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a84:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b44      	ldr	r3, [pc, #272]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9c:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aac:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCC_OscConfig+0x57c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d118      	bne.n	8002aea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x57c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_RCC_OscConfig+0x57c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f95e 	bl	8000d84 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe f95a 	bl	8000d84 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e184      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_RCC_OscConfig+0x57c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4d8>
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b02:	e024      	b.n	8002b4e <HAL_RCC_OscConfig+0x522>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d110      	bne.n	8002b2e <HAL_RCC_OscConfig+0x502>
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2c:	e00f      	b.n	8002b4e <HAL_RCC_OscConfig+0x522>
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe f915 	bl	8000d84 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe f911 	bl	8000d84 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e139      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x578>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ed      	beq.n	8002b5e <HAL_RCC_OscConfig+0x532>
 8002b82:	e01a      	b.n	8002bba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe f8fe 	bl	8000d84 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8a:	e00f      	b.n	8002bac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f8fa 	bl	8000d84 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d906      	bls.n	8002bac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e122      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bac:	4b90      	ldr	r3, [pc, #576]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e8      	bne.n	8002b8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc0:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	4a8a      	ldr	r2, [pc, #552]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8108 	beq.w	8002de6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	f040 80d0 	bne.w	8002d80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002be0:	4b83      	ldr	r3, [pc, #524]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d130      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d127      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11f      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c20:	2a07      	cmp	r2, #7
 8002c22:	bf14      	ite	ne
 8002c24:	2201      	movne	r2, #1
 8002c26:	2200      	moveq	r2, #0
 8002c28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d06e      	beq.n	8002d34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d069      	beq.n	8002d30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b7      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c78:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5c      	ldr	r2, [pc, #368]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c84:	f7fe f87e 	bl	8000d84 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe f87a 	bl	8000d84 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0a4      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9e:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002caa:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b51      	ldr	r3, [pc, #324]	; (8002df4 <HAL_RCC_OscConfig+0x7c8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cc4:	0212      	lsls	r2, r2, #8
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0552      	lsls	r2, r2, #21
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cd8:	0852      	lsrs	r2, r2, #1
 8002cda:	3a01      	subs	r2, #1
 8002cdc:	0652      	lsls	r2, r2, #25
 8002cde:	4311      	orrs	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce4:	0912      	lsrs	r2, r2, #4
 8002ce6:	0452      	lsls	r2, r2, #17
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	4941      	ldr	r1, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3e      	ldr	r2, [pc, #248]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d08:	f7fe f83c 	bl	8000d84 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe f838 	bl	8000d84 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e062      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d2e:	e05a      	b.n	8002de6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e059      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d152      	bne.n	8002de6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d58:	f7fe f814 	bl	8000d84 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe f810 	bl	8000d84 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e03a      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x734>
 8002d7e:	e032      	b.n	8002de6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d02d      	beq.n	8002de2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002da4:	f023 0303 	bic.w	r3, r3, #3
 8002da8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002db0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fd ffe3 	bl	8000d84 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fd ffdf 	bl	8000d84 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e009      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x7c4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x796>
 8002de0:	e001      	b.n	8002de6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	f99d808c 	.word	0xf99d808c

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0c8      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d910      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	4961      	ldr	r1, [pc, #388]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0b0      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d04c      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e50:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d121      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e09e      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e092      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e086      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e07e      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea0:	4b42      	ldr	r3, [pc, #264]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 0203 	bic.w	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	493f      	ldr	r1, [pc, #252]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb2:	f7fd ff67 	bl	8000d84 <HAL_GetTick>
 8002eb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eba:	f7fd ff63 	bl	8000d84 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e066      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 020c 	and.w	r2, r3, #12
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d1eb      	bne.n	8002eba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	492c      	ldr	r1, [pc, #176]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d210      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0207 	bic.w	r2, r3, #7
 8002f16:	4924      	ldr	r1, [pc, #144]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e036      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4918      	ldr	r1, [pc, #96]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4910      	ldr	r1, [pc, #64]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f6e:	f000 f825 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCC_ClockConfig+0x1b4>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fea6 	bl	8000ce4 <HAL_InitTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08004a20 	.word	0x08004a20
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000008 	.word	0x20000008

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fca:	4b3e      	ldr	r3, [pc, #248]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d121      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d11e      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff0:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e005      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d102      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	e004      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d101      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003042:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d134      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0xa6>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0xac>
 8003060:	e005      	b.n	800306e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003064:	617b      	str	r3, [r7, #20]
      break;
 8003066:	e005      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800306a:	617b      	str	r3, [r7, #20]
      break;
 800306c:	e002      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	617b      	str	r3, [r7, #20]
      break;
 8003072:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	3301      	adds	r3, #1
 8003080:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	fb02 f203 	mul.w	r2, r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	0e5b      	lsrs	r3, r3, #25
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	3301      	adds	r3, #1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030b4:	69bb      	ldr	r3, [r7, #24]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	08004a38 	.word	0x08004a38
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08004a30 	.word	0x08004a30

08003118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800311c:	f7ff ffda 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	08004a30 	.word	0x08004a30

08003144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800315c:	f7ff fa02 	bl	8002564 <HAL_PWREx_GetVoltageRange>
 8003160:	6178      	str	r0, [r7, #20]
 8003162:	e014      	b.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	; 0x58
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800317c:	f7ff f9f2 	bl	8002564 <HAL_PWREx_GetVoltageRange>
 8003180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d10b      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d919      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2ba0      	cmp	r3, #160	; 0xa0
 80031a0:	d902      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a2:	2302      	movs	r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	e013      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a8:	2301      	movs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e010      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d902      	bls.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031b4:	2303      	movs	r3, #3
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e00a      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d102      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c0:	2302      	movs	r3, #2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e004      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d101      	bne.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	4909      	ldr	r1, [pc, #36]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	40022000 	.word	0x40022000

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800320c:	2300      	movs	r3, #0
 800320e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003210:	2300      	movs	r3, #0
 8003212:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321c:	2b00      	cmp	r3, #0
 800321e:	d041      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003224:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003228:	d02a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800322a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800322e:	d824      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003234:	d008      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003236:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800323a:	d81e      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003244:	d010      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003246:	e018      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003248:	4b86      	ldr	r3, [pc, #536]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a85      	ldr	r2, [pc, #532]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003254:	e015      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fabb 	bl	80037d8 <RCCEx_PLLSAI1_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003266:	e00c      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3320      	adds	r3, #32
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fba6 	bl	80039c0 <RCCEx_PLLSAI2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003278:	e003      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	74fb      	strb	r3, [r7, #19]
      break;
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003288:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003296:	4973      	ldr	r1, [pc, #460]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800329e:	e001      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d041      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b8:	d02a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032be:	d824      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c4:	d008      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ca:	d81e      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d4:	d010      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032d6:	e018      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d8:	4b62      	ldr	r3, [pc, #392]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a61      	ldr	r2, [pc, #388]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e4:	e015      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fa73 	bl	80037d8 <RCCEx_PLLSAI1_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f6:	e00c      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3320      	adds	r3, #32
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb5e 	bl	80039c0 <RCCEx_PLLSAI2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003308:	e003      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	74fb      	strb	r3, [r7, #19]
      break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003318:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003326:	494f      	ldr	r1, [pc, #316]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a0 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a40      	ldr	r2, [pc, #256]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	6593      	str	r3, [r2, #88]	; 0x58
 8003368:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003374:	2301      	movs	r3, #1
 8003376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003384:	f7fd fcfe 	bl	8000d84 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800338a:	e009      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fcfa 	bl	8000d84 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	74fb      	strb	r3, [r7, #19]
        break;
 800339e:	e005      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d15c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b2:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01f      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d019      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	4a20      	ldr	r2, [pc, #128]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033fc:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd fcb9 	bl	8000d84 <HAL_GetTick>
 8003412:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003414:	e00b      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fd fcb5 	bl	8000d84 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d902      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	74fb      	strb	r3, [r7, #19]
            break;
 800342c:	e006      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ec      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10c      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800345a:	e009      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	74bb      	strb	r3, [r7, #18]
 8003460:	e006      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003470:	7c7b      	ldrb	r3, [r7, #17]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b9e      	ldr	r3, [pc, #632]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	4a9d      	ldr	r2, [pc, #628]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348e:	4b98      	ldr	r3, [pc, #608]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f023 0203 	bic.w	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	4994      	ldr	r1, [pc, #592]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034b0:	4b8f      	ldr	r3, [pc, #572]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f023 020c 	bic.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	498c      	ldr	r1, [pc, #560]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034d2:	4b87      	ldr	r3, [pc, #540]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	4983      	ldr	r1, [pc, #524]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034f4:	4b7e      	ldr	r3, [pc, #504]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	497b      	ldr	r1, [pc, #492]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003516:	4b76      	ldr	r3, [pc, #472]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	4972      	ldr	r1, [pc, #456]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003538:	4b6d      	ldr	r3, [pc, #436]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	496a      	ldr	r1, [pc, #424]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800355a:	4b65      	ldr	r3, [pc, #404]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	4961      	ldr	r1, [pc, #388]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800357c:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	4959      	ldr	r1, [pc, #356]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800359e:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	4950      	ldr	r1, [pc, #320]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	4948      	ldr	r1, [pc, #288]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	493f      	ldr	r1, [pc, #252]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d028      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	4937      	ldr	r1, [pc, #220]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003622:	d106      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362e:	60d3      	str	r3, [r2, #12]
 8003630:	e011      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800363a:	d10c      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f8c8 	bl	80037d8 <RCCEx_PLLSAI1_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d028      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	491f      	ldr	r1, [pc, #124]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003680:	d106      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368c:	60d3      	str	r3, [r2, #12]
 800368e:	e011      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f899 	bl	80037d8 <RCCEx_PLLSAI1_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d02b      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4908      	ldr	r1, [pc, #32]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036de:	d109      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a02      	ldr	r2, [pc, #8]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ea:	60d3      	str	r3, [r2, #12]
 80036ec:	e014      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f867 	bl	80037d8 <RCCEx_PLLSAI1_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003724:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003732:	4928      	ldr	r1, [pc, #160]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003742:	d10d      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	2102      	movs	r1, #2
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f844 	bl	80037d8 <RCCEx_PLLSAI1_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d014      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	74bb      	strb	r3, [r7, #18]
 800375e:	e011      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003768:	d10c      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3320      	adds	r3, #32
 800376e:	2102      	movs	r1, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f925 	bl	80039c0 <RCCEx_PLLSAI2_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379e:	490d      	ldr	r1, [pc, #52]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c2:	4904      	ldr	r1, [pc, #16]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000

080037d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037e6:	4b75      	ldr	r3, [pc, #468]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d018      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037f2:	4b72      	ldr	r3, [pc, #456]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0203 	and.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d10d      	bne.n	800381e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
       ||
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800380a:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
       ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d047      	beq.n	80038ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
 8003822:	e044      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d018      	beq.n	800385e <RCCEx_PLLSAI1_Config+0x86>
 800382c:	2b03      	cmp	r3, #3
 800382e:	d825      	bhi.n	800387c <RCCEx_PLLSAI1_Config+0xa4>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d002      	beq.n	800383a <RCCEx_PLLSAI1_Config+0x62>
 8003834:	2b02      	cmp	r3, #2
 8003836:	d009      	beq.n	800384c <RCCEx_PLLSAI1_Config+0x74>
 8003838:	e020      	b.n	800387c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800383a:	4b60      	ldr	r3, [pc, #384]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11d      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384a:	e01a      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800384c:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d116      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385c:	e013      	b.n	8003886 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800385e:	4b57      	ldr	r3, [pc, #348]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10f      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800387a:	e006      	b.n	800388a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      break;
 8003880:	e004      	b.n	800388c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800388a:	bf00      	nop
    }

    if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6819      	ldr	r1, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	430b      	orrs	r3, r1
 80038a8:	4944      	ldr	r1, [pc, #272]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d17d      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038b4:	4b41      	ldr	r3, [pc, #260]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a40      	ldr	r2, [pc, #256]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c0:	f7fd fa60 	bl	8000d84 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c6:	e009      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c8:	f7fd fa5c 	bl	8000d84 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d902      	bls.n	80038dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	73fb      	strb	r3, [r7, #15]
        break;
 80038da:	e005      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038dc:	4b37      	ldr	r3, [pc, #220]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ef      	bne.n	80038c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d160      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6892      	ldr	r2, [r2, #8]
 8003904:	0211      	lsls	r1, r2, #8
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68d2      	ldr	r2, [r2, #12]
 800390a:	0912      	lsrs	r2, r2, #4
 800390c:	0452      	lsls	r2, r2, #17
 800390e:	430a      	orrs	r2, r1
 8003910:	492a      	ldr	r1, [pc, #168]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
 8003916:	e027      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d112      	bne.n	8003944 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003926:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	0211      	lsls	r1, r2, #8
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6912      	ldr	r2, [r2, #16]
 8003934:	0852      	lsrs	r2, r2, #1
 8003936:	3a01      	subs	r2, #1
 8003938:	0552      	lsls	r2, r2, #21
 800393a:	430a      	orrs	r2, r1
 800393c:	491f      	ldr	r1, [pc, #124]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	610b      	str	r3, [r1, #16]
 8003942:	e011      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800394c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6952      	ldr	r2, [r2, #20]
 800395a:	0852      	lsrs	r2, r2, #1
 800395c:	3a01      	subs	r2, #1
 800395e:	0652      	lsls	r2, r2, #25
 8003960:	430a      	orrs	r2, r1
 8003962:	4916      	ldr	r1, [pc, #88]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a13      	ldr	r2, [pc, #76]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800396e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003972:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fa06 	bl	8000d84 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800397a:	e009      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800397c:	f7fd fa02 	bl	8000d84 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	73fb      	strb	r3, [r7, #15]
          break;
 800398e:	e005      	b.n	800399c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4904      	ldr	r1, [pc, #16]	; (80039bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000

080039c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
       ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039f2:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
       ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d047      	beq.n	8003a96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e044      	b.n	8003a96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d018      	beq.n	8003a46 <RCCEx_PLLSAI2_Config+0x86>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d825      	bhi.n	8003a64 <RCCEx_PLLSAI2_Config+0xa4>
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d002      	beq.n	8003a22 <RCCEx_PLLSAI2_Config+0x62>
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d009      	beq.n	8003a34 <RCCEx_PLLSAI2_Config+0x74>
 8003a20:	e020      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a22:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11d      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a32:	e01a      	b.n	8003a6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e013      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a46:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a62:	e006      	b.n	8003a72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e004      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e002      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10d      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a7a:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	4939      	ldr	r1, [pc, #228]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d167      	bne.n	8003b6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa8:	f7fd f96c 	bl	8000d84 <HAL_GetTick>
 8003aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aae:	e009      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab0:	f7fd f968 	bl	8000d84 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d902      	bls.n	8003ac4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac2:	e005      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ef      	bne.n	8003ab0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d14a      	bne.n	8003b6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	0211      	lsls	r1, r2, #8
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	0912      	lsrs	r2, r2, #4
 8003af4:	0452      	lsls	r2, r2, #17
 8003af6:	430a      	orrs	r2, r1
 8003af8:	491f      	ldr	r1, [pc, #124]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	614b      	str	r3, [r1, #20]
 8003afe:	e011      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	0211      	lsls	r1, r2, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6912      	ldr	r2, [r2, #16]
 8003b16:	0852      	lsrs	r2, r2, #1
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0652      	lsls	r2, r2, #25
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	4916      	ldr	r1, [pc, #88]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd f928 	bl	8000d84 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b36:	e009      	b.n	8003b4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b38:	f7fd f924 	bl	8000d84 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	73fb      	strb	r3, [r7, #15]
          break;
 8003b4a:	e005      	b.n	8003b58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4904      	ldr	r1, [pc, #16]	; (8003b78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e049      	b.n	8003c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc ff72 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 f8fc 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_ConfigClockSource+0x18>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e0b5      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x184>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	d03e      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0xd4>
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c84:	f200 8087 	bhi.w	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8c:	f000 8085 	beq.w	8003d9a <HAL_TIM_ConfigClockSource+0x170>
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c94:	d87f      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003c96:	2b70      	cmp	r3, #112	; 0x70
 8003c98:	d01a      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0xa6>
 8003c9a:	2b70      	cmp	r3, #112	; 0x70
 8003c9c:	d87b      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9e:	2b60      	cmp	r3, #96	; 0x60
 8003ca0:	d050      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x11a>
 8003ca2:	2b60      	cmp	r3, #96	; 0x60
 8003ca4:	d877      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca6:	2b50      	cmp	r3, #80	; 0x50
 8003ca8:	d03c      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0xfa>
 8003caa:	2b50      	cmp	r3, #80	; 0x50
 8003cac:	d873      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d058      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0x13a>
 8003cb2:	2b40      	cmp	r3, #64	; 0x40
 8003cb4:	d86f      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb6:	2b30      	cmp	r3, #48	; 0x30
 8003cb8:	d064      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0x15a>
 8003cba:	2b30      	cmp	r3, #48	; 0x30
 8003cbc:	d86b      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d060      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d867      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d05c      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0x15a>
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d05a      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cce:	e062      	b.n	8003d96 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6899      	ldr	r1, [r3, #8]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f000 f97e 	bl	8003fe0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
      break;
 8003cfc:	e04e      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6899      	ldr	r1, [r3, #8]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f000 f967 	bl	8003fe0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d20:	609a      	str	r2, [r3, #8]
      break;
 8003d22:	e03b      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	461a      	mov	r2, r3
 8003d32:	f000 f8db 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2150      	movs	r1, #80	; 0x50
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f934 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d42:	e02b      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	461a      	mov	r2, r3
 8003d52:	f000 f8fa 	bl	8003f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2160      	movs	r1, #96	; 0x60
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f924 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d62:	e01b      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	461a      	mov	r2, r3
 8003d72:	f000 f8bb 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f914 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d82:	e00b      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 f90b 	bl	8003faa <TIM_ITRx_SetConfig>
        break;
 8003d94:	e002      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a40      	ldr	r2, [pc, #256]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <TIM_Base_SetConfig+0x118>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <TIM_Base_SetConfig+0x11c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01f      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d01b      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <TIM_Base_SetConfig+0x118>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d017      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <TIM_Base_SetConfig+0x11c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00f      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a29      	ldr	r2, [pc, #164]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <TIM_Base_SetConfig+0x128>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_Base_SetConfig+0x9a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <TIM_Base_SetConfig+0x128>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a10      	ldr	r2, [pc, #64]	; (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40013400 	.word	0x40013400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800

08003eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 030a 	bic.w	r3, r3, #10
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f043 0307 	orr.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	431a      	orrs	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004034:	2302      	movs	r3, #2
 8004036:	e068      	b.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2e      	ldr	r2, [pc, #184]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2d      	ldr	r2, [pc, #180]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004072:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01d      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d018      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40014000 	.word	0x40014000

08004130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e040      	b.n	80041c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fcba 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	; 0x24
 800415c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f82c 	bl	80041cc <UART_SetConfig>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e022      	b.n	80041c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 faaa 	bl	80046e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb31 	bl	8004824 <UART_CheckIdleState>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b5b0      	push	{r4, r5, r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4bad      	ldr	r3, [pc, #692]	; (80044ac <UART_SetConfig+0x2e0>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	69f9      	ldr	r1, [r7, #28]
 8004200:	430b      	orrs	r3, r1
 8004202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4aa2      	ldr	r2, [pc, #648]	; (80044b0 <UART_SetConfig+0x2e4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	4313      	orrs	r3, r2
 8004232:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a99      	ldr	r2, [pc, #612]	; (80044b4 <UART_SetConfig+0x2e8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d121      	bne.n	8004296 <UART_SetConfig+0xca>
 8004252:	4b99      	ldr	r3, [pc, #612]	; (80044b8 <UART_SetConfig+0x2ec>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d817      	bhi.n	8004290 <UART_SetConfig+0xc4>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x9c>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	08004285 	.word	0x08004285
 8004270:	0800427f 	.word	0x0800427f
 8004274:	0800428b 	.word	0x0800428b
 8004278:	2301      	movs	r3, #1
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e0e7      	b.n	800444e <UART_SetConfig+0x282>
 800427e:	2302      	movs	r3, #2
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e0e4      	b.n	800444e <UART_SetConfig+0x282>
 8004284:	2304      	movs	r3, #4
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e0e1      	b.n	800444e <UART_SetConfig+0x282>
 800428a:	2308      	movs	r3, #8
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e0de      	b.n	800444e <UART_SetConfig+0x282>
 8004290:	2310      	movs	r3, #16
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e0db      	b.n	800444e <UART_SetConfig+0x282>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a88      	ldr	r2, [pc, #544]	; (80044bc <UART_SetConfig+0x2f0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d132      	bne.n	8004306 <UART_SetConfig+0x13a>
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <UART_SetConfig+0x2ec>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d828      	bhi.n	8004300 <UART_SetConfig+0x134>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0xe8>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	08004301 	.word	0x08004301
 80042bc:	08004301 	.word	0x08004301
 80042c0:	08004301 	.word	0x08004301
 80042c4:	080042f5 	.word	0x080042f5
 80042c8:	08004301 	.word	0x08004301
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004301 	.word	0x08004301
 80042d4:	080042ef 	.word	0x080042ef
 80042d8:	08004301 	.word	0x08004301
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004301 	.word	0x08004301
 80042e4:	080042fb 	.word	0x080042fb
 80042e8:	2300      	movs	r3, #0
 80042ea:	76fb      	strb	r3, [r7, #27]
 80042ec:	e0af      	b.n	800444e <UART_SetConfig+0x282>
 80042ee:	2302      	movs	r3, #2
 80042f0:	76fb      	strb	r3, [r7, #27]
 80042f2:	e0ac      	b.n	800444e <UART_SetConfig+0x282>
 80042f4:	2304      	movs	r3, #4
 80042f6:	76fb      	strb	r3, [r7, #27]
 80042f8:	e0a9      	b.n	800444e <UART_SetConfig+0x282>
 80042fa:	2308      	movs	r3, #8
 80042fc:	76fb      	strb	r3, [r7, #27]
 80042fe:	e0a6      	b.n	800444e <UART_SetConfig+0x282>
 8004300:	2310      	movs	r3, #16
 8004302:	76fb      	strb	r3, [r7, #27]
 8004304:	e0a3      	b.n	800444e <UART_SetConfig+0x282>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6d      	ldr	r2, [pc, #436]	; (80044c0 <UART_SetConfig+0x2f4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d120      	bne.n	8004352 <UART_SetConfig+0x186>
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <UART_SetConfig+0x2ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800431a:	2b30      	cmp	r3, #48	; 0x30
 800431c:	d013      	beq.n	8004346 <UART_SetConfig+0x17a>
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	d814      	bhi.n	800434c <UART_SetConfig+0x180>
 8004322:	2b20      	cmp	r3, #32
 8004324:	d009      	beq.n	800433a <UART_SetConfig+0x16e>
 8004326:	2b20      	cmp	r3, #32
 8004328:	d810      	bhi.n	800434c <UART_SetConfig+0x180>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <UART_SetConfig+0x168>
 800432e:	2b10      	cmp	r3, #16
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x174>
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x180>
 8004334:	2300      	movs	r3, #0
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e089      	b.n	800444e <UART_SetConfig+0x282>
 800433a:	2302      	movs	r3, #2
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e086      	b.n	800444e <UART_SetConfig+0x282>
 8004340:	2304      	movs	r3, #4
 8004342:	76fb      	strb	r3, [r7, #27]
 8004344:	e083      	b.n	800444e <UART_SetConfig+0x282>
 8004346:	2308      	movs	r3, #8
 8004348:	76fb      	strb	r3, [r7, #27]
 800434a:	e080      	b.n	800444e <UART_SetConfig+0x282>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e07d      	b.n	800444e <UART_SetConfig+0x282>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <UART_SetConfig+0x2f8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d120      	bne.n	800439e <UART_SetConfig+0x1d2>
 800435c:	4b56      	ldr	r3, [pc, #344]	; (80044b8 <UART_SetConfig+0x2ec>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004366:	2bc0      	cmp	r3, #192	; 0xc0
 8004368:	d013      	beq.n	8004392 <UART_SetConfig+0x1c6>
 800436a:	2bc0      	cmp	r3, #192	; 0xc0
 800436c:	d814      	bhi.n	8004398 <UART_SetConfig+0x1cc>
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d009      	beq.n	8004386 <UART_SetConfig+0x1ba>
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d810      	bhi.n	8004398 <UART_SetConfig+0x1cc>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <UART_SetConfig+0x1b4>
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d006      	beq.n	800438c <UART_SetConfig+0x1c0>
 800437e:	e00b      	b.n	8004398 <UART_SetConfig+0x1cc>
 8004380:	2300      	movs	r3, #0
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e063      	b.n	800444e <UART_SetConfig+0x282>
 8004386:	2302      	movs	r3, #2
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e060      	b.n	800444e <UART_SetConfig+0x282>
 800438c:	2304      	movs	r3, #4
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e05d      	b.n	800444e <UART_SetConfig+0x282>
 8004392:	2308      	movs	r3, #8
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e05a      	b.n	800444e <UART_SetConfig+0x282>
 8004398:	2310      	movs	r3, #16
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e057      	b.n	800444e <UART_SetConfig+0x282>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a49      	ldr	r2, [pc, #292]	; (80044c8 <UART_SetConfig+0x2fc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d125      	bne.n	80043f4 <UART_SetConfig+0x228>
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <UART_SetConfig+0x2ec>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b6:	d017      	beq.n	80043e8 <UART_SetConfig+0x21c>
 80043b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043bc:	d817      	bhi.n	80043ee <UART_SetConfig+0x222>
 80043be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c2:	d00b      	beq.n	80043dc <UART_SetConfig+0x210>
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d811      	bhi.n	80043ee <UART_SetConfig+0x222>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <UART_SetConfig+0x20a>
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d2:	d006      	beq.n	80043e2 <UART_SetConfig+0x216>
 80043d4:	e00b      	b.n	80043ee <UART_SetConfig+0x222>
 80043d6:	2300      	movs	r3, #0
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e038      	b.n	800444e <UART_SetConfig+0x282>
 80043dc:	2302      	movs	r3, #2
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	e035      	b.n	800444e <UART_SetConfig+0x282>
 80043e2:	2304      	movs	r3, #4
 80043e4:	76fb      	strb	r3, [r7, #27]
 80043e6:	e032      	b.n	800444e <UART_SetConfig+0x282>
 80043e8:	2308      	movs	r3, #8
 80043ea:	76fb      	strb	r3, [r7, #27]
 80043ec:	e02f      	b.n	800444e <UART_SetConfig+0x282>
 80043ee:	2310      	movs	r3, #16
 80043f0:	76fb      	strb	r3, [r7, #27]
 80043f2:	e02c      	b.n	800444e <UART_SetConfig+0x282>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2d      	ldr	r2, [pc, #180]	; (80044b0 <UART_SetConfig+0x2e4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d125      	bne.n	800444a <UART_SetConfig+0x27e>
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <UART_SetConfig+0x2ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800440c:	d017      	beq.n	800443e <UART_SetConfig+0x272>
 800440e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004412:	d817      	bhi.n	8004444 <UART_SetConfig+0x278>
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d00b      	beq.n	8004432 <UART_SetConfig+0x266>
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441e:	d811      	bhi.n	8004444 <UART_SetConfig+0x278>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <UART_SetConfig+0x260>
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d006      	beq.n	8004438 <UART_SetConfig+0x26c>
 800442a:	e00b      	b.n	8004444 <UART_SetConfig+0x278>
 800442c:	2300      	movs	r3, #0
 800442e:	76fb      	strb	r3, [r7, #27]
 8004430:	e00d      	b.n	800444e <UART_SetConfig+0x282>
 8004432:	2302      	movs	r3, #2
 8004434:	76fb      	strb	r3, [r7, #27]
 8004436:	e00a      	b.n	800444e <UART_SetConfig+0x282>
 8004438:	2304      	movs	r3, #4
 800443a:	76fb      	strb	r3, [r7, #27]
 800443c:	e007      	b.n	800444e <UART_SetConfig+0x282>
 800443e:	2308      	movs	r3, #8
 8004440:	76fb      	strb	r3, [r7, #27]
 8004442:	e004      	b.n	800444e <UART_SetConfig+0x282>
 8004444:	2310      	movs	r3, #16
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e001      	b.n	800444e <UART_SetConfig+0x282>
 800444a:	2310      	movs	r3, #16
 800444c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <UART_SetConfig+0x2e4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	f040 8087 	bne.w	8004568 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800445a:	7efb      	ldrb	r3, [r7, #27]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d837      	bhi.n	80044d0 <UART_SetConfig+0x304>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x29c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044d1 	.word	0x080044d1
 8004470:	08004495 	.word	0x08004495
 8004474:	080044d1 	.word	0x080044d1
 8004478:	0800449b 	.word	0x0800449b
 800447c:	080044d1 	.word	0x080044d1
 8004480:	080044d1 	.word	0x080044d1
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044a3 	.word	0x080044a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fe fe2e 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004490:	6178      	str	r0, [r7, #20]
        break;
 8004492:	e022      	b.n	80044da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <UART_SetConfig+0x300>)
 8004496:	617b      	str	r3, [r7, #20]
        break;
 8004498:	e01f      	b.n	80044da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449a:	f7fe fd8f 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 800449e:	6178      	str	r0, [r7, #20]
        break;
 80044a0:	e01b      	b.n	80044da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a6:	617b      	str	r3, [r7, #20]
        break;
 80044a8:	e017      	b.n	80044da <UART_SetConfig+0x30e>
 80044aa:	bf00      	nop
 80044ac:	efff69f3 	.word	0xefff69f3
 80044b0:	40008000 	.word	0x40008000
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40004800 	.word	0x40004800
 80044c4:	40004c00 	.word	0x40004c00
 80044c8:	40005000 	.word	0x40005000
 80044cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	76bb      	strb	r3, [r7, #26]
        break;
 80044d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80f1 	beq.w	80046c4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d305      	bcc.n	80044fe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	76bb      	strb	r3, [r7, #26]
 8004502:	e0df      	b.n	80046c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4618      	mov	r0, r3
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	020b      	lsls	r3, r1, #8
 8004516:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800451a:	0202      	lsls	r2, r0, #8
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	6849      	ldr	r1, [r1, #4]
 8004520:	0849      	lsrs	r1, r1, #1
 8004522:	4608      	mov	r0, r1
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	1814      	adds	r4, r2, r0
 800452a:	eb43 0501 	adc.w	r5, r3, r1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	461a      	mov	r2, r3
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	4620      	mov	r0, r4
 800453a:	4629      	mov	r1, r5
 800453c:	f7fb fe44 	bl	80001c8 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454e:	d308      	bcc.n	8004562 <UART_SetConfig+0x396>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004556:	d204      	bcs.n	8004562 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	e0b0      	b.n	80046c4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	76bb      	strb	r3, [r7, #26]
 8004566:	e0ad      	b.n	80046c4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004570:	d15c      	bne.n	800462c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004572:	7efb      	ldrb	r3, [r7, #27]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d828      	bhi.n	80045ca <UART_SetConfig+0x3fe>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <UART_SetConfig+0x3b4>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045ad 	.word	0x080045ad
 8004588:	080045b5 	.word	0x080045b5
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045bb 	.word	0x080045bb
 8004594:	080045cb 	.word	0x080045cb
 8004598:	080045cb 	.word	0x080045cb
 800459c:	080045cb 	.word	0x080045cb
 80045a0:	080045c3 	.word	0x080045c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7fe fda2 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80045a8:	6178      	str	r0, [r7, #20]
        break;
 80045aa:	e013      	b.n	80045d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ac:	f7fe fdb4 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 80045b0:	6178      	str	r0, [r7, #20]
        break;
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b4:	4b49      	ldr	r3, [pc, #292]	; (80046dc <UART_SetConfig+0x510>)
 80045b6:	617b      	str	r3, [r7, #20]
        break;
 80045b8:	e00c      	b.n	80045d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ba:	f7fe fcff 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80045be:	6178      	str	r0, [r7, #20]
        break;
 80045c0:	e008      	b.n	80045d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c6:	617b      	str	r3, [r7, #20]
        break;
 80045c8:	e004      	b.n	80045d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	76bb      	strb	r3, [r7, #26]
        break;
 80045d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d074      	beq.n	80046c4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	005a      	lsls	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d916      	bls.n	8004626 <UART_SetConfig+0x45a>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fe:	d212      	bcs.n	8004626 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f023 030f 	bic.w	r3, r3, #15
 8004608:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	b29a      	uxth	r2, r3
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	4313      	orrs	r3, r2
 800461a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	89fa      	ldrh	r2, [r7, #14]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e04e      	b.n	80046c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	76bb      	strb	r3, [r7, #26]
 800462a:	e04b      	b.n	80046c4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800462c:	7efb      	ldrb	r3, [r7, #27]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d827      	bhi.n	8004682 <UART_SetConfig+0x4b6>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x46c>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe fd46 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004660:	6178      	str	r0, [r7, #20]
        break;
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe fd58 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 8004668:	6178      	str	r0, [r7, #20]
        break;
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <UART_SetConfig+0x510>)
 800466e:	617b      	str	r3, [r7, #20]
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7fe fca3 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8004676:	6178      	str	r0, [r7, #20]
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	617b      	str	r3, [r7, #20]
        break;
 8004680:	e004      	b.n	800468c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	76bb      	strb	r3, [r7, #26]
        break;
 800468a:	bf00      	nop
    }

    if (pclk != 0U)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	085a      	lsrs	r2, r3, #1
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	441a      	add	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	d908      	bls.n	80046c0 <UART_SetConfig+0x4f4>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d204      	bcs.n	80046c0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	e001      	b.n	80046c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdb0      	pop	{r4, r5, r7, pc}
 80046da:	bf00      	nop
 80046dc:	00f42400 	.word	0x00f42400

080046e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01a      	beq.n	80047f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047de:	d10a      	bne.n	80047f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  }
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004834:	f7fc faa6 	bl	8000d84 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b08      	cmp	r3, #8
 8004846:	d10e      	bne.n	8004866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f82d 	bl	80048b6 <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e023      	b.n	80048ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d10e      	bne.n	8004892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f817 	bl	80048b6 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e00d      	b.n	80048ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c6:	e05e      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d05a      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d0:	f7fc fa58 	bl	8000d84 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11b      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e043      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02c      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493a:	d124      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004944:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004954:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d091      	beq.n	80048c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4d0d      	ldr	r5, [pc, #52]	; (80049e8 <__libc_init_array+0x38>)
 80049b4:	4c0d      	ldr	r4, [pc, #52]	; (80049ec <__libc_init_array+0x3c>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	2600      	movs	r6, #0
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	4d0b      	ldr	r5, [pc, #44]	; (80049f0 <__libc_init_array+0x40>)
 80049c2:	4c0c      	ldr	r4, [pc, #48]	; (80049f4 <__libc_init_array+0x44>)
 80049c4:	f000 f820 	bl	8004a08 <_init>
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	2600      	movs	r6, #0
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08004a70 	.word	0x08004a70
 80049ec:	08004a70 	.word	0x08004a70
 80049f0:	08004a70 	.word	0x08004a70
 80049f4:	08004a74 	.word	0x08004a74

080049f8 <memset>:
 80049f8:	4402      	add	r2, r0
 80049fa:	4603      	mov	r3, r0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memset+0xa>
 8004a00:	4770      	bx	lr
 8004a02:	f803 1b01 	strb.w	r1, [r3], #1
 8004a06:	e7f9      	b.n	80049fc <memset+0x4>

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
