
canBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc0  08003dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc8  08003dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003ddc  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd91  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a53  00000000  00000000  0002bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025567  00000000  00000000  0002eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a10a  00000000  00000000  000540af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7ae5  00000000  00000000  0005e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145c9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  00145cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d60 	.word	0x08003d60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d60 	.word	0x08003d60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb0a 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f848 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8fe 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8cc 	bl	800066c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004d4:	f000 f894 	bl	8000600 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  FilterConfig.FilterBank = 0; //SLAve
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <main+0x90>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <main+0x90>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <main+0x90>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterIdHigh = 0x245<<5;
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <main+0x90>)
 80004ec:	f644 02a0 	movw	r2, #18592	; 0x48a0
 80004f0:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x90>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <main+0x90>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <main+0x90>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <main+0x90>)
 8000506:	2201      	movs	r2, #1
 8000508:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation= ENABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <main+0x90>)
 800050c:	2201      	movs	r2, #1
 800050e:	621a      	str	r2, [r3, #32]
  FilterConfig.SlaveStartFilterBank = 14;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x90>)
 8000512:	220e      	movs	r2, #14
 8000514:	625a      	str	r2, [r3, #36]	; 0x24

  TxHeader.DLC = 8;            			// grote van bericht 1 - 8
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <main+0x94>)
 8000518:	2208      	movs	r2, #8
 800051a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;   			// standaard
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <main+0x94>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <main+0x94>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x245;        			// identificatie nummer
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <main+0x94>)
 800052a:	f240 2245 	movw	r2, #581	; 0x245
 800052e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x94>)
 8000532:	2200      	movs	r2, #0
 8000534:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan1,&FilterConfig);
 8000536:	4906      	ldr	r1, [pc, #24]	; (8000550 <main+0x90>)
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x98>)
 800053a:	f000 fc46 	bl	8000dca <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x98>)
 8000540:	f000 fd0d 	bl	8000f5e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000544:	2102      	movs	r1, #2
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <main+0x98>)
 8000548:	f000 ff3a 	bl	80013c0 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x8c>
 800054e:	bf00      	nop
 8000550:	2000003c 	.word	0x2000003c
 8000554:	20000114 	.word	0x20000114
 8000558:	200000ec 	.word	0x200000ec

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fbf0 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000582:	f001 fc83 	bl	8001e8c <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 f90e 	bl	80007ac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005aa:	230a      	movs	r3, #10
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fcba 	bl	8001f38 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 f8ef 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f88c 	bl	8002704 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 f8db 	bl	80007ac <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	; 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_CAN1_Init+0x64>)
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_CAN1_Init+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 80;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_CAN1_Init+0x64>)
 800060c:	2250      	movs	r2, #80	; 0x50
 800060e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_CAN1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_CAN1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_CAN1_Init+0x64>)
 800061e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000622:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_CAN1_Init+0x64>)
 8000626:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800062a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_CAN1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_CAN1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_CAN1_Init+0x64>)
 8000652:	f000 fabf 	bl	8000bd4 <HAL_CAN_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800065c:	f000 f8a6 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000ec 	.word	0x200000ec
 8000668:	40006400 	.word	0x40006400

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	f002 feea 	bl	8003488 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f877 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000068 	.word	0x20000068
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <MX_GPIO_Init+0xd4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <MX_GPIO_Init+0xd4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MX_GPIO_Init+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_GPIO_Init+0xd4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f001 fb55 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xdc>)
 8000764:	f001 f99e 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000768:	2320      	movs	r3, #32
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f001 f98f 	bl	8001aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	2028      	movs	r0, #40	; 0x28
 800078c:	f001 f953 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000790:	2028      	movs	r0, #40	; 0x28
 8000792:	f001 f96c 	bl	8001a6e <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	10210000 	.word	0x10210000
 80007a8:	48000800 	.word	0x48000800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <HAL_CAN_MspInit+0x90>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d131      	bne.n	8000886 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_CAN_MspInit+0x94>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <HAL_CAN_MspInit+0x94>)
 8000828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082c:	6593      	str	r3, [r2, #88]	; 0x58
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_CAN_MspInit+0x94>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_CAN_MspInit+0x94>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <HAL_CAN_MspInit+0x94>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_CAN_MspInit+0x94>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000852:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000864:	2309      	movs	r3, #9
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f001 f917 	bl	8001aa4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2102      	movs	r1, #2
 800087a:	2014      	movs	r0, #20
 800087c:	f001 f8db 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000880:	2014      	movs	r0, #20
 8000882:	f001 f8f4 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40006400 	.word	0x40006400
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ac      	sub	sp, #176	; 0xb0
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2288      	movs	r2, #136	; 0x88
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fa49 	bl	8003d50 <memset>
  if(huart->Instance==USART2)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a21      	ldr	r2, [pc, #132]	; (8000948 <HAL_UART_MspInit+0xb0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d13b      	bne.n	8000940 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 f91b 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e0:	f7ff ff64 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_MspInit+0xb4>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a18      	ldr	r2, [pc, #96]	; (800094c <HAL_UART_MspInit+0xb4>)
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_UART_MspInit+0xb4>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_UART_MspInit+0xb4>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <HAL_UART_MspInit+0xb4>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_UART_MspInit+0xb4>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000914:	230c      	movs	r3, #12
 8000916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092c:	2307      	movs	r3, #7
 800092e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f001 f8b2 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	37b0      	adds	r7, #176	; 0xb0
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8fa 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */


  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <CAN1_RX0_IRQHandler+0x28>)
 80009aa:	f000 fd2f 	bl	800140c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  //Lezen binnenkomende bericht, data
    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <CAN1_RX0_IRQHandler+0x2c>)
 80009b0:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <CAN1_RX0_IRQHandler+0x30>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <CAN1_RX0_IRQHandler+0x28>)
 80009b6:	f000 fbf1 	bl	800119c <HAL_CAN_GetRxMessage>
    //Aansturen leds
    GPIOA->ODR=RxData[0]<<5;
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <CAN1_RX0_IRQHandler+0x2c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	015a      	lsls	r2, r3, #5
 80009c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009c4:	615a      	str	r2, [r3, #20]


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000ec 	.word	0x200000ec
 80009d0:	20000030 	.word	0x20000030
 80009d4:	2000012c 	.word	0x2000012c

080009d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */


		a++;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <EXTI15_10_IRQHandler+0x38>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <EXTI15_10_IRQHandler+0x38>)
 80009e6:	701a      	strb	r2, [r3, #0]
		TxData[0] = a;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <EXTI15_10_IRQHandler+0x38>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <EXTI15_10_IRQHandler+0x3c>)
 80009ee:	701a      	strb	r2, [r3, #0]
		TxData[1] = 10;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <EXTI15_10_IRQHandler+0x3c>)
 80009f2:	220a      	movs	r2, #10
 80009f4:	705a      	strb	r2, [r3, #1]
		//verstuur data (a) naar andere bord, a wordt elke keer als er op de knop wordt gedrukt verhoogd ,et 1
		//a wordt gebruikt om vier ledjes (binair) aan te sturen   0001 brand ledje 12, 0010 brand ledje 13  (xxxx = 15,14,13,12)
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <EXTI15_10_IRQHandler+0x40>)
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <EXTI15_10_IRQHandler+0x3c>)
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <EXTI15_10_IRQHandler+0x44>)
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <EXTI15_10_IRQHandler+0x48>)
 80009fe:	f000 faf2 	bl	8000fe6 <HAL_CAN_AddTxMessage>


  /* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a06:	f001 fa0f 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000038 	.word	0x20000038
 8000a14:	20000028 	.word	0x20000028
 8000a18:	20000064 	.word	0x20000064
 8000a1c:	20000114 	.word	0x20000114
 8000a20:	200000ec 	.word	0x200000ec

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <SystemInit+0x5c>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <SystemInit+0x5c>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0x60>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <SystemInit+0x60>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <SystemInit+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <SystemInit+0x60>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <SystemInit+0x60>)
 8000a50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <SystemInit+0x60>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <SystemInit+0x60>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <SystemInit+0x60>)
 8000a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SystemInit+0x60>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	40021000 	.word	0x40021000

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a8c:	f7ff ffca 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a92:	e003      	b.n	8000a9c <LoopCopyDataInit>

08000a94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a9a:	3104      	adds	r1, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000aa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aa4:	d3f6      	bcc.n	8000a94 <CopyDataInit>
	ldr	r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aa8:	e002      	b.n	8000ab0 <LoopFillZerobss>

08000aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aac:	f842 3b04 	str.w	r3, [r2], #4

08000ab0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ab2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ab4:	d3f9      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f003 f927 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fd01 	bl	80004c0 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ac4:	08003dd0 	.word	0x08003dd0
	ldr	r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000acc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ad0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ad4:	2000014c 	.word	0x2000014c

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>
	...

08000adc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_Init+0x3c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <HAL_Init+0x3c>)
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 ff94 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 f80f 	bl	8000b1c <HAL_InitTick>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	e001      	b.n	8000b0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0a:	f7ff fe55 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40022000 	.word	0x40022000

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d023      	beq.n	8000b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_InitTick+0x70>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 ff9f 	bl	8001a8a <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10f      	bne.n	8000b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d809      	bhi.n	8000b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 ff69 	bl	8001a36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0x74>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e007      	b.n	8000b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e001      	b.n	8000b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000148 	.word	0x20000148

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000148 	.word	0x20000148

08000bd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0ed      	b.n	8000dc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fe04 	bl	8000800 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0202 	bic.w	r2, r2, #2
 8000c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff ffd8 	bl	8000bbc <HAL_GetTick>
 8000c0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0e:	e012      	b.n	8000c36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c10:	f7ff ffd4 	bl	8000bbc <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d90b      	bls.n	8000c36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e0c5      	b.n	8000dc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1e5      	bne.n	8000c10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c54:	f7ff ffb2 	bl	8000bbc <HAL_GetTick>
 8000c58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c5a:	e012      	b.n	8000c82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c5c:	f7ff ffae 	bl	8000bbc <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	d90b      	bls.n	8000c82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2205      	movs	r2, #5
 8000c7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e09f      	b.n	8000dc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0e5      	beq.n	8000c5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e1b      	ldrb	r3, [r3, #24]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d108      	bne.n	8000caa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7e5b      	ldrb	r3, [r3, #25]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e007      	b.n	8000ce4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7e9b      	ldrb	r3, [r3, #26]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d108      	bne.n	8000cfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e007      	b.n	8000d0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0220 	bic.w	r2, r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7edb      	ldrb	r3, [r3, #27]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0210 	bic.w	r2, r2, #16
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e007      	b.n	8000d38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0210 	orr.w	r2, r2, #16
 8000d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7f1b      	ldrb	r3, [r3, #28]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d108      	bne.n	8000d52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0208 	orr.w	r2, r2, #8
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0208 	bic.w	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7f5b      	ldrb	r3, [r3, #29]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0204 	orr.w	r2, r2, #4
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0204 	bic.w	r2, r2, #4
 8000d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	ea42 0103 	orr.w	r1, r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000de2:	7cfb      	ldrb	r3, [r7, #19]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d003      	beq.n	8000df0 <HAL_CAN_ConfigFilter+0x26>
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	f040 80aa 	bne.w	8000f44 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 031f 	and.w	r3, r3, #31
 8000e08:	2201      	movs	r2, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d123      	bne.n	8000e72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3248      	adds	r2, #72	; 0x48
 8000e52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e68:	6979      	ldr	r1, [r7, #20]
 8000e6a:	3348      	adds	r3, #72	; 0x48
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d122      	bne.n	8000ec0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	431a      	orrs	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3248      	adds	r2, #72	; 0x48
 8000ea0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eb6:	6979      	ldr	r1, [r7, #20]
 8000eb8:	3348      	adds	r3, #72	; 0x48
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d109      	bne.n	8000edc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000eda:	e007      	b.n	8000eec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f06:	e007      	b.n	8000f18 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	431a      	orrs	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d107      	bne.n	8000f30 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f36:	f023 0201 	bic.w	r2, r3, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e006      	b.n	8000f52 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
  }
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d12e      	bne.n	8000fd0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2202      	movs	r2, #2
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0201 	bic.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f8a:	f7ff fe17 	bl	8000bbc <HAL_GetTick>
 8000f8e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f90:	e012      	b.n	8000fb8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f92:	f7ff fe13 	bl	8000bbc <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b0a      	cmp	r3, #10
 8000f9e:	d90b      	bls.n	8000fb8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2205      	movs	r2, #5
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e012      	b.n	8000fde <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1e5      	bne.n	8000f92 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e006      	b.n	8000fde <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
  }
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b089      	sub	sp, #36	; 0x24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d003      	beq.n	8001012 <HAL_CAN_AddTxMessage+0x2c>
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	2b02      	cmp	r3, #2
 800100e:	f040 80b8 	bne.w	8001182 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10a      	bne.n	8001032 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001022:	2b00      	cmp	r3, #0
 8001024:	d105      	bne.n	8001032 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a0 	beq.w	8001172 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	0e1b      	lsrs	r3, r3, #24
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d907      	bls.n	8001052 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e09e      	b.n	8001190 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10d      	bne.n	8001080 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	6809      	ldr	r1, [r1, #0]
 8001072:	431a      	orrs	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3318      	adds	r3, #24
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e00f      	b.n	80010a0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800108a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001090:	68f9      	ldr	r1, [r7, #12]
 8001092:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001094:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3318      	adds	r3, #24
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3318      	adds	r3, #24
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	440b      	add	r3, r1
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	7d1b      	ldrb	r3, [r3, #20]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d111      	bne.n	80010e0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3318      	adds	r3, #24
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	3304      	adds	r3, #4
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	6811      	ldr	r1, [r2, #0]
 80010d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3318      	adds	r3, #24
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	440b      	add	r3, r1
 80010dc:	3304      	adds	r3, #4
 80010de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3307      	adds	r3, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	061a      	lsls	r2, r3, #24
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3306      	adds	r3, #6
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3305      	adds	r3, #5
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	4313      	orrs	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	3204      	adds	r2, #4
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	4610      	mov	r0, r2
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	6811      	ldr	r1, [r2, #0]
 8001108:	ea43 0200 	orr.w	r2, r3, r0
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	440b      	add	r3, r1
 8001112:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001116:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3303      	adds	r3, #3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	061a      	lsls	r2, r3, #24
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3302      	adds	r3, #2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	041b      	lsls	r3, r3, #16
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	4313      	orrs	r3, r2
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	4610      	mov	r0, r2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6811      	ldr	r1, [r2, #0]
 800113e:	ea43 0200 	orr.w	r2, r3, r0
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	440b      	add	r3, r1
 8001148:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800114c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3318      	adds	r3, #24
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	6811      	ldr	r1, [r2, #0]
 8001160:	f043 0201 	orr.w	r2, r3, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3318      	adds	r3, #24
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	440b      	add	r3, r1
 800116c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e00e      	b.n	8001190 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e006      	b.n	8001190 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
  }
}
 8001190:	4618      	mov	r0, r3
 8001192:	3724      	adds	r7, #36	; 0x24
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d003      	beq.n	80011c0 <HAL_CAN_GetRxMessage+0x24>
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	f040 80f3 	bne.w	80013a6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10e      	bne.n	80011e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d116      	bne.n	8001202 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0e7      	b.n	80013b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e0d8      	b.n	80013b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	331b      	adds	r3, #27
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0204 	and.w	r2, r3, #4
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10c      	bne.n	800123a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	331b      	adds	r3, #27
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0d5b      	lsrs	r3, r3, #21
 8001230:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e00b      	b.n	8001252 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	331b      	adds	r3, #27
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	331b      	adds	r3, #27
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0202 	and.w	r2, r3, #2
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	331b      	adds	r3, #27
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	3304      	adds	r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 020f 	and.w	r2, r3, #15
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	331b      	adds	r3, #27
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	4413      	add	r3, r2
 800128c:	3304      	adds	r3, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	331b      	adds	r3, #27
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4413      	add	r3, r2
 80012a4:	3304      	adds	r3, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0c1b      	lsrs	r3, r3, #16
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0a1a      	lsrs	r2, r3, #8
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0c1a      	lsrs	r2, r3, #16
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3302      	adds	r3, #2
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0e1a      	lsrs	r2, r3, #24
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3303      	adds	r3, #3
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	3304      	adds	r3, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0a1a      	lsrs	r2, r3, #8
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3305      	adds	r3, #5
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	4413      	add	r3, r2
 8001350:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0c1a      	lsrs	r2, r3, #16
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3306      	adds	r3, #6
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0e1a      	lsrs	r2, r3, #24
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	3307      	adds	r3, #7
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d108      	bne.n	8001392 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0220 	orr.w	r2, r2, #32
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e007      	b.n	80013a2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e006      	b.n	80013b4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
  }
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d002      	beq.n	80013de <HAL_CAN_ActivateNotification+0x1e>
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d109      	bne.n	80013f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6959      	ldr	r1, [r3, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e006      	b.n	8001400 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d07c      	beq.n	800154c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d023      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f983 	bl	800177a <HAL_CAN_TxMailbox0CompleteCallback>
 8001474:	e016      	b.n	80014a4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e00c      	b.n	80014a4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
 800149c:	e002      	b.n	80014a4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f989 	bl	80017b6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d024      	beq.n	80014f8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f963 	bl	800178e <HAL_CAN_TxMailbox1CompleteCallback>
 80014c8:	e016      	b.n	80014f8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e00c      	b.n	80014f8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	e002      	b.n	80014f8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f969 	bl	80017ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d024      	beq.n	800154c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800150a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f943 	bl	80017a2 <HAL_CAN_TxMailbox2CompleteCallback>
 800151c:	e016      	b.n	800154c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
 8001530:	e00c      	b.n	800154c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
 8001544:	e002      	b.n	800154c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f949 	bl	80017de <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00c      	beq.n	8001570 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001566:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2210      	movs	r2, #16
 800156e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2208      	movs	r2, #8
 800158a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f93a 	bl	8001806 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f921 	bl	80017f2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00c      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2210      	movs	r2, #16
 80015d2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2208      	movs	r2, #8
 80015ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f91c 	bl	800182e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f903 	bl	800181a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2210      	movs	r2, #16
 800162e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f906 	bl	8001842 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00b      	beq.n	8001658 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2208      	movs	r2, #8
 8001650:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f8ff 	bl	8001856 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d07b      	beq.n	800175a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d072      	beq.n	8001752 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d043      	beq.n	8001752 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d03e      	beq.n	8001752 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016da:	2b60      	cmp	r3, #96	; 0x60
 80016dc:	d02b      	beq.n	8001736 <HAL_CAN_IRQHandler+0x32a>
 80016de:	2b60      	cmp	r3, #96	; 0x60
 80016e0:	d82e      	bhi.n	8001740 <HAL_CAN_IRQHandler+0x334>
 80016e2:	2b50      	cmp	r3, #80	; 0x50
 80016e4:	d022      	beq.n	800172c <HAL_CAN_IRQHandler+0x320>
 80016e6:	2b50      	cmp	r3, #80	; 0x50
 80016e8:	d82a      	bhi.n	8001740 <HAL_CAN_IRQHandler+0x334>
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d019      	beq.n	8001722 <HAL_CAN_IRQHandler+0x316>
 80016ee:	2b40      	cmp	r3, #64	; 0x40
 80016f0:	d826      	bhi.n	8001740 <HAL_CAN_IRQHandler+0x334>
 80016f2:	2b30      	cmp	r3, #48	; 0x30
 80016f4:	d010      	beq.n	8001718 <HAL_CAN_IRQHandler+0x30c>
 80016f6:	2b30      	cmp	r3, #48	; 0x30
 80016f8:	d822      	bhi.n	8001740 <HAL_CAN_IRQHandler+0x334>
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d002      	beq.n	8001704 <HAL_CAN_IRQHandler+0x2f8>
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d005      	beq.n	800170e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001702:	e01d      	b.n	8001740 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800170c:	e019      	b.n	8001742 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001716:	e014      	b.n	8001742 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	f043 0320 	orr.w	r3, r3, #32
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001720:	e00f      	b.n	8001742 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800172a:	e00a      	b.n	8001742 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001734:	e005      	b.n	8001742 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800173e:	e000      	b.n	8001742 <HAL_CAN_IRQHandler+0x336>
            break;
 8001740:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001750:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f87c 	bl	800186a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e17f      	b.n	8001db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8171 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00b      	beq.n	8001aec <HAL_GPIO_Init+0x48>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d118      	bne.n	8001b8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x128>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b12      	cmp	r3, #18
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ac 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	4a5e      	ldr	r2, [pc, #376]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b5c      	ldr	r3, [pc, #368]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6e:	4a5a      	ldr	r2, [pc, #360]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x242>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x338>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_GPIO_Init+0x33c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4d      	ldr	r2, [pc, #308]	; (8001de4 <HAL_GPIO_Init+0x340>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_GPIO_Init+0x344>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_GPIO_Init+0x348>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x22a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf8:	4937      	ldr	r1, [pc, #220]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae78 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	48000800 	.word	0x48000800
 8001de4:	48000c00 	.word	0x48000c00
 8001de8:	48001000 	.word	0x48001000
 8001dec:	48001400 	.word	0x48001400
 8001df0:	48001800 	.word	0x48001800
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f806 	bl	8001e58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40007000 	.word	0x40007000

08001e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9a:	d130      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea8:	d038      	beq.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2232      	movs	r2, #50	; 0x32
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9b      	lsrs	r3, r3, #18
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed0:	e002      	b.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee4:	d102      	bne.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f2      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef8:	d110      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e00f      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d007      	beq.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e3d4      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4a:	4ba1      	ldr	r3, [pc, #644]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f54:	4b9e      	ldr	r3, [pc, #632]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80e4 	beq.w	8002134 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4a>
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	f040 808b 	bne.w	8002090 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f040 8087 	bne.w	8002090 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f82:	4b93      	ldr	r3, [pc, #588]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e3ac      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x7c>
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCC_OscConfig+0x88>
 8001fb4:	4b86      	ldr	r3, [pc, #536]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d223      	bcs.n	800200c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fd41 	bl	8002a50 <RCC_SetFlashLatencyFromMSIRange>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e38d      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	4b7d      	ldr	r3, [pc, #500]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a7c      	ldr	r2, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4977      	ldr	r1, [pc, #476]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4972      	ldr	r1, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	e025      	b.n	8002058 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200c:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6f      	ldr	r2, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002012:	f043 0308 	orr.w	r3, r3, #8
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	496a      	ldr	r1, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202a:	4b69      	ldr	r3, [pc, #420]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	4965      	ldr	r1, [pc, #404]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fd01 	bl	8002a50 <RCC_SetFlashLatencyFromMSIRange>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e34d      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002058:	f000 fc36 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	495a      	ldr	r1, [pc, #360]	; (80021d4 <HAL_RCC_OscConfig+0x29c>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <HAL_RCC_OscConfig+0x2a0>)
 8002076:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002078:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x2a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd4d 	bl	8000b1c <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d052      	beq.n	8002132 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	e331      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d032      	beq.n	80020fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002098:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fd8a 	bl	8000bbc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ac:	f7fe fd86 	bl	8000bbc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e31a      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020be:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	493b      	ldr	r1, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	4936      	ldr	r1, [pc, #216]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e01a      	b.n	8002134 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020fe:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800210a:	f7fe fd57 	bl	8000bbc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002112:	f7fe fd53 	bl	8000bbc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e2e7      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x1da>
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002132:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d074      	beq.n	800222a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x21a>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d10e      	bne.n	800216a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d10b      	bne.n	800216a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d064      	beq.n	8002228 <HAL_RCC_OscConfig+0x2f0>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d160      	bne.n	8002228 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e2c4      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x24a>
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800217a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e01d      	b.n	80021be <HAL_RCC_OscConfig+0x286>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x26e>
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 8002192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x286>
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_RCC_OscConfig+0x298>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01c      	beq.n	8002200 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe fcf9 	bl	8000bbc <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021cc:	e011      	b.n	80021f2 <HAL_RCC_OscConfig+0x2ba>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08003d78 	.word	0x08003d78
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fcec 	bl	8000bbc <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e280      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f2:	4baf      	ldr	r3, [pc, #700]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2a8>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fcdc 	bl	8000bbc <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7fe fcd8 	bl	8000bbc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e26c      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221a:	4ba5      	ldr	r3, [pc, #660]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x2d0>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d060      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d005      	beq.n	8002248 <HAL_RCC_OscConfig+0x310>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d119      	bne.n	8002276 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d116      	bne.n	8002276 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	4b99      	ldr	r3, [pc, #612]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x328>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e249      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b93      	ldr	r3, [pc, #588]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	4990      	ldr	r1, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002274:	e040      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d023      	beq.n	80022c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227e:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a8b      	ldr	r2, [pc, #556]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fc97 	bl	8000bbc <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7fe fc93 	bl	8000bbc <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e227      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a4:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	497c      	ldr	r1, [pc, #496]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e018      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b7a      	ldr	r3, [pc, #488]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a79      	ldr	r2, [pc, #484]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7fe fc73 	bl	8000bbc <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7fe fc6f 	bl	8000bbc <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e203      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ec:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03c      	beq.n	800237e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01c      	beq.n	8002346 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7fe fc4e 	bl	8000bbc <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe fc4a 	bl	8000bbc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1de      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002336:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ef      	beq.n	8002324 <HAL_RCC_OscConfig+0x3ec>
 8002344:	e01b      	b.n	800237e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7fe fc31 	bl	8000bbc <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235e:	f7fe fc2d 	bl	8000bbc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1c1      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ef      	bne.n	800235e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80a6 	beq.w	80024d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6593      	str	r3, [r2, #88]	; 0x58
 80023a8:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d118      	bne.n	80023f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fbf4 	bl	8000bbc <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fbf0 	bl	8000bbc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e184      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_OscConfig+0x4d8>
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240e:	e024      	b.n	800245a <HAL_RCC_OscConfig+0x522>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d110      	bne.n	800243a <HAL_RCC_OscConfig+0x502>
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002438:	e00f      	b.n	800245a <HAL_RCC_OscConfig+0x522>
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fbab 	bl	8000bbc <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fba7 	bl	8000bbc <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e139      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ed      	beq.n	800246a <HAL_RCC_OscConfig+0x532>
 800248e:	e01a      	b.n	80024c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe fb94 	bl	8000bbc <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002496:	e00f      	b.n	80024b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe fb90 	bl	8000bbc <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d906      	bls.n	80024b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e122      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b8:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e8      	bne.n	8002498 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024cc:	4b8b      	ldr	r3, [pc, #556]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8108 	beq.w	80026f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f040 80d0 	bne.w	800268c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024ec:	4b83      	ldr	r3, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d130      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d127      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d11f      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800252c:	2a07      	cmp	r2, #7
 800252e:	bf14      	ite	ne
 8002530:	2201      	movne	r2, #1
 8002532:	2200      	moveq	r2, #0
 8002534:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	4293      	cmp	r3, r2
 8002538:	d113      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d109      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d06e      	beq.n	8002640 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d069      	beq.n	800263c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b7      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002584:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800258a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002590:	f7fe fb14 	bl	8000bbc <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fb10 	bl	8000bbc <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0a4      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025aa:	4b54      	ldr	r3, [pc, #336]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCC_OscConfig+0x7c8>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025c6:	3a01      	subs	r2, #1
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d0:	0212      	lsls	r2, r2, #8
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025d8:	0852      	lsrs	r2, r2, #1
 80025da:	3a01      	subs	r2, #1
 80025dc:	0552      	lsls	r2, r2, #21
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025e4:	0852      	lsrs	r2, r2, #1
 80025e6:	3a01      	subs	r2, #1
 80025e8:	0652      	lsls	r2, r2, #25
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025f0:	0912      	lsrs	r2, r2, #4
 80025f2:	0452      	lsls	r2, r2, #17
 80025f4:	430a      	orrs	r2, r1
 80025f6:	4941      	ldr	r1, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3e      	ldr	r2, [pc, #248]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002608:	4b3c      	ldr	r3, [pc, #240]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002614:	f7fe fad2 	bl	8000bbc <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe face 	bl	8000bbc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e062      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263a:	e05a      	b.n	80026f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e059      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002640:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d152      	bne.n	80026f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 800265e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002662:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002664:	f7fe faaa 	bl	8000bbc <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe faa6 	bl	8000bbc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e03a      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x734>
 800268a:	e032      	b.n	80026f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d02d      	beq.n	80026ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a19      	ldr	r2, [pc, #100]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 8002698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80026b0:	f023 0303 	bic.w	r3, r3, #3
 80026b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80026bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fa79 	bl	8000bbc <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fa75 	bl	8000bbc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e009      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x7c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x796>
 80026ec:	e001      	b.n	80026f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	f99d808c 	.word	0xf99d808c

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0c8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d910      	bls.n	8002748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4961      	ldr	r1, [pc, #388]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b0      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d04c      	beq.n	80027ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d107      	bne.n	800276c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275c:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d121      	bne.n	80027ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e09e      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d107      	bne.n	8002784 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d115      	bne.n	80027ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e092      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e086      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e07e      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 0203 	bic.w	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	493f      	ldr	r1, [pc, #252]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027be:	f7fe f9fd 	bl	8000bbc <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c6:	f7fe f9f9 	bl	8000bbc <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e066      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 020c 	and.w	r2, r3, #12
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d1eb      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	492c      	ldr	r1, [pc, #176]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d210      	bcs.n	800283c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0207 	bic.w	r2, r3, #7
 8002822:	4924      	ldr	r1, [pc, #144]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e036      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4918      	ldr	r1, [pc, #96]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4910      	ldr	r1, [pc, #64]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800287a:	f000 f825 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 800287e:	4602      	mov	r2, r0
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	490c      	ldr	r1, [pc, #48]	; (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	5ccb      	ldrb	r3, [r1, r3]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe f93c 	bl	8000b1c <HAL_InitTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80028a8:	7afb      	ldrb	r3, [r7, #11]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08003d78 	.word	0x08003d78
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x34>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d121      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d11e      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e005      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10d      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d102      	bne.n	8002946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e004      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d101      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <HAL_RCC_GetSysClockFreq+0x114>)
 800294e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d134      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0xa6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0xac>
 800296c:	e005      	b.n	800297a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002970:	617b      	str	r3, [r7, #20]
      break;
 8002972:	e005      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002976:	617b      	str	r3, [r7, #20]
      break;
 8002978:	e002      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	617b      	str	r3, [r7, #20]
      break;
 800297e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	3301      	adds	r3, #1
 800298c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	fb02 f203 	mul.w	r2, r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	0e5b      	lsrs	r3, r3, #25
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	3301      	adds	r3, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029c0:	69bb      	ldr	r3, [r7, #24]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08003d90 	.word	0x08003d90
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4904      	ldr	r1, [pc, #16]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08003d88 	.word	0x08003d88

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a28:	f7ff ffda 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08003d88 	.word	0x08003d88

08002a50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a68:	f7ff fa02 	bl	8001e70 <HAL_PWREx_GetVoltageRange>
 8002a6c:	6178      	str	r0, [r7, #20]
 8002a6e:	e014      	b.n	8002a9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7c:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a88:	f7ff f9f2 	bl	8001e70 <HAL_PWREx_GetVoltageRange>
 8002a8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa0:	d10b      	bne.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d919      	bls.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2ba0      	cmp	r3, #160	; 0xa0
 8002aac:	d902      	bls.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aae:	2302      	movs	r3, #2
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e013      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	e010      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d902      	bls.n	8002ac6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	e00a      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b80      	cmp	r3, #128	; 0x80
 8002aca:	d102      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002acc:	2302      	movs	r3, #2
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e004      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d101      	bne.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ad8:	2301      	movs	r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 0207 	bic.w	r2, r3, #7
 8002ae4:	4909      	ldr	r1, [pc, #36]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40022000 	.word	0x40022000

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d041      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b34:	d02a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b3a:	d824      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b46:	d81e      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b50:	d010      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b52:	e018      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b54:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a85      	ldr	r2, [pc, #532]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b60:	e015      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fabb 	bl	80030e4 <RCCEx_PLLSAI1_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b72:	e00c      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3320      	adds	r3, #32
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fba6 	bl	80032cc <RCCEx_PLLSAI2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b84:	e003      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	74fb      	strb	r3, [r7, #19]
      break;
 8002b8a:	e000      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b94:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba2:	4973      	ldr	r1, [pc, #460]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002baa:	e001      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d041      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bc4:	d02a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bca:	d824      	bhi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bd6:	d81e      	bhi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d010      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002be2:	e018      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be4:	4b62      	ldr	r3, [pc, #392]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a61      	ldr	r2, [pc, #388]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf0:	e015      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fa73 	bl	80030e4 <RCCEx_PLLSAI1_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c02:	e00c      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3320      	adds	r3, #32
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fb5e 	bl	80032cc <RCCEx_PLLSAI2_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c14:	e003      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	74fb      	strb	r3, [r7, #19]
      break;
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c24:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c32:	494f      	ldr	r1, [pc, #316]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c3a:	e001      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a0 	beq.w	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6593      	str	r3, [r2, #88]	; 0x58
 8002c74:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a3a      	ldr	r2, [pc, #232]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c90:	f7fd ff94 	bl	8000bbc <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c96:	e009      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7fd ff90 	bl	8000bbc <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	74fb      	strb	r3, [r7, #19]
        break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d15c      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d019      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fd ff4f 	bl	8000bbc <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	e00b      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fd ff4b 	bl	8000bbc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d902      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	74fb      	strb	r3, [r7, #19]
            break;
 8002d38:	e006      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ec      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5e:	4904      	ldr	r1, [pc, #16]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d66:	e009      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
 8002d6c:	e006      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7c:	7c7b      	ldrb	r3, [r7, #17]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b9e      	ldr	r3, [pc, #632]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	4a9d      	ldr	r2, [pc, #628]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9a:	4b98      	ldr	r3, [pc, #608]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f023 0203 	bic.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	4994      	ldr	r1, [pc, #592]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dbc:	4b8f      	ldr	r3, [pc, #572]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f023 020c 	bic.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	498c      	ldr	r1, [pc, #560]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dde:	4b87      	ldr	r3, [pc, #540]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4983      	ldr	r1, [pc, #524]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	497b      	ldr	r1, [pc, #492]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	4972      	ldr	r1, [pc, #456]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e44:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	496a      	ldr	r1, [pc, #424]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e66:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	4961      	ldr	r1, [pc, #388]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e88:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	4959      	ldr	r1, [pc, #356]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eaa:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	4950      	ldr	r1, [pc, #320]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	4948      	ldr	r1, [pc, #288]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	493f      	ldr	r1, [pc, #252]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d028      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f10:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1e:	4937      	ldr	r1, [pc, #220]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3a:	60d3      	str	r3, [r2, #12]
 8002f3c:	e011      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f8c8 	bl	80030e4 <RCCEx_PLLSAI1_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d028      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	491f      	ldr	r1, [pc, #124]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f98:	60d3      	str	r3, [r2, #12]
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f899 	bl	80030e4 <RCCEx_PLLSAI1_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02b      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	4908      	ldr	r1, [pc, #32]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fea:	d109      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a02      	ldr	r2, [pc, #8]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff6:	60d3      	str	r3, [r2, #12]
 8002ff8:	e014      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003008:	d10c      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f867 	bl	80030e4 <RCCEx_PLLSAI1_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d02f      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303e:	4928      	ldr	r1, [pc, #160]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304e:	d10d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	2102      	movs	r1, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f844 	bl	80030e4 <RCCEx_PLLSAI1_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d014      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	74bb      	strb	r3, [r7, #18]
 800306a:	e011      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003074:	d10c      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3320      	adds	r3, #32
 800307a:	2102      	movs	r1, #2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f925 	bl	80032cc <RCCEx_PLLSAI2_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800309c:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030aa:	490d      	ldr	r1, [pc, #52]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ce:	4904      	ldr	r1, [pc, #16]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000

080030e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030f2:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d018      	beq.n	8003130 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030fe:	4b72      	ldr	r3, [pc, #456]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0203 	and.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d10d      	bne.n	800312a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
       ||
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003116:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
       ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d047      	beq.n	80031ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e044      	b.n	80031ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d018      	beq.n	800316a <RCCEx_PLLSAI1_Config+0x86>
 8003138:	2b03      	cmp	r3, #3
 800313a:	d825      	bhi.n	8003188 <RCCEx_PLLSAI1_Config+0xa4>
 800313c:	2b01      	cmp	r3, #1
 800313e:	d002      	beq.n	8003146 <RCCEx_PLLSAI1_Config+0x62>
 8003140:	2b02      	cmp	r3, #2
 8003142:	d009      	beq.n	8003158 <RCCEx_PLLSAI1_Config+0x74>
 8003144:	e020      	b.n	8003188 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003146:	4b60      	ldr	r3, [pc, #384]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003156:	e01a      	b.n	800318e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003158:	4b5b      	ldr	r3, [pc, #364]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d116      	bne.n	8003192 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003168:	e013      	b.n	8003192 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003176:	4b54      	ldr	r3, [pc, #336]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003186:	e006      	b.n	8003196 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      break;
 800318c:	e004      	b.n	8003198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003196:	bf00      	nop
    }

    if(status == HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	430b      	orrs	r3, r1
 80031b4:	4944      	ldr	r1, [pc, #272]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d17d      	bne.n	80032bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031c0:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fd fcf6 	bl	8000bbc <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d2:	e009      	b.n	80031e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d4:	f7fd fcf2 	bl	8000bbc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	73fb      	strb	r3, [r7, #15]
        break;
 80031e6:	e005      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ef      	bne.n	80031d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d160      	bne.n	80032bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d111      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003200:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6892      	ldr	r2, [r2, #8]
 8003210:	0211      	lsls	r1, r2, #8
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	0912      	lsrs	r2, r2, #4
 8003218:	0452      	lsls	r2, r2, #17
 800321a:	430a      	orrs	r2, r1
 800321c:	492a      	ldr	r1, [pc, #168]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	610b      	str	r3, [r1, #16]
 8003222:	e027      	b.n	8003274 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d112      	bne.n	8003250 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003232:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6892      	ldr	r2, [r2, #8]
 800323a:	0211      	lsls	r1, r2, #8
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6912      	ldr	r2, [r2, #16]
 8003240:	0852      	lsrs	r2, r2, #1
 8003242:	3a01      	subs	r2, #1
 8003244:	0552      	lsls	r2, r2, #21
 8003246:	430a      	orrs	r2, r1
 8003248:	491f      	ldr	r1, [pc, #124]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	610b      	str	r3, [r1, #16]
 800324e:	e011      	b.n	8003274 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003258:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	0211      	lsls	r1, r2, #8
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6952      	ldr	r2, [r2, #20]
 8003266:	0852      	lsrs	r2, r2, #1
 8003268:	3a01      	subs	r2, #1
 800326a:	0652      	lsls	r2, r2, #25
 800326c:	430a      	orrs	r2, r1
 800326e:	4916      	ldr	r1, [pc, #88]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800327e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd fc9c 	bl	8000bbc <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003286:	e009      	b.n	800329c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003288:	f7fd fc98 	bl	8000bbc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d902      	bls.n	800329c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	73fb      	strb	r3, [r7, #15]
          break;
 800329a:	e005      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4904      	ldr	r1, [pc, #16]	; (80032c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000

080032cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d018      	beq.n	8003318 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0203 	and.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10d      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
       ||
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032fe:	4b61      	ldr	r3, [pc, #388]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
       ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d047      	beq.n	80033a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	e044      	b.n	80033a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d018      	beq.n	8003352 <RCCEx_PLLSAI2_Config+0x86>
 8003320:	2b03      	cmp	r3, #3
 8003322:	d825      	bhi.n	8003370 <RCCEx_PLLSAI2_Config+0xa4>
 8003324:	2b01      	cmp	r3, #1
 8003326:	d002      	beq.n	800332e <RCCEx_PLLSAI2_Config+0x62>
 8003328:	2b02      	cmp	r3, #2
 800332a:	d009      	beq.n	8003340 <RCCEx_PLLSAI2_Config+0x74>
 800332c:	e020      	b.n	8003370 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800332e:	4b55      	ldr	r3, [pc, #340]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d11d      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333e:	e01a      	b.n	8003376 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003340:	4b50      	ldr	r3, [pc, #320]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d116      	bne.n	800337a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003350:	e013      	b.n	800337a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003352:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800335e:	4b49      	ldr	r3, [pc, #292]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800336e:	e006      	b.n	800337e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      break;
 8003374:	e004      	b.n	8003380 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003386:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	430b      	orrs	r3, r1
 800339c:	4939      	ldr	r1, [pc, #228]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d167      	bne.n	8003478 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a35      	ldr	r2, [pc, #212]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fd fc02 	bl	8000bbc <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033bc:	f7fd fbfe 	bl	8000bbc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
        break;
 80033ce:	e005      	b.n	80033dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033d0:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ef      	bne.n	80033bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d14a      	bne.n	8003478 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d111      	bne.n	800340c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033e8:	4b26      	ldr	r3, [pc, #152]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6892      	ldr	r2, [r2, #8]
 80033f8:	0211      	lsls	r1, r2, #8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68d2      	ldr	r2, [r2, #12]
 80033fe:	0912      	lsrs	r2, r2, #4
 8003400:	0452      	lsls	r2, r2, #17
 8003402:	430a      	orrs	r2, r1
 8003404:	491f      	ldr	r1, [pc, #124]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	614b      	str	r3, [r1, #20]
 800340a:	e011      	b.n	8003430 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
 800341c:	0211      	lsls	r1, r2, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6912      	ldr	r2, [r2, #16]
 8003422:	0852      	lsrs	r2, r2, #1
 8003424:	3a01      	subs	r2, #1
 8003426:	0652      	lsls	r2, r2, #25
 8003428:	430a      	orrs	r2, r1
 800342a:	4916      	ldr	r1, [pc, #88]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342c:	4313      	orrs	r3, r2
 800342e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fd fbbe 	bl	8000bbc <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003442:	e009      	b.n	8003458 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003444:	f7fd fbba 	bl	8000bbc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	73fb      	strb	r3, [r7, #15]
          break;
 8003456:	e005      	b.n	8003464 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ef      	beq.n	8003444 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000

08003488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e040      	b.n	800351c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd f9f4 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f82c 	bl	8003524 <UART_SetConfig>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e022      	b.n	800351c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 faaa 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb31 	bl	8003b7c <UART_CheckIdleState>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003524:	b5b0      	push	{r4, r5, r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4313      	orrs	r3, r2
 8003546:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4bad      	ldr	r3, [pc, #692]	; (8003804 <UART_SetConfig+0x2e0>)
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	69f9      	ldr	r1, [r7, #28]
 8003558:	430b      	orrs	r3, r1
 800355a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4aa2      	ldr	r2, [pc, #648]	; (8003808 <UART_SetConfig+0x2e4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	4313      	orrs	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a99      	ldr	r2, [pc, #612]	; (800380c <UART_SetConfig+0x2e8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d121      	bne.n	80035ee <UART_SetConfig+0xca>
 80035aa:	4b99      	ldr	r3, [pc, #612]	; (8003810 <UART_SetConfig+0x2ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d817      	bhi.n	80035e8 <UART_SetConfig+0xc4>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <UART_SetConfig+0x9c>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035dd 	.word	0x080035dd
 80035c8:	080035d7 	.word	0x080035d7
 80035cc:	080035e3 	.word	0x080035e3
 80035d0:	2301      	movs	r3, #1
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	e0e7      	b.n	80037a6 <UART_SetConfig+0x282>
 80035d6:	2302      	movs	r3, #2
 80035d8:	76fb      	strb	r3, [r7, #27]
 80035da:	e0e4      	b.n	80037a6 <UART_SetConfig+0x282>
 80035dc:	2304      	movs	r3, #4
 80035de:	76fb      	strb	r3, [r7, #27]
 80035e0:	e0e1      	b.n	80037a6 <UART_SetConfig+0x282>
 80035e2:	2308      	movs	r3, #8
 80035e4:	76fb      	strb	r3, [r7, #27]
 80035e6:	e0de      	b.n	80037a6 <UART_SetConfig+0x282>
 80035e8:	2310      	movs	r3, #16
 80035ea:	76fb      	strb	r3, [r7, #27]
 80035ec:	e0db      	b.n	80037a6 <UART_SetConfig+0x282>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a88      	ldr	r2, [pc, #544]	; (8003814 <UART_SetConfig+0x2f0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d132      	bne.n	800365e <UART_SetConfig+0x13a>
 80035f8:	4b85      	ldr	r3, [pc, #532]	; (8003810 <UART_SetConfig+0x2ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d828      	bhi.n	8003658 <UART_SetConfig+0x134>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0xe8>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003641 	.word	0x08003641
 8003610:	08003659 	.word	0x08003659
 8003614:	08003659 	.word	0x08003659
 8003618:	08003659 	.word	0x08003659
 800361c:	0800364d 	.word	0x0800364d
 8003620:	08003659 	.word	0x08003659
 8003624:	08003659 	.word	0x08003659
 8003628:	08003659 	.word	0x08003659
 800362c:	08003647 	.word	0x08003647
 8003630:	08003659 	.word	0x08003659
 8003634:	08003659 	.word	0x08003659
 8003638:	08003659 	.word	0x08003659
 800363c:	08003653 	.word	0x08003653
 8003640:	2300      	movs	r3, #0
 8003642:	76fb      	strb	r3, [r7, #27]
 8003644:	e0af      	b.n	80037a6 <UART_SetConfig+0x282>
 8003646:	2302      	movs	r3, #2
 8003648:	76fb      	strb	r3, [r7, #27]
 800364a:	e0ac      	b.n	80037a6 <UART_SetConfig+0x282>
 800364c:	2304      	movs	r3, #4
 800364e:	76fb      	strb	r3, [r7, #27]
 8003650:	e0a9      	b.n	80037a6 <UART_SetConfig+0x282>
 8003652:	2308      	movs	r3, #8
 8003654:	76fb      	strb	r3, [r7, #27]
 8003656:	e0a6      	b.n	80037a6 <UART_SetConfig+0x282>
 8003658:	2310      	movs	r3, #16
 800365a:	76fb      	strb	r3, [r7, #27]
 800365c:	e0a3      	b.n	80037a6 <UART_SetConfig+0x282>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6d      	ldr	r2, [pc, #436]	; (8003818 <UART_SetConfig+0x2f4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d120      	bne.n	80036aa <UART_SetConfig+0x186>
 8003668:	4b69      	ldr	r3, [pc, #420]	; (8003810 <UART_SetConfig+0x2ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003672:	2b30      	cmp	r3, #48	; 0x30
 8003674:	d013      	beq.n	800369e <UART_SetConfig+0x17a>
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d814      	bhi.n	80036a4 <UART_SetConfig+0x180>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d009      	beq.n	8003692 <UART_SetConfig+0x16e>
 800367e:	2b20      	cmp	r3, #32
 8003680:	d810      	bhi.n	80036a4 <UART_SetConfig+0x180>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <UART_SetConfig+0x168>
 8003686:	2b10      	cmp	r3, #16
 8003688:	d006      	beq.n	8003698 <UART_SetConfig+0x174>
 800368a:	e00b      	b.n	80036a4 <UART_SetConfig+0x180>
 800368c:	2300      	movs	r3, #0
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e089      	b.n	80037a6 <UART_SetConfig+0x282>
 8003692:	2302      	movs	r3, #2
 8003694:	76fb      	strb	r3, [r7, #27]
 8003696:	e086      	b.n	80037a6 <UART_SetConfig+0x282>
 8003698:	2304      	movs	r3, #4
 800369a:	76fb      	strb	r3, [r7, #27]
 800369c:	e083      	b.n	80037a6 <UART_SetConfig+0x282>
 800369e:	2308      	movs	r3, #8
 80036a0:	76fb      	strb	r3, [r7, #27]
 80036a2:	e080      	b.n	80037a6 <UART_SetConfig+0x282>
 80036a4:	2310      	movs	r3, #16
 80036a6:	76fb      	strb	r3, [r7, #27]
 80036a8:	e07d      	b.n	80037a6 <UART_SetConfig+0x282>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a5b      	ldr	r2, [pc, #364]	; (800381c <UART_SetConfig+0x2f8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d120      	bne.n	80036f6 <UART_SetConfig+0x1d2>
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <UART_SetConfig+0x2ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036be:	2bc0      	cmp	r3, #192	; 0xc0
 80036c0:	d013      	beq.n	80036ea <UART_SetConfig+0x1c6>
 80036c2:	2bc0      	cmp	r3, #192	; 0xc0
 80036c4:	d814      	bhi.n	80036f0 <UART_SetConfig+0x1cc>
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d009      	beq.n	80036de <UART_SetConfig+0x1ba>
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d810      	bhi.n	80036f0 <UART_SetConfig+0x1cc>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <UART_SetConfig+0x1b4>
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d006      	beq.n	80036e4 <UART_SetConfig+0x1c0>
 80036d6:	e00b      	b.n	80036f0 <UART_SetConfig+0x1cc>
 80036d8:	2300      	movs	r3, #0
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e063      	b.n	80037a6 <UART_SetConfig+0x282>
 80036de:	2302      	movs	r3, #2
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e060      	b.n	80037a6 <UART_SetConfig+0x282>
 80036e4:	2304      	movs	r3, #4
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e05d      	b.n	80037a6 <UART_SetConfig+0x282>
 80036ea:	2308      	movs	r3, #8
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e05a      	b.n	80037a6 <UART_SetConfig+0x282>
 80036f0:	2310      	movs	r3, #16
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e057      	b.n	80037a6 <UART_SetConfig+0x282>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a49      	ldr	r2, [pc, #292]	; (8003820 <UART_SetConfig+0x2fc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d125      	bne.n	800374c <UART_SetConfig+0x228>
 8003700:	4b43      	ldr	r3, [pc, #268]	; (8003810 <UART_SetConfig+0x2ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370e:	d017      	beq.n	8003740 <UART_SetConfig+0x21c>
 8003710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003714:	d817      	bhi.n	8003746 <UART_SetConfig+0x222>
 8003716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371a:	d00b      	beq.n	8003734 <UART_SetConfig+0x210>
 800371c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003720:	d811      	bhi.n	8003746 <UART_SetConfig+0x222>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <UART_SetConfig+0x20a>
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d006      	beq.n	800373a <UART_SetConfig+0x216>
 800372c:	e00b      	b.n	8003746 <UART_SetConfig+0x222>
 800372e:	2300      	movs	r3, #0
 8003730:	76fb      	strb	r3, [r7, #27]
 8003732:	e038      	b.n	80037a6 <UART_SetConfig+0x282>
 8003734:	2302      	movs	r3, #2
 8003736:	76fb      	strb	r3, [r7, #27]
 8003738:	e035      	b.n	80037a6 <UART_SetConfig+0x282>
 800373a:	2304      	movs	r3, #4
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e032      	b.n	80037a6 <UART_SetConfig+0x282>
 8003740:	2308      	movs	r3, #8
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e02f      	b.n	80037a6 <UART_SetConfig+0x282>
 8003746:	2310      	movs	r3, #16
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e02c      	b.n	80037a6 <UART_SetConfig+0x282>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <UART_SetConfig+0x2e4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d125      	bne.n	80037a2 <UART_SetConfig+0x27e>
 8003756:	4b2e      	ldr	r3, [pc, #184]	; (8003810 <UART_SetConfig+0x2ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003764:	d017      	beq.n	8003796 <UART_SetConfig+0x272>
 8003766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376a:	d817      	bhi.n	800379c <UART_SetConfig+0x278>
 800376c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003770:	d00b      	beq.n	800378a <UART_SetConfig+0x266>
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d811      	bhi.n	800379c <UART_SetConfig+0x278>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <UART_SetConfig+0x260>
 800377c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003780:	d006      	beq.n	8003790 <UART_SetConfig+0x26c>
 8003782:	e00b      	b.n	800379c <UART_SetConfig+0x278>
 8003784:	2300      	movs	r3, #0
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e00d      	b.n	80037a6 <UART_SetConfig+0x282>
 800378a:	2302      	movs	r3, #2
 800378c:	76fb      	strb	r3, [r7, #27]
 800378e:	e00a      	b.n	80037a6 <UART_SetConfig+0x282>
 8003790:	2304      	movs	r3, #4
 8003792:	76fb      	strb	r3, [r7, #27]
 8003794:	e007      	b.n	80037a6 <UART_SetConfig+0x282>
 8003796:	2308      	movs	r3, #8
 8003798:	76fb      	strb	r3, [r7, #27]
 800379a:	e004      	b.n	80037a6 <UART_SetConfig+0x282>
 800379c:	2310      	movs	r3, #16
 800379e:	76fb      	strb	r3, [r7, #27]
 80037a0:	e001      	b.n	80037a6 <UART_SetConfig+0x282>
 80037a2:	2310      	movs	r3, #16
 80037a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <UART_SetConfig+0x2e4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f040 8087 	bne.w	80038c0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037b2:	7efb      	ldrb	r3, [r7, #27]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d837      	bhi.n	8003828 <UART_SetConfig+0x304>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <UART_SetConfig+0x29c>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037e5 	.word	0x080037e5
 80037c4:	08003829 	.word	0x08003829
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	08003829 	.word	0x08003829
 80037d0:	080037f3 	.word	0x080037f3
 80037d4:	08003829 	.word	0x08003829
 80037d8:	08003829 	.word	0x08003829
 80037dc:	08003829 	.word	0x08003829
 80037e0:	080037fb 	.word	0x080037fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e4:	f7ff f908 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80037e8:	6178      	str	r0, [r7, #20]
        break;
 80037ea:	e022      	b.n	8003832 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <UART_SetConfig+0x300>)
 80037ee:	617b      	str	r3, [r7, #20]
        break;
 80037f0:	e01f      	b.n	8003832 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f2:	f7ff f869 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 80037f6:	6178      	str	r0, [r7, #20]
        break;
 80037f8:	e01b      	b.n	8003832 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fe:	617b      	str	r3, [r7, #20]
        break;
 8003800:	e017      	b.n	8003832 <UART_SetConfig+0x30e>
 8003802:	bf00      	nop
 8003804:	efff69f3 	.word	0xefff69f3
 8003808:	40008000 	.word	0x40008000
 800380c:	40013800 	.word	0x40013800
 8003810:	40021000 	.word	0x40021000
 8003814:	40004400 	.word	0x40004400
 8003818:	40004800 	.word	0x40004800
 800381c:	40004c00 	.word	0x40004c00
 8003820:	40005000 	.word	0x40005000
 8003824:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	76bb      	strb	r3, [r7, #26]
        break;
 8003830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80f1 	beq.w	8003a1c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	429a      	cmp	r2, r3
 8003848:	d305      	bcc.n	8003856 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	429a      	cmp	r2, r3
 8003854:	d902      	bls.n	800385c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	76bb      	strb	r3, [r7, #26]
 800385a:	e0df      	b.n	8003a1c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4618      	mov	r0, r3
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	020b      	lsls	r3, r1, #8
 800386e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003872:	0202      	lsls	r2, r0, #8
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	6849      	ldr	r1, [r1, #4]
 8003878:	0849      	lsrs	r1, r1, #1
 800387a:	4608      	mov	r0, r1
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	1814      	adds	r4, r2, r0
 8003882:	eb43 0501 	adc.w	r5, r3, r1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	4620      	mov	r0, r4
 8003892:	4629      	mov	r1, r5
 8003894:	f7fc fc98 	bl	80001c8 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a6:	d308      	bcc.n	80038ba <UART_SetConfig+0x396>
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ae:	d204      	bcs.n	80038ba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	e0b0      	b.n	8003a1c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	76bb      	strb	r3, [r7, #26]
 80038be:	e0ad      	b.n	8003a1c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c8:	d15c      	bne.n	8003984 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80038ca:	7efb      	ldrb	r3, [r7, #27]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d828      	bhi.n	8003922 <UART_SetConfig+0x3fe>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <UART_SetConfig+0x3b4>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003905 	.word	0x08003905
 80038e0:	0800390d 	.word	0x0800390d
 80038e4:	08003923 	.word	0x08003923
 80038e8:	08003913 	.word	0x08003913
 80038ec:	08003923 	.word	0x08003923
 80038f0:	08003923 	.word	0x08003923
 80038f4:	08003923 	.word	0x08003923
 80038f8:	0800391b 	.word	0x0800391b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038fc:	f7ff f87c 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8003900:	6178      	str	r0, [r7, #20]
        break;
 8003902:	e013      	b.n	800392c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003904:	f7ff f88e 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 8003908:	6178      	str	r0, [r7, #20]
        break;
 800390a:	e00f      	b.n	800392c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800390c:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <UART_SetConfig+0x510>)
 800390e:	617b      	str	r3, [r7, #20]
        break;
 8003910:	e00c      	b.n	800392c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003912:	f7fe ffd9 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8003916:	6178      	str	r0, [r7, #20]
        break;
 8003918:	e008      	b.n	800392c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391e:	617b      	str	r3, [r7, #20]
        break;
 8003920:	e004      	b.n	800392c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	76bb      	strb	r3, [r7, #26]
        break;
 800392a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d074      	beq.n	8003a1c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005a      	lsls	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	b29b      	uxth	r3, r3
 8003948:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b0f      	cmp	r3, #15
 800394e:	d916      	bls.n	800397e <UART_SetConfig+0x45a>
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d212      	bcs.n	800397e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f023 030f 	bic.w	r3, r3, #15
 8003960:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	b29a      	uxth	r2, r3
 800396e:	89fb      	ldrh	r3, [r7, #14]
 8003970:	4313      	orrs	r3, r2
 8003972:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	89fa      	ldrh	r2, [r7, #14]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	e04e      	b.n	8003a1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	76bb      	strb	r3, [r7, #26]
 8003982:	e04b      	b.n	8003a1c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003984:	7efb      	ldrb	r3, [r7, #27]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d827      	bhi.n	80039da <UART_SetConfig+0x4b6>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0x46c>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039bd 	.word	0x080039bd
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039db 	.word	0x080039db
 80039a0:	080039cb 	.word	0x080039cb
 80039a4:	080039db 	.word	0x080039db
 80039a8:	080039db 	.word	0x080039db
 80039ac:	080039db 	.word	0x080039db
 80039b0:	080039d3 	.word	0x080039d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7ff f820 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80039b8:	6178      	str	r0, [r7, #20]
        break;
 80039ba:	e013      	b.n	80039e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7ff f832 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 80039c0:	6178      	str	r0, [r7, #20]
        break;
 80039c2:	e00f      	b.n	80039e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <UART_SetConfig+0x510>)
 80039c6:	617b      	str	r3, [r7, #20]
        break;
 80039c8:	e00c      	b.n	80039e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7fe ff7d 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 80039ce:	6178      	str	r0, [r7, #20]
        break;
 80039d0:	e008      	b.n	80039e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d6:	617b      	str	r3, [r7, #20]
        break;
 80039d8:	e004      	b.n	80039e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	76bb      	strb	r3, [r7, #26]
        break;
 80039e2:	bf00      	nop
    }

    if (pclk != 0U)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	085a      	lsrs	r2, r3, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	441a      	add	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b0f      	cmp	r3, #15
 8003a04:	d908      	bls.n	8003a18 <UART_SetConfig+0x4f4>
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d204      	bcs.n	8003a18 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e001      	b.n	8003a1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a28:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}
 8003a32:	bf00      	nop
 8003a34:	00f42400 	.word	0x00f42400

08003a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d10a      	bne.n	8003b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fd f816 	bl	8000bbc <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d10e      	bne.n	8003bbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f82d 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e023      	b.n	8003c06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d10e      	bne.n	8003bea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f817 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e00d      	b.n	8003c06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1e:	e05e      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d05a      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fc ffc8 	bl	8000bbc <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11b      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e043      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02c      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d124      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c9c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e00f      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d091      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	; (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	; (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2600      	movs	r6, #0
 8003d14:	42a6      	cmp	r6, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4d0b      	ldr	r5, [pc, #44]	; (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	; (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f000 f820 	bl	8003d60 <_init>
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2600      	movs	r6, #0
 8003d26:	42a6      	cmp	r6, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d30:	4798      	blx	r3
 8003d32:	3601      	adds	r6, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3a:	4798      	blx	r3
 8003d3c:	3601      	adds	r6, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	08003dc8 	.word	0x08003dc8
 8003d44:	08003dc8 	.word	0x08003dc8
 8003d48:	08003dc8 	.word	0x08003dc8
 8003d4c:	08003dcc 	.word	0x08003dcc

08003d50 <memset>:
 8003d50:	4402      	add	r2, r0
 8003d52:	4603      	mov	r3, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <_init>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr

08003d6c <_fini>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr
