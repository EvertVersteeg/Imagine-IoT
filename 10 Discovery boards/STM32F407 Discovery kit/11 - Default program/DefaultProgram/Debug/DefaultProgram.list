
DefaultProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001308  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080014b0  080014b0  000114b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001578  08001578  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001578  08001578  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001578  08001578  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  080015e4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080015e4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003612  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a5  00000000  00000000  000236a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00023f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  000240f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002818  00000000  00000000  00024260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020b8  00000000  00000000  00026a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b5bf  00000000  00000000  00028b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000340ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c60  00000000  00000000  00034144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001498 	.word	0x08001498

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001498 	.word	0x08001498

080001e8 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d178      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a7a      	ldr	r2, [pc, #488]	; (80003e8 <GPIO_PeriClockControl+0x200>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b7a      	ldr	r3, [pc, #488]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a79      	ldr	r2, [pc, #484]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOK_PCLK_DI();
		}
	}

}
 800020e:	e0e5      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a77      	ldr	r2, [pc, #476]	; (80003f0 <GPIO_PeriClockControl+0x208>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b74      	ldr	r3, [pc, #464]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a73      	ldr	r2, [pc, #460]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0da      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a72      	ldr	r2, [pc, #456]	; (80003f4 <GPIO_PeriClockControl+0x20c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b6f      	ldr	r3, [pc, #444]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a6e      	ldr	r2, [pc, #440]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0cf      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a6e      	ldr	r2, [pc, #440]	; (80003f8 <GPIO_PeriClockControl+0x210>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b69      	ldr	r3, [pc, #420]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a68      	ldr	r2, [pc, #416]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e0c4      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a69      	ldr	r2, [pc, #420]	; (80003fc <GPIO_PeriClockControl+0x214>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b64      	ldr	r3, [pc, #400]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a63      	ldr	r2, [pc, #396]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e0b9      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a65      	ldr	r2, [pc, #404]	; (8000400 <GPIO_PeriClockControl+0x218>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b5e      	ldr	r3, [pc, #376]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a5d      	ldr	r2, [pc, #372]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e0ae      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a60      	ldr	r2, [pc, #384]	; (8000404 <GPIO_PeriClockControl+0x21c>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b59      	ldr	r3, [pc, #356]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a58      	ldr	r2, [pc, #352]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e0a3      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a5c      	ldr	r2, [pc, #368]	; (8000408 <GPIO_PeriClockControl+0x220>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b53      	ldr	r3, [pc, #332]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a52      	ldr	r2, [pc, #328]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e098      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a57      	ldr	r2, [pc, #348]	; (800040c <GPIO_PeriClockControl+0x224>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 80002b2:	4b4e      	ldr	r3, [pc, #312]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a4d      	ldr	r2, [pc, #308]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e08d      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a53      	ldr	r2, [pc, #332]	; (8000410 <GPIO_PeriClockControl+0x228>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 80002c8:	4b48      	ldr	r3, [pc, #288]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a47      	ldr	r2, [pc, #284]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e082      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOK)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a4e      	ldr	r2, [pc, #312]	; (8000414 <GPIO_PeriClockControl+0x22c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d17e      	bne.n	80003dc <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 80002de:	4b43      	ldr	r3, [pc, #268]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a42      	ldr	r2, [pc, #264]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e077      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a3e      	ldr	r2, [pc, #248]	; (80003e8 <GPIO_PeriClockControl+0x200>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 80002f4:	4b3d      	ldr	r3, [pc, #244]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a3c      	ldr	r2, [pc, #240]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80002fa:	f023 0301 	bic.w	r3, r3, #1
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e06c      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a3a      	ldr	r2, [pc, #232]	; (80003f0 <GPIO_PeriClockControl+0x208>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a37      	ldr	r2, [pc, #220]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000310:	f023 0302 	bic.w	r3, r3, #2
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e061      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOC)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <GPIO_PeriClockControl+0x20c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 8000320:	4b32      	ldr	r3, [pc, #200]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000326:	f023 0304 	bic.w	r3, r3, #4
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e056      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOD)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <GPIO_PeriClockControl+0x210>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 8000336:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a2c      	ldr	r2, [pc, #176]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800033c:	f023 0308 	bic.w	r3, r3, #8
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e04b      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOE)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a2d      	ldr	r2, [pc, #180]	; (80003fc <GPIO_PeriClockControl+0x214>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 800034c:	4b27      	ldr	r3, [pc, #156]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a26      	ldr	r2, [pc, #152]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000352:	f023 0310 	bic.w	r3, r3, #16
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e040      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOF)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a28      	ldr	r2, [pc, #160]	; (8000400 <GPIO_PeriClockControl+0x218>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000368:	f023 0320 	bic.w	r3, r3, #32
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e035      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOG)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a24      	ldr	r2, [pc, #144]	; (8000404 <GPIO_PeriClockControl+0x21c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <GPIO_PeriClockControl+0x204>)
 800037e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e02a      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOH)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a1f      	ldr	r2, [pc, #124]	; (8000408 <GPIO_PeriClockControl+0x220>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a16      	ldr	r2, [pc, #88]	; (80003ec <GPIO_PeriClockControl+0x204>)
 8000394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e01f      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOI)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <GPIO_PeriClockControl+0x224>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80003aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e014      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <GPIO_PeriClockControl+0x228>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a0b      	ldr	r2, [pc, #44]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80003c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e009      	b.n	80003dc <GPIO_PeriClockControl+0x1f4>
		}else if (pGPIOx == GPIOK)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <GPIO_PeriClockControl+0x22c>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d105      	bne.n	80003dc <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a05      	ldr	r2, [pc, #20]	; (80003ec <GPIO_PeriClockControl+0x204>)
 80003d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40020000 	.word	0x40020000
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020400 	.word	0x40020400
 80003f4:	40020800 	.word	0x40020800
 80003f8:	40020c00 	.word	0x40020c00
 80003fc:	40021000 	.word	0x40021000
 8000400:	40021400 	.word	0x40021400
 8000404:	40021800 	.word	0x40021800
 8000408:	40021c00 	.word	0x40021c00
 800040c:	40022000 	.word	0x40022000
 8000410:	40022400 	.word	0x40022400
 8000414:	40022800 	.word	0x40022800

08000418 <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)														// GPIO Init
{
 8000418:	b480      	push	{r7}
 800041a:	b087      	sub	sp, #28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;  //temp. register
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b03      	cmp	r3, #3
 800042a:	d81f      	bhi.n	800046c <GPIO_Init+0x54>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	461a      	mov	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);							//Clearing	(2 bits)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	4619      	mov	r1, r3
 800044a:	2303      	movs	r3, #3
 800044c:	408b      	lsls	r3, r1
 800044e:	43db      	mvns	r3, r3
 8000450:	4619      	mov	r1, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	400a      	ands	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																			//Setting
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	430a      	orrs	r2, r1
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	e0c8      	b.n	80005fe <GPIO_Init+0x1e6>

	}else
	{
		//the interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d116      	bne.n	80004a2 <GPIO_Init+0x8a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000474:	4b49      	ldr	r3, [pc, #292]	; (800059c <GPIO_Init+0x184>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	7912      	ldrb	r2, [r2, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	2201      	movs	r2, #1
 8000480:	408a      	lsls	r2, r1
 8000482:	4611      	mov	r1, r2
 8000484:	4a45      	ldr	r2, [pc, #276]	; (800059c <GPIO_Init+0x184>)
 8000486:	430b      	orrs	r3, r1
 8000488:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800048a:	4b44      	ldr	r3, [pc, #272]	; (800059c <GPIO_Init+0x184>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	7912      	ldrb	r2, [r2, #4]
 8000492:	4611      	mov	r1, r2
 8000494:	2201      	movs	r2, #1
 8000496:	408a      	lsls	r2, r1
 8000498:	43d2      	mvns	r2, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a3f      	ldr	r2, [pc, #252]	; (800059c <GPIO_Init+0x184>)
 800049e:	400b      	ands	r3, r1
 80004a0:	6093      	str	r3, [r2, #8]

		}
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	2b05      	cmp	r3, #5
 80004a8:	d116      	bne.n	80004d8 <GPIO_Init+0xc0>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004aa:	4b3c      	ldr	r3, [pc, #240]	; (800059c <GPIO_Init+0x184>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	7912      	ldrb	r2, [r2, #4]
 80004b2:	4611      	mov	r1, r2
 80004b4:	2201      	movs	r2, #1
 80004b6:	408a      	lsls	r2, r1
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a38      	ldr	r2, [pc, #224]	; (800059c <GPIO_Init+0x184>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c0:	4b36      	ldr	r3, [pc, #216]	; (800059c <GPIO_Init+0x184>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	43d2      	mvns	r2, r2
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a32      	ldr	r2, [pc, #200]	; (800059c <GPIO_Init+0x184>)
 80004d4:	400b      	ands	r3, r1
 80004d6:	60d3      	str	r3, [r2, #12]
		}
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	2b06      	cmp	r3, #6
 80004de:	d115      	bne.n	800050c <GPIO_Init+0xf4>
		{
			//1. configure both the FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <GPIO_Init+0x184>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a2a      	ldr	r2, [pc, #168]	; (800059c <GPIO_Init+0x184>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b29      	ldr	r3, [pc, #164]	; (800059c <GPIO_Init+0x184>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a25      	ldr	r2, [pc, #148]	; (800059c <GPIO_Init+0x184>)
 8000508:	430b      	orrs	r3, r1
 800050a:	60d3      	str	r3, [r2, #12]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	089b      	lsrs	r3, r3, #2
 8000512:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	f003 0303 	and.w	r3, r3, #3
 800051c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <GPIO_Init+0x188>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d04d      	beq.n	80005c4 <GPIO_Init+0x1ac>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <GPIO_Init+0x18c>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d032      	beq.n	8000598 <GPIO_Init+0x180>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <GPIO_Init+0x190>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d02b      	beq.n	8000594 <GPIO_Init+0x17c>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a1a      	ldr	r2, [pc, #104]	; (80005ac <GPIO_Init+0x194>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d024      	beq.n	8000590 <GPIO_Init+0x178>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <GPIO_Init+0x198>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d01d      	beq.n	800058c <GPIO_Init+0x174>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <GPIO_Init+0x19c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d016      	beq.n	8000588 <GPIO_Init+0x170>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <GPIO_Init+0x1a0>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d00f      	beq.n	8000584 <GPIO_Init+0x16c>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <GPIO_Init+0x1a4>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d008      	beq.n	8000580 <GPIO_Init+0x168>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <GPIO_Init+0x1a8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d101      	bne.n	800057c <GPIO_Init+0x164>
 8000578:	2308      	movs	r3, #8
 800057a:	e024      	b.n	80005c6 <GPIO_Init+0x1ae>
 800057c:	2300      	movs	r3, #0
 800057e:	e022      	b.n	80005c6 <GPIO_Init+0x1ae>
 8000580:	2307      	movs	r3, #7
 8000582:	e020      	b.n	80005c6 <GPIO_Init+0x1ae>
 8000584:	2306      	movs	r3, #6
 8000586:	e01e      	b.n	80005c6 <GPIO_Init+0x1ae>
 8000588:	2305      	movs	r3, #5
 800058a:	e01c      	b.n	80005c6 <GPIO_Init+0x1ae>
 800058c:	2304      	movs	r3, #4
 800058e:	e01a      	b.n	80005c6 <GPIO_Init+0x1ae>
 8000590:	2303      	movs	r3, #3
 8000592:	e018      	b.n	80005c6 <GPIO_Init+0x1ae>
 8000594:	2302      	movs	r3, #2
 8000596:	e016      	b.n	80005c6 <GPIO_Init+0x1ae>
 8000598:	2301      	movs	r3, #1
 800059a:	e014      	b.n	80005c6 <GPIO_Init+0x1ae>
 800059c:	40013c00 	.word	0x40013c00
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40020400 	.word	0x40020400
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40021400 	.word	0x40021400
 80005b8:	40021800 	.word	0x40021800
 80005bc:	40021c00 	.word	0x40021c00
 80005c0:	40022000 	.word	0x40022000
 80005c4:	2300      	movs	r3, #0
 80005c6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <GPIO_Init+0x324>)
 80005ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005cc:	4a5b      	ldr	r2, [pc, #364]	; (800073c <GPIO_Init+0x324>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80005d4:	7c7a      	ldrb	r2, [r7, #17]
 80005d6:	7cbb      	ldrb	r3, [r7, #18]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	fa02 f103 	lsl.w	r1, r2, r3
 80005de:	4a58      	ldr	r2, [pc, #352]	; (8000740 <GPIO_Init+0x328>)
 80005e0:	7cfb      	ldrb	r3, [r7, #19]
 80005e2:	3302      	adds	r3, #2
 80005e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <GPIO_Init+0x32c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	4611      	mov	r1, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	408a      	lsls	r2, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a52      	ldr	r2, [pc, #328]	; (8000744 <GPIO_Init+0x32c>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);							//Clearing	(2 bits)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	4619      	mov	r1, r3
 8000620:	2303      	movs	r3, #3
 8000622:	408b      	lsls	r3, r1
 8000624:	43db      	mvns	r3, r3
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	400a      	ands	r2, r1
 800062e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																			//Setting
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6899      	ldr	r1, [r3, #8]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	430a      	orrs	r2, r1
 800063e:	609a      	str	r2, [r3, #8]

	temp=0;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	79db      	ldrb	r3, [r3, #7]
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);								//Clearing	(2 bits)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68da      	ldr	r2, [r3, #12]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	4619      	mov	r1, r3
 8000662:	2303      	movs	r3, #3
 8000664:	408b      	lsls	r3, r1
 8000666:	43db      	mvns	r3, r3
 8000668:	4619      	mov	r1, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	400a      	ands	r2, r1
 8000670:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;																				//Setting
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68d9      	ldr	r1, [r3, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	430a      	orrs	r2, r1
 8000680:	60da      	str	r2, [r3, #12]

	temp=0;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
	//4. Configure the op type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7a1b      	ldrb	r3, [r3, #8]
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);							//Clearing   (1 bit)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2301      	movs	r3, #1
 80006a4:	408b      	lsls	r3, r1
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	400a      	ands	r2, r1
 80006b0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;																			//Setting
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6859      	ldr	r1, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	430a      	orrs	r2, r1
 80006c0:	605a      	str	r2, [r3, #4]

	temp=0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
	//5. Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode  == GPIO_MODE_ALTFN)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d131      	bne.n	8000732 <GPIO_Init+0x31a>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));													//Clearing   (4 bit)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	3208      	adds	r2, #8
 80006e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	220f      	movs	r2, #15
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	7c3a      	ldrb	r2, [r7, #16]
 8000700:	4001      	ands	r1, r0
 8000702:	3208      	adds	r2, #8
 8000704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinALtFunMode << (4 * temp2));			//Setting
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7a5b      	ldrb	r3, [r3, #9]
 8000718:	461a      	mov	r2, r3
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	7c3a      	ldrb	r2, [r7, #16]
 800072a:	4301      	orrs	r1, r0
 800072c:	3208      	adds	r2, #8
 800072e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}


}
 8000732:	bf00      	nop
 8000734:	371c      	adds	r7, #28
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800
 8000740:	40013800 	.word	0x40013800
 8000744:	40013c00 	.word	0x40013c00

08000748 <GPIO_ReadFromInputPin>:
 * @return		- 1 bit ( 1 or 0)
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)						// Read from input pin
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	691a      	ldr	r2, [r3, #16]
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	fa22 f303 	lsr.w	r3, r2, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	73fb      	strb	r3, [r7, #15]
	return value;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <GPIO_ToggleOutputPin>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint16_t PinNumber)						// Toggle output pin
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	460b      	mov	r3, r1
 800077c:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR ^= (1 << PinNumber);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	887a      	ldrh	r2, [r7, #2]
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	405a      	eors	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	615a      	str	r2, [r3, #20]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
	...

0800079c <delay>:
uint32_t volatile *pEXTI_Int_Mask_Reg			= (uint32_t*)(0x40013C00 + 0x00);    // EXTI => Interrupt mask register (EXTI_IMR)
uint32_t volatile *pEXTI_Rising_Trig_Sel_Reg	= (uint32_t*)(0x40013C00 + 0x08);    // EXTI => Rising trigger delection register (EXTI_RTSR)
uint32_t volatile *pNVIC_IRQ_EN_Reg				= (uint32_t*)(0xE000E100);   		 // MVIC => IRQ enable register
uint32_t volatile *pCLK_Ctrl_Reg_Abp2			= (uint32_t*)(0x40023800 + 0x44);    // RCC => ABP2 peripheral clock enable register (RCC_ABP2ENR) (bit 14 = 1 => system configuration controller clock enable

void delay(void){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i < 500000/2 ; i ++);
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e002      	b.n	80007ae <delay+0x12>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3301      	adds	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <delay+0x28>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d9f8      	bls.n	80007a8 <delay+0xc>
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	0003d08f 	.word	0x0003d08f

080007c8 <main>:
// MAIN FUNCTION
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
	printf("Hello World\n");
 80007ce:	482c      	ldr	r0, [pc, #176]	; (8000880 <main+0xb8>)
 80007d0:	f000 fa0c 	bl	8000bec <puts>

	GPIO_Handle_t GpioLed;
	GPIO_Handle_t GpioBtn;

	GpioLed.pGPIOx = GPIOD;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <main+0xbc>)
 80007d6:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007d8:	2301      	movs	r3, #1
 80007da:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80007dc:	2302      	movs	r3, #2
 80007de:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007e0:	2300      	movs	r3, #0
 80007e2:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007e4:	2300      	movs	r3, #0
 80007e6:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80007e8:	2101      	movs	r1, #1
 80007ea:	4826      	ldr	r0, [pc, #152]	; (8000884 <main+0xbc>)
 80007ec:	f7ff fcfc 	bl	80001e8 <GPIO_PeriClockControl>
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;	//LED on PD12 (Green)
 80007f0:	230c      	movs	r3, #12
 80007f2:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fe0d 	bl	8000418 <GPIO_Init>
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;	//LED on PD13 (Orange)
 80007fe:	230d      	movs	r3, #13
 8000800:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe06 	bl	8000418 <GPIO_Init>
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;	//LED on PD14 (Red)
 800080c:	230e      	movs	r3, #14
 800080e:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fdff 	bl	8000418 <GPIO_Init>
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;	//LED on PD15 (Blue)
 800081a:	230f      	movs	r3, #15
 800081c:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fdf8 	bl	8000418 <GPIO_Init>


	GpioBtn.pGPIOx = GPIOA;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <main+0xc0>)
 800082a:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800082c:	2300      	movs	r3, #0
 800082e:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000830:	2302      	movs	r3, #2
 8000832:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000834:	2300      	movs	r3, #0
 8000836:	71fb      	strb	r3, [r7, #7]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000838:	2101      	movs	r1, #1
 800083a:	4813      	ldr	r0, [pc, #76]	; (8000888 <main+0xc0>)
 800083c:	f7ff fcd4 	bl	80001e8 <GPIO_PeriClockControl>
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;	//User button on PA0
 8000840:	230a      	movs	r3, #10
 8000842:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GpioBtn);
 8000844:	463b      	mov	r3, r7
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fde6 	bl	8000418 <GPIO_Init>

	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 800084c:	2100      	movs	r1, #0
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <main+0xc0>)
 8000850:	f7ff ff7a 	bl	8000748 <GPIO_ReadFromInputPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d1f8      	bne.n	800084c <main+0x84>
		{
			delay(); //Software delay => Debouncing
 800085a:	f7ff ff9f 	bl	800079c <delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800085e:	210c      	movs	r1, #12
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <main+0xbc>)
 8000862:	f7ff ff86 	bl	8000772 <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000866:	210d      	movs	r1, #13
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <main+0xbc>)
 800086a:	f7ff ff82 	bl	8000772 <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_14);
 800086e:	210e      	movs	r1, #14
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <main+0xbc>)
 8000872:	f7ff ff7e 	bl	8000772 <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 8000876:	210f      	movs	r1, #15
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <main+0xbc>)
 800087a:	f7ff ff7a 	bl	8000772 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 800087e:	e7e5      	b.n	800084c <main+0x84>
 8000880:	080014b0 	.word	0x080014b0
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40020000 	.word	0x40020000

0800088c <HardFault_Handler>:
}


// Implementation of fault handlers
void HardFault_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	printf("Exeption : Hardfault\n");
 8000890:	4801      	ldr	r0, [pc, #4]	; (8000898 <HardFault_Handler+0xc>)
 8000892:	f000 f9ab 	bl	8000bec <puts>
	while(1);
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0xa>
 8000898:	080014bc 	.word	0x080014bc

0800089c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	printf("Exeption : MemManage\n");
 80008a0:	4801      	ldr	r0, [pc, #4]	; (80008a8 <MemManage_Handler+0xc>)
 80008a2:	f000 f9a3 	bl	8000bec <puts>
	while(1);
 80008a6:	e7fe      	b.n	80008a6 <MemManage_Handler+0xa>
 80008a8:	080014d4 	.word	0x080014d4

080008ac <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	printf("Exeption : Busfault\n");
 80008b0:	4801      	ldr	r0, [pc, #4]	; (80008b8 <BusFault_Handler+0xc>)
 80008b2:	f000 f99b 	bl	8000bec <puts>
	while(1);
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0xa>
 80008b8:	080014ec 	.word	0x080014ec

080008bc <EXTI0_IRQHandler>:
}
// Implementation of wake up button

void EXTI0_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	printf("Interrupt : Active\n");
 80008c0:	4801      	ldr	r0, [pc, #4]	; (80008c8 <EXTI0_IRQHandler+0xc>)
 80008c2:	f000 f993 	bl	8000bec <puts>
	while(1);
 80008c6:	e7fe      	b.n	80008c6 <EXTI0_IRQHandler+0xa>
 80008c8:	08001500 	.word	0x08001500

080008cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <ITM_SendChar+0x44>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <ITM_SendChar+0x44>)
 80008dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <ITM_SendChar+0x48>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <ITM_SendChar+0x48>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008ee:	bf00      	nop
 80008f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f8      	beq.n	80008f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	6013      	str	r3, [r2, #0]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000edfc 	.word	0xe000edfc
 8000914:	e0000e00 	.word	0xe0000e00

08000918 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00a      	b.n	8000940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092a:	f3af 8000 	nop.w
 800092e:	4601      	mov	r1, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	b2ca      	uxtb	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf0      	blt.n	800092a <_read+0x12>
	}

return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e009      	b.n	8000978 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	60ba      	str	r2, [r7, #8]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ffad 	bl	80008cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf1      	blt.n	8000964 <_write+0x12>


	}
	return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_close>:

int _close(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	return -1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b0:	605a      	str	r2, [r3, #4]
	return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <_isatty>:

int _isatty(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f000 f846 	bl	8000aac <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000080 	.word	0x20000080
 8000a54:	200000a0 	.word	0x200000a0

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a86:	f000 f817 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff fe9d 	bl	80007c8 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   r0, =_estack
 8000a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a9c:	08001580 	.word	0x08001580
  ldr r2, =_sbss
 8000aa0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000aa4:	2000009c 	.word	0x2000009c

08000aa8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <__errno>:
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <__errno+0x8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	; (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	; (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	; (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	; (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 fce4 	bl	8001498 <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08001578 	.word	0x08001578
 8000af4:	08001578 	.word	0x08001578
 8000af8:	08001578 	.word	0x08001578
 8000afc:	0800157c 	.word	0x0800157c

08000b00 <memset>:
 8000b00:	4402      	add	r2, r0
 8000b02:	4603      	mov	r3, r0
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d100      	bne.n	8000b0a <memset+0xa>
 8000b08:	4770      	bx	lr
 8000b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000b0e:	e7f9      	b.n	8000b04 <memset+0x4>

08000b10 <_puts_r>:
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	460e      	mov	r6, r1
 8000b14:	4605      	mov	r5, r0
 8000b16:	b118      	cbz	r0, 8000b20 <_puts_r+0x10>
 8000b18:	6983      	ldr	r3, [r0, #24]
 8000b1a:	b90b      	cbnz	r3, 8000b20 <_puts_r+0x10>
 8000b1c:	f000 fa48 	bl	8000fb0 <__sinit>
 8000b20:	69ab      	ldr	r3, [r5, #24]
 8000b22:	68ac      	ldr	r4, [r5, #8]
 8000b24:	b913      	cbnz	r3, 8000b2c <_puts_r+0x1c>
 8000b26:	4628      	mov	r0, r5
 8000b28:	f000 fa42 	bl	8000fb0 <__sinit>
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <_puts_r+0xd0>)
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	d120      	bne.n	8000b74 <_puts_r+0x64>
 8000b32:	686c      	ldr	r4, [r5, #4]
 8000b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b36:	07db      	lsls	r3, r3, #31
 8000b38:	d405      	bmi.n	8000b46 <_puts_r+0x36>
 8000b3a:	89a3      	ldrh	r3, [r4, #12]
 8000b3c:	0598      	lsls	r0, r3, #22
 8000b3e:	d402      	bmi.n	8000b46 <_puts_r+0x36>
 8000b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b42:	f000 fad3 	bl	80010ec <__retarget_lock_acquire_recursive>
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	0719      	lsls	r1, r3, #28
 8000b4a:	d51d      	bpl.n	8000b88 <_puts_r+0x78>
 8000b4c:	6923      	ldr	r3, [r4, #16]
 8000b4e:	b1db      	cbz	r3, 8000b88 <_puts_r+0x78>
 8000b50:	3e01      	subs	r6, #1
 8000b52:	68a3      	ldr	r3, [r4, #8]
 8000b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	60a3      	str	r3, [r4, #8]
 8000b5c:	bb39      	cbnz	r1, 8000bae <_puts_r+0x9e>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	da38      	bge.n	8000bd4 <_puts_r+0xc4>
 8000b62:	4622      	mov	r2, r4
 8000b64:	210a      	movs	r1, #10
 8000b66:	4628      	mov	r0, r5
 8000b68:	f000 f848 	bl	8000bfc <__swbuf_r>
 8000b6c:	3001      	adds	r0, #1
 8000b6e:	d011      	beq.n	8000b94 <_puts_r+0x84>
 8000b70:	250a      	movs	r5, #10
 8000b72:	e011      	b.n	8000b98 <_puts_r+0x88>
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <_puts_r+0xd4>)
 8000b76:	429c      	cmp	r4, r3
 8000b78:	d101      	bne.n	8000b7e <_puts_r+0x6e>
 8000b7a:	68ac      	ldr	r4, [r5, #8]
 8000b7c:	e7da      	b.n	8000b34 <_puts_r+0x24>
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <_puts_r+0xd8>)
 8000b80:	429c      	cmp	r4, r3
 8000b82:	bf08      	it	eq
 8000b84:	68ec      	ldreq	r4, [r5, #12]
 8000b86:	e7d5      	b.n	8000b34 <_puts_r+0x24>
 8000b88:	4621      	mov	r1, r4
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f000 f888 	bl	8000ca0 <__swsetup_r>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d0dd      	beq.n	8000b50 <_puts_r+0x40>
 8000b94:	f04f 35ff 	mov.w	r5, #4294967295
 8000b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b9a:	07da      	lsls	r2, r3, #31
 8000b9c:	d405      	bmi.n	8000baa <_puts_r+0x9a>
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	059b      	lsls	r3, r3, #22
 8000ba2:	d402      	bmi.n	8000baa <_puts_r+0x9a>
 8000ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ba6:	f000 faa2 	bl	80010ee <__retarget_lock_release_recursive>
 8000baa:	4628      	mov	r0, r5
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	da04      	bge.n	8000bbc <_puts_r+0xac>
 8000bb2:	69a2      	ldr	r2, [r4, #24]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dc06      	bgt.n	8000bc6 <_puts_r+0xb6>
 8000bb8:	290a      	cmp	r1, #10
 8000bba:	d004      	beq.n	8000bc6 <_puts_r+0xb6>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	6022      	str	r2, [r4, #0]
 8000bc2:	7019      	strb	r1, [r3, #0]
 8000bc4:	e7c5      	b.n	8000b52 <_puts_r+0x42>
 8000bc6:	4622      	mov	r2, r4
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f000 f817 	bl	8000bfc <__swbuf_r>
 8000bce:	3001      	adds	r0, #1
 8000bd0:	d1bf      	bne.n	8000b52 <_puts_r+0x42>
 8000bd2:	e7df      	b.n	8000b94 <_puts_r+0x84>
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	250a      	movs	r5, #10
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	6022      	str	r2, [r4, #0]
 8000bdc:	701d      	strb	r5, [r3, #0]
 8000bde:	e7db      	b.n	8000b98 <_puts_r+0x88>
 8000be0:	08001538 	.word	0x08001538
 8000be4:	08001558 	.word	0x08001558
 8000be8:	08001518 	.word	0x08001518

08000bec <puts>:
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <puts+0xc>)
 8000bee:	4601      	mov	r1, r0
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	f7ff bf8d 	b.w	8000b10 <_puts_r>
 8000bf6:	bf00      	nop
 8000bf8:	20000000 	.word	0x20000000

08000bfc <__swbuf_r>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	460e      	mov	r6, r1
 8000c00:	4614      	mov	r4, r2
 8000c02:	4605      	mov	r5, r0
 8000c04:	b118      	cbz	r0, 8000c0e <__swbuf_r+0x12>
 8000c06:	6983      	ldr	r3, [r0, #24]
 8000c08:	b90b      	cbnz	r3, 8000c0e <__swbuf_r+0x12>
 8000c0a:	f000 f9d1 	bl	8000fb0 <__sinit>
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <__swbuf_r+0x98>)
 8000c10:	429c      	cmp	r4, r3
 8000c12:	d12b      	bne.n	8000c6c <__swbuf_r+0x70>
 8000c14:	686c      	ldr	r4, [r5, #4]
 8000c16:	69a3      	ldr	r3, [r4, #24]
 8000c18:	60a3      	str	r3, [r4, #8]
 8000c1a:	89a3      	ldrh	r3, [r4, #12]
 8000c1c:	071a      	lsls	r2, r3, #28
 8000c1e:	d52f      	bpl.n	8000c80 <__swbuf_r+0x84>
 8000c20:	6923      	ldr	r3, [r4, #16]
 8000c22:	b36b      	cbz	r3, 8000c80 <__swbuf_r+0x84>
 8000c24:	6923      	ldr	r3, [r4, #16]
 8000c26:	6820      	ldr	r0, [r4, #0]
 8000c28:	1ac0      	subs	r0, r0, r3
 8000c2a:	6963      	ldr	r3, [r4, #20]
 8000c2c:	b2f6      	uxtb	r6, r6
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	4637      	mov	r7, r6
 8000c32:	dc04      	bgt.n	8000c3e <__swbuf_r+0x42>
 8000c34:	4621      	mov	r1, r4
 8000c36:	4628      	mov	r0, r5
 8000c38:	f000 f926 	bl	8000e88 <_fflush_r>
 8000c3c:	bb30      	cbnz	r0, 8000c8c <__swbuf_r+0x90>
 8000c3e:	68a3      	ldr	r3, [r4, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	60a3      	str	r3, [r4, #8]
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	6022      	str	r2, [r4, #0]
 8000c4a:	701e      	strb	r6, [r3, #0]
 8000c4c:	6963      	ldr	r3, [r4, #20]
 8000c4e:	3001      	adds	r0, #1
 8000c50:	4283      	cmp	r3, r0
 8000c52:	d004      	beq.n	8000c5e <__swbuf_r+0x62>
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	07db      	lsls	r3, r3, #31
 8000c58:	d506      	bpl.n	8000c68 <__swbuf_r+0x6c>
 8000c5a:	2e0a      	cmp	r6, #10
 8000c5c:	d104      	bne.n	8000c68 <__swbuf_r+0x6c>
 8000c5e:	4621      	mov	r1, r4
 8000c60:	4628      	mov	r0, r5
 8000c62:	f000 f911 	bl	8000e88 <_fflush_r>
 8000c66:	b988      	cbnz	r0, 8000c8c <__swbuf_r+0x90>
 8000c68:	4638      	mov	r0, r7
 8000c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <__swbuf_r+0x9c>)
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	d101      	bne.n	8000c76 <__swbuf_r+0x7a>
 8000c72:	68ac      	ldr	r4, [r5, #8]
 8000c74:	e7cf      	b.n	8000c16 <__swbuf_r+0x1a>
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <__swbuf_r+0xa0>)
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	bf08      	it	eq
 8000c7c:	68ec      	ldreq	r4, [r5, #12]
 8000c7e:	e7ca      	b.n	8000c16 <__swbuf_r+0x1a>
 8000c80:	4621      	mov	r1, r4
 8000c82:	4628      	mov	r0, r5
 8000c84:	f000 f80c 	bl	8000ca0 <__swsetup_r>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d0cb      	beq.n	8000c24 <__swbuf_r+0x28>
 8000c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8000c90:	e7ea      	b.n	8000c68 <__swbuf_r+0x6c>
 8000c92:	bf00      	nop
 8000c94:	08001538 	.word	0x08001538
 8000c98:	08001558 	.word	0x08001558
 8000c9c:	08001518 	.word	0x08001518

08000ca0 <__swsetup_r>:
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <__swsetup_r+0xcc>)
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	681d      	ldr	r5, [r3, #0]
 8000ca6:	4606      	mov	r6, r0
 8000ca8:	460c      	mov	r4, r1
 8000caa:	b125      	cbz	r5, 8000cb6 <__swsetup_r+0x16>
 8000cac:	69ab      	ldr	r3, [r5, #24]
 8000cae:	b913      	cbnz	r3, 8000cb6 <__swsetup_r+0x16>
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f000 f97d 	bl	8000fb0 <__sinit>
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <__swsetup_r+0xd0>)
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d10f      	bne.n	8000cdc <__swsetup_r+0x3c>
 8000cbc:	686c      	ldr	r4, [r5, #4]
 8000cbe:	89a3      	ldrh	r3, [r4, #12]
 8000cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cc4:	0719      	lsls	r1, r3, #28
 8000cc6:	d42c      	bmi.n	8000d22 <__swsetup_r+0x82>
 8000cc8:	06dd      	lsls	r5, r3, #27
 8000cca:	d411      	bmi.n	8000cf0 <__swsetup_r+0x50>
 8000ccc:	2309      	movs	r3, #9
 8000cce:	6033      	str	r3, [r6, #0]
 8000cd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cd4:	81a3      	strh	r3, [r4, #12]
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cda:	e03e      	b.n	8000d5a <__swsetup_r+0xba>
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <__swsetup_r+0xd4>)
 8000cde:	429c      	cmp	r4, r3
 8000ce0:	d101      	bne.n	8000ce6 <__swsetup_r+0x46>
 8000ce2:	68ac      	ldr	r4, [r5, #8]
 8000ce4:	e7eb      	b.n	8000cbe <__swsetup_r+0x1e>
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <__swsetup_r+0xd8>)
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	bf08      	it	eq
 8000cec:	68ec      	ldreq	r4, [r5, #12]
 8000cee:	e7e6      	b.n	8000cbe <__swsetup_r+0x1e>
 8000cf0:	0758      	lsls	r0, r3, #29
 8000cf2:	d512      	bpl.n	8000d1a <__swsetup_r+0x7a>
 8000cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cf6:	b141      	cbz	r1, 8000d0a <__swsetup_r+0x6a>
 8000cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d002      	beq.n	8000d06 <__swsetup_r+0x66>
 8000d00:	4630      	mov	r0, r6
 8000d02:	f000 fa59 	bl	80011b8 <_free_r>
 8000d06:	2300      	movs	r3, #0
 8000d08:	6363      	str	r3, [r4, #52]	; 0x34
 8000d0a:	89a3      	ldrh	r3, [r4, #12]
 8000d0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d10:	81a3      	strh	r3, [r4, #12]
 8000d12:	2300      	movs	r3, #0
 8000d14:	6063      	str	r3, [r4, #4]
 8000d16:	6923      	ldr	r3, [r4, #16]
 8000d18:	6023      	str	r3, [r4, #0]
 8000d1a:	89a3      	ldrh	r3, [r4, #12]
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	81a3      	strh	r3, [r4, #12]
 8000d22:	6923      	ldr	r3, [r4, #16]
 8000d24:	b94b      	cbnz	r3, 8000d3a <__swsetup_r+0x9a>
 8000d26:	89a3      	ldrh	r3, [r4, #12]
 8000d28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d30:	d003      	beq.n	8000d3a <__swsetup_r+0x9a>
 8000d32:	4621      	mov	r1, r4
 8000d34:	4630      	mov	r0, r6
 8000d36:	f000 f9ff 	bl	8001138 <__smakebuf_r>
 8000d3a:	89a0      	ldrh	r0, [r4, #12]
 8000d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d40:	f010 0301 	ands.w	r3, r0, #1
 8000d44:	d00a      	beq.n	8000d5c <__swsetup_r+0xbc>
 8000d46:	2300      	movs	r3, #0
 8000d48:	60a3      	str	r3, [r4, #8]
 8000d4a:	6963      	ldr	r3, [r4, #20]
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	61a3      	str	r3, [r4, #24]
 8000d50:	6923      	ldr	r3, [r4, #16]
 8000d52:	b943      	cbnz	r3, 8000d66 <__swsetup_r+0xc6>
 8000d54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d58:	d1ba      	bne.n	8000cd0 <__swsetup_r+0x30>
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	0781      	lsls	r1, r0, #30
 8000d5e:	bf58      	it	pl
 8000d60:	6963      	ldrpl	r3, [r4, #20]
 8000d62:	60a3      	str	r3, [r4, #8]
 8000d64:	e7f4      	b.n	8000d50 <__swsetup_r+0xb0>
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7f7      	b.n	8000d5a <__swsetup_r+0xba>
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	08001538 	.word	0x08001538
 8000d74:	08001558 	.word	0x08001558
 8000d78:	08001518 	.word	0x08001518

08000d7c <__sflush_r>:
 8000d7c:	898a      	ldrh	r2, [r1, #12]
 8000d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d82:	4605      	mov	r5, r0
 8000d84:	0710      	lsls	r0, r2, #28
 8000d86:	460c      	mov	r4, r1
 8000d88:	d458      	bmi.n	8000e3c <__sflush_r+0xc0>
 8000d8a:	684b      	ldr	r3, [r1, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dc05      	bgt.n	8000d9c <__sflush_r+0x20>
 8000d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dc02      	bgt.n	8000d9c <__sflush_r+0x20>
 8000d96:	2000      	movs	r0, #0
 8000d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d0f9      	beq.n	8000d96 <__sflush_r+0x1a>
 8000da2:	2300      	movs	r3, #0
 8000da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000da8:	682f      	ldr	r7, [r5, #0]
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	d032      	beq.n	8000e14 <__sflush_r+0x98>
 8000dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000db0:	89a3      	ldrh	r3, [r4, #12]
 8000db2:	075a      	lsls	r2, r3, #29
 8000db4:	d505      	bpl.n	8000dc2 <__sflush_r+0x46>
 8000db6:	6863      	ldr	r3, [r4, #4]
 8000db8:	1ac0      	subs	r0, r0, r3
 8000dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dbc:	b10b      	cbz	r3, 8000dc2 <__sflush_r+0x46>
 8000dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dc0:	1ac0      	subs	r0, r0, r3
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dc8:	6a21      	ldr	r1, [r4, #32]
 8000dca:	4628      	mov	r0, r5
 8000dcc:	47b0      	blx	r6
 8000dce:	1c43      	adds	r3, r0, #1
 8000dd0:	89a3      	ldrh	r3, [r4, #12]
 8000dd2:	d106      	bne.n	8000de2 <__sflush_r+0x66>
 8000dd4:	6829      	ldr	r1, [r5, #0]
 8000dd6:	291d      	cmp	r1, #29
 8000dd8:	d82c      	bhi.n	8000e34 <__sflush_r+0xb8>
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <__sflush_r+0x108>)
 8000ddc:	40ca      	lsrs	r2, r1
 8000dde:	07d6      	lsls	r6, r2, #31
 8000de0:	d528      	bpl.n	8000e34 <__sflush_r+0xb8>
 8000de2:	2200      	movs	r2, #0
 8000de4:	6062      	str	r2, [r4, #4]
 8000de6:	04d9      	lsls	r1, r3, #19
 8000de8:	6922      	ldr	r2, [r4, #16]
 8000dea:	6022      	str	r2, [r4, #0]
 8000dec:	d504      	bpl.n	8000df8 <__sflush_r+0x7c>
 8000dee:	1c42      	adds	r2, r0, #1
 8000df0:	d101      	bne.n	8000df6 <__sflush_r+0x7a>
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	b903      	cbnz	r3, 8000df8 <__sflush_r+0x7c>
 8000df6:	6560      	str	r0, [r4, #84]	; 0x54
 8000df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dfa:	602f      	str	r7, [r5, #0]
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d0ca      	beq.n	8000d96 <__sflush_r+0x1a>
 8000e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d002      	beq.n	8000e0e <__sflush_r+0x92>
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f000 f9d5 	bl	80011b8 <_free_r>
 8000e0e:	2000      	movs	r0, #0
 8000e10:	6360      	str	r0, [r4, #52]	; 0x34
 8000e12:	e7c1      	b.n	8000d98 <__sflush_r+0x1c>
 8000e14:	6a21      	ldr	r1, [r4, #32]
 8000e16:	2301      	movs	r3, #1
 8000e18:	4628      	mov	r0, r5
 8000e1a:	47b0      	blx	r6
 8000e1c:	1c41      	adds	r1, r0, #1
 8000e1e:	d1c7      	bne.n	8000db0 <__sflush_r+0x34>
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0c4      	beq.n	8000db0 <__sflush_r+0x34>
 8000e26:	2b1d      	cmp	r3, #29
 8000e28:	d001      	beq.n	8000e2e <__sflush_r+0xb2>
 8000e2a:	2b16      	cmp	r3, #22
 8000e2c:	d101      	bne.n	8000e32 <__sflush_r+0xb6>
 8000e2e:	602f      	str	r7, [r5, #0]
 8000e30:	e7b1      	b.n	8000d96 <__sflush_r+0x1a>
 8000e32:	89a3      	ldrh	r3, [r4, #12]
 8000e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e38:	81a3      	strh	r3, [r4, #12]
 8000e3a:	e7ad      	b.n	8000d98 <__sflush_r+0x1c>
 8000e3c:	690f      	ldr	r7, [r1, #16]
 8000e3e:	2f00      	cmp	r7, #0
 8000e40:	d0a9      	beq.n	8000d96 <__sflush_r+0x1a>
 8000e42:	0793      	lsls	r3, r2, #30
 8000e44:	680e      	ldr	r6, [r1, #0]
 8000e46:	bf08      	it	eq
 8000e48:	694b      	ldreq	r3, [r1, #20]
 8000e4a:	600f      	str	r7, [r1, #0]
 8000e4c:	bf18      	it	ne
 8000e4e:	2300      	movne	r3, #0
 8000e50:	eba6 0807 	sub.w	r8, r6, r7
 8000e54:	608b      	str	r3, [r1, #8]
 8000e56:	f1b8 0f00 	cmp.w	r8, #0
 8000e5a:	dd9c      	ble.n	8000d96 <__sflush_r+0x1a>
 8000e5c:	6a21      	ldr	r1, [r4, #32]
 8000e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e60:	4643      	mov	r3, r8
 8000e62:	463a      	mov	r2, r7
 8000e64:	4628      	mov	r0, r5
 8000e66:	47b0      	blx	r6
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	dc06      	bgt.n	8000e7a <__sflush_r+0xfe>
 8000e6c:	89a3      	ldrh	r3, [r4, #12]
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e72:	81a3      	strh	r3, [r4, #12]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	e78e      	b.n	8000d98 <__sflush_r+0x1c>
 8000e7a:	4407      	add	r7, r0
 8000e7c:	eba8 0800 	sub.w	r8, r8, r0
 8000e80:	e7e9      	b.n	8000e56 <__sflush_r+0xda>
 8000e82:	bf00      	nop
 8000e84:	20400001 	.word	0x20400001

08000e88 <_fflush_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	690b      	ldr	r3, [r1, #16]
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	b913      	cbnz	r3, 8000e98 <_fflush_r+0x10>
 8000e92:	2500      	movs	r5, #0
 8000e94:	4628      	mov	r0, r5
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	b118      	cbz	r0, 8000ea2 <_fflush_r+0x1a>
 8000e9a:	6983      	ldr	r3, [r0, #24]
 8000e9c:	b90b      	cbnz	r3, 8000ea2 <_fflush_r+0x1a>
 8000e9e:	f000 f887 	bl	8000fb0 <__sinit>
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <_fflush_r+0x6c>)
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d11b      	bne.n	8000ee0 <_fflush_r+0x58>
 8000ea8:	686c      	ldr	r4, [r5, #4]
 8000eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0ef      	beq.n	8000e92 <_fflush_r+0xa>
 8000eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000eb4:	07d0      	lsls	r0, r2, #31
 8000eb6:	d404      	bmi.n	8000ec2 <_fflush_r+0x3a>
 8000eb8:	0599      	lsls	r1, r3, #22
 8000eba:	d402      	bmi.n	8000ec2 <_fflush_r+0x3a>
 8000ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ebe:	f000 f915 	bl	80010ec <__retarget_lock_acquire_recursive>
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	f7ff ff59 	bl	8000d7c <__sflush_r>
 8000eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ecc:	07da      	lsls	r2, r3, #31
 8000ece:	4605      	mov	r5, r0
 8000ed0:	d4e0      	bmi.n	8000e94 <_fflush_r+0xc>
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	059b      	lsls	r3, r3, #22
 8000ed6:	d4dd      	bmi.n	8000e94 <_fflush_r+0xc>
 8000ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eda:	f000 f908 	bl	80010ee <__retarget_lock_release_recursive>
 8000ede:	e7d9      	b.n	8000e94 <_fflush_r+0xc>
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_fflush_r+0x70>)
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	d101      	bne.n	8000eea <_fflush_r+0x62>
 8000ee6:	68ac      	ldr	r4, [r5, #8]
 8000ee8:	e7df      	b.n	8000eaa <_fflush_r+0x22>
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <_fflush_r+0x74>)
 8000eec:	429c      	cmp	r4, r3
 8000eee:	bf08      	it	eq
 8000ef0:	68ec      	ldreq	r4, [r5, #12]
 8000ef2:	e7da      	b.n	8000eaa <_fflush_r+0x22>
 8000ef4:	08001538 	.word	0x08001538
 8000ef8:	08001558 	.word	0x08001558
 8000efc:	08001518 	.word	0x08001518

08000f00 <std>:
 8000f00:	2300      	movs	r3, #0
 8000f02:	b510      	push	{r4, lr}
 8000f04:	4604      	mov	r4, r0
 8000f06:	e9c0 3300 	strd	r3, r3, [r0]
 8000f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f0e:	6083      	str	r3, [r0, #8]
 8000f10:	8181      	strh	r1, [r0, #12]
 8000f12:	6643      	str	r3, [r0, #100]	; 0x64
 8000f14:	81c2      	strh	r2, [r0, #14]
 8000f16:	6183      	str	r3, [r0, #24]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	305c      	adds	r0, #92	; 0x5c
 8000f1e:	f7ff fdef 	bl	8000b00 <memset>
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <std+0x38>)
 8000f24:	6263      	str	r3, [r4, #36]	; 0x24
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <std+0x3c>)
 8000f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <std+0x40>)
 8000f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <std+0x44>)
 8000f30:	6224      	str	r4, [r4, #32]
 8000f32:	6323      	str	r3, [r4, #48]	; 0x30
 8000f34:	bd10      	pop	{r4, pc}
 8000f36:	bf00      	nop
 8000f38:	08001329 	.word	0x08001329
 8000f3c:	0800134b 	.word	0x0800134b
 8000f40:	08001383 	.word	0x08001383
 8000f44:	080013a7 	.word	0x080013a7

08000f48 <_cleanup_r>:
 8000f48:	4901      	ldr	r1, [pc, #4]	; (8000f50 <_cleanup_r+0x8>)
 8000f4a:	f000 b8af 	b.w	80010ac <_fwalk_reent>
 8000f4e:	bf00      	nop
 8000f50:	08000e89 	.word	0x08000e89

08000f54 <__sfmoreglue>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	1e4a      	subs	r2, r1, #1
 8000f58:	2568      	movs	r5, #104	; 0x68
 8000f5a:	4355      	muls	r5, r2
 8000f5c:	460e      	mov	r6, r1
 8000f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f62:	f000 f977 	bl	8001254 <_malloc_r>
 8000f66:	4604      	mov	r4, r0
 8000f68:	b140      	cbz	r0, 8000f7c <__sfmoreglue+0x28>
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8000f70:	300c      	adds	r0, #12
 8000f72:	60a0      	str	r0, [r4, #8]
 8000f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f78:	f7ff fdc2 	bl	8000b00 <memset>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}

08000f80 <__sfp_lock_acquire>:
 8000f80:	4801      	ldr	r0, [pc, #4]	; (8000f88 <__sfp_lock_acquire+0x8>)
 8000f82:	f000 b8b3 	b.w	80010ec <__retarget_lock_acquire_recursive>
 8000f86:	bf00      	nop
 8000f88:	20000094 	.word	0x20000094

08000f8c <__sfp_lock_release>:
 8000f8c:	4801      	ldr	r0, [pc, #4]	; (8000f94 <__sfp_lock_release+0x8>)
 8000f8e:	f000 b8ae 	b.w	80010ee <__retarget_lock_release_recursive>
 8000f92:	bf00      	nop
 8000f94:	20000094 	.word	0x20000094

08000f98 <__sinit_lock_acquire>:
 8000f98:	4801      	ldr	r0, [pc, #4]	; (8000fa0 <__sinit_lock_acquire+0x8>)
 8000f9a:	f000 b8a7 	b.w	80010ec <__retarget_lock_acquire_recursive>
 8000f9e:	bf00      	nop
 8000fa0:	2000008f 	.word	0x2000008f

08000fa4 <__sinit_lock_release>:
 8000fa4:	4801      	ldr	r0, [pc, #4]	; (8000fac <__sinit_lock_release+0x8>)
 8000fa6:	f000 b8a2 	b.w	80010ee <__retarget_lock_release_recursive>
 8000faa:	bf00      	nop
 8000fac:	2000008f 	.word	0x2000008f

08000fb0 <__sinit>:
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	f7ff fff0 	bl	8000f98 <__sinit_lock_acquire>
 8000fb8:	69a3      	ldr	r3, [r4, #24]
 8000fba:	b11b      	cbz	r3, 8000fc4 <__sinit+0x14>
 8000fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fc0:	f7ff bff0 	b.w	8000fa4 <__sinit_lock_release>
 8000fc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000fc8:	6523      	str	r3, [r4, #80]	; 0x50
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <__sinit+0x68>)
 8000fcc:	4a13      	ldr	r2, [pc, #76]	; (800101c <__sinit+0x6c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	bf04      	itt	eq
 8000fd6:	2301      	moveq	r3, #1
 8000fd8:	61a3      	streq	r3, [r4, #24]
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f000 f820 	bl	8001020 <__sfp>
 8000fe0:	6060      	str	r0, [r4, #4]
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f000 f81c 	bl	8001020 <__sfp>
 8000fe8:	60a0      	str	r0, [r4, #8]
 8000fea:	4620      	mov	r0, r4
 8000fec:	f000 f818 	bl	8001020 <__sfp>
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60e0      	str	r0, [r4, #12]
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	6860      	ldr	r0, [r4, #4]
 8000ff8:	f7ff ff82 	bl	8000f00 <std>
 8000ffc:	68a0      	ldr	r0, [r4, #8]
 8000ffe:	2201      	movs	r2, #1
 8001000:	2109      	movs	r1, #9
 8001002:	f7ff ff7d 	bl	8000f00 <std>
 8001006:	68e0      	ldr	r0, [r4, #12]
 8001008:	2202      	movs	r2, #2
 800100a:	2112      	movs	r1, #18
 800100c:	f7ff ff78 	bl	8000f00 <std>
 8001010:	2301      	movs	r3, #1
 8001012:	61a3      	str	r3, [r4, #24]
 8001014:	e7d2      	b.n	8000fbc <__sinit+0xc>
 8001016:	bf00      	nop
 8001018:	08001514 	.word	0x08001514
 800101c:	08000f49 	.word	0x08000f49

08001020 <__sfp>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	4607      	mov	r7, r0
 8001024:	f7ff ffac 	bl	8000f80 <__sfp_lock_acquire>
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <__sfp+0x84>)
 800102a:	681e      	ldr	r6, [r3, #0]
 800102c:	69b3      	ldr	r3, [r6, #24]
 800102e:	b913      	cbnz	r3, 8001036 <__sfp+0x16>
 8001030:	4630      	mov	r0, r6
 8001032:	f7ff ffbd 	bl	8000fb0 <__sinit>
 8001036:	3648      	adds	r6, #72	; 0x48
 8001038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800103c:	3b01      	subs	r3, #1
 800103e:	d503      	bpl.n	8001048 <__sfp+0x28>
 8001040:	6833      	ldr	r3, [r6, #0]
 8001042:	b30b      	cbz	r3, 8001088 <__sfp+0x68>
 8001044:	6836      	ldr	r6, [r6, #0]
 8001046:	e7f7      	b.n	8001038 <__sfp+0x18>
 8001048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800104c:	b9d5      	cbnz	r5, 8001084 <__sfp+0x64>
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <__sfp+0x88>)
 8001050:	60e3      	str	r3, [r4, #12]
 8001052:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001056:	6665      	str	r5, [r4, #100]	; 0x64
 8001058:	f000 f847 	bl	80010ea <__retarget_lock_init_recursive>
 800105c:	f7ff ff96 	bl	8000f8c <__sfp_lock_release>
 8001060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001068:	6025      	str	r5, [r4, #0]
 800106a:	61a5      	str	r5, [r4, #24]
 800106c:	2208      	movs	r2, #8
 800106e:	4629      	mov	r1, r5
 8001070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001074:	f7ff fd44 	bl	8000b00 <memset>
 8001078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800107c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001080:	4620      	mov	r0, r4
 8001082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001084:	3468      	adds	r4, #104	; 0x68
 8001086:	e7d9      	b.n	800103c <__sfp+0x1c>
 8001088:	2104      	movs	r1, #4
 800108a:	4638      	mov	r0, r7
 800108c:	f7ff ff62 	bl	8000f54 <__sfmoreglue>
 8001090:	4604      	mov	r4, r0
 8001092:	6030      	str	r0, [r6, #0]
 8001094:	2800      	cmp	r0, #0
 8001096:	d1d5      	bne.n	8001044 <__sfp+0x24>
 8001098:	f7ff ff78 	bl	8000f8c <__sfp_lock_release>
 800109c:	230c      	movs	r3, #12
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	e7ee      	b.n	8001080 <__sfp+0x60>
 80010a2:	bf00      	nop
 80010a4:	08001514 	.word	0x08001514
 80010a8:	ffff0001 	.word	0xffff0001

080010ac <_fwalk_reent>:
 80010ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010b0:	4606      	mov	r6, r0
 80010b2:	4688      	mov	r8, r1
 80010b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80010b8:	2700      	movs	r7, #0
 80010ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010be:	f1b9 0901 	subs.w	r9, r9, #1
 80010c2:	d505      	bpl.n	80010d0 <_fwalk_reent+0x24>
 80010c4:	6824      	ldr	r4, [r4, #0]
 80010c6:	2c00      	cmp	r4, #0
 80010c8:	d1f7      	bne.n	80010ba <_fwalk_reent+0xe>
 80010ca:	4638      	mov	r0, r7
 80010cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010d0:	89ab      	ldrh	r3, [r5, #12]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d907      	bls.n	80010e6 <_fwalk_reent+0x3a>
 80010d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010da:	3301      	adds	r3, #1
 80010dc:	d003      	beq.n	80010e6 <_fwalk_reent+0x3a>
 80010de:	4629      	mov	r1, r5
 80010e0:	4630      	mov	r0, r6
 80010e2:	47c0      	blx	r8
 80010e4:	4307      	orrs	r7, r0
 80010e6:	3568      	adds	r5, #104	; 0x68
 80010e8:	e7e9      	b.n	80010be <_fwalk_reent+0x12>

080010ea <__retarget_lock_init_recursive>:
 80010ea:	4770      	bx	lr

080010ec <__retarget_lock_acquire_recursive>:
 80010ec:	4770      	bx	lr

080010ee <__retarget_lock_release_recursive>:
 80010ee:	4770      	bx	lr

080010f0 <__swhatbuf_r>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	460e      	mov	r6, r1
 80010f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f8:	2900      	cmp	r1, #0
 80010fa:	b096      	sub	sp, #88	; 0x58
 80010fc:	4614      	mov	r4, r2
 80010fe:	461d      	mov	r5, r3
 8001100:	da07      	bge.n	8001112 <__swhatbuf_r+0x22>
 8001102:	2300      	movs	r3, #0
 8001104:	602b      	str	r3, [r5, #0]
 8001106:	89b3      	ldrh	r3, [r6, #12]
 8001108:	061a      	lsls	r2, r3, #24
 800110a:	d410      	bmi.n	800112e <__swhatbuf_r+0x3e>
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	e00e      	b.n	8001130 <__swhatbuf_r+0x40>
 8001112:	466a      	mov	r2, sp
 8001114:	f000 f96e 	bl	80013f4 <_fstat_r>
 8001118:	2800      	cmp	r0, #0
 800111a:	dbf2      	blt.n	8001102 <__swhatbuf_r+0x12>
 800111c:	9a01      	ldr	r2, [sp, #4]
 800111e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001126:	425a      	negs	r2, r3
 8001128:	415a      	adcs	r2, r3
 800112a:	602a      	str	r2, [r5, #0]
 800112c:	e7ee      	b.n	800110c <__swhatbuf_r+0x1c>
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	2000      	movs	r0, #0
 8001132:	6023      	str	r3, [r4, #0]
 8001134:	b016      	add	sp, #88	; 0x58
 8001136:	bd70      	pop	{r4, r5, r6, pc}

08001138 <__smakebuf_r>:
 8001138:	898b      	ldrh	r3, [r1, #12]
 800113a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800113c:	079d      	lsls	r5, r3, #30
 800113e:	4606      	mov	r6, r0
 8001140:	460c      	mov	r4, r1
 8001142:	d507      	bpl.n	8001154 <__smakebuf_r+0x1c>
 8001144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001148:	6023      	str	r3, [r4, #0]
 800114a:	6123      	str	r3, [r4, #16]
 800114c:	2301      	movs	r3, #1
 800114e:	6163      	str	r3, [r4, #20]
 8001150:	b002      	add	sp, #8
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	ab01      	add	r3, sp, #4
 8001156:	466a      	mov	r2, sp
 8001158:	f7ff ffca 	bl	80010f0 <__swhatbuf_r>
 800115c:	9900      	ldr	r1, [sp, #0]
 800115e:	4605      	mov	r5, r0
 8001160:	4630      	mov	r0, r6
 8001162:	f000 f877 	bl	8001254 <_malloc_r>
 8001166:	b948      	cbnz	r0, 800117c <__smakebuf_r+0x44>
 8001168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800116c:	059a      	lsls	r2, r3, #22
 800116e:	d4ef      	bmi.n	8001150 <__smakebuf_r+0x18>
 8001170:	f023 0303 	bic.w	r3, r3, #3
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	81a3      	strh	r3, [r4, #12]
 800117a:	e7e3      	b.n	8001144 <__smakebuf_r+0xc>
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <__smakebuf_r+0x7c>)
 800117e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001180:	89a3      	ldrh	r3, [r4, #12]
 8001182:	6020      	str	r0, [r4, #0]
 8001184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001188:	81a3      	strh	r3, [r4, #12]
 800118a:	9b00      	ldr	r3, [sp, #0]
 800118c:	6163      	str	r3, [r4, #20]
 800118e:	9b01      	ldr	r3, [sp, #4]
 8001190:	6120      	str	r0, [r4, #16]
 8001192:	b15b      	cbz	r3, 80011ac <__smakebuf_r+0x74>
 8001194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001198:	4630      	mov	r0, r6
 800119a:	f000 f93d 	bl	8001418 <_isatty_r>
 800119e:	b128      	cbz	r0, 80011ac <__smakebuf_r+0x74>
 80011a0:	89a3      	ldrh	r3, [r4, #12]
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	81a3      	strh	r3, [r4, #12]
 80011ac:	89a0      	ldrh	r0, [r4, #12]
 80011ae:	4305      	orrs	r5, r0
 80011b0:	81a5      	strh	r5, [r4, #12]
 80011b2:	e7cd      	b.n	8001150 <__smakebuf_r+0x18>
 80011b4:	08000f49 	.word	0x08000f49

080011b8 <_free_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	4605      	mov	r5, r0
 80011bc:	2900      	cmp	r1, #0
 80011be:	d045      	beq.n	800124c <_free_r+0x94>
 80011c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011c4:	1f0c      	subs	r4, r1, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bfb8      	it	lt
 80011ca:	18e4      	addlt	r4, r4, r3
 80011cc:	f000 f946 	bl	800145c <__malloc_lock>
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <_free_r+0x98>)
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	4610      	mov	r0, r2
 80011d6:	b933      	cbnz	r3, 80011e6 <_free_r+0x2e>
 80011d8:	6063      	str	r3, [r4, #4]
 80011da:	6014      	str	r4, [r2, #0]
 80011dc:	4628      	mov	r0, r5
 80011de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e2:	f000 b941 	b.w	8001468 <__malloc_unlock>
 80011e6:	42a3      	cmp	r3, r4
 80011e8:	d90b      	bls.n	8001202 <_free_r+0x4a>
 80011ea:	6821      	ldr	r1, [r4, #0]
 80011ec:	1862      	adds	r2, r4, r1
 80011ee:	4293      	cmp	r3, r2
 80011f0:	bf04      	itt	eq
 80011f2:	681a      	ldreq	r2, [r3, #0]
 80011f4:	685b      	ldreq	r3, [r3, #4]
 80011f6:	6063      	str	r3, [r4, #4]
 80011f8:	bf04      	itt	eq
 80011fa:	1852      	addeq	r2, r2, r1
 80011fc:	6022      	streq	r2, [r4, #0]
 80011fe:	6004      	str	r4, [r0, #0]
 8001200:	e7ec      	b.n	80011dc <_free_r+0x24>
 8001202:	461a      	mov	r2, r3
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	b10b      	cbz	r3, 800120c <_free_r+0x54>
 8001208:	42a3      	cmp	r3, r4
 800120a:	d9fa      	bls.n	8001202 <_free_r+0x4a>
 800120c:	6811      	ldr	r1, [r2, #0]
 800120e:	1850      	adds	r0, r2, r1
 8001210:	42a0      	cmp	r0, r4
 8001212:	d10b      	bne.n	800122c <_free_r+0x74>
 8001214:	6820      	ldr	r0, [r4, #0]
 8001216:	4401      	add	r1, r0
 8001218:	1850      	adds	r0, r2, r1
 800121a:	4283      	cmp	r3, r0
 800121c:	6011      	str	r1, [r2, #0]
 800121e:	d1dd      	bne.n	80011dc <_free_r+0x24>
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	6053      	str	r3, [r2, #4]
 8001226:	4401      	add	r1, r0
 8001228:	6011      	str	r1, [r2, #0]
 800122a:	e7d7      	b.n	80011dc <_free_r+0x24>
 800122c:	d902      	bls.n	8001234 <_free_r+0x7c>
 800122e:	230c      	movs	r3, #12
 8001230:	602b      	str	r3, [r5, #0]
 8001232:	e7d3      	b.n	80011dc <_free_r+0x24>
 8001234:	6820      	ldr	r0, [r4, #0]
 8001236:	1821      	adds	r1, r4, r0
 8001238:	428b      	cmp	r3, r1
 800123a:	bf04      	itt	eq
 800123c:	6819      	ldreq	r1, [r3, #0]
 800123e:	685b      	ldreq	r3, [r3, #4]
 8001240:	6063      	str	r3, [r4, #4]
 8001242:	bf04      	itt	eq
 8001244:	1809      	addeq	r1, r1, r0
 8001246:	6021      	streq	r1, [r4, #0]
 8001248:	6054      	str	r4, [r2, #4]
 800124a:	e7c7      	b.n	80011dc <_free_r+0x24>
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop
 8001250:	20000084 	.word	0x20000084

08001254 <_malloc_r>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	1ccd      	adds	r5, r1, #3
 8001258:	f025 0503 	bic.w	r5, r5, #3
 800125c:	3508      	adds	r5, #8
 800125e:	2d0c      	cmp	r5, #12
 8001260:	bf38      	it	cc
 8001262:	250c      	movcc	r5, #12
 8001264:	2d00      	cmp	r5, #0
 8001266:	4606      	mov	r6, r0
 8001268:	db01      	blt.n	800126e <_malloc_r+0x1a>
 800126a:	42a9      	cmp	r1, r5
 800126c:	d903      	bls.n	8001276 <_malloc_r+0x22>
 800126e:	230c      	movs	r3, #12
 8001270:	6033      	str	r3, [r6, #0]
 8001272:	2000      	movs	r0, #0
 8001274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001276:	f000 f8f1 	bl	800145c <__malloc_lock>
 800127a:	4921      	ldr	r1, [pc, #132]	; (8001300 <_malloc_r+0xac>)
 800127c:	680a      	ldr	r2, [r1, #0]
 800127e:	4614      	mov	r4, r2
 8001280:	b99c      	cbnz	r4, 80012aa <_malloc_r+0x56>
 8001282:	4f20      	ldr	r7, [pc, #128]	; (8001304 <_malloc_r+0xb0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b923      	cbnz	r3, 8001292 <_malloc_r+0x3e>
 8001288:	4621      	mov	r1, r4
 800128a:	4630      	mov	r0, r6
 800128c:	f000 f83c 	bl	8001308 <_sbrk_r>
 8001290:	6038      	str	r0, [r7, #0]
 8001292:	4629      	mov	r1, r5
 8001294:	4630      	mov	r0, r6
 8001296:	f000 f837 	bl	8001308 <_sbrk_r>
 800129a:	1c43      	adds	r3, r0, #1
 800129c:	d123      	bne.n	80012e6 <_malloc_r+0x92>
 800129e:	230c      	movs	r3, #12
 80012a0:	6033      	str	r3, [r6, #0]
 80012a2:	4630      	mov	r0, r6
 80012a4:	f000 f8e0 	bl	8001468 <__malloc_unlock>
 80012a8:	e7e3      	b.n	8001272 <_malloc_r+0x1e>
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	1b5b      	subs	r3, r3, r5
 80012ae:	d417      	bmi.n	80012e0 <_malloc_r+0x8c>
 80012b0:	2b0b      	cmp	r3, #11
 80012b2:	d903      	bls.n	80012bc <_malloc_r+0x68>
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	441c      	add	r4, r3
 80012b8:	6025      	str	r5, [r4, #0]
 80012ba:	e004      	b.n	80012c6 <_malloc_r+0x72>
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	42a2      	cmp	r2, r4
 80012c0:	bf0c      	ite	eq
 80012c2:	600b      	streq	r3, [r1, #0]
 80012c4:	6053      	strne	r3, [r2, #4]
 80012c6:	4630      	mov	r0, r6
 80012c8:	f000 f8ce 	bl	8001468 <__malloc_unlock>
 80012cc:	f104 000b 	add.w	r0, r4, #11
 80012d0:	1d23      	adds	r3, r4, #4
 80012d2:	f020 0007 	bic.w	r0, r0, #7
 80012d6:	1ac2      	subs	r2, r0, r3
 80012d8:	d0cc      	beq.n	8001274 <_malloc_r+0x20>
 80012da:	1a1b      	subs	r3, r3, r0
 80012dc:	50a3      	str	r3, [r4, r2]
 80012de:	e7c9      	b.n	8001274 <_malloc_r+0x20>
 80012e0:	4622      	mov	r2, r4
 80012e2:	6864      	ldr	r4, [r4, #4]
 80012e4:	e7cc      	b.n	8001280 <_malloc_r+0x2c>
 80012e6:	1cc4      	adds	r4, r0, #3
 80012e8:	f024 0403 	bic.w	r4, r4, #3
 80012ec:	42a0      	cmp	r0, r4
 80012ee:	d0e3      	beq.n	80012b8 <_malloc_r+0x64>
 80012f0:	1a21      	subs	r1, r4, r0
 80012f2:	4630      	mov	r0, r6
 80012f4:	f000 f808 	bl	8001308 <_sbrk_r>
 80012f8:	3001      	adds	r0, #1
 80012fa:	d1dd      	bne.n	80012b8 <_malloc_r+0x64>
 80012fc:	e7cf      	b.n	800129e <_malloc_r+0x4a>
 80012fe:	bf00      	nop
 8001300:	20000084 	.word	0x20000084
 8001304:	20000088 	.word	0x20000088

08001308 <_sbrk_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4d06      	ldr	r5, [pc, #24]	; (8001324 <_sbrk_r+0x1c>)
 800130c:	2300      	movs	r3, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	602b      	str	r3, [r5, #0]
 8001314:	f7ff fb6a 	bl	80009ec <_sbrk>
 8001318:	1c43      	adds	r3, r0, #1
 800131a:	d102      	bne.n	8001322 <_sbrk_r+0x1a>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	b103      	cbz	r3, 8001322 <_sbrk_r+0x1a>
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	bd38      	pop	{r3, r4, r5, pc}
 8001324:	20000098 	.word	0x20000098

08001328 <__sread>:
 8001328:	b510      	push	{r4, lr}
 800132a:	460c      	mov	r4, r1
 800132c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001330:	f000 f8a0 	bl	8001474 <_read_r>
 8001334:	2800      	cmp	r0, #0
 8001336:	bfab      	itete	ge
 8001338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800133a:	89a3      	ldrhlt	r3, [r4, #12]
 800133c:	181b      	addge	r3, r3, r0
 800133e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001342:	bfac      	ite	ge
 8001344:	6563      	strge	r3, [r4, #84]	; 0x54
 8001346:	81a3      	strhlt	r3, [r4, #12]
 8001348:	bd10      	pop	{r4, pc}

0800134a <__swrite>:
 800134a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134e:	461f      	mov	r7, r3
 8001350:	898b      	ldrh	r3, [r1, #12]
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	4605      	mov	r5, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4616      	mov	r6, r2
 800135a:	d505      	bpl.n	8001368 <__swrite+0x1e>
 800135c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001360:	2302      	movs	r3, #2
 8001362:	2200      	movs	r2, #0
 8001364:	f000 f868 	bl	8001438 <_lseek_r>
 8001368:	89a3      	ldrh	r3, [r4, #12]
 800136a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800136e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001372:	81a3      	strh	r3, [r4, #12]
 8001374:	4632      	mov	r2, r6
 8001376:	463b      	mov	r3, r7
 8001378:	4628      	mov	r0, r5
 800137a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800137e:	f000 b817 	b.w	80013b0 <_write_r>

08001382 <__sseek>:
 8001382:	b510      	push	{r4, lr}
 8001384:	460c      	mov	r4, r1
 8001386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800138a:	f000 f855 	bl	8001438 <_lseek_r>
 800138e:	1c43      	adds	r3, r0, #1
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	bf15      	itete	ne
 8001394:	6560      	strne	r0, [r4, #84]	; 0x54
 8001396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800139a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800139e:	81a3      	strheq	r3, [r4, #12]
 80013a0:	bf18      	it	ne
 80013a2:	81a3      	strhne	r3, [r4, #12]
 80013a4:	bd10      	pop	{r4, pc}

080013a6 <__sclose>:
 80013a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013aa:	f000 b813 	b.w	80013d4 <_close_r>
	...

080013b0 <_write_r>:
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	4d07      	ldr	r5, [pc, #28]	; (80013d0 <_write_r+0x20>)
 80013b4:	4604      	mov	r4, r0
 80013b6:	4608      	mov	r0, r1
 80013b8:	4611      	mov	r1, r2
 80013ba:	2200      	movs	r2, #0
 80013bc:	602a      	str	r2, [r5, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	f7ff fac7 	bl	8000952 <_write>
 80013c4:	1c43      	adds	r3, r0, #1
 80013c6:	d102      	bne.n	80013ce <_write_r+0x1e>
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	b103      	cbz	r3, 80013ce <_write_r+0x1e>
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	20000098 	.word	0x20000098

080013d4 <_close_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d06      	ldr	r5, [pc, #24]	; (80013f0 <_close_r+0x1c>)
 80013d8:	2300      	movs	r3, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	602b      	str	r3, [r5, #0]
 80013e0:	f7ff fad3 	bl	800098a <_close>
 80013e4:	1c43      	adds	r3, r0, #1
 80013e6:	d102      	bne.n	80013ee <_close_r+0x1a>
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	b103      	cbz	r3, 80013ee <_close_r+0x1a>
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	20000098 	.word	0x20000098

080013f4 <_fstat_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4d07      	ldr	r5, [pc, #28]	; (8001414 <_fstat_r+0x20>)
 80013f8:	2300      	movs	r3, #0
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	602b      	str	r3, [r5, #0]
 8001402:	f7ff facd 	bl	80009a0 <_fstat>
 8001406:	1c43      	adds	r3, r0, #1
 8001408:	d102      	bne.n	8001410 <_fstat_r+0x1c>
 800140a:	682b      	ldr	r3, [r5, #0]
 800140c:	b103      	cbz	r3, 8001410 <_fstat_r+0x1c>
 800140e:	6023      	str	r3, [r4, #0]
 8001410:	bd38      	pop	{r3, r4, r5, pc}
 8001412:	bf00      	nop
 8001414:	20000098 	.word	0x20000098

08001418 <_isatty_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4d06      	ldr	r5, [pc, #24]	; (8001434 <_isatty_r+0x1c>)
 800141c:	2300      	movs	r3, #0
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	602b      	str	r3, [r5, #0]
 8001424:	f7ff facb 	bl	80009be <_isatty>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_isatty_r+0x1a>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_isatty_r+0x1a>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	20000098 	.word	0x20000098

08001438 <_lseek_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4d07      	ldr	r5, [pc, #28]	; (8001458 <_lseek_r+0x20>)
 800143c:	4604      	mov	r4, r0
 800143e:	4608      	mov	r0, r1
 8001440:	4611      	mov	r1, r2
 8001442:	2200      	movs	r2, #0
 8001444:	602a      	str	r2, [r5, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	f7ff fac3 	bl	80009d2 <_lseek>
 800144c:	1c43      	adds	r3, r0, #1
 800144e:	d102      	bne.n	8001456 <_lseek_r+0x1e>
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	b103      	cbz	r3, 8001456 <_lseek_r+0x1e>
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	20000098 	.word	0x20000098

0800145c <__malloc_lock>:
 800145c:	4801      	ldr	r0, [pc, #4]	; (8001464 <__malloc_lock+0x8>)
 800145e:	f7ff be45 	b.w	80010ec <__retarget_lock_acquire_recursive>
 8001462:	bf00      	nop
 8001464:	20000090 	.word	0x20000090

08001468 <__malloc_unlock>:
 8001468:	4801      	ldr	r0, [pc, #4]	; (8001470 <__malloc_unlock+0x8>)
 800146a:	f7ff be40 	b.w	80010ee <__retarget_lock_release_recursive>
 800146e:	bf00      	nop
 8001470:	20000090 	.word	0x20000090

08001474 <_read_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4d07      	ldr	r5, [pc, #28]	; (8001494 <_read_r+0x20>)
 8001478:	4604      	mov	r4, r0
 800147a:	4608      	mov	r0, r1
 800147c:	4611      	mov	r1, r2
 800147e:	2200      	movs	r2, #0
 8001480:	602a      	str	r2, [r5, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	f7ff fa48 	bl	8000918 <_read>
 8001488:	1c43      	adds	r3, r0, #1
 800148a:	d102      	bne.n	8001492 <_read_r+0x1e>
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	b103      	cbz	r3, 8001492 <_read_r+0x1e>
 8001490:	6023      	str	r3, [r4, #0]
 8001492:	bd38      	pop	{r3, r4, r5, pc}
 8001494:	20000098 	.word	0x20000098

08001498 <_init>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	bf00      	nop
 800149c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149e:	bc08      	pop	{r3}
 80014a0:	469e      	mov	lr, r3
 80014a2:	4770      	bx	lr

080014a4 <_fini>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	bf00      	nop
 80014a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014aa:	bc08      	pop	{r3}
 80014ac:	469e      	mov	lr, r3
 80014ae:	4770      	bx	lr
