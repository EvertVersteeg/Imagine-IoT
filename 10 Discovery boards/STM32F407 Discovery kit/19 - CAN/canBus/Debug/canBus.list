
canBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b84  08002b84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bebc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a2b  00000000  00000000  0002bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  0002e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020293  00000000  00000000  0002edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b61c  00000000  00000000  0004f083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6eff  00000000  00000000  0005a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012159e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d08  00000000  00000000  001215f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b4c 	.word	0x08002b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b4c 	.word	0x08002b4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb68 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f868 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f906 	bl	80006dc <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  FilterConfig.FilterBank = 0;  //MASTER
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <main+0xc4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004da:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <main+0xc4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <main+0xc4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterIdHigh = 0x245<<5;
 80004e6:	4b27      	ldr	r3, [pc, #156]	; (8000584 <main+0xc4>)
 80004e8:	f644 02a0 	movw	r2, #18592	; 0x48a0
 80004ec:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0;
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <main+0xc4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <main+0xc4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0;
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <main+0xc4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <main+0xc4>)
 8000502:	2201      	movs	r2, #1
 8000504:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation= ENABLE;
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <main+0xc4>)
 8000508:	2201      	movs	r2, #1
 800050a:	621a      	str	r2, [r3, #32]
  FilterConfig.SlaveStartFilterBank = 14;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <main+0xc4>)
 800050e:	220e      	movs	r2, #14
 8000510:	625a      	str	r2, [r3, #36]	; 0x24


  TxHeader.DLC = 8;            			// grote van bericht 1 - 8
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <main+0xc8>)
 8000514:	2208      	movs	r2, #8
 8000516:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;   			// standaard
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <main+0xc8>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <main+0xc8>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x244;        			// identificatie nummer
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0xc8>)
 8000526:	f44f 7211 	mov.w	r2, #580	; 0x244
 800052a:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x02;
  TxHeader.TransmitGlobalTime = DISABLE;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0xc8>)
 800052e:	2200      	movs	r2, #0
 8000530:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan1,&FilterConfig);
 8000532:	4914      	ldr	r1, [pc, #80]	; (8000584 <main+0xc4>)
 8000534:	4815      	ldr	r0, [pc, #84]	; (800058c <main+0xcc>)
 8000536:	f000 fc91 	bl	8000e5c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800053a:	4814      	ldr	r0, [pc, #80]	; (800058c <main+0xcc>)
 800053c:	f000 fd6e 	bl	800101c <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <main+0xd0>)
 8000548:	f001 fb56 	bl	8001bf8 <HAL_GPIO_WritePin>


	  //uint8_t a = 0;
	  TxData[0] = 0x02;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <main+0xd4>)
 800054e:	2202      	movs	r2, #2
 8000550:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0x03;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <main+0xd4>)
 8000554:	2203      	movs	r2, #3
 8000556:	705a      	strb	r2, [r3, #1]
	  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0xd8>)
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0xd4>)
 800055c:	490a      	ldr	r1, [pc, #40]	; (8000588 <main+0xc8>)
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <main+0xcc>)
 8000560:	f000 fda0 	bl	80010a4 <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f000 fb58 	bl	8000c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000572:	4807      	ldr	r0, [pc, #28]	; (8000590 <main+0xd0>)
 8000574:	f001 fb40 	bl	8001bf8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fb4e 	bl	8000c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000580:	e7de      	b.n	8000540 <main+0x80>
 8000582:	bf00      	nop
 8000584:	20000030 	.word	0x20000030
 8000588:	20000084 	.word	0x20000084
 800058c:	2000005c 	.word	0x2000005c
 8000590:	40020c00 	.word	0x40020c00
 8000594:	20000028 	.word	0x20000028
 8000598:	20000058 	.word	0x20000058

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fac6 	bl	8002b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000610:	23a8      	movs	r3, #168	; 0xa8
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000618:	2307      	movs	r3, #7
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fb27 	bl	8001c74 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 f8e0 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2105      	movs	r1, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fd88 	bl	8002164 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065a:	f000 f8c9 	bl	80007f0 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_CAN1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_CAN1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_CAN1_Init+0x64>)
 800067c:	220e      	movs	r2, #14
 800067e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_CAN1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_CAN1_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_CAN1_Init+0x64>)
 800068e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000692:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_CAN1_Init+0x64>)
 8000696:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800069a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_CAN1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_CAN1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_CAN1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_CAN1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_CAN1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_CAN1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_CAN1_Init+0x64>)
 80006c2:	f000 facf 	bl	8000c64 <HAL_CAN_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f890 	bl	80007f0 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000005c 	.word	0x2000005c
 80006d8:	40006400 	.word	0x40006400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <MX_GPIO_Init+0xe4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <MX_GPIO_Init+0xe4>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a2a      	ldr	r2, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xe4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_GPIO_Init+0xe4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800076a:	f001 fa45 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xec>)
 8000784:	f001 f884 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000788:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80007a2:	f001 f875 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2100      	movs	r1, #0
 80007aa:	2006      	movs	r0, #6
 80007ac:	f001 f846 	bl	800183c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007b0:	2006      	movs	r0, #6
 80007b2:	f001 f85f 	bl	8001874 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	; 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020000 	.word	0x40020000

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 f9fd 	bl	8000bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010000 	.word	0x40010000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <HAL_MspInit+0x4c>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_MspInit+0x4c>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083a:	2007      	movs	r0, #7
 800083c:	f000 fff3 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <HAL_CAN_MspInit+0x94>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d134      	bne.n	80008d8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_CAN_MspInit+0x98>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_CAN_MspInit+0x98>)
 8000878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_CAN_MspInit+0x98>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_CAN_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <HAL_CAN_MspInit+0x98>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_CAN_MspInit+0x98>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008b8:	2309      	movs	r3, #9
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <HAL_CAN_MspInit+0x9c>)
 80008c4:	f000 ffe4 	bl	8001890 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 80008c8:	2202      	movs	r2, #2
 80008ca:	2100      	movs	r1, #0
 80008cc:	2014      	movs	r0, #20
 80008ce:	f000 ffb5 	bl	800183c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008d2:	2014      	movs	r0, #20
 80008d4:	f000 ffce 	bl	8001874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40006400 	.word	0x40006400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2019      	movs	r0, #25
 8000902:	f000 ff9b 	bl	800183c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000906:	2019      	movs	r0, #25
 8000908:	f000 ffb4 	bl	8001874 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_InitTick+0xa4>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <HAL_InitTick+0xa4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6453      	str	r3, [r2, #68]	; 0x44
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xa4>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000928:	f107 0210 	add.w	r2, r7, #16
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fdfe 	bl	8002534 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000938:	f001 fde8 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 800093c:	4603      	mov	r3, r0
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_InitTick+0xa8>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_InitTick+0xac>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_InitTick+0xb0>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_InitTick+0xac>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_InitTick+0xac>)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_InitTick+0xac>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_InitTick+0xac>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_InitTick+0xac>)
 8000972:	f001 fe11 	bl	8002598 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_InitTick+0xac>)
 800097e:	f001 fe65 	bl	800264c <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3730      	adds	r7, #48	; 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	431bde83 	.word	0x431bde83
 8000998:	200000b8 	.word	0x200000b8
 800099c:	40010000 	.word	0x40010000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	for(int n=0;n<1000000;n++);
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e002      	b.n	8000a0a <EXTI0_IRQHandler+0x12>
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4a33      	ldr	r2, [pc, #204]	; (8000adc <EXTI0_IRQHandler+0xe4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	ddf8      	ble.n	8000a04 <EXTI0_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000a12:	2101      	movs	r1, #1
 8000a14:	4832      	ldr	r0, [pc, #200]	; (8000ae0 <EXTI0_IRQHandler+0xe8>)
 8000a16:	f001 f8d7 	bl	8001bc8 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d056      	beq.n	8000ace <EXTI0_IRQHandler+0xd6>
	{

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <EXTI0_IRQHandler+0xec>)
 8000a28:	f001 f8e6 	bl	8001bf8 <HAL_GPIO_WritePin>
		for(int n=0;n<1000000;n++);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	e002      	b.n	8000a38 <EXTI0_IRQHandler+0x40>
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <EXTI0_IRQHandler+0xe4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	ddf8      	ble.n	8000a32 <EXTI0_IRQHandler+0x3a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <EXTI0_IRQHandler+0xec>)
 8000a48:	f001 f8d6 	bl	8001bf8 <HAL_GPIO_WritePin>
		TxData[0] = 100;
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <EXTI0_IRQHandler+0xf0>)
 8000a4e:	2264      	movs	r2, #100	; 0x64
 8000a50:	701a      	strb	r2, [r3, #0]
		TxData[1] = 10;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <EXTI0_IRQHandler+0xf0>)
 8000a54:	220a      	movs	r2, #10
 8000a56:	705a      	strb	r2, [r3, #1]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <EXTI0_IRQHandler+0xf4>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <EXTI0_IRQHandler+0xf0>)
 8000a5c:	4924      	ldr	r1, [pc, #144]	; (8000af0 <EXTI0_IRQHandler+0xf8>)
 8000a5e:	4825      	ldr	r0, [pc, #148]	; (8000af4 <EXTI0_IRQHandler+0xfc>)
 8000a60:	f000 fb20 	bl	80010a4 <HAL_CAN_AddTxMessage>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <EXTI0_IRQHandler+0xf4>)
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <EXTI0_IRQHandler+0xf0>)
 8000a68:	4921      	ldr	r1, [pc, #132]	; (8000af0 <EXTI0_IRQHandler+0xf8>)
 8000a6a:	4822      	ldr	r0, [pc, #136]	; (8000af4 <EXTI0_IRQHandler+0xfc>)
 8000a6c:	f000 fb1a 	bl	80010a4 <HAL_CAN_AddTxMessage>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d015      	beq.n	8000aa2 <EXTI0_IRQHandler+0xaa>
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7c:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <EXTI0_IRQHandler+0xec>)
 8000a7e:	f001 f8bb 	bl	8001bf8 <HAL_GPIO_WritePin>
					for(int n=0;n<1000000;n++);
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	e002      	b.n	8000a8e <EXTI0_IRQHandler+0x96>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <EXTI0_IRQHandler+0xe4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	ddf8      	ble.n	8000a88 <EXTI0_IRQHandler+0x90>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <EXTI0_IRQHandler+0xec>)
 8000a9e:	f001 f8ab 	bl	8001bf8 <HAL_GPIO_WritePin>
				}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <EXTI0_IRQHandler+0xec>)
 8000aaa:	f001 f8a5 	bl	8001bf8 <HAL_GPIO_WritePin>
		for(int n=0;n<1000000;n++);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	e002      	b.n	8000aba <EXTI0_IRQHandler+0xc2>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <EXTI0_IRQHandler+0xe4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	ddf8      	ble.n	8000ab4 <EXTI0_IRQHandler+0xbc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <EXTI0_IRQHandler+0xec>)
 8000aca:	f001 f895 	bl	8001bf8 <HAL_GPIO_WritePin>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f001 f8ac 	bl	8001c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	000f423f 	.word	0x000f423f
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	20000028 	.word	0x20000028
 8000aec:	20000058 	.word	0x20000058
 8000af0:	20000084 	.word	0x20000084
 8000af4:	2000005c 	.word	0x2000005c

08000af8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <CAN1_RX0_IRQHandler+0x10>)
 8000afe:	f000 fbac 	bl	800125a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000005c 	.word	0x2000005c

08000b0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b12:	f001 fe0b 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000b8 	.word	0x200000b8

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4a:	490e      	ldr	r1, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b60:	4c0b      	ldr	r4, [pc, #44]	; (8000b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b6e:	f7ff ffd7 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f001 ffbf 	bl	8002af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fca3 	bl	80004c0 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b88:	08002b8c 	.word	0x08002b8c
  ldr r2, =_sbss
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b90:	20000104 	.word	0x20000104

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <HAL_Init+0x40>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_Init+0x40>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x40>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 fe30 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fe90 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fe16 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023c00 	.word	0x40023c00

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000100 	.word	0x20000100

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000100 	.word	0x20000100

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e0ed      	b.n	8000e52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fde2 	bl	800084c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c98:	f7ff ffb4 	bl	8000c04 <HAL_GetTick>
 8000c9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c9e:	e012      	b.n	8000cc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca0:	f7ff ffb0 	bl	8000c04 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d90b      	bls.n	8000cc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0c5      	b.n	8000e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0e5      	beq.n	8000ca0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0202 	bic.w	r2, r2, #2
 8000ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce4:	f7ff ff8e 	bl	8000c04 <HAL_GetTick>
 8000ce8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cea:	e012      	b.n	8000d12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cec:	f7ff ff8a 	bl	8000c04 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b0a      	cmp	r3, #10
 8000cf8:	d90b      	bls.n	8000d12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2205      	movs	r2, #5
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e09f      	b.n	8000e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e5      	bne.n	8000cec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7e1b      	ldrb	r3, [r3, #24]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d108      	bne.n	8000d3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e007      	b.n	8000d4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7e5b      	ldrb	r3, [r3, #25]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e9b      	ldrb	r3, [r3, #26]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0220 	orr.w	r2, r2, #32
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0220 	bic.w	r2, r2, #32
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7edb      	ldrb	r3, [r3, #27]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0210 	bic.w	r2, r2, #16
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0210 	orr.w	r2, r2, #16
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7f1b      	ldrb	r3, [r3, #28]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0208 	orr.w	r2, r2, #8
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0208 	bic.w	r2, r2, #8
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7f5b      	ldrb	r3, [r3, #29]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f042 0204 	orr.w	r2, r2, #4
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0204 	bic.w	r2, r2, #4
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	ea42 0103 	orr.w	r1, r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e74:	7cfb      	ldrb	r3, [r7, #19]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d003      	beq.n	8000e82 <HAL_CAN_ConfigFilter+0x26>
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	f040 80be 	bne.w	8000ffe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e82:	4b65      	ldr	r3, [pc, #404]	; (8001018 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e84:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d123      	bne.n	8000f2c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3248      	adds	r2, #72	; 0x48
 8000f0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f22:	6979      	ldr	r1, [r7, #20]
 8000f24:	3348      	adds	r3, #72	; 0x48
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d122      	bne.n	8000f7a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3248      	adds	r2, #72	; 0x48
 8000f5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f70:	6979      	ldr	r1, [r7, #20]
 8000f72:	3348      	adds	r3, #72	; 0x48
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f94:	e007      	b.n	8000fa6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fc0:	e007      	b.n	8000fd2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d107      	bne.n	8000fea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ff0:	f023 0201 	bic.w	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e006      	b.n	800100c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
  }
}
 800100c:	4618      	mov	r0, r3
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40006400 	.word	0x40006400

0800101c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d12e      	bne.n	800108e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001048:	f7ff fddc 	bl	8000c04 <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800104e:	e012      	b.n	8001076 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001050:	f7ff fdd8 	bl	8000c04 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b0a      	cmp	r3, #10
 800105c:	d90b      	bls.n	8001076 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2205      	movs	r2, #5
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e012      	b.n	800109c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e5      	bne.n	8001050 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e006      	b.n	800109c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c2:	7ffb      	ldrb	r3, [r7, #31]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d003      	beq.n	80010d0 <HAL_CAN_AddTxMessage+0x2c>
 80010c8:	7ffb      	ldrb	r3, [r7, #31]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	f040 80b8 	bne.w	8001240 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10a      	bne.n	80010f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80a0 	beq.w	8001230 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	0e1b      	lsrs	r3, r3, #24
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d907      	bls.n	8001110 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e09e      	b.n	800124e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001110:	2201      	movs	r2, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	409a      	lsls	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10d      	bne.n	800113e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	6809      	ldr	r1, [r1, #0]
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3318      	adds	r3, #24
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e00f      	b.n	800115e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001148:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800114e:	68f9      	ldr	r1, [r7, #12]
 8001150:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001152:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3318      	adds	r3, #24
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	440b      	add	r3, r1
 800115c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3318      	adds	r3, #24
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	440b      	add	r3, r1
 800116e:	3304      	adds	r3, #4
 8001170:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	7d1b      	ldrb	r3, [r3, #20]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d111      	bne.n	800119e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3318      	adds	r3, #24
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	3304      	adds	r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	6811      	ldr	r1, [r2, #0]
 800118e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3318      	adds	r3, #24
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	440b      	add	r3, r1
 800119a:	3304      	adds	r3, #4
 800119c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3307      	adds	r3, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	061a      	lsls	r2, r3, #24
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3306      	adds	r3, #6
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	041b      	lsls	r3, r3, #16
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3305      	adds	r3, #5
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	4313      	orrs	r3, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	3204      	adds	r2, #4
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	4610      	mov	r0, r2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	6811      	ldr	r1, [r2, #0]
 80011c6:	ea43 0200 	orr.w	r2, r3, r0
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	440b      	add	r3, r1
 80011d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3303      	adds	r3, #3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	061a      	lsls	r2, r3, #24
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3302      	adds	r3, #2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	4313      	orrs	r3, r2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	4610      	mov	r0, r2
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	6811      	ldr	r1, [r2, #0]
 80011fc:	ea43 0200 	orr.w	r2, r3, r0
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	440b      	add	r3, r1
 8001206:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800120a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3318      	adds	r3, #24
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	6811      	ldr	r1, [r2, #0]
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3318      	adds	r3, #24
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	e00e      	b.n	800124e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e006      	b.n	800124e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b08a      	sub	sp, #40	; 0x28
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d07c      	beq.n	800139a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d023      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2201      	movs	r2, #1
 80012b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f983 	bl	80015c8 <HAL_CAN_TxMailbox0CompleteCallback>
 80012c2:	e016      	b.n	80012f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
 80012d6:	e00c      	b.n	80012f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	e002      	b.n	80012f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f989 	bl	8001604 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d024      	beq.n	8001346 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001304:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f963 	bl	80015dc <HAL_CAN_TxMailbox1CompleteCallback>
 8001316:	e016      	b.n	8001346 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	e00c      	b.n	8001346 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	e002      	b.n	8001346 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f969 	bl	8001618 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d024      	beq.n	800139a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001358:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f943 	bl	80015f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800136a:	e016      	b.n	800139a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	e00c      	b.n	800139a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	e002      	b.n	800139a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f949 	bl	800162c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00c      	beq.n	80013be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2210      	movs	r2, #16
 80013bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2208      	movs	r2, #8
 80013d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f93a 	bl	8001654 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f921 	bl	8001640 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00c      	beq.n	8001422 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001418:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2210      	movs	r2, #16
 8001420:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2208      	movs	r2, #8
 800143c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f91c 	bl	800167c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f903 	bl	8001668 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2210      	movs	r2, #16
 800147c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f906 	bl	8001690 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2208      	movs	r2, #8
 800149e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8ff 	bl	80016a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d07b      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d072      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001514:	2b00      	cmp	r3, #0
 8001516:	d043      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03e      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001528:	2b60      	cmp	r3, #96	; 0x60
 800152a:	d02b      	beq.n	8001584 <HAL_CAN_IRQHandler+0x32a>
 800152c:	2b60      	cmp	r3, #96	; 0x60
 800152e:	d82e      	bhi.n	800158e <HAL_CAN_IRQHandler+0x334>
 8001530:	2b50      	cmp	r3, #80	; 0x50
 8001532:	d022      	beq.n	800157a <HAL_CAN_IRQHandler+0x320>
 8001534:	2b50      	cmp	r3, #80	; 0x50
 8001536:	d82a      	bhi.n	800158e <HAL_CAN_IRQHandler+0x334>
 8001538:	2b40      	cmp	r3, #64	; 0x40
 800153a:	d019      	beq.n	8001570 <HAL_CAN_IRQHandler+0x316>
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d826      	bhi.n	800158e <HAL_CAN_IRQHandler+0x334>
 8001540:	2b30      	cmp	r3, #48	; 0x30
 8001542:	d010      	beq.n	8001566 <HAL_CAN_IRQHandler+0x30c>
 8001544:	2b30      	cmp	r3, #48	; 0x30
 8001546:	d822      	bhi.n	800158e <HAL_CAN_IRQHandler+0x334>
 8001548:	2b10      	cmp	r3, #16
 800154a:	d002      	beq.n	8001552 <HAL_CAN_IRQHandler+0x2f8>
 800154c:	2b20      	cmp	r3, #32
 800154e:	d005      	beq.n	800155c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001550:	e01d      	b.n	800158e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800155a:	e019      	b.n	8001590 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001564:	e014      	b.n	8001590 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f043 0320 	orr.w	r3, r3, #32
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800156e:	e00f      	b.n	8001590 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001578:	e00a      	b.n	8001590 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001582:	e005      	b.n	8001590 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800158c:	e000      	b.n	8001590 <HAL_CAN_IRQHandler+0x336>
            break;
 800158e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800159e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2204      	movs	r2, #4
 80015a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f87c 	bl	80016b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff4c 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184e:	f7ff ff61 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7ff ffb1 	bl	80017c0 <NVIC_EncodePriority>
 800185e:	4602      	mov	r2, r0
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff80 	bl	800176c <__NVIC_SetPriority>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff54 	bl	8001730 <__NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e16b      	b.n	8001b84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 815a 	bne.w	8001b7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d130      	bne.n	8001944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80b4 	beq.w	8001b7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a5f      	ldr	r2, [pc, #380]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a5b      	ldr	r2, [pc, #364]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_GPIO_Init+0x314>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02b      	beq.n	8001ab6 <HAL_GPIO_Init+0x226>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <HAL_GPIO_Init+0x318>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x222>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a50      	ldr	r2, [pc, #320]	; (8001bac <HAL_GPIO_Init+0x31c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x21e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x216>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x328>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4c      	ldr	r2, [pc, #304]	; (8001bbc <HAL_GPIO_Init+0x32c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x20e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <HAL_GPIO_Init+0x330>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x20a>
 8001a96:	2307      	movs	r3, #7
 8001a98:	e00e      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00c      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e00a      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e008      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e004      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f002 0203 	and.w	r2, r2, #3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac8:	4935      	ldr	r1, [pc, #212]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001afa:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	f67f ae90 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40021400 	.word	0x40021400
 8001bbc:	40021800 	.word	0x40021800
 8001bc0:	40021c00 	.word	0x40021c00
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c14:	e003      	b.n	8001c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	041a      	lsls	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	619a      	str	r2, [r3, #24]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f806 	bl	8001c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e264      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d075      	beq.n	8001d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c92:	4ba3      	ldr	r3, [pc, #652]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9e:	4ba0      	ldr	r3, [pc, #640]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d112      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001caa:	4b9d      	ldr	r3, [pc, #628]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	4b99      	ldr	r3, [pc, #612]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d05b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x108>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d157      	bne.n	8001d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e23f      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d106      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x74>
 8001cda:	4b91      	ldr	r3, [pc, #580]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a90      	ldr	r2, [pc, #576]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xb0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a8a      	ldr	r2, [pc, #552]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a87      	ldr	r2, [pc, #540]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xb0>
 8001d0c:	4b84      	ldr	r3, [pc, #528]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a83      	ldr	r2, [pc, #524]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a80      	ldr	r2, [pc, #512]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ff6a 	bl	8000c04 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7fe ff66 	bl	8000c04 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e204      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xc0>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe ff56 	bl	8000c04 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ff52 	bl	8000c04 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1f0      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b6c      	ldr	r3, [pc, #432]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0xe8>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8a:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x152>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1c4      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4952      	ldr	r1, [pc, #328]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <HAL_RCC_OscConfig+0x2b0>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7fe ff0b 	bl	8000c04 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df2:	f7fe ff07 	bl	8000c04 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1a5      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4940      	ldr	r1, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0x2b0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe feea 	bl	8000c04 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e34:	f7fe fee6 	bl	8000c04 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e184      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d030      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d016      	beq.n	8001e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_OscConfig+0x2b4>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7fe feca 	bl	8000c04 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7fe fec6 	bl	8000c04 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e164      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x200>
 8001e92:	e015      	b.n	8001ec0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x2b4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe feb3 	bl	8000c04 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7fe feaf 	bl	8000c04 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e14d      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a0 	beq.w	800200e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_OscConfig+0x2b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d121      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_RCC_OscConfig+0x2b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_RCC_OscConfig+0x2b8>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7fe fe75 	bl	8000c04 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e011      	b.n	8001f42 <HAL_RCC_OscConfig+0x2ce>
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	42470000 	.word	0x42470000
 8001f28:	42470e80 	.word	0x42470e80
 8001f2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7fe fe68 	bl	8000c04 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e106      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b85      	ldr	r3, [pc, #532]	; (8002158 <HAL_RCC_OscConfig+0x4e4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d106      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
 8001f56:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	4a80      	ldr	r2, [pc, #512]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6713      	str	r3, [r2, #112]	; 0x70
 8001f62:	e01c      	b.n	8001f9e <HAL_RCC_OscConfig+0x32a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f6c:	4b7b      	ldr	r3, [pc, #492]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a7a      	ldr	r2, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	4b78      	ldr	r3, [pc, #480]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a77      	ldr	r2, [pc, #476]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
 8001f84:	e00b      	b.n	8001f9e <HAL_RCC_OscConfig+0x32a>
 8001f86:	4b75      	ldr	r3, [pc, #468]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	4a74      	ldr	r2, [pc, #464]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6713      	str	r3, [r2, #112]	; 0x70
 8001f92:	4b72      	ldr	r3, [pc, #456]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a71      	ldr	r2, [pc, #452]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d015      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fe2d 	bl	8000c04 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fe29 	bl	8000c04 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0c5      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ee      	beq.n	8001fae <HAL_RCC_OscConfig+0x33a>
 8001fd0:	e014      	b.n	8001ffc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fe17 	bl	8000c04 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fe13 	bl	8000c04 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0af      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	4b5a      	ldr	r3, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ee      	bne.n	8001fda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a55      	ldr	r2, [pc, #340]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 809b 	beq.w	800214e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002018:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d05c      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d141      	bne.n	80020b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x4ec>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fde7 	bl	8000c04 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fde3 	bl	8000c04 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e081      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69da      	ldr	r2, [r3, #28]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	019b      	lsls	r3, r3, #6
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	061b      	lsls	r3, r3, #24
 800207c:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <HAL_RCC_OscConfig+0x4ec>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fdbc 	bl	8000c04 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe fdb8 	bl	8000c04 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e056      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x41c>
 80020ae:	e04e      	b.n	800214e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x4ec>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe fda5 	bl	8000c04 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe fda1 	bl	8000c04 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e03f      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x44a>
 80020dc:	e037      	b.n	800214e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e032      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_RCC_OscConfig+0x4e8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d028      	beq.n	800214a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d121      	bne.n	800214a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d11a      	bne.n	800214a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002120:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002122:	4293      	cmp	r3, r2
 8002124:	d111      	bne.n	800214a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d107      	bne.n	800214a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40007000 	.word	0x40007000
 800215c:	40023800 	.word	0x40023800
 8002160:	42470060 	.word	0x42470060

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0cc      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d90c      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b8      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	494d      	ldr	r1, [pc, #308]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d044      	beq.n	8002284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d119      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d003      	beq.n	8002222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221e:	2b03      	cmp	r3, #3
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e067      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f023 0203 	bic.w	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4934      	ldr	r1, [pc, #208]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002254:	f7fe fcd6 	bl	8000c04 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	e00a      	b.n	8002272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7fe fcd2 	bl	8000c04 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e04f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 020c 	and.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	429a      	cmp	r2, r3
 8002282:	d1eb      	bne.n	800225c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d20c      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e032      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4916      	ldr	r1, [pc, #88]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f821 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490a      	ldr	r1, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe faee 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00
 8002320:	40023800 	.word	0x40023800
 8002324:	08002b64 	.word	0x08002b64
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	2300      	movs	r3, #0
 8002342:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002348:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d00d      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x40>
 8002354:	2b08      	cmp	r3, #8
 8002356:	f200 80bd 	bhi.w	80024d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x34>
 800235e:	2b04      	cmp	r3, #4
 8002360:	d003      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x3a>
 8002362:	e0b7      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002366:	60bb      	str	r3, [r7, #8]
       break;
 8002368:	e0b7      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800236c:	60bb      	str	r3, [r7, #8]
      break;
 800236e:	e0b4      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002370:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002378:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800237a:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d04d      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002386:	4b58      	ldr	r3, [pc, #352]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	099b      	lsrs	r3, r3, #6
 800238c:	461a      	mov	r2, r3
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	ea02 0800 	and.w	r8, r2, r0
 800239e:	ea03 0901 	and.w	r9, r3, r1
 80023a2:	4640      	mov	r0, r8
 80023a4:	4649      	mov	r1, r9
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	014b      	lsls	r3, r1, #5
 80023b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023b4:	0142      	lsls	r2, r0, #5
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	ebb0 0008 	subs.w	r0, r0, r8
 80023be:	eb61 0109 	sbc.w	r1, r1, r9
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023d0:	0182      	lsls	r2, r0, #6
 80023d2:	1a12      	subs	r2, r2, r0
 80023d4:	eb63 0301 	sbc.w	r3, r3, r1
 80023d8:	f04f 0000 	mov.w	r0, #0
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	00d9      	lsls	r1, r3, #3
 80023e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023e6:	00d0      	lsls	r0, r2, #3
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	eb12 0208 	adds.w	r2, r2, r8
 80023f0:	eb43 0309 	adc.w	r3, r3, r9
 80023f4:	f04f 0000 	mov.w	r0, #0
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	0259      	lsls	r1, r3, #9
 80023fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002402:	0250      	lsls	r0, r2, #9
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	461a      	mov	r2, r3
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	f7fd fed8 	bl	80001c8 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e04a      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	461a      	mov	r2, r3
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	ea02 0400 	and.w	r4, r2, r0
 800243a:	ea03 0501 	and.w	r5, r3, r1
 800243e:	4620      	mov	r0, r4
 8002440:	4629      	mov	r1, r5
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	014b      	lsls	r3, r1, #5
 800244c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002450:	0142      	lsls	r2, r0, #5
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	1b00      	subs	r0, r0, r4
 8002458:	eb61 0105 	sbc.w	r1, r1, r5
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	018b      	lsls	r3, r1, #6
 8002466:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800246a:	0182      	lsls	r2, r0, #6
 800246c:	1a12      	subs	r2, r2, r0
 800246e:	eb63 0301 	sbc.w	r3, r3, r1
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	00d9      	lsls	r1, r3, #3
 800247c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002480:	00d0      	lsls	r0, r2, #3
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	1912      	adds	r2, r2, r4
 8002488:	eb45 0303 	adc.w	r3, r5, r3
 800248c:	f04f 0000 	mov.w	r0, #0
 8002490:	f04f 0100 	mov.w	r1, #0
 8002494:	0299      	lsls	r1, r3, #10
 8002496:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800249a:	0290      	lsls	r0, r2, #10
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	f7fd fe8c 	bl	80001c8 <__aeabi_uldivmod>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4613      	mov	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	60bb      	str	r3, [r7, #8]
      break;
 80024d2:	e002      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024d6:	60bb      	str	r3, [r7, #8]
      break;
 80024d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024da:	68bb      	ldr	r3, [r7, #8]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08002b74 	.word	0x08002b74

08002534 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	220f      	movs	r2, #15
 8002542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_RCC_GetClockConfig+0x60>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0207 	and.w	r2, r3, #7
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e041      	b.n	800262e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f839 	bl	8002636 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f000 f9d8 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04e      	b.n	8002702 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a23      	ldr	r2, [pc, #140]	; (8002710 <HAL_TIM_Base_Start_IT+0xc4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d022      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d01d      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_TIM_Base_Start_IT+0xc8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d018      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_TIM_Base_Start_IT+0xcc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d013      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_TIM_Base_Start_IT+0xd0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00e      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_TIM_Base_Start_IT+0xd4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_TIM_Base_Start_IT+0xd8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x80>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_TIM_Base_Start_IT+0xdc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d111      	bne.n	80026f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d010      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	e007      	b.n	8002700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40010000 	.word	0x40010000
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40000c00 	.word	0x40000c00
 8002720:	40010400 	.word	0x40010400
 8002724:	40014000 	.word	0x40014000
 8002728:	40001800 	.word	0x40001800

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0202 	mvn.w	r2, #2
 8002758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8ee 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8e0 	bl	800293c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8f1 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b04      	cmp	r3, #4
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0204 	mvn.w	r2, #4
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8c4 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8b6 	bl	800293c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f8c7 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f89a 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f88c 	bl	800293c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f89d 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b10      	cmp	r3, #16
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b10      	cmp	r3, #16
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0210 	mvn.w	r2, #16
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2208      	movs	r2, #8
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f870 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f862 	bl	800293c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f873 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0201 	mvn.w	r2, #1
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fd ff8e 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b80      	cmp	r3, #128	; 0x80
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f902 	bl	8002ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f838 	bl	8002978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b20      	cmp	r3, #32
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b20      	cmp	r3, #32
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0220 	mvn.w	r2, #32
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8cc 	bl	8002acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d00f      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3d      	ldr	r2, [pc, #244]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3c      	ldr	r2, [pc, #240]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <TIM_Base_SetConfig+0x120>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d027      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d023      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <TIM_Base_SetConfig+0x120>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <TIM_Base_SetConfig+0x128>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <TIM_Base_SetConfig+0x12c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <TIM_Base_SetConfig+0x130>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIM_Base_SetConfig+0x134>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <TIM_Base_SetConfig+0x138>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <TIM_Base_SetConfig+0x13c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0xf8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <TIM_Base_SetConfig+0x124>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d103      	bne.n	8002a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	615a      	str	r2, [r3, #20]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40010400 	.word	0x40010400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	40001800 	.word	0x40001800
 8002ac4:	40001c00 	.word	0x40001c00
 8002ac8:	40002000 	.word	0x40002000

08002acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <__libc_init_array>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	4d0d      	ldr	r5, [pc, #52]	; (8002b2c <__libc_init_array+0x38>)
 8002af8:	4c0d      	ldr	r4, [pc, #52]	; (8002b30 <__libc_init_array+0x3c>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	2600      	movs	r6, #0
 8002b00:	42a6      	cmp	r6, r4
 8002b02:	d109      	bne.n	8002b18 <__libc_init_array+0x24>
 8002b04:	4d0b      	ldr	r5, [pc, #44]	; (8002b34 <__libc_init_array+0x40>)
 8002b06:	4c0c      	ldr	r4, [pc, #48]	; (8002b38 <__libc_init_array+0x44>)
 8002b08:	f000 f820 	bl	8002b4c <_init>
 8002b0c:	1b64      	subs	r4, r4, r5
 8002b0e:	10a4      	asrs	r4, r4, #2
 8002b10:	2600      	movs	r6, #0
 8002b12:	42a6      	cmp	r6, r4
 8002b14:	d105      	bne.n	8002b22 <__libc_init_array+0x2e>
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1c:	4798      	blx	r3
 8002b1e:	3601      	adds	r6, #1
 8002b20:	e7ee      	b.n	8002b00 <__libc_init_array+0xc>
 8002b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b26:	4798      	blx	r3
 8002b28:	3601      	adds	r6, #1
 8002b2a:	e7f2      	b.n	8002b12 <__libc_init_array+0x1e>
 8002b2c:	08002b84 	.word	0x08002b84
 8002b30:	08002b84 	.word	0x08002b84
 8002b34:	08002b84 	.word	0x08002b84
 8002b38:	08002b88 	.word	0x08002b88

08002b3c <memset>:
 8002b3c:	4402      	add	r2, r0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d100      	bne.n	8002b46 <memset+0xa>
 8002b44:	4770      	bx	lr
 8002b46:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4a:	e7f9      	b.n	8002b40 <memset+0x4>

08002b4c <_init>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr

08002b58 <_fini>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr
